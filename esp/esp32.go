// Automatically generated file. DO NOT EDIT.
// Generated by gen-device-svd.go from esp32.svd, see https://github.com/posborne/cmsis-svd/tree/master/data/Espressif-Community

//go:build esp && esp32
// +build esp,esp32

//
//

package esp

import (
	"runtime/volatile"
	"unsafe"
)

// Some information about this device.
const (
	Device       = "esp32"
	CPU          = "Xtensa LX6"
	FPUPresent   = true
	NVICPrioBits = 3
)

// Interrupt numbers.
const (
	IRQ_WIFI_MAC_INTR = 0

	IRQ_WIFI_MAC_NMI = 1

	IRQ_WIFI_BB_INTR = 2

	IRQ_BT_MAC_INTR = 3

	IRQ_BT_BB_INTR = 4

	IRQ_BT_BB_NMI = 5

	IRQ_RWBT_INTR = 6

	IRQ_RWBLE_INTR = 7

	IRQ_RWBT_NMI = 8

	IRQ_RWBLE_NMI = 9

	IRQ_SLC0_INTR = 10

	IRQ_SLC1_INTR = 11

	IRQ_UHCI0_INTR = 12

	IRQ_UHCI1_INTR = 13

	IRQ_TG0_T0_LEVEL_INTR = 14

	IRQ_TG0_T1_LEVEL_INTR = 15

	IRQ_TG0_WDT_LEVEL_INTR = 16

	IRQ_TG0_LACT_LEVEL_INTR = 17

	IRQ_TG1_T0_LEVEL_INTR = 18

	IRQ_TG1_T1_LEVEL_INTR = 19

	IRQ_TG1_WDT_LEVEL_INTR = 20

	IRQ_TG1_LACT_LEVEL_INTR = 21

	IRQ_GPIO_INTR = 22

	IRQ_GPIO_NMI = 23

	IRQ_FROM_CPU_INTR0 = 24

	IRQ_FROM_CPU_INTR1 = 25

	IRQ_FROM_CPU_INTR2 = 26

	IRQ_FROM_CPU_INTR3 = 27

	IRQ_SPI0_INTR = 28

	IRQ_SPI1_INTR = 29

	IRQ_SPI2_INTR = 30

	IRQ_SPI3_INTR = 31

	IRQ_I2S0_INTR = 32

	IRQ_I2S1_INTR = 33

	IRQ_UART0_INTR = 34

	IRQ_UART1_INTR = 35

	IRQ_UART2_INTR = 36

	IRQ_SDIO_HOST_INTR = 37

	IRQ_ETH_MAC_INTR = 38

	IRQ_PWM0_INTR = 39

	IRQ_PWM1_INTR = 40

	IRQ_PWM2_INTR = 41

	IRQ_PWM3_INTR = 42

	IRQ_LEDC_INTR = 43

	IRQ_EFUSE_INTR = 44

	IRQ_CAN_INTR = 45

	IRQ_RTC_CORE_INTR = 46

	IRQ_RMT_INTR = 47

	IRQ_PCNT_INTR = 48

	IRQ_I2C_EXT0_INTR = 49

	IRQ_I2C_EXT1_INTR = 50

	IRQ_RSA_INTR = 51

	IRQ_SPI1_DMA_INTR = 52

	IRQ_SPI2_DMA_INTR = 53

	IRQ_SPI3_DMA_INTR = 54

	IRQ_WDT_INTR = 55

	IRQ_TIMER1_INTR = 56

	IRQ_TIMER2_INTR = 57

	IRQ_TG0_T0_EDGE_INTR = 58

	IRQ_TG0_T1_EDGE_INTR = 59

	IRQ_TG0_WDT_EDGE_INTR = 60

	IRQ_TG0_LACT_EDGE_INTR = 61

	IRQ_TG1_T0_EDGE_INTR = 62

	IRQ_TG1_T1_EDGE_INTR = 63

	IRQ_TG1_WDT_EDGE_INTR = 64

	IRQ_TG1_LACT_EDGE_INTR = 65

	IRQ_MMU_IA_INTR = 66

	IRQ_MPU_IA_INTR = 67

	IRQ_CACHE_IA_INTR = 68

	IRQ_INTERNAL_TIMER0_INTR = 69

	IRQ_INTERNAL_SOFTWARE_LEVEL_1_INTR = 70

	IRQ_INTERNAL_PROFILING_INTR = 71

	IRQ_INTERNAL_TIMER1_INTR = 72

	IRQ_INTERNAL_TIMER2_INTR = 73

	IRQ_INTERNAL_SOFTWARE_LEVEL_3_INTR = 74

	// Highest interrupt number on this device.
	IRQ_max = 74
)

// Pseudo function call that is replaced by the compiler with the actual
// functions registered through interrupt.New.
//go:linkname callHandlers runtime/interrupt.callHandlers
func callHandlers(num int)
func HandleInterrupt(num int) {
	switch num {
	case IRQ_WIFI_MAC_INTR:
		callHandlers(IRQ_WIFI_MAC_INTR)
	case IRQ_WIFI_MAC_NMI:
		callHandlers(IRQ_WIFI_MAC_NMI)
	case IRQ_WIFI_BB_INTR:
		callHandlers(IRQ_WIFI_BB_INTR)
	case IRQ_BT_MAC_INTR:
		callHandlers(IRQ_BT_MAC_INTR)
	case IRQ_BT_BB_INTR:
		callHandlers(IRQ_BT_BB_INTR)
	case IRQ_BT_BB_NMI:
		callHandlers(IRQ_BT_BB_NMI)
	case IRQ_RWBT_INTR:
		callHandlers(IRQ_RWBT_INTR)
	case IRQ_RWBLE_INTR:
		callHandlers(IRQ_RWBLE_INTR)
	case IRQ_RWBT_NMI:
		callHandlers(IRQ_RWBT_NMI)
	case IRQ_RWBLE_NMI:
		callHandlers(IRQ_RWBLE_NMI)
	case IRQ_SLC0_INTR:
		callHandlers(IRQ_SLC0_INTR)
	case IRQ_SLC1_INTR:
		callHandlers(IRQ_SLC1_INTR)
	case IRQ_UHCI0_INTR:
		callHandlers(IRQ_UHCI0_INTR)
	case IRQ_UHCI1_INTR:
		callHandlers(IRQ_UHCI1_INTR)
	case IRQ_TG0_T0_LEVEL_INTR:
		callHandlers(IRQ_TG0_T0_LEVEL_INTR)
	case IRQ_TG0_T1_LEVEL_INTR:
		callHandlers(IRQ_TG0_T1_LEVEL_INTR)
	case IRQ_TG0_WDT_LEVEL_INTR:
		callHandlers(IRQ_TG0_WDT_LEVEL_INTR)
	case IRQ_TG0_LACT_LEVEL_INTR:
		callHandlers(IRQ_TG0_LACT_LEVEL_INTR)
	case IRQ_TG1_T0_LEVEL_INTR:
		callHandlers(IRQ_TG1_T0_LEVEL_INTR)
	case IRQ_TG1_T1_LEVEL_INTR:
		callHandlers(IRQ_TG1_T1_LEVEL_INTR)
	case IRQ_TG1_WDT_LEVEL_INTR:
		callHandlers(IRQ_TG1_WDT_LEVEL_INTR)
	case IRQ_TG1_LACT_LEVEL_INTR:
		callHandlers(IRQ_TG1_LACT_LEVEL_INTR)
	case IRQ_GPIO_INTR:
		callHandlers(IRQ_GPIO_INTR)
	case IRQ_GPIO_NMI:
		callHandlers(IRQ_GPIO_NMI)
	case IRQ_FROM_CPU_INTR0:
		callHandlers(IRQ_FROM_CPU_INTR0)
	case IRQ_FROM_CPU_INTR1:
		callHandlers(IRQ_FROM_CPU_INTR1)
	case IRQ_FROM_CPU_INTR2:
		callHandlers(IRQ_FROM_CPU_INTR2)
	case IRQ_FROM_CPU_INTR3:
		callHandlers(IRQ_FROM_CPU_INTR3)
	case IRQ_SPI0_INTR:
		callHandlers(IRQ_SPI0_INTR)
	case IRQ_SPI1_INTR:
		callHandlers(IRQ_SPI1_INTR)
	case IRQ_SPI2_INTR:
		callHandlers(IRQ_SPI2_INTR)
	case IRQ_SPI3_INTR:
		callHandlers(IRQ_SPI3_INTR)
	case IRQ_I2S0_INTR:
		callHandlers(IRQ_I2S0_INTR)
	case IRQ_I2S1_INTR:
		callHandlers(IRQ_I2S1_INTR)
	case IRQ_UART0_INTR:
		callHandlers(IRQ_UART0_INTR)
	case IRQ_UART1_INTR:
		callHandlers(IRQ_UART1_INTR)
	case IRQ_UART2_INTR:
		callHandlers(IRQ_UART2_INTR)
	case IRQ_SDIO_HOST_INTR:
		callHandlers(IRQ_SDIO_HOST_INTR)
	case IRQ_ETH_MAC_INTR:
		callHandlers(IRQ_ETH_MAC_INTR)
	case IRQ_PWM0_INTR:
		callHandlers(IRQ_PWM0_INTR)
	case IRQ_PWM1_INTR:
		callHandlers(IRQ_PWM1_INTR)
	case IRQ_PWM2_INTR:
		callHandlers(IRQ_PWM2_INTR)
	case IRQ_PWM3_INTR:
		callHandlers(IRQ_PWM3_INTR)
	case IRQ_LEDC_INTR:
		callHandlers(IRQ_LEDC_INTR)
	case IRQ_EFUSE_INTR:
		callHandlers(IRQ_EFUSE_INTR)
	case IRQ_CAN_INTR:
		callHandlers(IRQ_CAN_INTR)
	case IRQ_RTC_CORE_INTR:
		callHandlers(IRQ_RTC_CORE_INTR)
	case IRQ_RMT_INTR:
		callHandlers(IRQ_RMT_INTR)
	case IRQ_PCNT_INTR:
		callHandlers(IRQ_PCNT_INTR)
	case IRQ_I2C_EXT0_INTR:
		callHandlers(IRQ_I2C_EXT0_INTR)
	case IRQ_I2C_EXT1_INTR:
		callHandlers(IRQ_I2C_EXT1_INTR)
	case IRQ_RSA_INTR:
		callHandlers(IRQ_RSA_INTR)
	case IRQ_SPI1_DMA_INTR:
		callHandlers(IRQ_SPI1_DMA_INTR)
	case IRQ_SPI2_DMA_INTR:
		callHandlers(IRQ_SPI2_DMA_INTR)
	case IRQ_SPI3_DMA_INTR:
		callHandlers(IRQ_SPI3_DMA_INTR)
	case IRQ_WDT_INTR:
		callHandlers(IRQ_WDT_INTR)
	case IRQ_TIMER1_INTR:
		callHandlers(IRQ_TIMER1_INTR)
	case IRQ_TIMER2_INTR:
		callHandlers(IRQ_TIMER2_INTR)
	case IRQ_TG0_T0_EDGE_INTR:
		callHandlers(IRQ_TG0_T0_EDGE_INTR)
	case IRQ_TG0_T1_EDGE_INTR:
		callHandlers(IRQ_TG0_T1_EDGE_INTR)
	case IRQ_TG0_WDT_EDGE_INTR:
		callHandlers(IRQ_TG0_WDT_EDGE_INTR)
	case IRQ_TG0_LACT_EDGE_INTR:
		callHandlers(IRQ_TG0_LACT_EDGE_INTR)
	case IRQ_TG1_T0_EDGE_INTR:
		callHandlers(IRQ_TG1_T0_EDGE_INTR)
	case IRQ_TG1_T1_EDGE_INTR:
		callHandlers(IRQ_TG1_T1_EDGE_INTR)
	case IRQ_TG1_WDT_EDGE_INTR:
		callHandlers(IRQ_TG1_WDT_EDGE_INTR)
	case IRQ_TG1_LACT_EDGE_INTR:
		callHandlers(IRQ_TG1_LACT_EDGE_INTR)
	case IRQ_MMU_IA_INTR:
		callHandlers(IRQ_MMU_IA_INTR)
	case IRQ_MPU_IA_INTR:
		callHandlers(IRQ_MPU_IA_INTR)
	case IRQ_CACHE_IA_INTR:
		callHandlers(IRQ_CACHE_IA_INTR)
	case IRQ_INTERNAL_TIMER0_INTR:
		callHandlers(IRQ_INTERNAL_TIMER0_INTR)
	case IRQ_INTERNAL_SOFTWARE_LEVEL_1_INTR:
		callHandlers(IRQ_INTERNAL_SOFTWARE_LEVEL_1_INTR)
	case IRQ_INTERNAL_PROFILING_INTR:
		callHandlers(IRQ_INTERNAL_PROFILING_INTR)
	case IRQ_INTERNAL_TIMER1_INTR:
		callHandlers(IRQ_INTERNAL_TIMER1_INTR)
	case IRQ_INTERNAL_TIMER2_INTR:
		callHandlers(IRQ_INTERNAL_TIMER2_INTR)
	case IRQ_INTERNAL_SOFTWARE_LEVEL_3_INTR:
		callHandlers(IRQ_INTERNAL_SOFTWARE_LEVEL_3_INTR)
	}
}

// Peripherals.
var (
	AES = (*AES_Type)(unsafe.Pointer(uintptr(0x3ff01000)))

	HINF = (*HINF_Type)(unsafe.Pointer(uintptr(0x3ff4b000)))

	SPI = (*SPI_Type)(unsafe.Pointer(uintptr(0x0)))

	I2C = (*I2C_Type)(unsafe.Pointer(uintptr(0x0)))

	EFUSE = (*EFUSE_Type)(unsafe.Pointer(uintptr(0x3ff5a000)))

	RTCMEM1 = (*RTCMEM1_Type)(unsafe.Pointer(uintptr(0x3ff62000)))

	I2C0 = (*I2C_Type)(unsafe.Pointer(uintptr(0x3ff53000)))

	RSA = (*RSA_Type)(unsafe.Pointer(uintptr(0x3ff02000)))

	PCNT = (*PCNT_Type)(unsafe.Pointer(uintptr(0x3ff57000)))

	RMT = (*RMT_Type)(unsafe.Pointer(uintptr(0x3ff56000)))

	EMAC = (*EMAC_Type)(unsafe.Pointer(uintptr(0x3ff69000)))

	RTCMEM2 = (*RTCMEM2_Type)(unsafe.Pointer(uintptr(0x3ff63000)))

	GPIO = (*GPIO_Type)(unsafe.Pointer(uintptr(0x3ff44000)))

	FRC_TIMER = (*FRC_TIMER_Type)(unsafe.Pointer(uintptr(0x3ff47000)))

	UHCI = (*UHCI_Type)(unsafe.Pointer(uintptr(0x0)))

	SLCHOST = (*SLCHOST_Type)(unsafe.Pointer(uintptr(0x3ff55000)))

	SLC = (*SLC_Type)(unsafe.Pointer(uintptr(0x3ff58000)))

	RTCMEM0 = (*RTCMEM0_Type)(unsafe.Pointer(uintptr(0x3ff61000)))

	SHA = (*SHA_Type)(unsafe.Pointer(uintptr(0x3ff03000)))

	RTCCNTL = (*RTCCNTL_Type)(unsafe.Pointer(uintptr(0x3ff48000)))

	UHCI0 = (*UHCI_Type)(unsafe.Pointer(uintptr(0x3ff54000)))

	SENS = (*SENS_Type)(unsafe.Pointer(uintptr(0x3ff48800)))

	NRX = (*NRX_Type)(unsafe.Pointer(uintptr(0x3ff5cc00)))

	RTCIO = (*RTCIO_Type)(unsafe.Pointer(uintptr(0x3ff48400)))

	FE = (*FE_Type)(unsafe.Pointer(uintptr(0x3ff46000)))

	BB = (*BB_Type)(unsafe.Pointer(uintptr(0x3ff5d000)))

	DPORT = (*DPORT_Type)(unsafe.Pointer(uintptr(0x3ff00000)))

	SPI3 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff65000)))

	TIMG = (*TIMG_Type)(unsafe.Pointer(uintptr(0x0)))

	TIMG0 = (*TIMG_Type)(unsafe.Pointer(uintptr(0x3ff5f000)))

	SPI_ENCRYPT = (*SPI_ENCRYPT_Type)(unsafe.Pointer(uintptr(0x3ff5b000)))

	GPIO_SD = (*GPIO_SD_Type)(unsafe.Pointer(uintptr(0x3ff44f00)))

	SPI0 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff43000)))

	SDMMC = (*SDMMC_Type)(unsafe.Pointer(uintptr(0x3ff68000)))

	UHCI1 = (*UHCI_Type)(unsafe.Pointer(uintptr(0x3ff4c000)))

	IO_MUX = (*IO_MUX_Type)(unsafe.Pointer(uintptr(0x3ff49000)))

	CAN = (*CAN_Type)(unsafe.Pointer(uintptr(0x3ff6b000)))

	I2S = (*I2S_Type)(unsafe.Pointer(uintptr(0x3ff4f000)))

	SPI2 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff64000)))

	APB_CTRL = (*APB_CTRL_Type)(unsafe.Pointer(uintptr(0x3ff66000)))

	SYSCON = (*SYSCON_Type)(unsafe.Pointer(uintptr(0x3ff66000)))

	FE2 = (*FE2_Type)(unsafe.Pointer(uintptr(0x3ff45000)))

	RTC_I2C = (*RTC_I2C_Type)(unsafe.Pointer(uintptr(0x3ff48c00)))

	BT = (*BT_Type)(unsafe.Pointer(uintptr(0x3ff51000)))

	UART = (*UART_Type)(unsafe.Pointer(uintptr(0x3ff40000)))

	LEDC = (*LEDC_Type)(unsafe.Pointer(uintptr(0x3ff59000)))

	MCPWM = (*MCPWM_Type)(unsafe.Pointer(uintptr(0x0)))

	UART1 = (*UART_Type)(unsafe.Pointer(uintptr(0x3ff50000)))

	SPI1 = (*SPI_Type)(unsafe.Pointer(uintptr(0x3ff42000)))

	I2S1 = (*I2S1_Type)(unsafe.Pointer(uintptr(0x3ff6d000)))

	UART0 = (*UART_Type)(unsafe.Pointer(uintptr(0x3ff40000)))

	XTENSA_INTERNAL = (*XTENSA_INTERNAL_Type)(unsafe.Pointer(uintptr(0x0)))

	XTENSA = (*XTENSA_Type)(unsafe.Pointer(uintptr(0x0)))

	WIFI_MAC = (*WIFI_MAC_Type)(unsafe.Pointer(uintptr(0x0)))

	WIFI_BB = (*WIFI_BB_Type)(unsafe.Pointer(uintptr(0x0)))

	BT_MAC = (*BT_MAC_Type)(unsafe.Pointer(uintptr(0x0)))

	BT_BB = (*BT_BB_Type)(unsafe.Pointer(uintptr(0x0)))

	RW_BT = (*RW_BT_Type)(unsafe.Pointer(uintptr(0x0)))

	RW_BLE = (*RW_BLE_Type)(unsafe.Pointer(uintptr(0x0)))

	ETH_MAC = (*ETH_MAC_Type)(unsafe.Pointer(uintptr(0x0)))

	SDIO = (*SDIO_Type)(unsafe.Pointer(uintptr(0x0)))

	ETH = (*ETH_Type)(unsafe.Pointer(uintptr(0x0)))

	WDT = (*WDT_Type)(unsafe.Pointer(uintptr(0x0)))

	I2C1 = (*I2C_Type)(unsafe.Pointer(uintptr(0x3ff67000)))

	TIMG1 = (*TIMG_Type)(unsafe.Pointer(uintptr(0x3ff60000)))

	PWM1 = (*MCPWM_Type)(unsafe.Pointer(uintptr(0x3ff6c000)))

	PWM2 = (*MCPWM_Type)(unsafe.Pointer(uintptr(0x3ff6f000)))

	UART2 = (*UART_Type)(unsafe.Pointer(uintptr(0x3ff6e000)))

	PWM3 = (*MCPWM_Type)(unsafe.Pointer(uintptr(0x3ff70000)))

	PWM0 = (*MCPWM_Type)(unsafe.Pointer(uintptr(0x3ff5e000)))
)

type AES_Type struct {
	START  volatile.Register32 // 0x0
	IDLE   volatile.Register32 // 0x4
	MODE   volatile.Register32 // 0x8
	_      [4]byte
	KEY_0  volatile.Register32 // 0x10
	KEY_1  volatile.Register32 // 0x14
	KEY_2  volatile.Register32 // 0x18
	KEY_3  volatile.Register32 // 0x1C
	KEY_4  volatile.Register32 // 0x20
	KEY_5  volatile.Register32 // 0x24
	KEY_6  volatile.Register32 // 0x28
	KEY_7  volatile.Register32 // 0x2C
	TEXT_0 volatile.Register32 // 0x30
	TEXT_1 volatile.Register32 // 0x34
	TEXT_2 volatile.Register32 // 0x38
	TEXT_3 volatile.Register32 // 0x3C
	ENDIAN volatile.Register32 // 0x40
}

// AES.START: AES Start
func (o *AES_Type) SetSTART(value uint32) {
	volatile.StoreUint32(&o.START.Reg, volatile.LoadUint32(&o.START.Reg)&^(0x1)|value)
}
func (o *AES_Type) GetSTART() uint32 {
	return volatile.LoadUint32(&o.START.Reg) & 0x1
}

// AES.IDLE: AES Idle
func (o *AES_Type) SetIDLE(value uint32) {
	volatile.StoreUint32(&o.IDLE.Reg, volatile.LoadUint32(&o.IDLE.Reg)&^(0x1)|value)
}
func (o *AES_Type) GetIDLE() uint32 {
	return volatile.LoadUint32(&o.IDLE.Reg) & 0x1
}

// AES.MODE: AES Mode
func (o *AES_Type) SetMODE(value uint32) {
	volatile.StoreUint32(&o.MODE.Reg, volatile.LoadUint32(&o.MODE.Reg)&^(0x7)|value)
}
func (o *AES_Type) GetMODE() uint32 {
	return volatile.LoadUint32(&o.MODE.Reg) & 0x7
}

// AES.ENDIAN: AES Endian selection
func (o *AES_Type) SetENDIAN_MODE(value uint32) {
	volatile.StoreUint32(&o.ENDIAN.Reg, volatile.LoadUint32(&o.ENDIAN.Reg)&^(0x3f)|value)
}
func (o *AES_Type) GetENDIAN_MODE() uint32 {
	return volatile.LoadUint32(&o.ENDIAN.Reg) & 0x3f
}

type HINF_Type struct {
	CFG_DATA0  volatile.Register32 // 0x0
	CFG_DATA1  volatile.Register32 // 0x4
	_          [20]byte
	CFG_DATA7  volatile.Register32 // 0x1C
	CIS_CONF0  volatile.Register32 // 0x20
	CIS_CONF1  volatile.Register32 // 0x24
	CIS_CONF2  volatile.Register32 // 0x28
	CIS_CONF3  volatile.Register32 // 0x2C
	CIS_CONF4  volatile.Register32 // 0x30
	CIS_CONF5  volatile.Register32 // 0x34
	CIS_CONF6  volatile.Register32 // 0x38
	CIS_CONF7  volatile.Register32 // 0x3C
	CFG_DATA16 volatile.Register32 // 0x40
	_          [184]byte
	DATE       volatile.Register32 // 0xFC
}

// HINF.CFG_DATA0: HINF_CFG_DATA0
func (o *HINF_Type) SetCFG_DATA0_DEVICE_ID_FN1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA0.Reg, volatile.LoadUint32(&o.CFG_DATA0.Reg)&^(0xffff0000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA0_DEVICE_ID_FN1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA0.Reg) & 0xffff0000) >> 16
}
func (o *HINF_Type) SetCFG_DATA0_USER_ID_FN1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA0.Reg, volatile.LoadUint32(&o.CFG_DATA0.Reg)&^(0xffff)|value)
}
func (o *HINF_Type) GetCFG_DATA0_USER_ID_FN1() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA0.Reg) & 0xffff
}

// HINF.CFG_DATA1: HINF_CFG_DATA1
func (o *HINF_Type) SetCFG_DATA1_SDIO20_CONF1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0xe0000000)|value<<29)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO20_CONF1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0xe0000000) >> 29
}
func (o *HINF_Type) SetCFG_DATA1_FUNC2_EPS(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x10000000)|value<<28)
}
func (o *HINF_Type) GetCFG_DATA1_FUNC2_EPS() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x10000000) >> 28
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_VER(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0xfff0000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_VER() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0xfff0000) >> 16
}
func (o *HINF_Type) SetCFG_DATA1_SDIO20_CONF0(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0xf000)|value<<12)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO20_CONF0() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0xf000) >> 12
}
func (o *HINF_Type) SetCFG_DATA1_IOENABLE1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x800)|value<<11)
}
func (o *HINF_Type) GetCFG_DATA1_IOENABLE1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x800) >> 11
}
func (o *HINF_Type) SetCFG_DATA1_EMP(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x400)|value<<10)
}
func (o *HINF_Type) GetCFG_DATA1_EMP() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x400) >> 10
}
func (o *HINF_Type) SetCFG_DATA1_FUNC1_EPS(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x200)|value<<9)
}
func (o *HINF_Type) GetCFG_DATA1_FUNC1_EPS() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x200) >> 9
}
func (o *HINF_Type) SetCFG_DATA1_CD_DISABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x100)|value<<8)
}
func (o *HINF_Type) GetCFG_DATA1_CD_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x100) >> 8
}
func (o *HINF_Type) SetCFG_DATA1_IOENABLE2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x80)|value<<7)
}
func (o *HINF_Type) GetCFG_DATA1_IOENABLE2() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x80) >> 7
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_INT_MASK(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x40)|value<<6)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_INT_MASK() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x40) >> 6
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_IOREADY2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x20)|value<<5)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_IOREADY2() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x20) >> 5
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_CD_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x10)|value<<4)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_CD_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x10) >> 4
}
func (o *HINF_Type) SetCFG_DATA1_HIGHSPEED_MODE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x8)|value<<3)
}
func (o *HINF_Type) GetCFG_DATA1_HIGHSPEED_MODE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x8) >> 3
}
func (o *HINF_Type) SetCFG_DATA1_HIGHSPEED_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x4)|value<<2)
}
func (o *HINF_Type) GetCFG_DATA1_HIGHSPEED_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x4) >> 2
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_IOREADY1(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x2)|value<<1)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_IOREADY1() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x2) >> 1
}
func (o *HINF_Type) SetCFG_DATA1_SDIO_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA1.Reg, volatile.LoadUint32(&o.CFG_DATA1.Reg)&^(0x1)|value)
}
func (o *HINF_Type) GetCFG_DATA1_SDIO_ENABLE() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA1.Reg) & 0x1
}

// HINF.CFG_DATA7: HINF_CFG_DATA7
func (o *HINF_Type) SetCFG_DATA7_SDIO_IOREADY0(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0x20000)|value<<17)
}
func (o *HINF_Type) GetCFG_DATA7_SDIO_IOREADY0() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0x20000) >> 17
}
func (o *HINF_Type) SetCFG_DATA7_SDIO_RST(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0x10000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA7_SDIO_RST() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0x10000) >> 16
}
func (o *HINF_Type) SetCFG_DATA7_CHIP_STATE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0xff00)|value<<8)
}
func (o *HINF_Type) GetCFG_DATA7_CHIP_STATE() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0xff00) >> 8
}
func (o *HINF_Type) SetCFG_DATA7_PIN_STATE(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA7.Reg, volatile.LoadUint32(&o.CFG_DATA7.Reg)&^(0xff)|value)
}
func (o *HINF_Type) GetCFG_DATA7_PIN_STATE() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA7.Reg) & 0xff
}

// HINF.CIS_CONF0: HINF_CIS_CONF0
func (o *HINF_Type) SetCIS_CONF0(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF0.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF0() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF0.Reg)
}

// HINF.CIS_CONF1: HINF_CIS_CONF1
func (o *HINF_Type) SetCIS_CONF1(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF1.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF1() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF1.Reg)
}

// HINF.CIS_CONF2: HINF_CIS_CONF2
func (o *HINF_Type) SetCIS_CONF2(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF2.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF2() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF2.Reg)
}

// HINF.CIS_CONF3: HINF_CIS_CONF3
func (o *HINF_Type) SetCIS_CONF3(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF3.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF3() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF3.Reg)
}

// HINF.CIS_CONF4: HINF_CIS_CONF4
func (o *HINF_Type) SetCIS_CONF4(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF4.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF4() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF4.Reg)
}

// HINF.CIS_CONF5: HINF_CIS_CONF5
func (o *HINF_Type) SetCIS_CONF5(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF5.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF5() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF5.Reg)
}

// HINF.CIS_CONF6: HINF_CIS_CONF6
func (o *HINF_Type) SetCIS_CONF6(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF6.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF6() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF6.Reg)
}

// HINF.CIS_CONF7: HINF_CIS_CONF7
func (o *HINF_Type) SetCIS_CONF7(value uint32) {
	volatile.StoreUint32(&o.CIS_CONF7.Reg, value)
}
func (o *HINF_Type) GetCIS_CONF7() uint32 {
	return volatile.LoadUint32(&o.CIS_CONF7.Reg)
}

// HINF.CFG_DATA16: HINF_CFG_DATA16
func (o *HINF_Type) SetCFG_DATA16_DEVICE_ID_FN2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA16.Reg, volatile.LoadUint32(&o.CFG_DATA16.Reg)&^(0xffff0000)|value<<16)
}
func (o *HINF_Type) GetCFG_DATA16_DEVICE_ID_FN2() uint32 {
	return (volatile.LoadUint32(&o.CFG_DATA16.Reg) & 0xffff0000) >> 16
}
func (o *HINF_Type) SetCFG_DATA16_USER_ID_FN2(value uint32) {
	volatile.StoreUint32(&o.CFG_DATA16.Reg, volatile.LoadUint32(&o.CFG_DATA16.Reg)&^(0xffff)|value)
}
func (o *HINF_Type) GetCFG_DATA16_USER_ID_FN2() uint32 {
	return volatile.LoadUint32(&o.CFG_DATA16.Reg) & 0xffff
}

// HINF.DATE: HINF_DATE
func (o *HINF_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *HINF_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type SPI_Type struct {
	CMD                  volatile.Register32 // 0x0
	_                    [4]byte
	CTRL                 volatile.Register32 // 0x8
	CTRL1                volatile.Register32 // 0xC
	RD_STATUS            volatile.Register32 // 0x10
	CTRL2                volatile.Register32 // 0x14
	CLOCK                volatile.Register32 // 0x18
	USER                 volatile.Register32 // 0x1C
	USER1                volatile.Register32 // 0x20
	USER2                volatile.Register32 // 0x24
	MOSI_DLEN            volatile.Register32 // 0x28
	MISO_DLEN            volatile.Register32 // 0x2C
	SLV_WR_STATUS        volatile.Register32 // 0x30
	PIN                  volatile.Register32 // 0x34
	SLAVE                volatile.Register32 // 0x38
	SLAVE1               volatile.Register32 // 0x3C
	SLAVE2               volatile.Register32 // 0x40
	SLAVE3               volatile.Register32 // 0x44
	SLV_WRBUF_DLEN       volatile.Register32 // 0x48
	SLV_RDBUF_DLEN       volatile.Register32 // 0x4C
	CACHE_FCTRL          volatile.Register32 // 0x50
	CACHE_SCTRL          volatile.Register32 // 0x54
	SRAM_CMD             volatile.Register32 // 0x58
	SRAM_DRD_CMD         volatile.Register32 // 0x5C
	SRAM_DWR_CMD         volatile.Register32 // 0x60
	SLV_RD_BIT           volatile.Register32 // 0x64
	_                    [24]byte
	W0                   volatile.Register32 // 0x80
	W1                   volatile.Register32 // 0x84
	W2                   volatile.Register32 // 0x88
	W3                   volatile.Register32 // 0x8C
	W4                   volatile.Register32 // 0x90
	W5                   volatile.Register32 // 0x94
	W6                   volatile.Register32 // 0x98
	W7                   volatile.Register32 // 0x9C
	W8                   volatile.Register32 // 0xA0
	W9                   volatile.Register32 // 0xA4
	W10                  volatile.Register32 // 0xA8
	W11                  volatile.Register32 // 0xAC
	W12                  volatile.Register32 // 0xB0
	W13                  volatile.Register32 // 0xB4
	W14                  volatile.Register32 // 0xB8
	W15                  volatile.Register32 // 0xBC
	TX_CRC               volatile.Register32 // 0xC0
	_                    [44]byte
	EXT0                 volatile.Register32 // 0xF0
	EXT1                 volatile.Register32 // 0xF4
	EXT2                 volatile.Register32 // 0xF8
	EXT3                 volatile.Register32 // 0xFC
	DMA_CONF             volatile.Register32 // 0x100
	DMA_OUT_LINK         volatile.Register32 // 0x104
	DMA_IN_LINK          volatile.Register32 // 0x108
	DMA_STATUS           volatile.Register32 // 0x10C
	DMA_INT_ENA          volatile.Register32 // 0x110
	DMA_INT_RAW          volatile.Register32 // 0x114
	DMA_INT_ST           volatile.Register32 // 0x118
	DMA_INT_CLR          volatile.Register32 // 0x11C
	IN_ERR_EOF_DES_ADDR  volatile.Register32 // 0x120
	IN_SUC_EOF_DES_ADDR  volatile.Register32 // 0x124
	INLINK_DSCR          volatile.Register32 // 0x128
	INLINK_DSCR_BF0      volatile.Register32 // 0x12C
	INLINK_DSCR_BF1      volatile.Register32 // 0x130
	OUT_EOF_BFR_DES_ADDR volatile.Register32 // 0x134
	OUT_EOF_DES_ADDR     volatile.Register32 // 0x138
	OUTLINK_DSCR         volatile.Register32 // 0x13C
	OUTLINK_DSCR_BF0     volatile.Register32 // 0x140
	OUTLINK_DSCR_BF1     volatile.Register32 // 0x144
	DMA_RSTATUS          volatile.Register32 // 0x148
	DMA_TSTATUS          volatile.Register32 // 0x14C
	_                    [684]byte
	DATE                 volatile.Register32 // 0x3FC
}

// SPI.CMD: SPI_CMD
func (o *SPI_Type) SetCMD_FLASH_READ(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetCMD_FLASH_READ() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x80000000) >> 31
}
func (o *SPI_Type) SetCMD_FLASH_WREN(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetCMD_FLASH_WREN() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetCMD_FLASH_WRDI(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetCMD_FLASH_WRDI() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetCMD_FLASH_RDID(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetCMD_FLASH_RDID() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetCMD_FLASH_RDSR(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x8000000)|value<<27)
}
func (o *SPI_Type) GetCMD_FLASH_RDSR() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x8000000) >> 27
}
func (o *SPI_Type) SetCMD_FLASH_WRSR(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetCMD_FLASH_WRSR() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x4000000) >> 26
}
func (o *SPI_Type) SetCMD_FLASH_PP(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetCMD_FLASH_PP() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetCMD_FLASH_SE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x1000000)|value<<24)
}
func (o *SPI_Type) GetCMD_FLASH_SE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x1000000) >> 24
}
func (o *SPI_Type) SetCMD_FLASH_BE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x800000)|value<<23)
}
func (o *SPI_Type) GetCMD_FLASH_BE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x800000) >> 23
}
func (o *SPI_Type) SetCMD_FLASH_CE(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x400000)|value<<22)
}
func (o *SPI_Type) GetCMD_FLASH_CE() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x400000) >> 22
}
func (o *SPI_Type) SetCMD_FLASH_DP(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x200000)|value<<21)
}
func (o *SPI_Type) GetCMD_FLASH_DP() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x200000) >> 21
}
func (o *SPI_Type) SetCMD_FLASH_RES(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetCMD_FLASH_RES() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetCMD_FLASH_HPM(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x80000)|value<<19)
}
func (o *SPI_Type) GetCMD_FLASH_HPM() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x80000) >> 19
}
func (o *SPI_Type) SetCMD_USR(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x40000)|value<<18)
}
func (o *SPI_Type) GetCMD_USR() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x40000) >> 18
}
func (o *SPI_Type) SetCMD_FLASH_PES(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x20000)|value<<17)
}
func (o *SPI_Type) GetCMD_FLASH_PES() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x20000) >> 17
}
func (o *SPI_Type) SetCMD_FLASH_PER(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x10000)|value<<16)
}
func (o *SPI_Type) GetCMD_FLASH_PER() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x10000) >> 16
}

// SPI.CTRL: SPI_CTRL
func (o *SPI_Type) SetCTRL_WR_BIT_ORDER(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetCTRL_WR_BIT_ORDER() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4000000) >> 26
}
func (o *SPI_Type) SetCTRL_RD_BIT_ORDER(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetCTRL_RD_BIT_ORDER() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetCTRL_FREAD_QIO(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1000000)|value<<24)
}
func (o *SPI_Type) GetCTRL_FREAD_QIO() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x1000000) >> 24
}
func (o *SPI_Type) SetCTRL_FREAD_DIO(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x800000)|value<<23)
}
func (o *SPI_Type) GetCTRL_FREAD_DIO() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x800000) >> 23
}
func (o *SPI_Type) SetCTRL_WRSR_2B(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x400000)|value<<22)
}
func (o *SPI_Type) GetCTRL_WRSR_2B() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x400000) >> 22
}
func (o *SPI_Type) SetCTRL_WP_REG(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x200000)|value<<21)
}
func (o *SPI_Type) GetCTRL_WP_REG() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x200000) >> 21
}
func (o *SPI_Type) SetCTRL_FREAD_QUAD(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetCTRL_FREAD_QUAD() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetCTRL_RESANDRES(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *SPI_Type) GetCTRL_RESANDRES() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x8000) >> 15
}
func (o *SPI_Type) SetCTRL_FREAD_DUAL(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *SPI_Type) GetCTRL_FREAD_DUAL() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4000) >> 14
}
func (o *SPI_Type) SetCTRL_FASTRD_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *SPI_Type) GetCTRL_FASTRD_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2000) >> 13
}
func (o *SPI_Type) SetCTRL_WAIT_FLASH_IDLE_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *SPI_Type) GetCTRL_WAIT_FLASH_IDLE_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x1000) >> 12
}
func (o *SPI_Type) SetCTRL_TX_CRC_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x800)|value<<11)
}
func (o *SPI_Type) GetCTRL_TX_CRC_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x800) >> 11
}
func (o *SPI_Type) SetCTRL_FCS_CRC_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x400)|value<<10)
}
func (o *SPI_Type) GetCTRL_FCS_CRC_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x400) >> 10
}

// SPI.CTRL1: SPI_CTRL1
func (o *SPI_Type) SetCTRL1_CS_HOLD_DELAY(value uint32) {
	volatile.StoreUint32(&o.CTRL1.Reg, volatile.LoadUint32(&o.CTRL1.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetCTRL1_CS_HOLD_DELAY() uint32 {
	return (volatile.LoadUint32(&o.CTRL1.Reg) & 0xf0000000) >> 28
}
func (o *SPI_Type) SetCTRL1_CS_HOLD_DELAY_RES(value uint32) {
	volatile.StoreUint32(&o.CTRL1.Reg, volatile.LoadUint32(&o.CTRL1.Reg)&^(0xfff0000)|value<<16)
}
func (o *SPI_Type) GetCTRL1_CS_HOLD_DELAY_RES() uint32 {
	return (volatile.LoadUint32(&o.CTRL1.Reg) & 0xfff0000) >> 16
}

// SPI.RD_STATUS: SPI_RD_STATUS
func (o *SPI_Type) SetRD_STATUS_STATUS_EXT(value uint32) {
	volatile.StoreUint32(&o.RD_STATUS.Reg, volatile.LoadUint32(&o.RD_STATUS.Reg)&^(0xff000000)|value<<24)
}
func (o *SPI_Type) GetRD_STATUS_STATUS_EXT() uint32 {
	return (volatile.LoadUint32(&o.RD_STATUS.Reg) & 0xff000000) >> 24
}
func (o *SPI_Type) SetRD_STATUS_WB_MODE(value uint32) {
	volatile.StoreUint32(&o.RD_STATUS.Reg, volatile.LoadUint32(&o.RD_STATUS.Reg)&^(0xff0000)|value<<16)
}
func (o *SPI_Type) GetRD_STATUS_WB_MODE() uint32 {
	return (volatile.LoadUint32(&o.RD_STATUS.Reg) & 0xff0000) >> 16
}
func (o *SPI_Type) SetRD_STATUS_STATUS(value uint32) {
	volatile.StoreUint32(&o.RD_STATUS.Reg, volatile.LoadUint32(&o.RD_STATUS.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetRD_STATUS_STATUS() uint32 {
	return volatile.LoadUint32(&o.RD_STATUS.Reg) & 0xffff
}

// SPI.CTRL2: SPI_CTRL2
func (o *SPI_Type) SetCTRL2_CS_DELAY_NUM(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetCTRL2_CS_DELAY_NUM() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf0000000) >> 28
}
func (o *SPI_Type) SetCTRL2_CS_DELAY_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xc000000)|value<<26)
}
func (o *SPI_Type) GetCTRL2_CS_DELAY_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xc000000) >> 26
}
func (o *SPI_Type) SetCTRL2_MOSI_DELAY_NUM(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x3800000)|value<<23)
}
func (o *SPI_Type) GetCTRL2_MOSI_DELAY_NUM() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x3800000) >> 23
}
func (o *SPI_Type) SetCTRL2_MOSI_DELAY_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x600000)|value<<21)
}
func (o *SPI_Type) GetCTRL2_MOSI_DELAY_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x600000) >> 21
}
func (o *SPI_Type) SetCTRL2_MISO_DELAY_NUM(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x1c0000)|value<<18)
}
func (o *SPI_Type) GetCTRL2_MISO_DELAY_NUM() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x1c0000) >> 18
}
func (o *SPI_Type) SetCTRL2_MISO_DELAY_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0x30000)|value<<16)
}
func (o *SPI_Type) GetCTRL2_MISO_DELAY_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0x30000) >> 16
}
func (o *SPI_Type) SetCTRL2_CK_OUT_HIGH_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf000)|value<<12)
}
func (o *SPI_Type) GetCTRL2_CK_OUT_HIGH_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf000) >> 12
}
func (o *SPI_Type) SetCTRL2_CK_OUT_LOW_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf00)|value<<8)
}
func (o *SPI_Type) GetCTRL2_CK_OUT_LOW_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf00) >> 8
}
func (o *SPI_Type) SetCTRL2_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf0)|value<<4)
}
func (o *SPI_Type) GetCTRL2_HOLD_TIME() uint32 {
	return (volatile.LoadUint32(&o.CTRL2.Reg) & 0xf0) >> 4
}
func (o *SPI_Type) SetCTRL2_SETUP_TIME(value uint32) {
	volatile.StoreUint32(&o.CTRL2.Reg, volatile.LoadUint32(&o.CTRL2.Reg)&^(0xf)|value)
}
func (o *SPI_Type) GetCTRL2_SETUP_TIME() uint32 {
	return volatile.LoadUint32(&o.CTRL2.Reg) & 0xf
}

// SPI.CLOCK: SPI_CLOCK
func (o *SPI_Type) SetCLOCK_CLK_EQU_SYSCLK(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetCLOCK_CLK_EQU_SYSCLK() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0x80000000) >> 31
}
func (o *SPI_Type) SetCLOCK_CLKDIV_PRE(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x7ffc0000)|value<<18)
}
func (o *SPI_Type) GetCLOCK_CLKDIV_PRE() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0x7ffc0000) >> 18
}
func (o *SPI_Type) SetCLOCK_CLKCNT_N(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x3f000)|value<<12)
}
func (o *SPI_Type) GetCLOCK_CLKCNT_N() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0x3f000) >> 12
}
func (o *SPI_Type) SetCLOCK_CLKCNT_H(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0xfc0)|value<<6)
}
func (o *SPI_Type) GetCLOCK_CLKCNT_H() uint32 {
	return (volatile.LoadUint32(&o.CLOCK.Reg) & 0xfc0) >> 6
}
func (o *SPI_Type) SetCLOCK_CLKCNT_L(value uint32) {
	volatile.StoreUint32(&o.CLOCK.Reg, volatile.LoadUint32(&o.CLOCK.Reg)&^(0x3f)|value)
}
func (o *SPI_Type) GetCLOCK_CLKCNT_L() uint32 {
	return volatile.LoadUint32(&o.CLOCK.Reg) & 0x3f
}

// SPI.USER: SPI_USER
func (o *SPI_Type) SetUSER_USR_COMMAND(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetUSER_USR_COMMAND() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x80000000) >> 31
}
func (o *SPI_Type) SetUSER_USR_ADDR(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetUSER_USR_ADDR() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetUSER_USR_DUMMY(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetUSER_USR_DUMMY() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetUSER_USR_MISO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetUSER_USR_MISO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetUSER_USR_MOSI(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x8000000)|value<<27)
}
func (o *SPI_Type) GetUSER_USR_MOSI() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x8000000) >> 27
}
func (o *SPI_Type) SetUSER_USR_DUMMY_IDLE(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetUSER_USR_DUMMY_IDLE() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x4000000) >> 26
}
func (o *SPI_Type) SetUSER_USR_MOSI_HIGHPART(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetUSER_USR_MOSI_HIGHPART() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetUSER_USR_MISO_HIGHPART(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x1000000)|value<<24)
}
func (o *SPI_Type) GetUSER_USR_MISO_HIGHPART() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x1000000) >> 24
}
func (o *SPI_Type) SetUSER_USR_PREP_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x800000)|value<<23)
}
func (o *SPI_Type) GetUSER_USR_PREP_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x800000) >> 23
}
func (o *SPI_Type) SetUSER_USR_CMD_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x400000)|value<<22)
}
func (o *SPI_Type) GetUSER_USR_CMD_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x400000) >> 22
}
func (o *SPI_Type) SetUSER_USR_ADDR_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x200000)|value<<21)
}
func (o *SPI_Type) GetUSER_USR_ADDR_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x200000) >> 21
}
func (o *SPI_Type) SetUSER_USR_DUMMY_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetUSER_USR_DUMMY_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetUSER_USR_DIN_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x80000)|value<<19)
}
func (o *SPI_Type) GetUSER_USR_DIN_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x80000) >> 19
}
func (o *SPI_Type) SetUSER_USR_DOUT_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x40000)|value<<18)
}
func (o *SPI_Type) GetUSER_USR_DOUT_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x40000) >> 18
}
func (o *SPI_Type) SetUSER_USR_HOLD_POL(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x20000)|value<<17)
}
func (o *SPI_Type) GetUSER_USR_HOLD_POL() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x20000) >> 17
}
func (o *SPI_Type) SetUSER_SIO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x10000)|value<<16)
}
func (o *SPI_Type) GetUSER_SIO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x10000) >> 16
}
func (o *SPI_Type) SetUSER_FWRITE_QIO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x8000)|value<<15)
}
func (o *SPI_Type) GetUSER_FWRITE_QIO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x8000) >> 15
}
func (o *SPI_Type) SetUSER_FWRITE_DIO(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x4000)|value<<14)
}
func (o *SPI_Type) GetUSER_FWRITE_DIO() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x4000) >> 14
}
func (o *SPI_Type) SetUSER_FWRITE_QUAD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x2000)|value<<13)
}
func (o *SPI_Type) GetUSER_FWRITE_QUAD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x2000) >> 13
}
func (o *SPI_Type) SetUSER_FWRITE_DUAL(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x1000)|value<<12)
}
func (o *SPI_Type) GetUSER_FWRITE_DUAL() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x1000) >> 12
}
func (o *SPI_Type) SetUSER_WR_BYTE_ORDER(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x800)|value<<11)
}
func (o *SPI_Type) GetUSER_WR_BYTE_ORDER() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x800) >> 11
}
func (o *SPI_Type) SetUSER_RD_BYTE_ORDER(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x400)|value<<10)
}
func (o *SPI_Type) GetUSER_RD_BYTE_ORDER() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x400) >> 10
}
func (o *SPI_Type) SetUSER_CK_OUT_EDGE(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetUSER_CK_OUT_EDGE() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetUSER_CK_I_EDGE(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetUSER_CK_I_EDGE() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetUSER_CS_SETUP(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetUSER_CS_SETUP() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetUSER_CS_HOLD(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetUSER_CS_HOLD() uint32 {
	return (volatile.LoadUint32(&o.USER.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetUSER_DOUTDIN(value uint32) {
	volatile.StoreUint32(&o.USER.Reg, volatile.LoadUint32(&o.USER.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetUSER_DOUTDIN() uint32 {
	return volatile.LoadUint32(&o.USER.Reg) & 0x1
}

// SPI.USER1: SPI_USER1
func (o *SPI_Type) SetUSER1_USR_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.USER1.Reg, volatile.LoadUint32(&o.USER1.Reg)&^(0xfc000000)|value<<26)
}
func (o *SPI_Type) GetUSER1_USR_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.USER1.Reg) & 0xfc000000) >> 26
}
func (o *SPI_Type) SetUSER1_USR_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.USER1.Reg, volatile.LoadUint32(&o.USER1.Reg)&^(0xff)|value)
}
func (o *SPI_Type) GetUSER1_USR_DUMMY_CYCLELEN() uint32 {
	return volatile.LoadUint32(&o.USER1.Reg) & 0xff
}

// SPI.USER2: SPI_USER2
func (o *SPI_Type) SetUSER2_USR_COMMAND_BITLEN(value uint32) {
	volatile.StoreUint32(&o.USER2.Reg, volatile.LoadUint32(&o.USER2.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetUSER2_USR_COMMAND_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.USER2.Reg) & 0xf0000000) >> 28
}
func (o *SPI_Type) SetUSER2_USR_COMMAND_VALUE(value uint32) {
	volatile.StoreUint32(&o.USER2.Reg, volatile.LoadUint32(&o.USER2.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetUSER2_USR_COMMAND_VALUE() uint32 {
	return volatile.LoadUint32(&o.USER2.Reg) & 0xffff
}

// SPI.MOSI_DLEN: SPI_MOSI_DLEN
func (o *SPI_Type) SetMOSI_DLEN_USR_MOSI_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.MOSI_DLEN.Reg, volatile.LoadUint32(&o.MOSI_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetMOSI_DLEN_USR_MOSI_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.MOSI_DLEN.Reg) & 0xffffff
}

// SPI.MISO_DLEN: SPI_MISO_DLEN
func (o *SPI_Type) SetMISO_DLEN_USR_MISO_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.MISO_DLEN.Reg, volatile.LoadUint32(&o.MISO_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetMISO_DLEN_USR_MISO_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.MISO_DLEN.Reg) & 0xffffff
}

// SPI.SLV_WR_STATUS: SPI_SLV_WR_STATUS
func (o *SPI_Type) SetSLV_WR_STATUS(value uint32) {
	volatile.StoreUint32(&o.SLV_WR_STATUS.Reg, value)
}
func (o *SPI_Type) GetSLV_WR_STATUS() uint32 {
	return volatile.LoadUint32(&o.SLV_WR_STATUS.Reg)
}

// SPI.PIN: SPI_PIN
func (o *SPI_Type) SetPIN_CS_KEEP_ACTIVE(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetPIN_CS_KEEP_ACTIVE() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetPIN_CK_IDLE_EDGE(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetPIN_CK_IDLE_EDGE() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetPIN_MASTER_CK_SEL(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x3800)|value<<11)
}
func (o *SPI_Type) GetPIN_MASTER_CK_SEL() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x3800) >> 11
}
func (o *SPI_Type) SetPIN_MASTER_CS_POL(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x1c0)|value<<6)
}
func (o *SPI_Type) GetPIN_MASTER_CS_POL() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x1c0) >> 6
}
func (o *SPI_Type) SetPIN_CK_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetPIN_CK_DIS() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetPIN_CS2_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetPIN_CS2_DIS() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetPIN_CS1_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetPIN_CS1_DIS() uint32 {
	return (volatile.LoadUint32(&o.PIN.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetPIN_CS0_DIS(value uint32) {
	volatile.StoreUint32(&o.PIN.Reg, volatile.LoadUint32(&o.PIN.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetPIN_CS0_DIS() uint32 {
	return volatile.LoadUint32(&o.PIN.Reg) & 0x1
}

// SPI.SLAVE: SPI_SLAVE
func (o *SPI_Type) SetSLAVE_SYNC_RESET(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetSLAVE_SYNC_RESET() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x80000000) >> 31
}
func (o *SPI_Type) SetSLAVE_SLAVE_MODE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetSLAVE_SLAVE_MODE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetSLAVE_SLV_WR_RD_BUF_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_RD_BUF_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetSLAVE_SLV_WR_RD_STA_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_RD_STA_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetSLAVE_SLV_CMD_DEFINE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x8000000)|value<<27)
}
func (o *SPI_Type) GetSLAVE_SLV_CMD_DEFINE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x8000000) >> 27
}
func (o *SPI_Type) SetSLAVE_TRANS_CNT(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x7800000)|value<<23)
}
func (o *SPI_Type) GetSLAVE_TRANS_CNT() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x7800000) >> 23
}
func (o *SPI_Type) SetSLAVE_SLV_LAST_STATE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x700000)|value<<20)
}
func (o *SPI_Type) GetSLAVE_SLV_LAST_STATE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x700000) >> 20
}
func (o *SPI_Type) SetSLAVE_SLV_LAST_COMMAND(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0xe0000)|value<<17)
}
func (o *SPI_Type) GetSLAVE_SLV_LAST_COMMAND() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0xe0000) >> 17
}
func (o *SPI_Type) SetSLAVE_CS_I_MODE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0xc00)|value<<10)
}
func (o *SPI_Type) GetSLAVE_CS_I_MODE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0xc00) >> 10
}
func (o *SPI_Type) SetSLAVE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x3e0)|value<<5)
}
func (o *SPI_Type) GetSLAVE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x3e0) >> 5
}
func (o *SPI_Type) SetSLAVE_TRANS_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetSLAVE_TRANS_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetSLAVE_SLV_WR_STA_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_STA_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetSLAVE_SLV_RD_STA_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetSLAVE_SLV_RD_STA_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetSLAVE_SLV_WR_BUF_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetSLAVE_SLV_WR_BUF_DONE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetSLAVE_SLV_RD_BUF_DONE(value uint32) {
	volatile.StoreUint32(&o.SLAVE.Reg, volatile.LoadUint32(&o.SLAVE.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetSLAVE_SLV_RD_BUF_DONE() uint32 {
	return volatile.LoadUint32(&o.SLAVE.Reg) & 0x1
}

// SPI.SLAVE1: SPI_SLAVE1
func (o *SPI_Type) SetSLAVE1_SLV_STATUS_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0xf8000000)|value<<27)
}
func (o *SPI_Type) GetSLAVE1_SLV_STATUS_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0xf8000000) >> 27
}
func (o *SPI_Type) SetSLAVE1_SLV_STATUS_FAST_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x4000000)|value<<26)
}
func (o *SPI_Type) GetSLAVE1_SLV_STATUS_FAST_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x4000000) >> 26
}
func (o *SPI_Type) SetSLAVE1_SLV_STATUS_READBACK(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x2000000)|value<<25)
}
func (o *SPI_Type) GetSLAVE1_SLV_STATUS_READBACK() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x2000000) >> 25
}
func (o *SPI_Type) SetSLAVE1_SLV_RD_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0xfc00)|value<<10)
}
func (o *SPI_Type) GetSLAVE1_SLV_RD_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0xfc00) >> 10
}
func (o *SPI_Type) SetSLAVE1_SLV_WR_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x3f0)|value<<4)
}
func (o *SPI_Type) GetSLAVE1_SLV_WR_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x3f0) >> 4
}
func (o *SPI_Type) SetSLAVE1_SLV_WRSTA_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetSLAVE1_SLV_WRSTA_DUMMY_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetSLAVE1_SLV_RDSTA_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetSLAVE1_SLV_RDSTA_DUMMY_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetSLAVE1_SLV_WRBUF_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetSLAVE1_SLV_WRBUF_DUMMY_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE1.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetSLAVE1_SLV_RDBUF_DUMMY_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE1.Reg, volatile.LoadUint32(&o.SLAVE1.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetSLAVE1_SLV_RDBUF_DUMMY_EN() uint32 {
	return volatile.LoadUint32(&o.SLAVE1.Reg) & 0x1
}

// SPI.SLAVE2: SPI_SLAVE2
func (o *SPI_Type) SetSLAVE2_SLV_WRBUF_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff000000)|value<<24)
}
func (o *SPI_Type) GetSLAVE2_SLV_WRBUF_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff000000) >> 24
}
func (o *SPI_Type) SetSLAVE2_SLV_RDBUF_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff0000)|value<<16)
}
func (o *SPI_Type) GetSLAVE2_SLV_RDBUF_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff0000) >> 16
}
func (o *SPI_Type) SetSLAVE2_SLV_WRSTA_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff00)|value<<8)
}
func (o *SPI_Type) GetSLAVE2_SLV_WRSTA_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff00) >> 8
}
func (o *SPI_Type) SetSLAVE2_SLV_RDSTA_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.SLAVE2.Reg, volatile.LoadUint32(&o.SLAVE2.Reg)&^(0xff)|value)
}
func (o *SPI_Type) GetSLAVE2_SLV_RDSTA_DUMMY_CYCLELEN() uint32 {
	return volatile.LoadUint32(&o.SLAVE2.Reg) & 0xff
}

// SPI.SLAVE3: SPI_SLAVE3
func (o *SPI_Type) SetSLAVE3_SLV_WRSTA_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff000000)|value<<24)
}
func (o *SPI_Type) GetSLAVE3_SLV_WRSTA_CMD_VALUE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff000000) >> 24
}
func (o *SPI_Type) SetSLAVE3_SLV_RDSTA_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff0000)|value<<16)
}
func (o *SPI_Type) GetSLAVE3_SLV_RDSTA_CMD_VALUE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff0000) >> 16
}
func (o *SPI_Type) SetSLAVE3_SLV_WRBUF_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff00)|value<<8)
}
func (o *SPI_Type) GetSLAVE3_SLV_WRBUF_CMD_VALUE() uint32 {
	return (volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff00) >> 8
}
func (o *SPI_Type) SetSLAVE3_SLV_RDBUF_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SLAVE3.Reg, volatile.LoadUint32(&o.SLAVE3.Reg)&^(0xff)|value)
}
func (o *SPI_Type) GetSLAVE3_SLV_RDBUF_CMD_VALUE() uint32 {
	return volatile.LoadUint32(&o.SLAVE3.Reg) & 0xff
}

// SPI.SLV_WRBUF_DLEN: SPI_SLV_WRBUF_DLEN
func (o *SPI_Type) SetSLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.SLV_WRBUF_DLEN.Reg, volatile.LoadUint32(&o.SLV_WRBUF_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetSLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.SLV_WRBUF_DLEN.Reg) & 0xffffff
}

// SPI.SLV_RDBUF_DLEN: SPI_SLV_RDBUF_DLEN
func (o *SPI_Type) SetSLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN(value uint32) {
	volatile.StoreUint32(&o.SLV_RDBUF_DLEN.Reg, volatile.LoadUint32(&o.SLV_RDBUF_DLEN.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetSLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN() uint32 {
	return volatile.LoadUint32(&o.SLV_RDBUF_DLEN.Reg) & 0xffffff
}

// SPI.CACHE_FCTRL: SPI_CACHE_FCTRL
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_FLASH_PES_EN(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_FLASH_PES_EN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_FLASH_USR_CMD(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_FLASH_USR_CMD() uint32 {
	return (volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_USR_CMD_4BYTE(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_USR_CMD_4BYTE() uint32 {
	return (volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetCACHE_FCTRL_CACHE_REQ_EN(value uint32) {
	volatile.StoreUint32(&o.CACHE_FCTRL.Reg, volatile.LoadUint32(&o.CACHE_FCTRL.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetCACHE_FCTRL_CACHE_REQ_EN() uint32 {
	return volatile.LoadUint32(&o.CACHE_FCTRL.Reg) & 0x1
}

// SPI.CACHE_SCTRL: SPI_CACHE_SCTRL
func (o *SPI_Type) SetCACHE_SCTRL_CACHE_SRAM_USR_WCMD(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetCACHE_SCTRL_CACHE_SRAM_USR_WCMD() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetCACHE_SCTRL_SRAM_ADDR_BITLEN(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0xfc00000)|value<<22)
}
func (o *SPI_Type) GetCACHE_SCTRL_SRAM_ADDR_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0xfc00000) >> 22
}
func (o *SPI_Type) SetCACHE_SCTRL_SRAM_DUMMY_CYCLELEN(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x3fc000)|value<<14)
}
func (o *SPI_Type) GetCACHE_SCTRL_SRAM_DUMMY_CYCLELEN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x3fc000) >> 14
}
func (o *SPI_Type) SetCACHE_SCTRL_SRAM_BYTES_LEN(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x3fc0)|value<<6)
}
func (o *SPI_Type) GetCACHE_SCTRL_SRAM_BYTES_LEN() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x3fc0) >> 6
}
func (o *SPI_Type) SetCACHE_SCTRL_CACHE_SRAM_USR_RCMD(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetCACHE_SCTRL_CACHE_SRAM_USR_RCMD() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetCACHE_SCTRL_USR_RD_SRAM_DUMMY(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_RD_SRAM_DUMMY() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetCACHE_SCTRL_USR_WR_SRAM_DUMMY(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_WR_SRAM_DUMMY() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetCACHE_SCTRL_USR_SRAM_QIO(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_SRAM_QIO() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetCACHE_SCTRL_USR_SRAM_DIO(value uint32) {
	volatile.StoreUint32(&o.CACHE_SCTRL.Reg, volatile.LoadUint32(&o.CACHE_SCTRL.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetCACHE_SCTRL_USR_SRAM_DIO() uint32 {
	return (volatile.LoadUint32(&o.CACHE_SCTRL.Reg) & 0x2) >> 1
}

// SPI.SRAM_CMD: SPI_SRAM_CMD
func (o *SPI_Type) SetSRAM_CMD_SRAM_RSTIO(value uint32) {
	volatile.StoreUint32(&o.SRAM_CMD.Reg, volatile.LoadUint32(&o.SRAM_CMD.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetSRAM_CMD_SRAM_RSTIO() uint32 {
	return (volatile.LoadUint32(&o.SRAM_CMD.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetSRAM_CMD_SRAM_QIO(value uint32) {
	volatile.StoreUint32(&o.SRAM_CMD.Reg, volatile.LoadUint32(&o.SRAM_CMD.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetSRAM_CMD_SRAM_QIO() uint32 {
	return (volatile.LoadUint32(&o.SRAM_CMD.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetSRAM_CMD_SRAM_DIO(value uint32) {
	volatile.StoreUint32(&o.SRAM_CMD.Reg, volatile.LoadUint32(&o.SRAM_CMD.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetSRAM_CMD_SRAM_DIO() uint32 {
	return volatile.LoadUint32(&o.SRAM_CMD.Reg) & 0x1
}

// SPI.SRAM_DRD_CMD: SPI_SRAM_DRD_CMD
func (o *SPI_Type) SetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SRAM_DRD_CMD.Reg, volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg) & 0xf0000000) >> 28
}
func (o *SPI_Type) SetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SRAM_DRD_CMD.Reg, volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetSRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE() uint32 {
	return volatile.LoadUint32(&o.SRAM_DRD_CMD.Reg) & 0xffff
}

// SPI.SRAM_DWR_CMD: SPI_SRAM_DWR_CMD
func (o *SPI_Type) SetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN(value uint32) {
	volatile.StoreUint32(&o.SRAM_DWR_CMD.Reg, volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg)&^(0xf0000000)|value<<28)
}
func (o *SPI_Type) GetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN() uint32 {
	return (volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg) & 0xf0000000) >> 28
}
func (o *SPI_Type) SetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE(value uint32) {
	volatile.StoreUint32(&o.SRAM_DWR_CMD.Reg, volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg)&^(0xffff)|value)
}
func (o *SPI_Type) GetSRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE() uint32 {
	return volatile.LoadUint32(&o.SRAM_DWR_CMD.Reg) & 0xffff
}

// SPI.SLV_RD_BIT: SPI_SLV_RD_BIT
func (o *SPI_Type) SetSLV_RD_BIT_SLV_RDATA_BIT(value uint32) {
	volatile.StoreUint32(&o.SLV_RD_BIT.Reg, volatile.LoadUint32(&o.SLV_RD_BIT.Reg)&^(0xffffff)|value)
}
func (o *SPI_Type) GetSLV_RD_BIT_SLV_RDATA_BIT() uint32 {
	return volatile.LoadUint32(&o.SLV_RD_BIT.Reg) & 0xffffff
}

// SPI.W0: SPI_W0
func (o *SPI_Type) SetW0(value uint32) {
	volatile.StoreUint32(&o.W0.Reg, value)
}
func (o *SPI_Type) GetW0() uint32 {
	return volatile.LoadUint32(&o.W0.Reg)
}

// SPI.W1: SPI_W0
func (o *SPI_Type) SetW1(value uint32) {
	volatile.StoreUint32(&o.W1.Reg, value)
}
func (o *SPI_Type) GetW1() uint32 {
	return volatile.LoadUint32(&o.W1.Reg)
}

// SPI.W2: SPI_W0
func (o *SPI_Type) SetW2(value uint32) {
	volatile.StoreUint32(&o.W2.Reg, value)
}
func (o *SPI_Type) GetW2() uint32 {
	return volatile.LoadUint32(&o.W2.Reg)
}

// SPI.W3: SPI_W0
func (o *SPI_Type) SetW3(value uint32) {
	volatile.StoreUint32(&o.W3.Reg, value)
}
func (o *SPI_Type) GetW3() uint32 {
	return volatile.LoadUint32(&o.W3.Reg)
}

// SPI.W4: SPI_W0
func (o *SPI_Type) SetW4(value uint32) {
	volatile.StoreUint32(&o.W4.Reg, value)
}
func (o *SPI_Type) GetW4() uint32 {
	return volatile.LoadUint32(&o.W4.Reg)
}

// SPI.W5: SPI_W0
func (o *SPI_Type) SetW5(value uint32) {
	volatile.StoreUint32(&o.W5.Reg, value)
}
func (o *SPI_Type) GetW5() uint32 {
	return volatile.LoadUint32(&o.W5.Reg)
}

// SPI.W6: SPI_W0
func (o *SPI_Type) SetW6(value uint32) {
	volatile.StoreUint32(&o.W6.Reg, value)
}
func (o *SPI_Type) GetW6() uint32 {
	return volatile.LoadUint32(&o.W6.Reg)
}

// SPI.W7: SPI_W0
func (o *SPI_Type) SetW7(value uint32) {
	volatile.StoreUint32(&o.W7.Reg, value)
}
func (o *SPI_Type) GetW7() uint32 {
	return volatile.LoadUint32(&o.W7.Reg)
}

// SPI.W8: SPI_W0
func (o *SPI_Type) SetW8(value uint32) {
	volatile.StoreUint32(&o.W8.Reg, value)
}
func (o *SPI_Type) GetW8() uint32 {
	return volatile.LoadUint32(&o.W8.Reg)
}

// SPI.W9: SPI_W0
func (o *SPI_Type) SetW9(value uint32) {
	volatile.StoreUint32(&o.W9.Reg, value)
}
func (o *SPI_Type) GetW9() uint32 {
	return volatile.LoadUint32(&o.W9.Reg)
}

// SPI.W10: SPI_W0
func (o *SPI_Type) SetW10(value uint32) {
	volatile.StoreUint32(&o.W10.Reg, value)
}
func (o *SPI_Type) GetW10() uint32 {
	return volatile.LoadUint32(&o.W10.Reg)
}

// SPI.W11: SPI_W0
func (o *SPI_Type) SetW11(value uint32) {
	volatile.StoreUint32(&o.W11.Reg, value)
}
func (o *SPI_Type) GetW11() uint32 {
	return volatile.LoadUint32(&o.W11.Reg)
}

// SPI.W12: SPI_W0
func (o *SPI_Type) SetW12(value uint32) {
	volatile.StoreUint32(&o.W12.Reg, value)
}
func (o *SPI_Type) GetW12() uint32 {
	return volatile.LoadUint32(&o.W12.Reg)
}

// SPI.W13: SPI_W0
func (o *SPI_Type) SetW13(value uint32) {
	volatile.StoreUint32(&o.W13.Reg, value)
}
func (o *SPI_Type) GetW13() uint32 {
	return volatile.LoadUint32(&o.W13.Reg)
}

// SPI.W14: SPI_W0
func (o *SPI_Type) SetW14(value uint32) {
	volatile.StoreUint32(&o.W14.Reg, value)
}
func (o *SPI_Type) GetW14() uint32 {
	return volatile.LoadUint32(&o.W14.Reg)
}

// SPI.W15: SPI_W0
func (o *SPI_Type) SetW15(value uint32) {
	volatile.StoreUint32(&o.W15.Reg, value)
}
func (o *SPI_Type) GetW15() uint32 {
	return volatile.LoadUint32(&o.W15.Reg)
}

// SPI.TX_CRC: SPI_TX_CRC
func (o *SPI_Type) SetTX_CRC(value uint32) {
	volatile.StoreUint32(&o.TX_CRC.Reg, value)
}
func (o *SPI_Type) GetTX_CRC() uint32 {
	return volatile.LoadUint32(&o.TX_CRC.Reg)
}

// SPI.EXT0: SPI_EXT0
func (o *SPI_Type) SetEXT0_T_PP_ENA(value uint32) {
	volatile.StoreUint32(&o.EXT0.Reg, volatile.LoadUint32(&o.EXT0.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetEXT0_T_PP_ENA() uint32 {
	return (volatile.LoadUint32(&o.EXT0.Reg) & 0x80000000) >> 31
}
func (o *SPI_Type) SetEXT0_T_PP_SHIFT(value uint32) {
	volatile.StoreUint32(&o.EXT0.Reg, volatile.LoadUint32(&o.EXT0.Reg)&^(0xf0000)|value<<16)
}
func (o *SPI_Type) GetEXT0_T_PP_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.EXT0.Reg) & 0xf0000) >> 16
}
func (o *SPI_Type) SetEXT0_T_PP_TIME(value uint32) {
	volatile.StoreUint32(&o.EXT0.Reg, volatile.LoadUint32(&o.EXT0.Reg)&^(0xfff)|value)
}
func (o *SPI_Type) GetEXT0_T_PP_TIME() uint32 {
	return volatile.LoadUint32(&o.EXT0.Reg) & 0xfff
}

// SPI.EXT1: SPI_EXT1
func (o *SPI_Type) SetEXT1_T_ERASE_ENA(value uint32) {
	volatile.StoreUint32(&o.EXT1.Reg, volatile.LoadUint32(&o.EXT1.Reg)&^(0x80000000)|value<<31)
}
func (o *SPI_Type) GetEXT1_T_ERASE_ENA() uint32 {
	return (volatile.LoadUint32(&o.EXT1.Reg) & 0x80000000) >> 31
}
func (o *SPI_Type) SetEXT1_T_ERASE_SHIFT(value uint32) {
	volatile.StoreUint32(&o.EXT1.Reg, volatile.LoadUint32(&o.EXT1.Reg)&^(0xf0000)|value<<16)
}
func (o *SPI_Type) GetEXT1_T_ERASE_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.EXT1.Reg) & 0xf0000) >> 16
}
func (o *SPI_Type) SetEXT1_T_ERASE_TIME(value uint32) {
	volatile.StoreUint32(&o.EXT1.Reg, volatile.LoadUint32(&o.EXT1.Reg)&^(0xfff)|value)
}
func (o *SPI_Type) GetEXT1_T_ERASE_TIME() uint32 {
	return volatile.LoadUint32(&o.EXT1.Reg) & 0xfff
}

// SPI.EXT2: SPI_EXT2
func (o *SPI_Type) SetEXT2_ST(value uint32) {
	volatile.StoreUint32(&o.EXT2.Reg, volatile.LoadUint32(&o.EXT2.Reg)&^(0x7)|value)
}
func (o *SPI_Type) GetEXT2_ST() uint32 {
	return volatile.LoadUint32(&o.EXT2.Reg) & 0x7
}

// SPI.EXT3: SPI_EXT3
func (o *SPI_Type) SetEXT3_INT_HOLD_ENA(value uint32) {
	volatile.StoreUint32(&o.EXT3.Reg, volatile.LoadUint32(&o.EXT3.Reg)&^(0x3)|value)
}
func (o *SPI_Type) GetEXT3_INT_HOLD_ENA() uint32 {
	return volatile.LoadUint32(&o.EXT3.Reg) & 0x3
}

// SPI.DMA_CONF: SPI_DMA_CONF
func (o *SPI_Type) SetDMA_CONF_DMA_CONTINUE(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x10000)|value<<16)
}
func (o *SPI_Type) GetDMA_CONF_DMA_CONTINUE() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x10000) >> 16
}
func (o *SPI_Type) SetDMA_CONF_DMA_TX_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x8000)|value<<15)
}
func (o *SPI_Type) GetDMA_CONF_DMA_TX_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x8000) >> 15
}
func (o *SPI_Type) SetDMA_CONF_DMA_RX_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x4000)|value<<14)
}
func (o *SPI_Type) GetDMA_CONF_DMA_RX_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x4000) >> 14
}
func (o *SPI_Type) SetDMA_CONF_OUT_DATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *SPI_Type) GetDMA_CONF_OUT_DATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x1000) >> 12
}
func (o *SPI_Type) SetDMA_CONF_INDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x800)|value<<11)
}
func (o *SPI_Type) GetDMA_CONF_INDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x800) >> 11
}
func (o *SPI_Type) SetDMA_CONF_OUTDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x400)|value<<10)
}
func (o *SPI_Type) GetDMA_CONF_OUTDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x400) >> 10
}
func (o *SPI_Type) SetDMA_CONF_OUT_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x200)|value<<9)
}
func (o *SPI_Type) GetDMA_CONF_OUT_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x200) >> 9
}
func (o *SPI_Type) SetDMA_CONF_OUT_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_CONF_OUT_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x100) >> 8
}
func (o *SPI_Type) SetDMA_CONF_OUT_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_CONF_OUT_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_CONF_IN_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_CONF_IN_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_CONF_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_CONF_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_CONF_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_CONF_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_CONF_OUT_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_CONF_OUT_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_CONF_IN_RST(value uint32) {
	volatile.StoreUint32(&o.DMA_CONF.Reg, volatile.LoadUint32(&o.DMA_CONF.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_CONF_IN_RST() uint32 {
	return (volatile.LoadUint32(&o.DMA_CONF.Reg) & 0x4) >> 2
}

// SPI.DMA_OUT_LINK: SPI_DMA_OUT_LINK
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetDMA_OUT_LINK_OUTLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0xfffff)|value)
}
func (o *SPI_Type) GetDMA_OUT_LINK_OUTLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0xfffff
}

// SPI.DMA_IN_LINK: SPI_DMA_IN_LINK
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x40000000) >> 30
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x20000000) >> 29
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x10000000) >> 28
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x100000)|value<<20)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x100000) >> 20
}
func (o *SPI_Type) SetDMA_IN_LINK_INLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0xfffff)|value)
}
func (o *SPI_Type) GetDMA_IN_LINK_INLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0xfffff
}

// SPI.DMA_STATUS: SPI_DMA_STATUS
func (o *SPI_Type) SetDMA_STATUS_DMA_TX_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_STATUS.Reg, volatile.LoadUint32(&o.DMA_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_STATUS_DMA_TX_EN() uint32 {
	return (volatile.LoadUint32(&o.DMA_STATUS.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_STATUS_DMA_RX_EN(value uint32) {
	volatile.StoreUint32(&o.DMA_STATUS.Reg, volatile.LoadUint32(&o.DMA_STATUS.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_STATUS_DMA_RX_EN() uint32 {
	return volatile.LoadUint32(&o.DMA_STATUS.Reg) & 0x1
}

// SPI.DMA_INT_ENA: SPI_DMA_INT_ENA
func (o *SPI_Type) SetDMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SPI_Type) SetDMA_INT_ENA_OUT_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUT_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_ENA_OUT_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUT_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_ENA_IN_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_ENA_IN_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_ENA_IN_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_ENA_IN_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_ENA_IN_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_ENA_IN_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ENA.Reg, volatile.LoadUint32(&o.DMA_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_ENA.Reg) & 0x1
}

// SPI.DMA_INT_RAW: SPI_DMA_INT_RAW
func (o *SPI_Type) SetDMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x100) >> 8
}
func (o *SPI_Type) SetDMA_INT_RAW_OUT_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUT_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_RAW_OUT_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUT_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_RAW_IN_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_RAW_IN_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_RAW_IN_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_RAW_IN_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_RAW_IN_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_RAW_IN_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_RAW.Reg, volatile.LoadUint32(&o.DMA_INT_RAW.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_RAW.Reg) & 0x1
}

// SPI.DMA_INT_ST: SPI_DMA_INT_ST
func (o *SPI_Type) SetDMA_INT_ST_OUT_TOTAL_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_ST_OUT_TOTAL_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x100) >> 8
}
func (o *SPI_Type) SetDMA_INT_ST_OUT_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_ST_OUT_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_ST_OUT_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_ST_OUT_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_ST_IN_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_ST_IN_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_ST_IN_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_ST_IN_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_ST_IN_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_ST_IN_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_ST_INLINK_DSCR_ERROR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_ST_INLINK_DSCR_ERROR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_ST.Reg, volatile.LoadUint32(&o.DMA_INT_ST.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_ST.Reg) & 0x1
}

// SPI.DMA_INT_CLR: SPI_DMA_INT_CLR
func (o *SPI_Type) SetDMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x100) >> 8
}
func (o *SPI_Type) SetDMA_INT_CLR_OUT_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUT_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x80) >> 7
}
func (o *SPI_Type) SetDMA_INT_CLR_OUT_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUT_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x40) >> 6
}
func (o *SPI_Type) SetDMA_INT_CLR_IN_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SPI_Type) GetDMA_INT_CLR_IN_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x20) >> 5
}
func (o *SPI_Type) SetDMA_INT_CLR_IN_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SPI_Type) GetDMA_INT_CLR_IN_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x10) >> 4
}
func (o *SPI_Type) SetDMA_INT_CLR_IN_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SPI_Type) GetDMA_INT_CLR_IN_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x8) >> 3
}
func (o *SPI_Type) SetDMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SPI_Type) GetDMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x4) >> 2
}
func (o *SPI_Type) SetDMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SPI_Type) GetDMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x2) >> 1
}
func (o *SPI_Type) SetDMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.DMA_INT_CLR.Reg, volatile.LoadUint32(&o.DMA_INT_CLR.Reg)&^(0x1)|value)
}
func (o *SPI_Type) GetDMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.DMA_INT_CLR.Reg) & 0x1
}

// SPI.IN_ERR_EOF_DES_ADDR: SPI_IN_ERR_EOF_DES_ADDR
func (o *SPI_Type) SetIN_ERR_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_ERR_EOF_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetIN_ERR_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_ERR_EOF_DES_ADDR.Reg)
}

// SPI.IN_SUC_EOF_DES_ADDR: SPI_IN_SUC_EOF_DES_ADDR
func (o *SPI_Type) SetIN_SUC_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_SUC_EOF_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetIN_SUC_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_SUC_EOF_DES_ADDR.Reg)
}

// SPI.INLINK_DSCR: SPI_INLINK_DSCR
func (o *SPI_Type) SetINLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR.Reg, value)
}
func (o *SPI_Type) GetINLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR.Reg)
}

// SPI.INLINK_DSCR_BF0: SPI_INLINK_DSCR_BF0
func (o *SPI_Type) SetINLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF0.Reg, value)
}
func (o *SPI_Type) GetINLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF0.Reg)
}

// SPI.INLINK_DSCR_BF1: SPI_INLINK_DSCR_BF1
func (o *SPI_Type) SetINLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF1.Reg, value)
}
func (o *SPI_Type) GetINLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF1.Reg)
}

// SPI.OUT_EOF_BFR_DES_ADDR: SPI_OUT_EOF_BFR_DES_ADDR
func (o *SPI_Type) SetOUT_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetOUT_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg)
}

// SPI.OUT_EOF_DES_ADDR: SPI_OUT_EOF_DES_ADDR
func (o *SPI_Type) SetOUT_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_DES_ADDR.Reg, value)
}
func (o *SPI_Type) GetOUT_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_DES_ADDR.Reg)
}

// SPI.OUTLINK_DSCR: SPI_OUTLINK_DSCR
func (o *SPI_Type) SetOUTLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR.Reg, value)
}
func (o *SPI_Type) GetOUTLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR.Reg)
}

// SPI.OUTLINK_DSCR_BF0: SPI_OUTLINK_DSCR_BF0
func (o *SPI_Type) SetOUTLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF0.Reg, value)
}
func (o *SPI_Type) GetOUTLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF0.Reg)
}

// SPI.OUTLINK_DSCR_BF1: SPI_OUTLINK_DSCR_BF1
func (o *SPI_Type) SetOUTLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF1.Reg, value)
}
func (o *SPI_Type) GetOUTLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF1.Reg)
}

// SPI.DMA_RSTATUS: SPI_DMA_RSTATUS
func (o *SPI_Type) SetDMA_RSTATUS(value uint32) {
	volatile.StoreUint32(&o.DMA_RSTATUS.Reg, value)
}
func (o *SPI_Type) GetDMA_RSTATUS() uint32 {
	return volatile.LoadUint32(&o.DMA_RSTATUS.Reg)
}

// SPI.DMA_TSTATUS: SPI_DMA_TSTATUS
func (o *SPI_Type) SetDMA_TSTATUS(value uint32) {
	volatile.StoreUint32(&o.DMA_TSTATUS.Reg, value)
}
func (o *SPI_Type) GetDMA_TSTATUS() uint32 {
	return volatile.LoadUint32(&o.DMA_TSTATUS.Reg)
}

// SPI.DATE: SPI_DATE
func (o *SPI_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *SPI_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

type I2C_Type struct {
	SCL_LOW_PERIOD   volatile.Register32 // 0x0
	CTR              volatile.Register32 // 0x4
	SR               volatile.Register32 // 0x8
	TO               volatile.Register32 // 0xC
	SLAVE_ADDR       volatile.Register32 // 0x10
	RXFIFO_ST        volatile.Register32 // 0x14
	FIFO_CONF        volatile.Register32 // 0x18
	DATA             volatile.Register32 // 0x1C
	INT_RAW          volatile.Register32 // 0x20
	INT_CLR          volatile.Register32 // 0x24
	INT_ENA          volatile.Register32 // 0x28
	INT_STATUS       volatile.Register32 // 0x2C
	SDA_HOLD         volatile.Register32 // 0x30
	SDA_SAMPLE       volatile.Register32 // 0x34
	SCL_HIGH_PERIOD  volatile.Register32 // 0x38
	_                [4]byte
	SCL_START_HOLD   volatile.Register32 // 0x40
	SCL_RSTART_SETUP volatile.Register32 // 0x44
	SCL_STOP_HOLD    volatile.Register32 // 0x48
	SCL_STOP_SETUP   volatile.Register32 // 0x4C
	SCL_FILTER_CFG   volatile.Register32 // 0x50
	SDA_FILTER_CFG   volatile.Register32 // 0x54
	COMD0            volatile.Register32 // 0x58
	COMD1            volatile.Register32 // 0x5C
	COMD2            volatile.Register32 // 0x60
	COMD3            volatile.Register32 // 0x64
	COMD4            volatile.Register32 // 0x68
	COMD5            volatile.Register32 // 0x6C
	COMD6            volatile.Register32 // 0x70
	COMD7            volatile.Register32 // 0x74
	COMD8            volatile.Register32 // 0x78
	COMD9            volatile.Register32 // 0x7C
	COMD10           volatile.Register32 // 0x80
	COMD11           volatile.Register32 // 0x84
	COMD12           volatile.Register32 // 0x88
	COMD13           volatile.Register32 // 0x8C
	COMD14           volatile.Register32 // 0x90
	COMD15           volatile.Register32 // 0x94
	_                [96]byte
	DATE             volatile.Register32 // 0xF8
}

// I2C.SCL_LOW_PERIOD: I2C_SCL_LOW_PERIOD
func (o *I2C_Type) SetSCL_LOW_PERIOD_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_LOW_PERIOD.Reg, volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetSCL_LOW_PERIOD_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg) & 0x3fff
}

// I2C.CTR: I2C_CTR
func (o *I2C_Type) SetCTR_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetCTR_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetCTR_RX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetCTR_RX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetCTR_TX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetCTR_TX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetCTR_TRANS_START(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetCTR_TRANS_START() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetCTR_MS_MODE(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetCTR_MS_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetCTR_SAMPLE_SCL_LEVEL(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetCTR_SAMPLE_SCL_LEVEL() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetCTR_SCL_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetCTR_SCL_FORCE_OUT() uint32 {
	return (volatile.LoadUint32(&o.CTR.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetCTR_SDA_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTR.Reg, volatile.LoadUint32(&o.CTR.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetCTR_SDA_FORCE_OUT() uint32 {
	return volatile.LoadUint32(&o.CTR.Reg) & 0x1
}

// I2C.SR: I2C_SR
func (o *I2C_Type) SetSR_SCL_STATE_LAST(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x70000000)|value<<28)
}
func (o *I2C_Type) GetSR_SCL_STATE_LAST() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x70000000) >> 28
}
func (o *I2C_Type) SetSR_SCL_MAIN_STATE_LAST(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x7000000)|value<<24)
}
func (o *I2C_Type) GetSR_SCL_MAIN_STATE_LAST() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x7000000) >> 24
}
func (o *I2C_Type) SetSR_TXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0xfc0000)|value<<18)
}
func (o *I2C_Type) GetSR_TXFIFO_CNT() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0xfc0000) >> 18
}
func (o *I2C_Type) SetSR_RXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x3f00)|value<<8)
}
func (o *I2C_Type) GetSR_RXFIFO_CNT() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x3f00) >> 8
}
func (o *I2C_Type) SetSR_BYTE_TRANS(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetSR_BYTE_TRANS() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetSR_SLAVE_ADDRESSED(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetSR_SLAVE_ADDRESSED() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetSR_BUS_BUSY(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetSR_BUS_BUSY() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetSR_ARB_LOST(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetSR_ARB_LOST() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetSR_TIME_OUT(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetSR_TIME_OUT() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetSR_SLAVE_RW(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetSR_SLAVE_RW() uint32 {
	return (volatile.LoadUint32(&o.SR.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetSR_ACK_REC(value uint32) {
	volatile.StoreUint32(&o.SR.Reg, volatile.LoadUint32(&o.SR.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetSR_ACK_REC() uint32 {
	return volatile.LoadUint32(&o.SR.Reg) & 0x1
}

// I2C.TO: I2C_TO
func (o *I2C_Type) SetTO_TIME_OUT_REG(value uint32) {
	volatile.StoreUint32(&o.TO.Reg, volatile.LoadUint32(&o.TO.Reg)&^(0xfffff)|value)
}
func (o *I2C_Type) GetTO_TIME_OUT_REG() uint32 {
	return volatile.LoadUint32(&o.TO.Reg) & 0xfffff
}

// I2C.SLAVE_ADDR: I2C_SLAVE_ADDR
func (o *I2C_Type) SetSLAVE_ADDR_ADDR_10BIT_EN(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetSLAVE_ADDR_ADDR_10BIT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetSLAVE_ADDR(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x7fff)|value)
}
func (o *I2C_Type) GetSLAVE_ADDR() uint32 {
	return volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x7fff
}

// I2C.RXFIFO_ST: I2C_RXFIFO_ST
func (o *I2C_Type) SetRXFIFO_ST_TXFIFO_END_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0xf8000)|value<<15)
}
func (o *I2C_Type) GetRXFIFO_ST_TXFIFO_END_ADDR() uint32 {
	return (volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0xf8000) >> 15
}
func (o *I2C_Type) SetRXFIFO_ST_TXFIFO_START_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0x7c00)|value<<10)
}
func (o *I2C_Type) GetRXFIFO_ST_TXFIFO_START_ADDR() uint32 {
	return (volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0x7c00) >> 10
}
func (o *I2C_Type) SetRXFIFO_ST_RXFIFO_END_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0x3e0)|value<<5)
}
func (o *I2C_Type) GetRXFIFO_ST_RXFIFO_END_ADDR() uint32 {
	return (volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0x3e0) >> 5
}
func (o *I2C_Type) SetRXFIFO_ST_RXFIFO_START_ADDR(value uint32) {
	volatile.StoreUint32(&o.RXFIFO_ST.Reg, volatile.LoadUint32(&o.RXFIFO_ST.Reg)&^(0x1f)|value)
}
func (o *I2C_Type) GetRXFIFO_ST_RXFIFO_START_ADDR() uint32 {
	return volatile.LoadUint32(&o.RXFIFO_ST.Reg) & 0x1f
}

// I2C.FIFO_CONF: I2C_FIFO_CONF
func (o *I2C_Type) SetFIFO_CONF_NONFIFO_TX_THRES(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x3f00000)|value<<20)
}
func (o *I2C_Type) GetFIFO_CONF_NONFIFO_TX_THRES() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x3f00000) >> 20
}
func (o *I2C_Type) SetFIFO_CONF_NONFIFO_RX_THRES(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0xfc000)|value<<14)
}
func (o *I2C_Type) GetFIFO_CONF_NONFIFO_RX_THRES() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0xfc000) >> 14
}
func (o *I2C_Type) SetFIFO_CONF_TX_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *I2C_Type) GetFIFO_CONF_TX_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x2000) >> 13
}
func (o *I2C_Type) SetFIFO_CONF_RX_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetFIFO_CONF_RX_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x1000) >> 12
}
func (o *I2C_Type) SetFIFO_CONF_FIFO_ADDR_CFG_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetFIFO_CONF_FIFO_ADDR_CFG_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetFIFO_CONF_NONFIFO_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetFIFO_CONF_NONFIFO_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetFIFO_CONF_TXFIFO_EMPTY_THRHD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x3e0)|value<<5)
}
func (o *I2C_Type) GetFIFO_CONF_TXFIFO_EMPTY_THRHD() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x3e0) >> 5
}
func (o *I2C_Type) SetFIFO_CONF_RXFIFO_FULL_THRHD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x1f)|value)
}
func (o *I2C_Type) GetFIFO_CONF_RXFIFO_FULL_THRHD() uint32 {
	return volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x1f
}

// I2C.DATA: I2C_DATA
func (o *I2C_Type) SetDATA_FIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o.DATA.Reg, volatile.LoadUint32(&o.DATA.Reg)&^(0xff)|value)
}
func (o *I2C_Type) GetDATA_FIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o.DATA.Reg) & 0xff
}

// I2C.INT_RAW: I2C_INT_RAW
func (o *I2C_Type) SetINT_RAW_TX_SEND_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_RAW_TX_SEND_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *I2C_Type) SetINT_RAW_RX_REC_FULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_RAW_RX_REC_FULL_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_RAW_ACK_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_RAW_ACK_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_RAW_TRANS_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_RAW_TRANS_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_RAW_TIME_OUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_RAW_TIME_OUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_RAW_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_RAW_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_RAW_MASTER_TRAN_COMP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_RAW_MASTER_TRAN_COMP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_RAW_ARBITRATION_LOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_RAW_ARBITRATION_LOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_RAW_SLAVE_TRAN_COMP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_RAW_SLAVE_TRAN_COMP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_RAW_END_DETECT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_RAW_END_DETECT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_RAW_RXFIFO_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_RAW_RXFIFO_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_RAW_TXFIFO_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_RAW_TXFIFO_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_RAW_RXFIFO_FULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_RAW_RXFIFO_FULL_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// I2C.INT_CLR: I2C_INT_CLR
func (o *I2C_Type) SetINT_CLR_TX_SEND_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_CLR_TX_SEND_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *I2C_Type) SetINT_CLR_RX_REC_FULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_CLR_RX_REC_FULL_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_CLR_ACK_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_CLR_ACK_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_CLR_TRANS_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_CLR_TRANS_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_CLR_TIME_OUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_CLR_TIME_OUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_CLR_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_CLR_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_CLR_MASTER_TRAN_COMP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_CLR_MASTER_TRAN_COMP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_CLR_ARBITRATION_LOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_CLR_ARBITRATION_LOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_CLR_SLAVE_TRAN_COMP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_CLR_SLAVE_TRAN_COMP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_CLR_END_DETECT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_CLR_END_DETECT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_CLR_RXFIFO_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_CLR_RXFIFO_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_CLR_TXFIFO_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_CLR_TXFIFO_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_CLR_RXFIFO_FULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_CLR_RXFIFO_FULL_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// I2C.INT_ENA: I2C_INT_ENA
func (o *I2C_Type) SetINT_ENA_TX_SEND_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_ENA_TX_SEND_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *I2C_Type) SetINT_ENA_RX_REC_FULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_ENA_RX_REC_FULL_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_ENA_ACK_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_ENA_ACK_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_ENA_TRANS_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_ENA_TRANS_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_ENA_TIME_OUT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_ENA_TIME_OUT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_ENA_TRANS_COMPLETE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_ENA_TRANS_COMPLETE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_ENA_MASTER_TRAN_COMP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_ENA_MASTER_TRAN_COMP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_ENA_ARBITRATION_LOST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_ENA_ARBITRATION_LOST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_ENA_SLAVE_TRAN_COMP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_ENA_SLAVE_TRAN_COMP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_ENA_END_DETECT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_ENA_END_DETECT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_ENA_RXFIFO_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_ENA_RXFIFO_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_ENA_TXFIFO_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_ENA_TXFIFO_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_ENA_RXFIFO_FULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_ENA_RXFIFO_FULL_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// I2C.INT_STATUS: I2C_INT_STATUS
func (o *I2C_Type) SetINT_STATUS_TX_SEND_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x1000)|value<<12)
}
func (o *I2C_Type) GetINT_STATUS_TX_SEND_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x1000) >> 12
}
func (o *I2C_Type) SetINT_STATUS_RX_REC_FULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x800)|value<<11)
}
func (o *I2C_Type) GetINT_STATUS_RX_REC_FULL_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x800) >> 11
}
func (o *I2C_Type) SetINT_STATUS_ACK_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x400)|value<<10)
}
func (o *I2C_Type) GetINT_STATUS_ACK_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x400) >> 10
}
func (o *I2C_Type) SetINT_STATUS_TRANS_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x200)|value<<9)
}
func (o *I2C_Type) GetINT_STATUS_TRANS_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x200) >> 9
}
func (o *I2C_Type) SetINT_STATUS_TIME_OUT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x100)|value<<8)
}
func (o *I2C_Type) GetINT_STATUS_TIME_OUT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x100) >> 8
}
func (o *I2C_Type) SetINT_STATUS_TRANS_COMPLETE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x80)|value<<7)
}
func (o *I2C_Type) GetINT_STATUS_TRANS_COMPLETE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x80) >> 7
}
func (o *I2C_Type) SetINT_STATUS_MASTER_TRAN_COMP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *I2C_Type) GetINT_STATUS_MASTER_TRAN_COMP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x40) >> 6
}
func (o *I2C_Type) SetINT_STATUS_ARBITRATION_LOST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *I2C_Type) GetINT_STATUS_ARBITRATION_LOST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x20) >> 5
}
func (o *I2C_Type) SetINT_STATUS_SLAVE_TRAN_COMP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *I2C_Type) GetINT_STATUS_SLAVE_TRAN_COMP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x10) >> 4
}
func (o *I2C_Type) SetINT_STATUS_END_DETECT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetINT_STATUS_END_DETECT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetINT_STATUS_RXFIFO_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *I2C_Type) GetINT_STATUS_RXFIFO_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x4) >> 2
}
func (o *I2C_Type) SetINT_STATUS_TXFIFO_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *I2C_Type) GetINT_STATUS_TXFIFO_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x2) >> 1
}
func (o *I2C_Type) SetINT_STATUS_RXFIFO_FULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_STATUS.Reg, volatile.LoadUint32(&o.INT_STATUS.Reg)&^(0x1)|value)
}
func (o *I2C_Type) GetINT_STATUS_RXFIFO_FULL_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_STATUS.Reg) & 0x1
}

// I2C.SDA_HOLD: I2C_SDA_HOLD
func (o *I2C_Type) SetSDA_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.SDA_HOLD.Reg, volatile.LoadUint32(&o.SDA_HOLD.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSDA_HOLD_TIME() uint32 {
	return volatile.LoadUint32(&o.SDA_HOLD.Reg) & 0x3ff
}

// I2C.SDA_SAMPLE: I2C_SDA_SAMPLE
func (o *I2C_Type) SetSDA_SAMPLE_TIME(value uint32) {
	volatile.StoreUint32(&o.SDA_SAMPLE.Reg, volatile.LoadUint32(&o.SDA_SAMPLE.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSDA_SAMPLE_TIME() uint32 {
	return volatile.LoadUint32(&o.SDA_SAMPLE.Reg) & 0x3ff
}

// I2C.SCL_HIGH_PERIOD: I2C_SCL_HIGH_PERIOD
func (o *I2C_Type) SetSCL_HIGH_PERIOD_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_HIGH_PERIOD.Reg, volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetSCL_HIGH_PERIOD_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg) & 0x3fff
}

// I2C.SCL_START_HOLD: I2C_SCL_START_HOLD
func (o *I2C_Type) SetSCL_START_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_START_HOLD.Reg, volatile.LoadUint32(&o.SCL_START_HOLD.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSCL_START_HOLD_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_START_HOLD.Reg) & 0x3ff
}

// I2C.SCL_RSTART_SETUP: I2C_SCL_RSTART_SETUP
func (o *I2C_Type) SetSCL_RSTART_SETUP_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_RSTART_SETUP.Reg, volatile.LoadUint32(&o.SCL_RSTART_SETUP.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSCL_RSTART_SETUP_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_RSTART_SETUP.Reg) & 0x3ff
}

// I2C.SCL_STOP_HOLD: I2C_SCL_STOP_HOLD
func (o *I2C_Type) SetSCL_STOP_HOLD_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_STOP_HOLD.Reg, volatile.LoadUint32(&o.SCL_STOP_HOLD.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetSCL_STOP_HOLD_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_STOP_HOLD.Reg) & 0x3fff
}

// I2C.SCL_STOP_SETUP: I2C_SCL_STOP_SETUP
func (o *I2C_Type) SetSCL_STOP_SETUP_TIME(value uint32) {
	volatile.StoreUint32(&o.SCL_STOP_SETUP.Reg, volatile.LoadUint32(&o.SCL_STOP_SETUP.Reg)&^(0x3ff)|value)
}
func (o *I2C_Type) GetSCL_STOP_SETUP_TIME() uint32 {
	return volatile.LoadUint32(&o.SCL_STOP_SETUP.Reg) & 0x3ff
}

// I2C.SCL_FILTER_CFG: I2C_SCL_FILTER_CFG
func (o *I2C_Type) SetSCL_FILTER_CFG_SCL_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.SCL_FILTER_CFG.Reg, volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetSCL_FILTER_CFG_SCL_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetSCL_FILTER_CFG_SCL_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.SCL_FILTER_CFG.Reg, volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg)&^(0x7)|value)
}
func (o *I2C_Type) GetSCL_FILTER_CFG_SCL_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.SCL_FILTER_CFG.Reg) & 0x7
}

// I2C.SDA_FILTER_CFG: I2C_SDA_FILTER_CFG
func (o *I2C_Type) SetSDA_FILTER_CFG_SDA_FILTER_EN(value uint32) {
	volatile.StoreUint32(&o.SDA_FILTER_CFG.Reg, volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg)&^(0x8)|value<<3)
}
func (o *I2C_Type) GetSDA_FILTER_CFG_SDA_FILTER_EN() uint32 {
	return (volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg) & 0x8) >> 3
}
func (o *I2C_Type) SetSDA_FILTER_CFG_SDA_FILTER_THRES(value uint32) {
	volatile.StoreUint32(&o.SDA_FILTER_CFG.Reg, volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg)&^(0x7)|value)
}
func (o *I2C_Type) GetSDA_FILTER_CFG_SDA_FILTER_THRES() uint32 {
	return volatile.LoadUint32(&o.SDA_FILTER_CFG.Reg) & 0x7
}

// I2C.COMD0: I2C_COMD0
func (o *I2C_Type) SetCOMD0_COMMAND0_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD0.Reg, volatile.LoadUint32(&o.COMD0.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD0_COMMAND0_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD0.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD0_COMMAND0(value uint32) {
	volatile.StoreUint32(&o.COMD0.Reg, volatile.LoadUint32(&o.COMD0.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD0_COMMAND0() uint32 {
	return volatile.LoadUint32(&o.COMD0.Reg) & 0x3fff
}

// I2C.COMD1: I2C_COMD1
func (o *I2C_Type) SetCOMD1_COMMAND1_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD1.Reg, volatile.LoadUint32(&o.COMD1.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD1_COMMAND1_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD1.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD1_COMMAND1(value uint32) {
	volatile.StoreUint32(&o.COMD1.Reg, volatile.LoadUint32(&o.COMD1.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD1_COMMAND1() uint32 {
	return volatile.LoadUint32(&o.COMD1.Reg) & 0x3fff
}

// I2C.COMD2: I2C_COMD2
func (o *I2C_Type) SetCOMD2_COMMAND2_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD2.Reg, volatile.LoadUint32(&o.COMD2.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD2_COMMAND2_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD2.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD2_COMMAND2(value uint32) {
	volatile.StoreUint32(&o.COMD2.Reg, volatile.LoadUint32(&o.COMD2.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD2_COMMAND2() uint32 {
	return volatile.LoadUint32(&o.COMD2.Reg) & 0x3fff
}

// I2C.COMD3: I2C_COMD3
func (o *I2C_Type) SetCOMD3_COMMAND3_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD3.Reg, volatile.LoadUint32(&o.COMD3.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD3_COMMAND3_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD3.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD3_COMMAND3(value uint32) {
	volatile.StoreUint32(&o.COMD3.Reg, volatile.LoadUint32(&o.COMD3.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD3_COMMAND3() uint32 {
	return volatile.LoadUint32(&o.COMD3.Reg) & 0x3fff
}

// I2C.COMD4: I2C_COMD4
func (o *I2C_Type) SetCOMD4_COMMAND4_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD4.Reg, volatile.LoadUint32(&o.COMD4.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD4_COMMAND4_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD4.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD4_COMMAND4(value uint32) {
	volatile.StoreUint32(&o.COMD4.Reg, volatile.LoadUint32(&o.COMD4.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD4_COMMAND4() uint32 {
	return volatile.LoadUint32(&o.COMD4.Reg) & 0x3fff
}

// I2C.COMD5: I2C_COMD5
func (o *I2C_Type) SetCOMD5_COMMAND5_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD5.Reg, volatile.LoadUint32(&o.COMD5.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD5_COMMAND5_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD5.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD5_COMMAND5(value uint32) {
	volatile.StoreUint32(&o.COMD5.Reg, volatile.LoadUint32(&o.COMD5.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD5_COMMAND5() uint32 {
	return volatile.LoadUint32(&o.COMD5.Reg) & 0x3fff
}

// I2C.COMD6: I2C_COMD6
func (o *I2C_Type) SetCOMD6_COMMAND6_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD6.Reg, volatile.LoadUint32(&o.COMD6.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD6_COMMAND6_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD6.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD6_COMMAND6(value uint32) {
	volatile.StoreUint32(&o.COMD6.Reg, volatile.LoadUint32(&o.COMD6.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD6_COMMAND6() uint32 {
	return volatile.LoadUint32(&o.COMD6.Reg) & 0x3fff
}

// I2C.COMD7: I2C_COMD7
func (o *I2C_Type) SetCOMD7_COMMAND7_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD7.Reg, volatile.LoadUint32(&o.COMD7.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD7_COMMAND7_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD7.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD7_COMMAND7(value uint32) {
	volatile.StoreUint32(&o.COMD7.Reg, volatile.LoadUint32(&o.COMD7.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD7_COMMAND7() uint32 {
	return volatile.LoadUint32(&o.COMD7.Reg) & 0x3fff
}

// I2C.COMD8: I2C_COMD8
func (o *I2C_Type) SetCOMD8_COMMAND8_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD8.Reg, volatile.LoadUint32(&o.COMD8.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD8_COMMAND8_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD8.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD8_COMMAND8(value uint32) {
	volatile.StoreUint32(&o.COMD8.Reg, volatile.LoadUint32(&o.COMD8.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD8_COMMAND8() uint32 {
	return volatile.LoadUint32(&o.COMD8.Reg) & 0x3fff
}

// I2C.COMD9: I2C_COMD9
func (o *I2C_Type) SetCOMD9_COMMAND9_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD9.Reg, volatile.LoadUint32(&o.COMD9.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD9_COMMAND9_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD9.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD9_COMMAND9(value uint32) {
	volatile.StoreUint32(&o.COMD9.Reg, volatile.LoadUint32(&o.COMD9.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD9_COMMAND9() uint32 {
	return volatile.LoadUint32(&o.COMD9.Reg) & 0x3fff
}

// I2C.COMD10: I2C_COMD10
func (o *I2C_Type) SetCOMD10_COMMAND10_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD10.Reg, volatile.LoadUint32(&o.COMD10.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD10_COMMAND10_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD10.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD10_COMMAND10(value uint32) {
	volatile.StoreUint32(&o.COMD10.Reg, volatile.LoadUint32(&o.COMD10.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD10_COMMAND10() uint32 {
	return volatile.LoadUint32(&o.COMD10.Reg) & 0x3fff
}

// I2C.COMD11: I2C_COMD11
func (o *I2C_Type) SetCOMD11_COMMAND11_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD11.Reg, volatile.LoadUint32(&o.COMD11.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD11_COMMAND11_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD11.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD11_COMMAND11(value uint32) {
	volatile.StoreUint32(&o.COMD11.Reg, volatile.LoadUint32(&o.COMD11.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD11_COMMAND11() uint32 {
	return volatile.LoadUint32(&o.COMD11.Reg) & 0x3fff
}

// I2C.COMD12: I2C_COMD12
func (o *I2C_Type) SetCOMD12_COMMAND12_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD12.Reg, volatile.LoadUint32(&o.COMD12.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD12_COMMAND12_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD12.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD12_COMMAND12(value uint32) {
	volatile.StoreUint32(&o.COMD12.Reg, volatile.LoadUint32(&o.COMD12.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD12_COMMAND12() uint32 {
	return volatile.LoadUint32(&o.COMD12.Reg) & 0x3fff
}

// I2C.COMD13: I2C_COMD13
func (o *I2C_Type) SetCOMD13_COMMAND13_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD13.Reg, volatile.LoadUint32(&o.COMD13.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD13_COMMAND13_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD13.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD13_COMMAND13(value uint32) {
	volatile.StoreUint32(&o.COMD13.Reg, volatile.LoadUint32(&o.COMD13.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD13_COMMAND13() uint32 {
	return volatile.LoadUint32(&o.COMD13.Reg) & 0x3fff
}

// I2C.COMD14: I2C_COMD14
func (o *I2C_Type) SetCOMD14_COMMAND14_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD14.Reg, volatile.LoadUint32(&o.COMD14.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD14_COMMAND14_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD14.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD14_COMMAND14(value uint32) {
	volatile.StoreUint32(&o.COMD14.Reg, volatile.LoadUint32(&o.COMD14.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD14_COMMAND14() uint32 {
	return volatile.LoadUint32(&o.COMD14.Reg) & 0x3fff
}

// I2C.COMD15: I2C_COMD15
func (o *I2C_Type) SetCOMD15_COMMAND15_DONE(value uint32) {
	volatile.StoreUint32(&o.COMD15.Reg, volatile.LoadUint32(&o.COMD15.Reg)&^(0x80000000)|value<<31)
}
func (o *I2C_Type) GetCOMD15_COMMAND15_DONE() uint32 {
	return (volatile.LoadUint32(&o.COMD15.Reg) & 0x80000000) >> 31
}
func (o *I2C_Type) SetCOMD15_COMMAND15(value uint32) {
	volatile.StoreUint32(&o.COMD15.Reg, volatile.LoadUint32(&o.COMD15.Reg)&^(0x3fff)|value)
}
func (o *I2C_Type) GetCOMD15_COMMAND15() uint32 {
	return volatile.LoadUint32(&o.COMD15.Reg) & 0x3fff
}

// I2C.DATE: I2C_DATE
func (o *I2C_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *I2C_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type EFUSE_Type struct {
	BLK0_RDATA0 volatile.Register32 // 0x0
	BLK0_RDATA1 volatile.Register32 // 0x4
	BLK0_RDATA2 volatile.Register32 // 0x8
	BLK0_RDATA3 volatile.Register32 // 0xC
	BLK0_RDATA4 volatile.Register32 // 0x10
	BLK0_RDATA5 volatile.Register32 // 0x14
	BLK0_RDATA6 volatile.Register32 // 0x18
	BLK0_WDATA0 volatile.Register32 // 0x1C
	BLK0_WDATA1 volatile.Register32 // 0x20
	BLK0_WDATA2 volatile.Register32 // 0x24
	BLK0_WDATA3 volatile.Register32 // 0x28
	BLK0_WDATA4 volatile.Register32 // 0x2C
	BLK0_WDATA5 volatile.Register32 // 0x30
	BLK0_WDATA6 volatile.Register32 // 0x34
	BLK1_RDATA0 volatile.Register32 // 0x38
	BLK1_RDATA1 volatile.Register32 // 0x3C
	BLK1_RDATA2 volatile.Register32 // 0x40
	BLK1_RDATA3 volatile.Register32 // 0x44
	BLK1_RDATA4 volatile.Register32 // 0x48
	BLK1_RDATA5 volatile.Register32 // 0x4C
	BLK1_RDATA6 volatile.Register32 // 0x50
	BLK1_RDATA7 volatile.Register32 // 0x54
	BLK2_RDATA0 volatile.Register32 // 0x58
	BLK2_RDATA1 volatile.Register32 // 0x5C
	BLK2_RDATA2 volatile.Register32 // 0x60
	BLK2_RDATA3 volatile.Register32 // 0x64
	BLK2_RDATA4 volatile.Register32 // 0x68
	BLK2_RDATA5 volatile.Register32 // 0x6C
	BLK2_RDATA6 volatile.Register32 // 0x70
	BLK2_RDATA7 volatile.Register32 // 0x74
	BLK3_RDATA0 volatile.Register32 // 0x78
	BLK3_RDATA1 volatile.Register32 // 0x7C
	BLK3_RDATA2 volatile.Register32 // 0x80
	BLK3_RDATA3 volatile.Register32 // 0x84
	BLK3_RDATA4 volatile.Register32 // 0x88
	BLK3_RDATA5 volatile.Register32 // 0x8C
	BLK3_RDATA6 volatile.Register32 // 0x90
	BLK3_RDATA7 volatile.Register32 // 0x94
	BLK1_WDATA0 volatile.Register32 // 0x98
	BLK1_WDATA1 volatile.Register32 // 0x9C
	BLK1_WDATA2 volatile.Register32 // 0xA0
	BLK1_WDATA3 volatile.Register32 // 0xA4
	BLK1_WDATA4 volatile.Register32 // 0xA8
	BLK1_WDATA5 volatile.Register32 // 0xAC
	BLK1_WDATA6 volatile.Register32 // 0xB0
	BLK1_WDATA7 volatile.Register32 // 0xB4
	BLK2_WDATA0 volatile.Register32 // 0xB8
	BLK2_WDATA1 volatile.Register32 // 0xBC
	BLK2_WDATA2 volatile.Register32 // 0xC0
	BLK2_WDATA3 volatile.Register32 // 0xC4
	BLK2_WDATA4 volatile.Register32 // 0xC8
	BLK2_WDATA5 volatile.Register32 // 0xCC
	BLK2_WDATA6 volatile.Register32 // 0xD0
	BLK2_WDATA7 volatile.Register32 // 0xD4
	BLK3_WDATA0 volatile.Register32 // 0xD8
	BLK3_WDATA1 volatile.Register32 // 0xDC
	BLK3_WDATA2 volatile.Register32 // 0xE0
	BLK3_WDATA3 volatile.Register32 // 0xE4
	BLK3_WDATA4 volatile.Register32 // 0xE8
	BLK3_WDATA5 volatile.Register32 // 0xEC
	BLK3_WDATA6 volatile.Register32 // 0xF0
	BLK3_WDATA7 volatile.Register32 // 0xF4
	CLK         volatile.Register32 // 0xF8
	CONF        volatile.Register32 // 0xFC
	STATUS      volatile.Register32 // 0x100
	CMD         volatile.Register32 // 0x104
	INT_RAW     volatile.Register32 // 0x108
	INT_ST      volatile.Register32 // 0x10C
	INT_ENA     volatile.Register32 // 0x110
	INT_CLR     volatile.Register32 // 0x114
	DAC_CONF    volatile.Register32 // 0x118
	DEC_STATUS  volatile.Register32 // 0x11C
	_           [220]byte
	DATE        volatile.Register32 // 0x1FC
}

// EFUSE.BLK0_RDATA0: EFUSE_BLK0_RDATA0
func (o *EFUSE_Type) SetBLK0_RDATA0_RD_FLASH_CRYPT_CNT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA0.Reg, volatile.LoadUint32(&o.BLK0_RDATA0.Reg)&^(0x7f00000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_RDATA0_RD_FLASH_CRYPT_CNT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA0.Reg) & 0x7f00000) >> 20
}
func (o *EFUSE_Type) SetBLK0_RDATA0_RD_EFUSE_RD_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA0.Reg, volatile.LoadUint32(&o.BLK0_RDATA0.Reg)&^(0xf0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_RDATA0_RD_EFUSE_RD_DIS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA0.Reg) & 0xf0000) >> 16
}

// EFUSE.BLK0_RDATA1: EFUSE_BLK0_RDATA1
func (o *EFUSE_Type) SetBLK0_RDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK0_RDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA1.Reg)
}

// EFUSE.BLK0_RDATA2: EFUSE_BLK0_RDATA2
func (o *EFUSE_Type) SetBLK0_RDATA2_RD_WIFI_MAC_CRC_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA2.Reg, volatile.LoadUint32(&o.BLK0_RDATA2.Reg)&^(0xffffff)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA2_RD_WIFI_MAC_CRC_HIGH() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA2.Reg) & 0xffffff
}

// EFUSE.BLK0_RDATA3: EFUSE_BLK0_RDATA3
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_VER_REV1(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_VER_REV1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x2000)|value<<13)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x2000) >> 13
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x1000)|value<<12)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x1000) >> 12
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_VER_PKG(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0xe00)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_VER_PKG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0xe00) >> 9
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_SPI_PAD_CONFIG_HD(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x1f0)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_SPI_PAD_CONFIG_HD() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x1f0) >> 4
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_VER_DIS_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_VER_DIS_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_VER_32PAD(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_VER_32PAD() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_VER_DIS_BT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_VER_DIS_BT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetBLK0_RDATA3_RD_CHIP_VER_DIS_APP_CPU(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA3.Reg, volatile.LoadUint32(&o.BLK0_RDATA3.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA3_RD_CHIP_VER_DIS_APP_CPU() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA3.Reg) & 0x1
}

// EFUSE.BLK0_RDATA4: EFUSE_BLK0_RDATA4
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_SDIO_FORCE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_SDIO_FORCE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x10000) >> 16
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_SDIO_TIEH(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_SDIO_TIEH() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_XPD_SDIO_REG(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x4000)|value<<14)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_XPD_SDIO_REG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x4000) >> 14
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_ADC_VREF(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x1f00)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_ADC_VREF() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x1f00) >> 8
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_SDIO_DREFL(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x3000)|value<<12)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_SDIO_DREFL() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x3000) >> 12
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_SDIO_DREFM(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0xc00)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_SDIO_DREFM() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0xc00) >> 10
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_SDIO_DREFH(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0x300)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_SDIO_DREFH() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0x300) >> 8
}
func (o *EFUSE_Type) SetBLK0_RDATA4_RD_CK8M_FREQ(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA4.Reg, volatile.LoadUint32(&o.BLK0_RDATA4.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA4_RD_CK8M_FREQ() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA4.Reg) & 0xff
}

// EFUSE.BLK0_RDATA5: EFUSE_BLK0_RDATA5
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_FLASH_CRYPT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0xf0000000)|value<<28)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_FLASH_CRYPT_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0xf0000000) >> 28
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_INST_CONFIG(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0xff00000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_INST_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0xff00000) >> 20
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_SPI_PAD_CONFIG_D(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x7c00)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_SPI_PAD_CONFIG_D() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x7c00) >> 10
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_SPI_PAD_CONFIG_Q(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x3e0)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_SPI_PAD_CONFIG_Q() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x3e0) >> 5
}
func (o *EFUSE_Type) SetBLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA5.Reg, volatile.LoadUint32(&o.BLK0_RDATA5.Reg)&^(0x1f)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA5.Reg) & 0x1f
}

// EFUSE.BLK0_RDATA6: EFUSE_BLK0_RDATA6
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_KEY_STATUS(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x400)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_KEY_STATUS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x400) >> 10
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_DL_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x200)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_DL_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x200) >> 9
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_DL_DECRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x100)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_DL_DECRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x100) >> 8
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_DL_ENCRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x80)|value<<7)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_DL_ENCRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x80) >> 7
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_JTAG(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x40)|value<<6)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_JTAG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x40) >> 6
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_ABS_DONE_1(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x20)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_ABS_DONE_1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x20) >> 5
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_ABS_DONE_0(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x10)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_ABS_DONE_0() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x10) >> 4
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_DISABLE_SDIO_HOST(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_DISABLE_SDIO_HOST() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_RDATA6_RD_CODING_SCHEME(value uint32) {
	volatile.StoreUint32(&o.BLK0_RDATA6.Reg, volatile.LoadUint32(&o.BLK0_RDATA6.Reg)&^(0x3)|value)
}
func (o *EFUSE_Type) GetBLK0_RDATA6_RD_CODING_SCHEME() uint32 {
	return volatile.LoadUint32(&o.BLK0_RDATA6.Reg) & 0x3
}

// EFUSE.BLK0_WDATA0: EFUSE_BLK0_WDATA0
func (o *EFUSE_Type) SetBLK0_WDATA0_FLASH_CRYPT_CNT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA0.Reg, volatile.LoadUint32(&o.BLK0_WDATA0.Reg)&^(0x7f00000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_WDATA0_FLASH_CRYPT_CNT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA0.Reg) & 0x7f00000) >> 20
}
func (o *EFUSE_Type) SetBLK0_WDATA0_RD_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA0.Reg, volatile.LoadUint32(&o.BLK0_WDATA0.Reg)&^(0xf0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_WDATA0_RD_DIS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA0.Reg) & 0xf0000) >> 16
}
func (o *EFUSE_Type) SetBLK0_WDATA0_WR_DIS(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA0.Reg, volatile.LoadUint32(&o.BLK0_WDATA0.Reg)&^(0xffff)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA0_WR_DIS() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA0.Reg) & 0xffff
}

// EFUSE.BLK0_WDATA1: EFUSE_BLK0_WDATA1
func (o *EFUSE_Type) SetBLK0_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK0_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA1.Reg)
}

// EFUSE.BLK0_WDATA2: EFUSE_BLK0_WDATA2
func (o *EFUSE_Type) SetBLK0_WDATA2_WIFI_MAC_CRC_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA2.Reg, volatile.LoadUint32(&o.BLK0_WDATA2.Reg)&^(0xffffff)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA2_WIFI_MAC_CRC_HIGH() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA2.Reg) & 0xffffff
}

// EFUSE.BLK0_WDATA3: EFUSE_BLK0_WDATA3
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_VER_REV1(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_VER_REV1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_CPU_FREQ_RATED(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x2000)|value<<13)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_CPU_FREQ_RATED() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x2000) >> 13
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_CPU_FREQ_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x1000)|value<<12)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_CPU_FREQ_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x1000) >> 12
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_VER_PKG(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0xe00)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_VER_PKG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0xe00) >> 9
}
func (o *EFUSE_Type) SetBLK0_WDATA3_SPI_PAD_CONFIG_HD(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x1f0)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_SPI_PAD_CONFIG_HD() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x1f0) >> 4
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_VER_DIS_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_VER_DIS_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_VER_32PAD(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_VER_32PAD() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_VER_DIS_BT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_VER_DIS_BT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetBLK0_WDATA3_CHIP_VER_DIS_APP_CPU(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA3.Reg, volatile.LoadUint32(&o.BLK0_WDATA3.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA3_CHIP_VER_DIS_APP_CPU() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA3.Reg) & 0x1
}

// EFUSE.BLK0_WDATA4: EFUSE_BLK0_WDATA4
func (o *EFUSE_Type) SetBLK0_WDATA4_SDIO_FORCE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_SDIO_FORCE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x10000) >> 16
}
func (o *EFUSE_Type) SetBLK0_WDATA4_SDIO_TIEH(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x8000)|value<<15)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_SDIO_TIEH() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x8000) >> 15
}
func (o *EFUSE_Type) SetBLK0_WDATA4_XPD_SDIO_REG(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x4000)|value<<14)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_XPD_SDIO_REG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x4000) >> 14
}
func (o *EFUSE_Type) SetBLK0_WDATA4_ADC_VREF(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x1f00)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_ADC_VREF() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x1f00) >> 8
}
func (o *EFUSE_Type) SetBLK0_WDATA4_SDIO_DREFL(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x3000)|value<<12)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_SDIO_DREFL() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x3000) >> 12
}
func (o *EFUSE_Type) SetBLK0_WDATA4_SDIO_DREFM(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0xc00)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_SDIO_DREFM() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0xc00) >> 10
}
func (o *EFUSE_Type) SetBLK0_WDATA4_SDIO_DREFH(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0x300)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_SDIO_DREFH() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0x300) >> 8
}
func (o *EFUSE_Type) SetBLK0_WDATA4_CK8M_FREQ(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA4.Reg, volatile.LoadUint32(&o.BLK0_WDATA4.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA4_CK8M_FREQ() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA4.Reg) & 0xff
}

// EFUSE.BLK0_WDATA5: EFUSE_BLK0_WDATA5
func (o *EFUSE_Type) SetBLK0_WDATA5_FLASH_CRYPT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0xf0000000)|value<<28)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_FLASH_CRYPT_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0xf0000000) >> 28
}
func (o *EFUSE_Type) SetBLK0_WDATA5_INST_CONFIG(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0xff00000)|value<<20)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_INST_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0xff00000) >> 20
}
func (o *EFUSE_Type) SetBLK0_WDATA5_SPI_PAD_CONFIG_D(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x7c00)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_SPI_PAD_CONFIG_D() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x7c00) >> 10
}
func (o *EFUSE_Type) SetBLK0_WDATA5_SPI_PAD_CONFIG_Q(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x3e0)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_SPI_PAD_CONFIG_Q() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x3e0) >> 5
}
func (o *EFUSE_Type) SetBLK0_WDATA5_SPI_PAD_CONFIG_CLK(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA5.Reg, volatile.LoadUint32(&o.BLK0_WDATA5.Reg)&^(0x1f)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA5_SPI_PAD_CONFIG_CLK() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA5.Reg) & 0x1f
}

// EFUSE.BLK0_WDATA6: EFUSE_BLK0_WDATA6
func (o *EFUSE_Type) SetBLK0_WDATA6_KEY_STATUS(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x400)|value<<10)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_KEY_STATUS() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x400) >> 10
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_DL_CACHE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x200)|value<<9)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_DL_CACHE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x200) >> 9
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_DL_DECRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x100)|value<<8)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_DL_DECRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x100) >> 8
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_DL_ENCRYPT(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x80)|value<<7)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_DL_ENCRYPT() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x80) >> 7
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_JTAG(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x40)|value<<6)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_JTAG() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x40) >> 6
}
func (o *EFUSE_Type) SetBLK0_WDATA6_ABS_DONE_1(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x20)|value<<5)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_ABS_DONE_1() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x20) >> 5
}
func (o *EFUSE_Type) SetBLK0_WDATA6_ABS_DONE_0(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x10)|value<<4)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_ABS_DONE_0() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x10) >> 4
}
func (o *EFUSE_Type) SetBLK0_WDATA6_DISABLE_SDIO_HOST(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x8)|value<<3)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_DISABLE_SDIO_HOST() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x8) >> 3
}
func (o *EFUSE_Type) SetBLK0_WDATA6_CONSOLE_DEBUG_DISABLE(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x4)|value<<2)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_CONSOLE_DEBUG_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x4) >> 2
}
func (o *EFUSE_Type) SetBLK0_WDATA6_CODING_SCHEME(value uint32) {
	volatile.StoreUint32(&o.BLK0_WDATA6.Reg, volatile.LoadUint32(&o.BLK0_WDATA6.Reg)&^(0x3)|value)
}
func (o *EFUSE_Type) GetBLK0_WDATA6_CODING_SCHEME() uint32 {
	return volatile.LoadUint32(&o.BLK0_WDATA6.Reg) & 0x3
}

// EFUSE.BLK1_RDATA0: EFUSE_BLK1_RDATA0
func (o *EFUSE_Type) SetBLK1_RDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA0.Reg)
}

// EFUSE.BLK1_RDATA1: EFUSE_BLK1_RDATA1
func (o *EFUSE_Type) SetBLK1_RDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA1.Reg)
}

// EFUSE.BLK1_RDATA2: EFUSE_BLK1_RDATA2
func (o *EFUSE_Type) SetBLK1_RDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA2.Reg)
}

// EFUSE.BLK1_RDATA3: EFUSE_BLK1_RDATA3
func (o *EFUSE_Type) SetBLK1_RDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA3.Reg)
}

// EFUSE.BLK1_RDATA4: EFUSE_BLK1_RDATA4
func (o *EFUSE_Type) SetBLK1_RDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA4.Reg)
}

// EFUSE.BLK1_RDATA5: EFUSE_BLK1_RDATA5
func (o *EFUSE_Type) SetBLK1_RDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA5.Reg)
}

// EFUSE.BLK1_RDATA6: EFUSE_BLK1_RDATA6
func (o *EFUSE_Type) SetBLK1_RDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA6.Reg)
}

// EFUSE.BLK1_RDATA7: EFUSE_BLK1_RDATA7
func (o *EFUSE_Type) SetBLK1_RDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK1_RDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_RDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK1_RDATA7.Reg)
}

// EFUSE.BLK2_RDATA0: EFUSE_BLK2_RDATA0
func (o *EFUSE_Type) SetBLK2_RDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA0.Reg)
}

// EFUSE.BLK2_RDATA1: EFUSE_BLK2_RDATA1
func (o *EFUSE_Type) SetBLK2_RDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA1.Reg)
}

// EFUSE.BLK2_RDATA2: EFUSE_BLK2_RDATA2
func (o *EFUSE_Type) SetBLK2_RDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA2.Reg)
}

// EFUSE.BLK2_RDATA3: EFUSE_BLK2_RDATA3
func (o *EFUSE_Type) SetBLK2_RDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA3.Reg)
}

// EFUSE.BLK2_RDATA4: EFUSE_BLK2_RDATA4
func (o *EFUSE_Type) SetBLK2_RDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA4.Reg)
}

// EFUSE.BLK2_RDATA5: EFUSE_BLK2_RDATA5
func (o *EFUSE_Type) SetBLK2_RDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA5.Reg)
}

// EFUSE.BLK2_RDATA6: EFUSE_BLK2_RDATA6
func (o *EFUSE_Type) SetBLK2_RDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA6.Reg)
}

// EFUSE.BLK2_RDATA7: EFUSE_BLK2_RDATA7
func (o *EFUSE_Type) SetBLK2_RDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK2_RDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_RDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK2_RDATA7.Reg)
}

// EFUSE.BLK3_RDATA0: EFUSE_BLK3_RDATA0
func (o *EFUSE_Type) SetBLK3_RDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA0.Reg)
}

// EFUSE.BLK3_RDATA1: EFUSE_BLK3_RDATA1
func (o *EFUSE_Type) SetBLK3_RDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA1.Reg)
}

// EFUSE.BLK3_RDATA2: EFUSE_BLK3_RDATA2
func (o *EFUSE_Type) SetBLK3_RDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA2.Reg)
}

// EFUSE.BLK3_RDATA3: EFUSE_BLK3_RDATA3
func (o *EFUSE_Type) SetBLK3_RDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA3.Reg)
}
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC2_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0xff800000)|value<<23)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC2_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0xff800000) >> 23
}
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC2_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0x7f0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC2_TP_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0x7f0000) >> 16
}
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC1_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0xff80)|value<<7)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC1_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0xff80) >> 7
}
func (o *EFUSE_Type) SetBLK3_RDATA3_RD_ADC1_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA3.Reg, volatile.LoadUint32(&o.BLK3_RDATA3.Reg)&^(0x7f)|value)
}
func (o *EFUSE_Type) GetBLK3_RDATA3_RD_ADC1_TP_LOW() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA3.Reg) & 0x7f
}

// EFUSE.BLK3_RDATA4: EFUSE_BLK3_RDATA4
func (o *EFUSE_Type) SetBLK3_RDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA4.Reg)
}

// EFUSE.BLK3_RDATA5: EFUSE_BLK3_RDATA5
func (o *EFUSE_Type) SetBLK3_RDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA5.Reg)
}

// EFUSE.BLK3_RDATA6: EFUSE_BLK3_RDATA6
func (o *EFUSE_Type) SetBLK3_RDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA6.Reg)
}

// EFUSE.BLK3_RDATA7: EFUSE_BLK3_RDATA7
func (o *EFUSE_Type) SetBLK3_RDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK3_RDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_RDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK3_RDATA7.Reg)
}

// EFUSE.BLK1_WDATA0: EFUSE_BLK1_WDATA0
func (o *EFUSE_Type) SetBLK1_WDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA0.Reg)
}

// EFUSE.BLK1_WDATA1: EFUSE_BLK1_WDATA1
func (o *EFUSE_Type) SetBLK1_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA1.Reg)
}

// EFUSE.BLK1_WDATA2: EFUSE_BLK1_WDATA2
func (o *EFUSE_Type) SetBLK1_WDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA2.Reg)
}

// EFUSE.BLK1_WDATA3: EFUSE_BLK1_WDATA3
func (o *EFUSE_Type) SetBLK1_WDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA3.Reg)
}

// EFUSE.BLK1_WDATA4: EFUSE_BLK1_WDATA4
func (o *EFUSE_Type) SetBLK1_WDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA4.Reg)
}

// EFUSE.BLK1_WDATA5: EFUSE_BLK1_WDATA5
func (o *EFUSE_Type) SetBLK1_WDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA5.Reg)
}

// EFUSE.BLK1_WDATA6: EFUSE_BLK1_WDATA6
func (o *EFUSE_Type) SetBLK1_WDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA6.Reg)
}

// EFUSE.BLK1_WDATA7: EFUSE_BLK1_WDATA7
func (o *EFUSE_Type) SetBLK1_WDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK1_WDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK1_WDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK1_WDATA7.Reg)
}

// EFUSE.BLK2_WDATA0: EFUSE_BLK2_WDATA0
func (o *EFUSE_Type) SetBLK2_WDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA0.Reg)
}

// EFUSE.BLK2_WDATA1: EFUSE_BLK2_WDATA1
func (o *EFUSE_Type) SetBLK2_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA1.Reg)
}

// EFUSE.BLK2_WDATA2: EFUSE_BLK2_WDATA2
func (o *EFUSE_Type) SetBLK2_WDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA2.Reg)
}

// EFUSE.BLK2_WDATA3: EFUSE_BLK2_WDATA3
func (o *EFUSE_Type) SetBLK2_WDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA3.Reg)
}

// EFUSE.BLK2_WDATA4: EFUSE_BLK2_WDATA4
func (o *EFUSE_Type) SetBLK2_WDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA4.Reg)
}

// EFUSE.BLK2_WDATA5: EFUSE_BLK2_WDATA5
func (o *EFUSE_Type) SetBLK2_WDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA5.Reg)
}

// EFUSE.BLK2_WDATA6: EFUSE_BLK2_WDATA6
func (o *EFUSE_Type) SetBLK2_WDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA6.Reg)
}

// EFUSE.BLK2_WDATA7: EFUSE_BLK2_WDATA7
func (o *EFUSE_Type) SetBLK2_WDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK2_WDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK2_WDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK2_WDATA7.Reg)
}

// EFUSE.BLK3_WDATA0: EFUSE_BLK3_WDATA0
func (o *EFUSE_Type) SetBLK3_WDATA0(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA0.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA0() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA0.Reg)
}

// EFUSE.BLK3_WDATA1: EFUSE_BLK3_WDATA1
func (o *EFUSE_Type) SetBLK3_WDATA1(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA1.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA1() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA1.Reg)
}

// EFUSE.BLK3_WDATA2: EFUSE_BLK3_WDATA2
func (o *EFUSE_Type) SetBLK3_WDATA2(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA2.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA2() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA2.Reg)
}

// EFUSE.BLK3_WDATA3: EFUSE_BLK3_WDATA3
func (o *EFUSE_Type) SetBLK3_WDATA3(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA3() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA3.Reg)
}
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC2_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0xff800000)|value<<23)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC2_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0xff800000) >> 23
}
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC2_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0x7f0000)|value<<16)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC2_TP_LOW() uint32 {
	return (volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0x7f0000) >> 16
}
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC1_TP_HIGH(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0xff80)|value<<7)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC1_TP_HIGH() uint32 {
	return (volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0xff80) >> 7
}
func (o *EFUSE_Type) SetBLK3_WDATA3_ADC1_TP_LOW(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA3.Reg, volatile.LoadUint32(&o.BLK3_WDATA3.Reg)&^(0x7f)|value)
}
func (o *EFUSE_Type) GetBLK3_WDATA3_ADC1_TP_LOW() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA3.Reg) & 0x7f
}

// EFUSE.BLK3_WDATA4: EFUSE_BLK3_WDATA4
func (o *EFUSE_Type) SetBLK3_WDATA4(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA4.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA4() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA4.Reg)
}

// EFUSE.BLK3_WDATA5: EFUSE_BLK3_WDATA5
func (o *EFUSE_Type) SetBLK3_WDATA5(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA5.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA5() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA5.Reg)
}

// EFUSE.BLK3_WDATA6: EFUSE_BLK3_WDATA6
func (o *EFUSE_Type) SetBLK3_WDATA6(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA6.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA6() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA6.Reg)
}

// EFUSE.BLK3_WDATA7: EFUSE_BLK3_WDATA7
func (o *EFUSE_Type) SetBLK3_WDATA7(value uint32) {
	volatile.StoreUint32(&o.BLK3_WDATA7.Reg, value)
}
func (o *EFUSE_Type) GetBLK3_WDATA7() uint32 {
	return volatile.LoadUint32(&o.BLK3_WDATA7.Reg)
}

// EFUSE.CLK: EFUSE_CLK
func (o *EFUSE_Type) SetCLK_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetCLK_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK.Reg) & 0x10000) >> 16
}
func (o *EFUSE_Type) SetCLK_CLK_SEL1(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0xff00)|value<<8)
}
func (o *EFUSE_Type) GetCLK_CLK_SEL1() uint32 {
	return (volatile.LoadUint32(&o.CLK.Reg) & 0xff00) >> 8
}
func (o *EFUSE_Type) SetCLK_CLK_SEL0(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetCLK_CLK_SEL0() uint32 {
	return volatile.LoadUint32(&o.CLK.Reg) & 0xff
}

// EFUSE.CONF: EFUSE_CONF
func (o *EFUSE_Type) SetCONF_FORCE_NO_WR_RD_DIS(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x10000)|value<<16)
}
func (o *EFUSE_Type) GetCONF_FORCE_NO_WR_RD_DIS() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x10000) >> 16
}
func (o *EFUSE_Type) SetCONF_OP_CODE(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0xffff)|value)
}
func (o *EFUSE_Type) GetCONF_OP_CODE() uint32 {
	return volatile.LoadUint32(&o.CONF.Reg) & 0xffff
}

// EFUSE.STATUS: EFUSE_STATUS
func (o *EFUSE_Type) SetSTATUS(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, value)
}
func (o *EFUSE_Type) GetSTATUS() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg)
}

// EFUSE.CMD: EFUSE_CMD
func (o *EFUSE_Type) SetCMD_PGM_CMD(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetCMD_PGM_CMD() uint32 {
	return (volatile.LoadUint32(&o.CMD.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetCMD_READ_CMD(value uint32) {
	volatile.StoreUint32(&o.CMD.Reg, volatile.LoadUint32(&o.CMD.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetCMD_READ_CMD() uint32 {
	return volatile.LoadUint32(&o.CMD.Reg) & 0x1
}

// EFUSE.INT_RAW: EFUSE_INT_RAW
func (o *EFUSE_Type) SetINT_RAW_PGM_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_RAW_PGM_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetINT_RAW_READ_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_RAW_READ_DONE_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// EFUSE.INT_ST: EFUSE_INT_ST
func (o *EFUSE_Type) SetINT_ST_PGM_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_ST_PGM_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetINT_ST_READ_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_ST_READ_DONE_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// EFUSE.INT_ENA: EFUSE_INT_ENA
func (o *EFUSE_Type) SetINT_ENA_PGM_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_ENA_PGM_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetINT_ENA_READ_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_ENA_READ_DONE_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// EFUSE.INT_CLR: EFUSE_INT_CLR
func (o *EFUSE_Type) SetINT_CLR_PGM_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *EFUSE_Type) GetINT_CLR_PGM_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *EFUSE_Type) SetINT_CLR_READ_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *EFUSE_Type) GetINT_CLR_READ_DONE_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// EFUSE.DAC_CONF: EFUSE_DAC_CONF
func (o *EFUSE_Type) SetDAC_CONF_DAC_CLK_PAD_SEL(value uint32) {
	volatile.StoreUint32(&o.DAC_CONF.Reg, volatile.LoadUint32(&o.DAC_CONF.Reg)&^(0x100)|value<<8)
}
func (o *EFUSE_Type) GetDAC_CONF_DAC_CLK_PAD_SEL() uint32 {
	return (volatile.LoadUint32(&o.DAC_CONF.Reg) & 0x100) >> 8
}
func (o *EFUSE_Type) SetDAC_CONF_DAC_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.DAC_CONF.Reg, volatile.LoadUint32(&o.DAC_CONF.Reg)&^(0xff)|value)
}
func (o *EFUSE_Type) GetDAC_CONF_DAC_CLK_DIV() uint32 {
	return volatile.LoadUint32(&o.DAC_CONF.Reg) & 0xff
}

// EFUSE.DEC_STATUS: EFUSE_DEC_STATUS
func (o *EFUSE_Type) SetDEC_STATUS_DEC_WARNINGS(value uint32) {
	volatile.StoreUint32(&o.DEC_STATUS.Reg, volatile.LoadUint32(&o.DEC_STATUS.Reg)&^(0xfff)|value)
}
func (o *EFUSE_Type) GetDEC_STATUS_DEC_WARNINGS() uint32 {
	return volatile.LoadUint32(&o.DEC_STATUS.Reg) & 0xfff
}

// EFUSE.DATE: EFUSE_DATE
func (o *EFUSE_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *EFUSE_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type RTCMEM1_Type struct {
}

type RSA_Type struct {
}

type PCNT_Type struct {
	U0_CONF0  volatile.Register32 // 0x0
	U0_CONF1  volatile.Register32 // 0x4
	U0_CONF2  volatile.Register32 // 0x8
	U1_CONF0  volatile.Register32 // 0xC
	U1_CONF1  volatile.Register32 // 0x10
	U1_CONF2  volatile.Register32 // 0x14
	U2_CONF0  volatile.Register32 // 0x18
	U2_CONF1  volatile.Register32 // 0x1C
	U2_CONF2  volatile.Register32 // 0x20
	U3_CONF0  volatile.Register32 // 0x24
	U3_CONF1  volatile.Register32 // 0x28
	U3_CONF2  volatile.Register32 // 0x2C
	U4_CONF0  volatile.Register32 // 0x30
	U4_CONF1  volatile.Register32 // 0x34
	U4_CONF2  volatile.Register32 // 0x38
	U5_CONF0  volatile.Register32 // 0x3C
	U5_CONF1  volatile.Register32 // 0x40
	U5_CONF2  volatile.Register32 // 0x44
	U6_CONF0  volatile.Register32 // 0x48
	U6_CONF1  volatile.Register32 // 0x4C
	U6_CONF2  volatile.Register32 // 0x50
	U7_CONF0  volatile.Register32 // 0x54
	U7_CONF1  volatile.Register32 // 0x58
	U7_CONF2  volatile.Register32 // 0x5C
	U0_CNT    volatile.Register32 // 0x60
	U1_CNT    volatile.Register32 // 0x64
	U2_CNT    volatile.Register32 // 0x68
	U3_CNT    volatile.Register32 // 0x6C
	U4_CNT    volatile.Register32 // 0x70
	U5_CNT    volatile.Register32 // 0x74
	U6_CNT    volatile.Register32 // 0x78
	U7_CNT    volatile.Register32 // 0x7C
	INT_RAW   volatile.Register32 // 0x80
	INT_ST    volatile.Register32 // 0x84
	INT_ENA   volatile.Register32 // 0x88
	INT_CLR   volatile.Register32 // 0x8C
	U0_STATUS volatile.Register32 // 0x90
	U1_STATUS volatile.Register32 // 0x94
	U2_STATUS volatile.Register32 // 0x98
	U3_STATUS volatile.Register32 // 0x9C
	U4_STATUS volatile.Register32 // 0xA0
	U5_STATUS volatile.Register32 // 0xA4
	U6_STATUS volatile.Register32 // 0xA8
	U7_STATUS volatile.Register32 // 0xAC
	CTRL      volatile.Register32 // 0xB0
	_         [72]byte
	DATE      volatile.Register32 // 0xFC
}

// PCNT.U0_CONF0: PCNT_U0_CONF0
func (o *PCNT_Type) SetU0_CONF0_CH1_LCTRL_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_LCTRL_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU0_CONF0_CH1_HCTRL_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_HCTRL_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU0_CONF0_CH1_POS_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_POS_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU0_CONF0_CH1_NEG_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU0_CONF0_CH1_NEG_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU0_CONF0_CH0_LCTRL_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_LCTRL_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU0_CONF0_CH0_HCTRL_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_HCTRL_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU0_CONF0_CH0_POS_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_POS_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU0_CONF0_CH0_NEG_MODE_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU0_CONF0_CH0_NEG_MODE_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU0_CONF0_THR_THRES1_EN_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU0_CONF0_THR_THRES1_EN_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU0_CONF0_THR_THRES0_EN_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU0_CONF0_THR_THRES0_EN_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU0_CONF0_THR_L_LIM_EN_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU0_CONF0_THR_L_LIM_EN_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU0_CONF0_THR_H_LIM_EN_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU0_CONF0_THR_H_LIM_EN_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU0_CONF0_THR_ZERO_EN_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU0_CONF0_THR_ZERO_EN_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU0_CONF0_FILTER_EN_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU0_CONF0_FILTER_EN_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU0_CONF0_FILTER_THRES_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF0.Reg, volatile.LoadUint32(&o.U0_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU0_CONF0_FILTER_THRES_U0() uint32 {
	return volatile.LoadUint32(&o.U0_CONF0.Reg) & 0x3ff
}

// PCNT.U0_CONF1: PCNT_U0_CONF1
func (o *PCNT_Type) SetU0_CONF1_CNT_THRES1_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF1.Reg, volatile.LoadUint32(&o.U0_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU0_CONF1_CNT_THRES1_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU0_CONF1_CNT_THRES0_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF1.Reg, volatile.LoadUint32(&o.U0_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU0_CONF1_CNT_THRES0_U0() uint32 {
	return volatile.LoadUint32(&o.U0_CONF1.Reg) & 0xffff
}

// PCNT.U0_CONF2: PCNT_U0_CONF2
func (o *PCNT_Type) SetU0_CONF2_CNT_L_LIM_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF2.Reg, volatile.LoadUint32(&o.U0_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU0_CONF2_CNT_L_LIM_U0() uint32 {
	return (volatile.LoadUint32(&o.U0_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU0_CONF2_CNT_H_LIM_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CONF2.Reg, volatile.LoadUint32(&o.U0_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU0_CONF2_CNT_H_LIM_U0() uint32 {
	return volatile.LoadUint32(&o.U0_CONF2.Reg) & 0xffff
}

// PCNT.U1_CONF0: PCNT_U1_CONF0
func (o *PCNT_Type) SetU1_CONF0_CH1_LCTRL_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_LCTRL_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU1_CONF0_CH1_HCTRL_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_HCTRL_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU1_CONF0_CH1_POS_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_POS_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU1_CONF0_CH1_NEG_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU1_CONF0_CH1_NEG_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU1_CONF0_CH0_LCTRL_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_LCTRL_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU1_CONF0_CH0_HCTRL_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_HCTRL_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU1_CONF0_CH0_POS_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_POS_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU1_CONF0_CH0_NEG_MODE_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU1_CONF0_CH0_NEG_MODE_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU1_CONF0_THR_THRES1_EN_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU1_CONF0_THR_THRES1_EN_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU1_CONF0_THR_THRES0_EN_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU1_CONF0_THR_THRES0_EN_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU1_CONF0_THR_L_LIM_EN_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU1_CONF0_THR_L_LIM_EN_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU1_CONF0_THR_H_LIM_EN_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU1_CONF0_THR_H_LIM_EN_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU1_CONF0_THR_ZERO_EN_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU1_CONF0_THR_ZERO_EN_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU1_CONF0_FILTER_EN_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU1_CONF0_FILTER_EN_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU1_CONF0_FILTER_THRES_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF0.Reg, volatile.LoadUint32(&o.U1_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU1_CONF0_FILTER_THRES_U1() uint32 {
	return volatile.LoadUint32(&o.U1_CONF0.Reg) & 0x3ff
}

// PCNT.U1_CONF1: PCNT_U1_CONF1
func (o *PCNT_Type) SetU1_CONF1_CNT_THRES1_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF1.Reg, volatile.LoadUint32(&o.U1_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU1_CONF1_CNT_THRES1_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU1_CONF1_CNT_THRES0_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF1.Reg, volatile.LoadUint32(&o.U1_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU1_CONF1_CNT_THRES0_U1() uint32 {
	return volatile.LoadUint32(&o.U1_CONF1.Reg) & 0xffff
}

// PCNT.U1_CONF2: PCNT_U1_CONF2
func (o *PCNT_Type) SetU1_CONF2_CNT_L_LIM_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF2.Reg, volatile.LoadUint32(&o.U1_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU1_CONF2_CNT_L_LIM_U1() uint32 {
	return (volatile.LoadUint32(&o.U1_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU1_CONF2_CNT_H_LIM_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CONF2.Reg, volatile.LoadUint32(&o.U1_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU1_CONF2_CNT_H_LIM_U1() uint32 {
	return volatile.LoadUint32(&o.U1_CONF2.Reg) & 0xffff
}

// PCNT.U2_CONF0: PCNT_U2_CONF0
func (o *PCNT_Type) SetU2_CONF0_CH1_LCTRL_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_LCTRL_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU2_CONF0_CH1_HCTRL_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_HCTRL_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU2_CONF0_CH1_POS_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_POS_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU2_CONF0_CH1_NEG_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU2_CONF0_CH1_NEG_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU2_CONF0_CH0_LCTRL_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_LCTRL_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU2_CONF0_CH0_HCTRL_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_HCTRL_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU2_CONF0_CH0_POS_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_POS_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU2_CONF0_CH0_NEG_MODE_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU2_CONF0_CH0_NEG_MODE_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU2_CONF0_THR_THRES1_EN_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU2_CONF0_THR_THRES1_EN_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU2_CONF0_THR_THRES0_EN_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU2_CONF0_THR_THRES0_EN_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU2_CONF0_THR_L_LIM_EN_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU2_CONF0_THR_L_LIM_EN_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU2_CONF0_THR_H_LIM_EN_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU2_CONF0_THR_H_LIM_EN_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU2_CONF0_THR_ZERO_EN_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU2_CONF0_THR_ZERO_EN_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU2_CONF0_FILTER_EN_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU2_CONF0_FILTER_EN_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU2_CONF0_FILTER_THRES_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF0.Reg, volatile.LoadUint32(&o.U2_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU2_CONF0_FILTER_THRES_U2() uint32 {
	return volatile.LoadUint32(&o.U2_CONF0.Reg) & 0x3ff
}

// PCNT.U2_CONF1: PCNT_U2_CONF1
func (o *PCNT_Type) SetU2_CONF1_CNT_THRES1_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF1.Reg, volatile.LoadUint32(&o.U2_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU2_CONF1_CNT_THRES1_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU2_CONF1_CNT_THRES0_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF1.Reg, volatile.LoadUint32(&o.U2_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU2_CONF1_CNT_THRES0_U2() uint32 {
	return volatile.LoadUint32(&o.U2_CONF1.Reg) & 0xffff
}

// PCNT.U2_CONF2: PCNT_U2_CONF2
func (o *PCNT_Type) SetU2_CONF2_CNT_L_LIM_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF2.Reg, volatile.LoadUint32(&o.U2_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU2_CONF2_CNT_L_LIM_U2() uint32 {
	return (volatile.LoadUint32(&o.U2_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU2_CONF2_CNT_H_LIM_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CONF2.Reg, volatile.LoadUint32(&o.U2_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU2_CONF2_CNT_H_LIM_U2() uint32 {
	return volatile.LoadUint32(&o.U2_CONF2.Reg) & 0xffff
}

// PCNT.U3_CONF0: PCNT_U3_CONF0
func (o *PCNT_Type) SetU3_CONF0_CH1_LCTRL_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_LCTRL_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU3_CONF0_CH1_HCTRL_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_HCTRL_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU3_CONF0_CH1_POS_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_POS_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU3_CONF0_CH1_NEG_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU3_CONF0_CH1_NEG_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU3_CONF0_CH0_LCTRL_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_LCTRL_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU3_CONF0_CH0_HCTRL_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_HCTRL_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU3_CONF0_CH0_POS_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_POS_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU3_CONF0_CH0_NEG_MODE_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU3_CONF0_CH0_NEG_MODE_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU3_CONF0_THR_THRES1_EN_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU3_CONF0_THR_THRES1_EN_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU3_CONF0_THR_THRES0_EN_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU3_CONF0_THR_THRES0_EN_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU3_CONF0_THR_L_LIM_EN_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU3_CONF0_THR_L_LIM_EN_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU3_CONF0_THR_H_LIM_EN_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU3_CONF0_THR_H_LIM_EN_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU3_CONF0_THR_ZERO_EN_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU3_CONF0_THR_ZERO_EN_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU3_CONF0_FILTER_EN_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU3_CONF0_FILTER_EN_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU3_CONF0_FILTER_THRES_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF0.Reg, volatile.LoadUint32(&o.U3_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU3_CONF0_FILTER_THRES_U3() uint32 {
	return volatile.LoadUint32(&o.U3_CONF0.Reg) & 0x3ff
}

// PCNT.U3_CONF1: PCNT_U3_CONF1
func (o *PCNT_Type) SetU3_CONF1_CNT_THRES1_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF1.Reg, volatile.LoadUint32(&o.U3_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU3_CONF1_CNT_THRES1_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU3_CONF1_CNT_THRES0_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF1.Reg, volatile.LoadUint32(&o.U3_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU3_CONF1_CNT_THRES0_U3() uint32 {
	return volatile.LoadUint32(&o.U3_CONF1.Reg) & 0xffff
}

// PCNT.U3_CONF2: PCNT_U3_CONF2
func (o *PCNT_Type) SetU3_CONF2_CNT_L_LIM_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF2.Reg, volatile.LoadUint32(&o.U3_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU3_CONF2_CNT_L_LIM_U3() uint32 {
	return (volatile.LoadUint32(&o.U3_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU3_CONF2_CNT_H_LIM_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CONF2.Reg, volatile.LoadUint32(&o.U3_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU3_CONF2_CNT_H_LIM_U3() uint32 {
	return volatile.LoadUint32(&o.U3_CONF2.Reg) & 0xffff
}

// PCNT.U4_CONF0: PCNT_U4_CONF0
func (o *PCNT_Type) SetU4_CONF0_CH1_LCTRL_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_LCTRL_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU4_CONF0_CH1_HCTRL_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_HCTRL_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU4_CONF0_CH1_POS_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_POS_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU4_CONF0_CH1_NEG_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU4_CONF0_CH1_NEG_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU4_CONF0_CH0_LCTRL_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_LCTRL_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU4_CONF0_CH0_HCTRL_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_HCTRL_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU4_CONF0_CH0_POS_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_POS_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU4_CONF0_CH0_NEG_MODE_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU4_CONF0_CH0_NEG_MODE_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU4_CONF0_THR_THRES1_EN_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU4_CONF0_THR_THRES1_EN_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU4_CONF0_THR_THRES0_EN_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU4_CONF0_THR_THRES0_EN_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU4_CONF0_THR_L_LIM_EN_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU4_CONF0_THR_L_LIM_EN_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU4_CONF0_THR_H_LIM_EN_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU4_CONF0_THR_H_LIM_EN_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU4_CONF0_THR_ZERO_EN_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU4_CONF0_THR_ZERO_EN_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU4_CONF0_FILTER_EN_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU4_CONF0_FILTER_EN_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU4_CONF0_FILTER_THRES_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF0.Reg, volatile.LoadUint32(&o.U4_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU4_CONF0_FILTER_THRES_U4() uint32 {
	return volatile.LoadUint32(&o.U4_CONF0.Reg) & 0x3ff
}

// PCNT.U4_CONF1: PCNT_U4_CONF1
func (o *PCNT_Type) SetU4_CONF1_CNT_THRES1_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF1.Reg, volatile.LoadUint32(&o.U4_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU4_CONF1_CNT_THRES1_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU4_CONF1_CNT_THRES0_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF1.Reg, volatile.LoadUint32(&o.U4_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU4_CONF1_CNT_THRES0_U4() uint32 {
	return volatile.LoadUint32(&o.U4_CONF1.Reg) & 0xffff
}

// PCNT.U4_CONF2: PCNT_U4_CONF2
func (o *PCNT_Type) SetU4_CONF2_CNT_L_LIM_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF2.Reg, volatile.LoadUint32(&o.U4_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU4_CONF2_CNT_L_LIM_U4() uint32 {
	return (volatile.LoadUint32(&o.U4_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU4_CONF2_CNT_H_LIM_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CONF2.Reg, volatile.LoadUint32(&o.U4_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU4_CONF2_CNT_H_LIM_U4() uint32 {
	return volatile.LoadUint32(&o.U4_CONF2.Reg) & 0xffff
}

// PCNT.U5_CONF0: PCNT_U5_CONF0
func (o *PCNT_Type) SetU5_CONF0_CH1_LCTRL_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_LCTRL_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU5_CONF0_CH1_HCTRL_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_HCTRL_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU5_CONF0_CH1_POS_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_POS_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU5_CONF0_CH1_NEG_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU5_CONF0_CH1_NEG_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU5_CONF0_CH0_LCTRL_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_LCTRL_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU5_CONF0_CH0_HCTRL_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_HCTRL_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU5_CONF0_CH0_POS_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_POS_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU5_CONF0_CH0_NEG_MODE_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU5_CONF0_CH0_NEG_MODE_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU5_CONF0_THR_THRES1_EN_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU5_CONF0_THR_THRES1_EN_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU5_CONF0_THR_THRES0_EN_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU5_CONF0_THR_THRES0_EN_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU5_CONF0_THR_L_LIM_EN_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU5_CONF0_THR_L_LIM_EN_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU5_CONF0_THR_H_LIM_EN_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU5_CONF0_THR_H_LIM_EN_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU5_CONF0_THR_ZERO_EN_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU5_CONF0_THR_ZERO_EN_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU5_CONF0_FILTER_EN_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU5_CONF0_FILTER_EN_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU5_CONF0_FILTER_THRES_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF0.Reg, volatile.LoadUint32(&o.U5_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU5_CONF0_FILTER_THRES_U5() uint32 {
	return volatile.LoadUint32(&o.U5_CONF0.Reg) & 0x3ff
}

// PCNT.U5_CONF1: PCNT_U5_CONF1
func (o *PCNT_Type) SetU5_CONF1_CNT_THRES1_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF1.Reg, volatile.LoadUint32(&o.U5_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU5_CONF1_CNT_THRES1_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU5_CONF1_CNT_THRES0_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF1.Reg, volatile.LoadUint32(&o.U5_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU5_CONF1_CNT_THRES0_U5() uint32 {
	return volatile.LoadUint32(&o.U5_CONF1.Reg) & 0xffff
}

// PCNT.U5_CONF2: PCNT_U5_CONF2
func (o *PCNT_Type) SetU5_CONF2_CNT_L_LIM_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF2.Reg, volatile.LoadUint32(&o.U5_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU5_CONF2_CNT_L_LIM_U5() uint32 {
	return (volatile.LoadUint32(&o.U5_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU5_CONF2_CNT_H_LIM_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CONF2.Reg, volatile.LoadUint32(&o.U5_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU5_CONF2_CNT_H_LIM_U5() uint32 {
	return volatile.LoadUint32(&o.U5_CONF2.Reg) & 0xffff
}

// PCNT.U6_CONF0: PCNT_U6_CONF0
func (o *PCNT_Type) SetU6_CONF0_CH1_LCTRL_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_LCTRL_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU6_CONF0_CH1_HCTRL_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_HCTRL_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU6_CONF0_CH1_POS_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_POS_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU6_CONF0_CH1_NEG_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU6_CONF0_CH1_NEG_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU6_CONF0_CH0_LCTRL_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_LCTRL_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU6_CONF0_CH0_HCTRL_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_HCTRL_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU6_CONF0_CH0_POS_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_POS_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU6_CONF0_CH0_NEG_MODE_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU6_CONF0_CH0_NEG_MODE_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU6_CONF0_THR_THRES1_EN_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU6_CONF0_THR_THRES1_EN_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU6_CONF0_THR_THRES0_EN_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU6_CONF0_THR_THRES0_EN_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU6_CONF0_THR_L_LIM_EN_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU6_CONF0_THR_L_LIM_EN_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU6_CONF0_THR_H_LIM_EN_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU6_CONF0_THR_H_LIM_EN_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU6_CONF0_THR_ZERO_EN_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU6_CONF0_THR_ZERO_EN_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU6_CONF0_FILTER_EN_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU6_CONF0_FILTER_EN_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU6_CONF0_FILTER_THRES_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF0.Reg, volatile.LoadUint32(&o.U6_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU6_CONF0_FILTER_THRES_U6() uint32 {
	return volatile.LoadUint32(&o.U6_CONF0.Reg) & 0x3ff
}

// PCNT.U6_CONF1: PCNT_U6_CONF1
func (o *PCNT_Type) SetU6_CONF1_CNT_THRES1_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF1.Reg, volatile.LoadUint32(&o.U6_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU6_CONF1_CNT_THRES1_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU6_CONF1_CNT_THRES0_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF1.Reg, volatile.LoadUint32(&o.U6_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU6_CONF1_CNT_THRES0_U6() uint32 {
	return volatile.LoadUint32(&o.U6_CONF1.Reg) & 0xffff
}

// PCNT.U6_CONF2: PCNT_U6_CONF2
func (o *PCNT_Type) SetU6_CONF2_CNT_L_LIM_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF2.Reg, volatile.LoadUint32(&o.U6_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU6_CONF2_CNT_L_LIM_U6() uint32 {
	return (volatile.LoadUint32(&o.U6_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU6_CONF2_CNT_H_LIM_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CONF2.Reg, volatile.LoadUint32(&o.U6_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU6_CONF2_CNT_H_LIM_U6() uint32 {
	return volatile.LoadUint32(&o.U6_CONF2.Reg) & 0xffff
}

// PCNT.U7_CONF0: PCNT_U7_CONF0
func (o *PCNT_Type) SetU7_CONF0_CH1_LCTRL_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc0000000)|value<<30)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_LCTRL_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc0000000) >> 30
}
func (o *PCNT_Type) SetU7_CONF0_CH1_HCTRL_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x30000000)|value<<28)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_HCTRL_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x30000000) >> 28
}
func (o *PCNT_Type) SetU7_CONF0_CH1_POS_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc000000)|value<<26)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_POS_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc000000) >> 26
}
func (o *PCNT_Type) SetU7_CONF0_CH1_NEG_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x3000000)|value<<24)
}
func (o *PCNT_Type) GetU7_CONF0_CH1_NEG_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x3000000) >> 24
}
func (o *PCNT_Type) SetU7_CONF0_CH0_LCTRL_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc00000)|value<<22)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_LCTRL_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc00000) >> 22
}
func (o *PCNT_Type) SetU7_CONF0_CH0_HCTRL_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x300000)|value<<20)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_HCTRL_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x300000) >> 20
}
func (o *PCNT_Type) SetU7_CONF0_CH0_POS_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0xc0000)|value<<18)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_POS_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0xc0000) >> 18
}
func (o *PCNT_Type) SetU7_CONF0_CH0_NEG_MODE_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x30000)|value<<16)
}
func (o *PCNT_Type) GetU7_CONF0_CH0_NEG_MODE_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x30000) >> 16
}
func (o *PCNT_Type) SetU7_CONF0_THR_THRES1_EN_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetU7_CONF0_THR_THRES1_EN_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetU7_CONF0_THR_THRES0_EN_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetU7_CONF0_THR_THRES0_EN_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetU7_CONF0_THR_L_LIM_EN_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetU7_CONF0_THR_L_LIM_EN_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetU7_CONF0_THR_H_LIM_EN_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetU7_CONF0_THR_H_LIM_EN_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetU7_CONF0_THR_ZERO_EN_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetU7_CONF0_THR_ZERO_EN_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetU7_CONF0_FILTER_EN_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetU7_CONF0_FILTER_EN_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetU7_CONF0_FILTER_THRES_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF0.Reg, volatile.LoadUint32(&o.U7_CONF0.Reg)&^(0x3ff)|value)
}
func (o *PCNT_Type) GetU7_CONF0_FILTER_THRES_U7() uint32 {
	return volatile.LoadUint32(&o.U7_CONF0.Reg) & 0x3ff
}

// PCNT.U7_CONF1: PCNT_U7_CONF1
func (o *PCNT_Type) SetU7_CONF1_CNT_THRES1_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF1.Reg, volatile.LoadUint32(&o.U7_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU7_CONF1_CNT_THRES1_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU7_CONF1_CNT_THRES0_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF1.Reg, volatile.LoadUint32(&o.U7_CONF1.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU7_CONF1_CNT_THRES0_U7() uint32 {
	return volatile.LoadUint32(&o.U7_CONF1.Reg) & 0xffff
}

// PCNT.U7_CONF2: PCNT_U7_CONF2
func (o *PCNT_Type) SetU7_CONF2_CNT_L_LIM_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF2.Reg, volatile.LoadUint32(&o.U7_CONF2.Reg)&^(0xffff0000)|value<<16)
}
func (o *PCNT_Type) GetU7_CONF2_CNT_L_LIM_U7() uint32 {
	return (volatile.LoadUint32(&o.U7_CONF2.Reg) & 0xffff0000) >> 16
}
func (o *PCNT_Type) SetU7_CONF2_CNT_H_LIM_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CONF2.Reg, volatile.LoadUint32(&o.U7_CONF2.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU7_CONF2_CNT_H_LIM_U7() uint32 {
	return volatile.LoadUint32(&o.U7_CONF2.Reg) & 0xffff
}

// PCNT.U0_CNT: PCNT_U0_CNT
func (o *PCNT_Type) SetU0_CNT_PLUS_CNT_U0(value uint32) {
	volatile.StoreUint32(&o.U0_CNT.Reg, volatile.LoadUint32(&o.U0_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU0_CNT_PLUS_CNT_U0() uint32 {
	return volatile.LoadUint32(&o.U0_CNT.Reg) & 0xffff
}

// PCNT.U1_CNT: PCNT_U1_CNT
func (o *PCNT_Type) SetU1_CNT_PLUS_CNT_U1(value uint32) {
	volatile.StoreUint32(&o.U1_CNT.Reg, volatile.LoadUint32(&o.U1_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU1_CNT_PLUS_CNT_U1() uint32 {
	return volatile.LoadUint32(&o.U1_CNT.Reg) & 0xffff
}

// PCNT.U2_CNT: PCNT_U2_CNT
func (o *PCNT_Type) SetU2_CNT_PLUS_CNT_U2(value uint32) {
	volatile.StoreUint32(&o.U2_CNT.Reg, volatile.LoadUint32(&o.U2_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU2_CNT_PLUS_CNT_U2() uint32 {
	return volatile.LoadUint32(&o.U2_CNT.Reg) & 0xffff
}

// PCNT.U3_CNT: PCNT_U3_CNT
func (o *PCNT_Type) SetU3_CNT_PLUS_CNT_U3(value uint32) {
	volatile.StoreUint32(&o.U3_CNT.Reg, volatile.LoadUint32(&o.U3_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU3_CNT_PLUS_CNT_U3() uint32 {
	return volatile.LoadUint32(&o.U3_CNT.Reg) & 0xffff
}

// PCNT.U4_CNT: PCNT_U4_CNT
func (o *PCNT_Type) SetU4_CNT_PLUS_CNT_U4(value uint32) {
	volatile.StoreUint32(&o.U4_CNT.Reg, volatile.LoadUint32(&o.U4_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU4_CNT_PLUS_CNT_U4() uint32 {
	return volatile.LoadUint32(&o.U4_CNT.Reg) & 0xffff
}

// PCNT.U5_CNT: PCNT_U5_CNT
func (o *PCNT_Type) SetU5_CNT_PLUS_CNT_U5(value uint32) {
	volatile.StoreUint32(&o.U5_CNT.Reg, volatile.LoadUint32(&o.U5_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU5_CNT_PLUS_CNT_U5() uint32 {
	return volatile.LoadUint32(&o.U5_CNT.Reg) & 0xffff
}

// PCNT.U6_CNT: PCNT_U6_CNT
func (o *PCNT_Type) SetU6_CNT_PLUS_CNT_U6(value uint32) {
	volatile.StoreUint32(&o.U6_CNT.Reg, volatile.LoadUint32(&o.U6_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU6_CNT_PLUS_CNT_U6() uint32 {
	return volatile.LoadUint32(&o.U6_CNT.Reg) & 0xffff
}

// PCNT.U7_CNT: PCNT_U7_CNT
func (o *PCNT_Type) SetU7_CNT_PLUS_CNT_U7(value uint32) {
	volatile.StoreUint32(&o.U7_CNT.Reg, volatile.LoadUint32(&o.U7_CNT.Reg)&^(0xffff)|value)
}
func (o *PCNT_Type) GetU7_CNT_PLUS_CNT_U7() uint32 {
	return volatile.LoadUint32(&o.U7_CNT.Reg) & 0xffff
}

// PCNT.INT_RAW: PCNT_INT_RAW
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_RAW_CNT_THR_EVENT_U0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_RAW_CNT_THR_EVENT_U0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// PCNT.INT_ST: PCNT_INT_ST
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_ST_CNT_THR_EVENT_U0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_ST_CNT_THR_EVENT_U0_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// PCNT.INT_ENA: PCNT_INT_ENA
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_ENA_CNT_THR_EVENT_U0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_ENA_CNT_THR_EVENT_U0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// PCNT.INT_CLR: PCNT_INT_CLR
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetINT_CLR_CNT_THR_EVENT_U0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetINT_CLR_CNT_THR_EVENT_U0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// PCNT.U0_STATUS: PCNT_U0_STATUS
func (o *PCNT_Type) SetU0_STATUS(value uint32) {
	volatile.StoreUint32(&o.U0_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU0_STATUS() uint32 {
	return volatile.LoadUint32(&o.U0_STATUS.Reg)
}

// PCNT.U1_STATUS: PCNT_U1_STATUS
func (o *PCNT_Type) SetU1_STATUS(value uint32) {
	volatile.StoreUint32(&o.U1_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU1_STATUS() uint32 {
	return volatile.LoadUint32(&o.U1_STATUS.Reg)
}

// PCNT.U2_STATUS: PCNT_U2_STATUS
func (o *PCNT_Type) SetU2_STATUS(value uint32) {
	volatile.StoreUint32(&o.U2_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU2_STATUS() uint32 {
	return volatile.LoadUint32(&o.U2_STATUS.Reg)
}

// PCNT.U3_STATUS: PCNT_U3_STATUS
func (o *PCNT_Type) SetU3_STATUS(value uint32) {
	volatile.StoreUint32(&o.U3_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU3_STATUS() uint32 {
	return volatile.LoadUint32(&o.U3_STATUS.Reg)
}

// PCNT.U4_STATUS: PCNT_U4_STATUS
func (o *PCNT_Type) SetU4_STATUS(value uint32) {
	volatile.StoreUint32(&o.U4_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU4_STATUS() uint32 {
	return volatile.LoadUint32(&o.U4_STATUS.Reg)
}

// PCNT.U5_STATUS: PCNT_U5_STATUS
func (o *PCNT_Type) SetU5_STATUS(value uint32) {
	volatile.StoreUint32(&o.U5_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU5_STATUS() uint32 {
	return volatile.LoadUint32(&o.U5_STATUS.Reg)
}

// PCNT.U6_STATUS: PCNT_U6_STATUS
func (o *PCNT_Type) SetU6_STATUS(value uint32) {
	volatile.StoreUint32(&o.U6_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU6_STATUS() uint32 {
	return volatile.LoadUint32(&o.U6_STATUS.Reg)
}

// PCNT.U7_STATUS: PCNT_U7_STATUS
func (o *PCNT_Type) SetU7_STATUS(value uint32) {
	volatile.StoreUint32(&o.U7_STATUS.Reg, value)
}
func (o *PCNT_Type) GetU7_STATUS() uint32 {
	return volatile.LoadUint32(&o.U7_STATUS.Reg)
}

// PCNT.CTRL: PCNT_CTRL
func (o *PCNT_Type) SetCTRL_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x10000)|value<<16)
}
func (o *PCNT_Type) GetCTRL_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x10000) >> 16
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U7(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U7() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x8000) >> 15
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U7(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U7() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4000) >> 14
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U6(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U6() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2000) >> 13
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U6(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U6() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x1000) >> 12
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U5(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x800)|value<<11)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U5() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x800) >> 11
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U5(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x400)|value<<10)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U5() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x400) >> 10
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U4(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x200)|value<<9)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U4() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x200) >> 9
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U4(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x100)|value<<8)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U4() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x100) >> 8
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U3(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x80)|value<<7)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U3() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x80) >> 7
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U3(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x40)|value<<6)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U3() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x40) >> 6
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U2(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x20)|value<<5)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U2() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x20) >> 5
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U2(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x10)|value<<4)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U2() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x10) >> 4
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U1(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x8)|value<<3)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U1() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x8) >> 3
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U1(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x4)|value<<2)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U1() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x4) >> 2
}
func (o *PCNT_Type) SetCTRL_CNT_PAUSE_U0(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2)|value<<1)
}
func (o *PCNT_Type) GetCTRL_CNT_PAUSE_U0() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2) >> 1
}
func (o *PCNT_Type) SetCTRL_PLUS_CNT_RST_U0(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1)|value)
}
func (o *PCNT_Type) GetCTRL_PLUS_CNT_RST_U0() uint32 {
	return volatile.LoadUint32(&o.CTRL.Reg) & 0x1
}

// PCNT.DATE: PCNT_DATE
func (o *PCNT_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *PCNT_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type RMT_Type struct {
	_               [32]byte
	CH0CONF0        volatile.Register32 // 0x20
	CH0CONF1        volatile.Register32 // 0x24
	CH1CONF0        volatile.Register32 // 0x28
	CH1CONF1        volatile.Register32 // 0x2C
	CH2CONF0        volatile.Register32 // 0x30
	CH2CONF1        volatile.Register32 // 0x34
	CH3CONF0        volatile.Register32 // 0x38
	CH3CONF1        volatile.Register32 // 0x3C
	CH4CONF0        volatile.Register32 // 0x40
	CH4CONF1        volatile.Register32 // 0x44
	CH5CONF0        volatile.Register32 // 0x48
	CH5CONF1        volatile.Register32 // 0x4C
	CH6CONF0        volatile.Register32 // 0x50
	CH6CONF1        volatile.Register32 // 0x54
	CH7CONF0        volatile.Register32 // 0x58
	CH7CONF1        volatile.Register32 // 0x5C
	CH0STATUS       volatile.Register32 // 0x60
	CH1STATUS       volatile.Register32 // 0x64
	CH2STATUS       volatile.Register32 // 0x68
	CH3STATUS       volatile.Register32 // 0x6C
	CH4STATUS       volatile.Register32 // 0x70
	CH5STATUS       volatile.Register32 // 0x74
	CH6STATUS       volatile.Register32 // 0x78
	CH7STATUS       volatile.Register32 // 0x7C
	CH0ADDR         volatile.Register32 // 0x80
	CH1ADDR         volatile.Register32 // 0x84
	CH2ADDR         volatile.Register32 // 0x88
	CH3ADDR         volatile.Register32 // 0x8C
	CH4ADDR         volatile.Register32 // 0x90
	CH5ADDR         volatile.Register32 // 0x94
	CH6ADDR         volatile.Register32 // 0x98
	CH7ADDR         volatile.Register32 // 0x9C
	INT_RAW         volatile.Register32 // 0xA0
	INT_ST          volatile.Register32 // 0xA4
	INT_ENA         volatile.Register32 // 0xA8
	INT_CLR         volatile.Register32 // 0xAC
	CH0CARRIER_DUTY volatile.Register32 // 0xB0
	CH1CARRIER_DUTY volatile.Register32 // 0xB4
	CH2CARRIER_DUTY volatile.Register32 // 0xB8
	CH3CARRIER_DUTY volatile.Register32 // 0xBC
	CH4CARRIER_DUTY volatile.Register32 // 0xC0
	CH5CARRIER_DUTY volatile.Register32 // 0xC4
	CH6CARRIER_DUTY volatile.Register32 // 0xC8
	CH7CARRIER_DUTY volatile.Register32 // 0xCC
	CH0_TX_LIM      volatile.Register32 // 0xD0
	CH1_TX_LIM      volatile.Register32 // 0xD4
	CH2_TX_LIM      volatile.Register32 // 0xD8
	CH3_TX_LIM      volatile.Register32 // 0xDC
	CH4_TX_LIM      volatile.Register32 // 0xE0
	CH5_TX_LIM      volatile.Register32 // 0xE4
	CH6_TX_LIM      volatile.Register32 // 0xE8
	CH7_TX_LIM      volatile.Register32 // 0xEC
	APB_CONF        volatile.Register32 // 0xF0
	_               [8]byte
	DATE            volatile.Register32 // 0xFC
}

// RMT.CH0CONF0: RMT_CH0CONF0
func (o *RMT_Type) SetCH0CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH0CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH0CONF0_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH0CONF0_MEM_PD() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH0CONF0_CARRIER_OUT_LV_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH0CONF0_CARRIER_OUT_LV_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH0CONF0_CARRIER_EN_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH0CONF0_CARRIER_EN_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH0CONF0_MEM_SIZE_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH0CONF0_MEM_SIZE_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH0CONF0_IDLE_THRES_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH0CONF0_IDLE_THRES_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH0CONF0_DIV_CNT_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF0.Reg, volatile.LoadUint32(&o.CH0CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH0CONF0_DIV_CNT_CH0() uint32 {
	return volatile.LoadUint32(&o.CH0CONF0.Reg) & 0xff
}

// RMT.CH0CONF1: RMT_CH0CONF1
func (o *RMT_Type) SetCH0CONF1_IDLE_OUT_EN_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH0CONF1_IDLE_OUT_EN_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH0CONF1_IDLE_OUT_LV_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH0CONF1_IDLE_OUT_LV_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH0CONF1_REF_ALWAYS_ON_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH0CONF1_REF_ALWAYS_ON_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH0CONF1_REF_CNT_RST_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH0CONF1_REF_CNT_RST_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH0CONF1_RX_FILTER_THRES_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH0CONF1_RX_FILTER_THRES_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH0CONF1_RX_FILTER_EN_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH0CONF1_RX_FILTER_EN_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH0CONF1_TX_CONTI_MODE_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH0CONF1_TX_CONTI_MODE_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH0CONF1_MEM_OWNER_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH0CONF1_MEM_OWNER_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH0CONF1_APB_MEM_RST_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH0CONF1_APB_MEM_RST_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH0CONF1_MEM_RD_RST_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH0CONF1_MEM_RD_RST_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH0CONF1_MEM_WR_RST_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH0CONF1_MEM_WR_RST_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH0CONF1_RX_EN_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH0CONF1_RX_EN_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH0CONF1_TX_START_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CONF1.Reg, volatile.LoadUint32(&o.CH0CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH0CONF1_TX_START_CH0() uint32 {
	return volatile.LoadUint32(&o.CH0CONF1.Reg) & 0x1
}

// RMT.CH1CONF0: RMT_CH1CONF0
func (o *RMT_Type) SetCH1CONF0_CARRIER_OUT_LV_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH1CONF0_CARRIER_OUT_LV_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH1CONF0_CARRIER_EN_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH1CONF0_CARRIER_EN_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH1CONF0_MEM_SIZE_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH1CONF0_MEM_SIZE_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH1CONF0_IDLE_THRES_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH1CONF0_IDLE_THRES_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH1CONF0_DIV_CNT_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF0.Reg, volatile.LoadUint32(&o.CH1CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH1CONF0_DIV_CNT_CH1() uint32 {
	return volatile.LoadUint32(&o.CH1CONF0.Reg) & 0xff
}

// RMT.CH1CONF1: RMT_CH1CONF1
func (o *RMT_Type) SetCH1CONF1_IDLE_OUT_EN_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH1CONF1_IDLE_OUT_EN_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH1CONF1_IDLE_OUT_LV_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH1CONF1_IDLE_OUT_LV_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH1CONF1_REF_ALWAYS_ON_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH1CONF1_REF_ALWAYS_ON_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH1CONF1_REF_CNT_RST_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH1CONF1_REF_CNT_RST_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH1CONF1_RX_FILTER_THRES_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH1CONF1_RX_FILTER_THRES_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH1CONF1_RX_FILTER_EN_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH1CONF1_RX_FILTER_EN_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH1CONF1_TX_CONTI_MODE_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH1CONF1_TX_CONTI_MODE_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH1CONF1_MEM_OWNER_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH1CONF1_MEM_OWNER_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH1CONF1_APB_MEM_RST_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH1CONF1_APB_MEM_RST_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH1CONF1_MEM_RD_RST_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH1CONF1_MEM_RD_RST_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH1CONF1_MEM_WR_RST_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH1CONF1_MEM_WR_RST_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH1CONF1_RX_EN_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH1CONF1_RX_EN_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH1CONF1_TX_START_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CONF1.Reg, volatile.LoadUint32(&o.CH1CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH1CONF1_TX_START_CH1() uint32 {
	return volatile.LoadUint32(&o.CH1CONF1.Reg) & 0x1
}

// RMT.CH2CONF0: RMT_CH2CONF0
func (o *RMT_Type) SetCH2CONF0_CARRIER_OUT_LV_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH2CONF0_CARRIER_OUT_LV_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH2CONF0_CARRIER_EN_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH2CONF0_CARRIER_EN_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH2CONF0_MEM_SIZE_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH2CONF0_MEM_SIZE_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH2CONF0_IDLE_THRES_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH2CONF0_IDLE_THRES_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH2CONF0_DIV_CNT_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF0.Reg, volatile.LoadUint32(&o.CH2CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH2CONF0_DIV_CNT_CH2() uint32 {
	return volatile.LoadUint32(&o.CH2CONF0.Reg) & 0xff
}

// RMT.CH2CONF1: RMT_CH2CONF1
func (o *RMT_Type) SetCH2CONF1_IDLE_OUT_EN_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH2CONF1_IDLE_OUT_EN_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH2CONF1_IDLE_OUT_LV_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH2CONF1_IDLE_OUT_LV_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH2CONF1_REF_ALWAYS_ON_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH2CONF1_REF_ALWAYS_ON_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH2CONF1_REF_CNT_RST_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH2CONF1_REF_CNT_RST_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH2CONF1_RX_FILTER_THRES_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH2CONF1_RX_FILTER_THRES_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH2CONF1_RX_FILTER_EN_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH2CONF1_RX_FILTER_EN_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH2CONF1_TX_CONTI_MODE_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH2CONF1_TX_CONTI_MODE_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH2CONF1_MEM_OWNER_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH2CONF1_MEM_OWNER_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH2CONF1_APB_MEM_RST_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH2CONF1_APB_MEM_RST_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH2CONF1_MEM_RD_RST_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH2CONF1_MEM_RD_RST_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH2CONF1_MEM_WR_RST_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH2CONF1_MEM_WR_RST_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH2CONF1_RX_EN_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH2CONF1_RX_EN_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH2CONF1_TX_START_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CONF1.Reg, volatile.LoadUint32(&o.CH2CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH2CONF1_TX_START_CH2() uint32 {
	return volatile.LoadUint32(&o.CH2CONF1.Reg) & 0x1
}

// RMT.CH3CONF0: RMT_CH3CONF0
func (o *RMT_Type) SetCH3CONF0_CARRIER_OUT_LV_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH3CONF0_CARRIER_OUT_LV_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH3CONF0_CARRIER_EN_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH3CONF0_CARRIER_EN_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH3CONF0_MEM_SIZE_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH3CONF0_MEM_SIZE_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH3CONF0_IDLE_THRES_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH3CONF0_IDLE_THRES_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH3CONF0_DIV_CNT_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF0.Reg, volatile.LoadUint32(&o.CH3CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH3CONF0_DIV_CNT_CH3() uint32 {
	return volatile.LoadUint32(&o.CH3CONF0.Reg) & 0xff
}

// RMT.CH3CONF1: RMT_CH3CONF1
func (o *RMT_Type) SetCH3CONF1_IDLE_OUT_EN_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH3CONF1_IDLE_OUT_EN_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH3CONF1_IDLE_OUT_LV_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH3CONF1_IDLE_OUT_LV_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH3CONF1_REF_ALWAYS_ON_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH3CONF1_REF_ALWAYS_ON_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH3CONF1_REF_CNT_RST_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH3CONF1_REF_CNT_RST_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH3CONF1_RX_FILTER_THRES_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH3CONF1_RX_FILTER_THRES_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH3CONF1_RX_FILTER_EN_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH3CONF1_RX_FILTER_EN_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH3CONF1_TX_CONTI_MODE_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH3CONF1_TX_CONTI_MODE_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH3CONF1_MEM_OWNER_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH3CONF1_MEM_OWNER_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH3CONF1_APB_MEM_RST_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH3CONF1_APB_MEM_RST_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH3CONF1_MEM_RD_RST_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH3CONF1_MEM_RD_RST_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH3CONF1_MEM_WR_RST_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH3CONF1_MEM_WR_RST_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH3CONF1_RX_EN_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH3CONF1_RX_EN_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH3CONF1_TX_START_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CONF1.Reg, volatile.LoadUint32(&o.CH3CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH3CONF1_TX_START_CH3() uint32 {
	return volatile.LoadUint32(&o.CH3CONF1.Reg) & 0x1
}

// RMT.CH4CONF0: RMT_CH4CONF0
func (o *RMT_Type) SetCH4CONF0_CARRIER_OUT_LV_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH4CONF0_CARRIER_OUT_LV_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH4CONF0_CARRIER_EN_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH4CONF0_CARRIER_EN_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH4CONF0_MEM_SIZE_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH4CONF0_MEM_SIZE_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH4CONF0_IDLE_THRES_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH4CONF0_IDLE_THRES_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH4CONF0_DIV_CNT_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF0.Reg, volatile.LoadUint32(&o.CH4CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH4CONF0_DIV_CNT_CH4() uint32 {
	return volatile.LoadUint32(&o.CH4CONF0.Reg) & 0xff
}

// RMT.CH4CONF1: RMT_CH4CONF1
func (o *RMT_Type) SetCH4CONF1_IDLE_OUT_EN_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH4CONF1_IDLE_OUT_EN_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH4CONF1_IDLE_OUT_LV_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH4CONF1_IDLE_OUT_LV_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH4CONF1_REF_ALWAYS_ON_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH4CONF1_REF_ALWAYS_ON_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH4CONF1_REF_CNT_RST_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH4CONF1_REF_CNT_RST_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH4CONF1_RX_FILTER_THRES_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH4CONF1_RX_FILTER_THRES_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH4CONF1_RX_FILTER_EN_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH4CONF1_RX_FILTER_EN_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH4CONF1_TX_CONTI_MODE_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH4CONF1_TX_CONTI_MODE_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH4CONF1_MEM_OWNER_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH4CONF1_MEM_OWNER_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH4CONF1_APB_MEM_RST_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH4CONF1_APB_MEM_RST_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH4CONF1_MEM_RD_RST_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH4CONF1_MEM_RD_RST_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH4CONF1_MEM_WR_RST_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH4CONF1_MEM_WR_RST_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH4CONF1_RX_EN_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH4CONF1_RX_EN_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH4CONF1_TX_START_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CONF1.Reg, volatile.LoadUint32(&o.CH4CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH4CONF1_TX_START_CH4() uint32 {
	return volatile.LoadUint32(&o.CH4CONF1.Reg) & 0x1
}

// RMT.CH5CONF0: RMT_CH5CONF0
func (o *RMT_Type) SetCH5CONF0_CARRIER_OUT_LV_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH5CONF0_CARRIER_OUT_LV_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH5CONF0_CARRIER_EN_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH5CONF0_CARRIER_EN_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH5CONF0_MEM_SIZE_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH5CONF0_MEM_SIZE_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH5CONF0_IDLE_THRES_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH5CONF0_IDLE_THRES_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH5CONF0_DIV_CNT_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF0.Reg, volatile.LoadUint32(&o.CH5CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH5CONF0_DIV_CNT_CH5() uint32 {
	return volatile.LoadUint32(&o.CH5CONF0.Reg) & 0xff
}

// RMT.CH5CONF1: RMT_CH5CONF1
func (o *RMT_Type) SetCH5CONF1_IDLE_OUT_EN_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH5CONF1_IDLE_OUT_EN_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH5CONF1_IDLE_OUT_LV_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH5CONF1_IDLE_OUT_LV_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH5CONF1_REF_ALWAYS_ON_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH5CONF1_REF_ALWAYS_ON_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH5CONF1_REF_CNT_RST_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH5CONF1_REF_CNT_RST_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH5CONF1_RX_FILTER_THRES_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH5CONF1_RX_FILTER_THRES_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH5CONF1_RX_FILTER_EN_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH5CONF1_RX_FILTER_EN_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH5CONF1_TX_CONTI_MODE_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH5CONF1_TX_CONTI_MODE_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH5CONF1_MEM_OWNER_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH5CONF1_MEM_OWNER_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH5CONF1_APB_MEM_RST_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH5CONF1_APB_MEM_RST_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH5CONF1_MEM_RD_RST_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH5CONF1_MEM_RD_RST_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH5CONF1_MEM_WR_RST_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH5CONF1_MEM_WR_RST_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH5CONF1_RX_EN_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH5CONF1_RX_EN_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH5CONF1_TX_START_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CONF1.Reg, volatile.LoadUint32(&o.CH5CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH5CONF1_TX_START_CH5() uint32 {
	return volatile.LoadUint32(&o.CH5CONF1.Reg) & 0x1
}

// RMT.CH6CONF0: RMT_CH6CONF0
func (o *RMT_Type) SetCH6CONF0_CARRIER_OUT_LV_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH6CONF0_CARRIER_OUT_LV_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH6CONF0_CARRIER_EN_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH6CONF0_CARRIER_EN_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH6CONF0_MEM_SIZE_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH6CONF0_MEM_SIZE_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH6CONF0_IDLE_THRES_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH6CONF0_IDLE_THRES_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH6CONF0_DIV_CNT_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF0.Reg, volatile.LoadUint32(&o.CH6CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH6CONF0_DIV_CNT_CH6() uint32 {
	return volatile.LoadUint32(&o.CH6CONF0.Reg) & 0xff
}

// RMT.CH6CONF1: RMT_CH6CONF1
func (o *RMT_Type) SetCH6CONF1_IDLE_OUT_EN_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH6CONF1_IDLE_OUT_EN_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH6CONF1_IDLE_OUT_LV_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH6CONF1_IDLE_OUT_LV_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH6CONF1_REF_ALWAYS_ON_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH6CONF1_REF_ALWAYS_ON_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH6CONF1_REF_CNT_RST_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH6CONF1_REF_CNT_RST_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH6CONF1_RX_FILTER_THRES_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH6CONF1_RX_FILTER_THRES_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH6CONF1_RX_FILTER_EN_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH6CONF1_RX_FILTER_EN_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH6CONF1_TX_CONTI_MODE_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH6CONF1_TX_CONTI_MODE_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH6CONF1_MEM_OWNER_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH6CONF1_MEM_OWNER_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH6CONF1_APB_MEM_RST_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH6CONF1_APB_MEM_RST_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH6CONF1_MEM_RD_RST_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH6CONF1_MEM_RD_RST_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH6CONF1_MEM_WR_RST_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH6CONF1_MEM_WR_RST_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH6CONF1_RX_EN_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH6CONF1_RX_EN_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH6CONF1_TX_START_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CONF1.Reg, volatile.LoadUint32(&o.CH6CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH6CONF1_TX_START_CH6() uint32 {
	return volatile.LoadUint32(&o.CH6CONF1.Reg) & 0x1
}

// RMT.CH7CONF0: RMT_CH7CONF0
func (o *RMT_Type) SetCH7CONF0_CARRIER_OUT_LV_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH7CONF0_CARRIER_OUT_LV_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH7CONF0_CARRIER_EN_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH7CONF0_CARRIER_EN_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH7CONF0_MEM_SIZE_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0xf000000)|value<<24)
}
func (o *RMT_Type) GetCH7CONF0_MEM_SIZE_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0xf000000) >> 24
}
func (o *RMT_Type) SetCH7CONF0_IDLE_THRES_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0xffff00)|value<<8)
}
func (o *RMT_Type) GetCH7CONF0_IDLE_THRES_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF0.Reg) & 0xffff00) >> 8
}
func (o *RMT_Type) SetCH7CONF0_DIV_CNT_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF0.Reg, volatile.LoadUint32(&o.CH7CONF0.Reg)&^(0xff)|value)
}
func (o *RMT_Type) GetCH7CONF0_DIV_CNT_CH7() uint32 {
	return volatile.LoadUint32(&o.CH7CONF0.Reg) & 0xff
}

// RMT.CH7CONF1: RMT_CH7CONF1
func (o *RMT_Type) SetCH7CONF1_IDLE_OUT_EN_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetCH7CONF1_IDLE_OUT_EN_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetCH7CONF1_IDLE_OUT_LV_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetCH7CONF1_IDLE_OUT_LV_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetCH7CONF1_REF_ALWAYS_ON_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetCH7CONF1_REF_ALWAYS_ON_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetCH7CONF1_REF_CNT_RST_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetCH7CONF1_REF_CNT_RST_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetCH7CONF1_RX_FILTER_THRES_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *RMT_Type) GetCH7CONF1_RX_FILTER_THRES_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0xff00) >> 8
}
func (o *RMT_Type) SetCH7CONF1_RX_FILTER_EN_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetCH7CONF1_RX_FILTER_EN_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetCH7CONF1_TX_CONTI_MODE_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetCH7CONF1_TX_CONTI_MODE_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetCH7CONF1_MEM_OWNER_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetCH7CONF1_MEM_OWNER_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetCH7CONF1_APB_MEM_RST_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetCH7CONF1_APB_MEM_RST_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetCH7CONF1_MEM_RD_RST_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetCH7CONF1_MEM_RD_RST_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetCH7CONF1_MEM_WR_RST_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetCH7CONF1_MEM_WR_RST_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetCH7CONF1_RX_EN_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetCH7CONF1_RX_EN_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetCH7CONF1_TX_START_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CONF1.Reg, volatile.LoadUint32(&o.CH7CONF1.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetCH7CONF1_TX_START_CH7() uint32 {
	return volatile.LoadUint32(&o.CH7CONF1.Reg) & 0x1
}

// RMT.CH0STATUS: RMT_CH0STATUS
func (o *RMT_Type) SetCH0STATUS(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, value)
}
func (o *RMT_Type) GetCH0STATUS() uint32 {
	return volatile.LoadUint32(&o.CH0STATUS.Reg)
}
func (o *RMT_Type) SetCH0STATUS_APB_MEM_RD_ERR_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH0STATUS_APB_MEM_RD_ERR_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH0STATUS_APB_MEM_WR_ERR_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH0STATUS_APB_MEM_WR_ERR_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH0STATUS_MEM_EMPTY_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH0STATUS_MEM_EMPTY_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH0STATUS_MEM_FULL_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH0STATUS_MEM_FULL_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH0STATUS_MEM_OWNER_ERR_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH0STATUS_MEM_OWNER_ERR_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH0STATUS_STATE_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH0STATUS_STATE_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH0STATUS_MEM_RADDR_EX_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH0STATUS_MEM_RADDR_EX_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH0STATUS_MEM_WADDR_EX_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0STATUS.Reg, volatile.LoadUint32(&o.CH0STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH0STATUS_MEM_WADDR_EX_CH0() uint32 {
	return volatile.LoadUint32(&o.CH0STATUS.Reg) & 0x3ff
}

// RMT.CH1STATUS: RMT_CH1STATUS
func (o *RMT_Type) SetCH1STATUS(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, value)
}
func (o *RMT_Type) GetCH1STATUS() uint32 {
	return volatile.LoadUint32(&o.CH1STATUS.Reg)
}
func (o *RMT_Type) SetCH1STATUS_APB_MEM_RD_ERR_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH1STATUS_APB_MEM_RD_ERR_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH1STATUS_APB_MEM_WR_ERR_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH1STATUS_APB_MEM_WR_ERR_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH1STATUS_MEM_EMPTY_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH1STATUS_MEM_EMPTY_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH1STATUS_MEM_FULL_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH1STATUS_MEM_FULL_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH1STATUS_MEM_OWNER_ERR_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH1STATUS_MEM_OWNER_ERR_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH1STATUS_STATE_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH1STATUS_STATE_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH1STATUS_MEM_RADDR_EX_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH1STATUS_MEM_RADDR_EX_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH1STATUS_MEM_WADDR_EX_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1STATUS.Reg, volatile.LoadUint32(&o.CH1STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH1STATUS_MEM_WADDR_EX_CH1() uint32 {
	return volatile.LoadUint32(&o.CH1STATUS.Reg) & 0x3ff
}

// RMT.CH2STATUS: RMT_CH2STATUS
func (o *RMT_Type) SetCH2STATUS(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, value)
}
func (o *RMT_Type) GetCH2STATUS() uint32 {
	return volatile.LoadUint32(&o.CH2STATUS.Reg)
}
func (o *RMT_Type) SetCH2STATUS_APB_MEM_RD_ERR_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH2STATUS_APB_MEM_RD_ERR_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH2STATUS_APB_MEM_WR_ERR_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH2STATUS_APB_MEM_WR_ERR_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH2STATUS_MEM_EMPTY_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH2STATUS_MEM_EMPTY_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH2STATUS_MEM_FULL_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH2STATUS_MEM_FULL_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH2STATUS_MEM_OWNER_ERR_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH2STATUS_MEM_OWNER_ERR_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH2STATUS_STATE_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH2STATUS_STATE_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH2STATUS_MEM_RADDR_EX_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH2STATUS_MEM_RADDR_EX_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH2STATUS_MEM_WADDR_EX_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2STATUS.Reg, volatile.LoadUint32(&o.CH2STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH2STATUS_MEM_WADDR_EX_CH2() uint32 {
	return volatile.LoadUint32(&o.CH2STATUS.Reg) & 0x3ff
}

// RMT.CH3STATUS: RMT_CH3STATUS
func (o *RMT_Type) SetCH3STATUS(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, value)
}
func (o *RMT_Type) GetCH3STATUS() uint32 {
	return volatile.LoadUint32(&o.CH3STATUS.Reg)
}
func (o *RMT_Type) SetCH3STATUS_APB_MEM_RD_ERR_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH3STATUS_APB_MEM_RD_ERR_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH3STATUS_APB_MEM_WR_ERR_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH3STATUS_APB_MEM_WR_ERR_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH3STATUS_MEM_EMPTY_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH3STATUS_MEM_EMPTY_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH3STATUS_MEM_FULL_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH3STATUS_MEM_FULL_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH3STATUS_MEM_OWNER_ERR_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH3STATUS_MEM_OWNER_ERR_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH3STATUS_STATE_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH3STATUS_STATE_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH3STATUS_MEM_RADDR_EX_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH3STATUS_MEM_RADDR_EX_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH3STATUS_MEM_WADDR_EX_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3STATUS.Reg, volatile.LoadUint32(&o.CH3STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH3STATUS_MEM_WADDR_EX_CH3() uint32 {
	return volatile.LoadUint32(&o.CH3STATUS.Reg) & 0x3ff
}

// RMT.CH4STATUS: RMT_CH4STATUS
func (o *RMT_Type) SetCH4STATUS(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, value)
}
func (o *RMT_Type) GetCH4STATUS() uint32 {
	return volatile.LoadUint32(&o.CH4STATUS.Reg)
}
func (o *RMT_Type) SetCH4STATUS_APB_MEM_RD_ERR_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH4STATUS_APB_MEM_RD_ERR_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH4STATUS_APB_MEM_WR_ERR_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH4STATUS_APB_MEM_WR_ERR_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH4STATUS_MEM_EMPTY_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH4STATUS_MEM_EMPTY_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH4STATUS_MEM_FULL_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH4STATUS_MEM_FULL_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH4STATUS_MEM_OWNER_ERR_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH4STATUS_MEM_OWNER_ERR_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH4STATUS_STATE_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH4STATUS_STATE_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH4STATUS_MEM_RADDR_EX_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH4STATUS_MEM_RADDR_EX_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH4STATUS_MEM_WADDR_EX_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4STATUS.Reg, volatile.LoadUint32(&o.CH4STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH4STATUS_MEM_WADDR_EX_CH4() uint32 {
	return volatile.LoadUint32(&o.CH4STATUS.Reg) & 0x3ff
}

// RMT.CH5STATUS: RMT_CH5STATUS
func (o *RMT_Type) SetCH5STATUS(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, value)
}
func (o *RMT_Type) GetCH5STATUS() uint32 {
	return volatile.LoadUint32(&o.CH5STATUS.Reg)
}
func (o *RMT_Type) SetCH5STATUS_APB_MEM_RD_ERR_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH5STATUS_APB_MEM_RD_ERR_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH5STATUS_APB_MEM_WR_ERR_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH5STATUS_APB_MEM_WR_ERR_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH5STATUS_MEM_EMPTY_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH5STATUS_MEM_EMPTY_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH5STATUS_MEM_FULL_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH5STATUS_MEM_FULL_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH5STATUS_MEM_OWNER_ERR_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH5STATUS_MEM_OWNER_ERR_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH5STATUS_STATE_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH5STATUS_STATE_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH5STATUS_MEM_RADDR_EX_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH5STATUS_MEM_RADDR_EX_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH5STATUS_MEM_WADDR_EX_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5STATUS.Reg, volatile.LoadUint32(&o.CH5STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH5STATUS_MEM_WADDR_EX_CH5() uint32 {
	return volatile.LoadUint32(&o.CH5STATUS.Reg) & 0x3ff
}

// RMT.CH6STATUS: RMT_CH6STATUS
func (o *RMT_Type) SetCH6STATUS(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, value)
}
func (o *RMT_Type) GetCH6STATUS() uint32 {
	return volatile.LoadUint32(&o.CH6STATUS.Reg)
}
func (o *RMT_Type) SetCH6STATUS_APB_MEM_RD_ERR_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH6STATUS_APB_MEM_RD_ERR_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH6STATUS_APB_MEM_WR_ERR_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH6STATUS_APB_MEM_WR_ERR_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH6STATUS_MEM_EMPTY_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH6STATUS_MEM_EMPTY_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH6STATUS_MEM_FULL_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH6STATUS_MEM_FULL_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH6STATUS_MEM_OWNER_ERR_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH6STATUS_MEM_OWNER_ERR_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH6STATUS_STATE_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH6STATUS_STATE_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH6STATUS_MEM_RADDR_EX_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH6STATUS_MEM_RADDR_EX_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH6STATUS_MEM_WADDR_EX_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6STATUS.Reg, volatile.LoadUint32(&o.CH6STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH6STATUS_MEM_WADDR_EX_CH6() uint32 {
	return volatile.LoadUint32(&o.CH6STATUS.Reg) & 0x3ff
}

// RMT.CH7STATUS: RMT_CH7STATUS
func (o *RMT_Type) SetCH7STATUS(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, value)
}
func (o *RMT_Type) GetCH7STATUS() uint32 {
	return volatile.LoadUint32(&o.CH7STATUS.Reg)
}
func (o *RMT_Type) SetCH7STATUS_APB_MEM_RD_ERR_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetCH7STATUS_APB_MEM_RD_ERR_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetCH7STATUS_APB_MEM_WR_ERR_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetCH7STATUS_APB_MEM_WR_ERR_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetCH7STATUS_MEM_EMPTY_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetCH7STATUS_MEM_EMPTY_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetCH7STATUS_MEM_FULL_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetCH7STATUS_MEM_FULL_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetCH7STATUS_MEM_OWNER_ERR_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetCH7STATUS_MEM_OWNER_ERR_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetCH7STATUS_STATE_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x7000000)|value<<24)
}
func (o *RMT_Type) GetCH7STATUS_STATE_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x7000000) >> 24
}
func (o *RMT_Type) SetCH7STATUS_MEM_RADDR_EX_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x3ff000)|value<<12)
}
func (o *RMT_Type) GetCH7STATUS_MEM_RADDR_EX_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x3ff000) >> 12
}
func (o *RMT_Type) SetCH7STATUS_MEM_WADDR_EX_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7STATUS.Reg, volatile.LoadUint32(&o.CH7STATUS.Reg)&^(0x3ff)|value)
}
func (o *RMT_Type) GetCH7STATUS_MEM_WADDR_EX_CH7() uint32 {
	return volatile.LoadUint32(&o.CH7STATUS.Reg) & 0x3ff
}

// RMT.CH0ADDR: RMT_CH0ADDR
func (o *RMT_Type) SetCH0ADDR(value uint32) {
	volatile.StoreUint32(&o.CH0ADDR.Reg, value)
}
func (o *RMT_Type) GetCH0ADDR() uint32 {
	return volatile.LoadUint32(&o.CH0ADDR.Reg)
}

// RMT.CH1ADDR: RMT_CH1ADDR
func (o *RMT_Type) SetCH1ADDR(value uint32) {
	volatile.StoreUint32(&o.CH1ADDR.Reg, value)
}
func (o *RMT_Type) GetCH1ADDR() uint32 {
	return volatile.LoadUint32(&o.CH1ADDR.Reg)
}

// RMT.CH2ADDR: RMT_CH2ADDR
func (o *RMT_Type) SetCH2ADDR(value uint32) {
	volatile.StoreUint32(&o.CH2ADDR.Reg, value)
}
func (o *RMT_Type) GetCH2ADDR() uint32 {
	return volatile.LoadUint32(&o.CH2ADDR.Reg)
}

// RMT.CH3ADDR: RMT_CH3ADDR
func (o *RMT_Type) SetCH3ADDR(value uint32) {
	volatile.StoreUint32(&o.CH3ADDR.Reg, value)
}
func (o *RMT_Type) GetCH3ADDR() uint32 {
	return volatile.LoadUint32(&o.CH3ADDR.Reg)
}

// RMT.CH4ADDR: RMT_CH4ADDR
func (o *RMT_Type) SetCH4ADDR(value uint32) {
	volatile.StoreUint32(&o.CH4ADDR.Reg, value)
}
func (o *RMT_Type) GetCH4ADDR() uint32 {
	return volatile.LoadUint32(&o.CH4ADDR.Reg)
}

// RMT.CH5ADDR: RMT_CH5ADDR
func (o *RMT_Type) SetCH5ADDR(value uint32) {
	volatile.StoreUint32(&o.CH5ADDR.Reg, value)
}
func (o *RMT_Type) GetCH5ADDR() uint32 {
	return volatile.LoadUint32(&o.CH5ADDR.Reg)
}

// RMT.CH6ADDR: RMT_CH6ADDR
func (o *RMT_Type) SetCH6ADDR(value uint32) {
	volatile.StoreUint32(&o.CH6ADDR.Reg, value)
}
func (o *RMT_Type) GetCH6ADDR() uint32 {
	return volatile.LoadUint32(&o.CH6ADDR.Reg)
}

// RMT.CH7ADDR: RMT_CH7ADDR
func (o *RMT_Type) SetCH7ADDR(value uint32) {
	volatile.StoreUint32(&o.CH7ADDR.Reg, value)
}
func (o *RMT_Type) GetCH7ADDR() uint32 {
	return volatile.LoadUint32(&o.CH7ADDR.Reg)
}

// RMT.INT_RAW: RMT_INT_RAW
func (o *RMT_Type) SetINT_RAW_CH7_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetINT_RAW_CH7_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetINT_RAW_CH6_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetINT_RAW_CH6_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetINT_RAW_CH5_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetINT_RAW_CH5_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetINT_RAW_CH4_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetINT_RAW_CH4_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetINT_RAW_CH3_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetINT_RAW_CH3_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetINT_RAW_CH2_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000000)|value<<26)
}
func (o *RMT_Type) GetINT_RAW_CH2_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000000) >> 26
}
func (o *RMT_Type) SetINT_RAW_CH1_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *RMT_Type) GetINT_RAW_CH1_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000000) >> 25
}
func (o *RMT_Type) SetINT_RAW_CH0_TX_THR_EVENT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_RAW_CH0_TX_THR_EVENT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *RMT_Type) SetINT_RAW_CH7_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *RMT_Type) GetINT_RAW_CH7_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800000) >> 23
}
func (o *RMT_Type) SetINT_RAW_CH7_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *RMT_Type) GetINT_RAW_CH7_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400000) >> 22
}
func (o *RMT_Type) SetINT_RAW_CH7_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *RMT_Type) GetINT_RAW_CH7_TX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200000) >> 21
}
func (o *RMT_Type) SetINT_RAW_CH6_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *RMT_Type) GetINT_RAW_CH6_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100000) >> 20
}
func (o *RMT_Type) SetINT_RAW_CH6_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetINT_RAW_CH6_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetINT_RAW_CH6_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetINT_RAW_CH6_TX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetINT_RAW_CH5_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetINT_RAW_CH5_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetINT_RAW_CH5_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetINT_RAW_CH5_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetINT_RAW_CH5_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *RMT_Type) GetINT_RAW_CH5_TX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *RMT_Type) SetINT_RAW_CH4_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *RMT_Type) GetINT_RAW_CH4_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *RMT_Type) SetINT_RAW_CH4_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *RMT_Type) GetINT_RAW_CH4_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *RMT_Type) SetINT_RAW_CH4_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *RMT_Type) GetINT_RAW_CH4_TX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *RMT_Type) SetINT_RAW_CH3_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *RMT_Type) GetINT_RAW_CH3_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *RMT_Type) SetINT_RAW_CH3_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *RMT_Type) GetINT_RAW_CH3_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *RMT_Type) SetINT_RAW_CH3_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *RMT_Type) GetINT_RAW_CH3_TX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *RMT_Type) SetINT_RAW_CH2_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *RMT_Type) GetINT_RAW_CH2_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *RMT_Type) SetINT_RAW_CH2_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetINT_RAW_CH2_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetINT_RAW_CH2_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetINT_RAW_CH2_TX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetINT_RAW_CH1_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetINT_RAW_CH1_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetINT_RAW_CH1_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetINT_RAW_CH1_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetINT_RAW_CH1_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetINT_RAW_CH1_TX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetINT_RAW_CH0_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_RAW_CH0_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_RAW_CH0_RX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_RAW_CH0_RX_END_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_RAW_CH0_TX_END_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_RAW_CH0_TX_END_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// RMT.INT_ST: RMT_INT_ST
func (o *RMT_Type) SetINT_ST_CH7_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetINT_ST_CH7_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetINT_ST_CH6_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetINT_ST_CH6_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetINT_ST_CH5_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetINT_ST_CH5_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetINT_ST_CH4_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetINT_ST_CH4_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetINT_ST_CH3_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetINT_ST_CH3_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetINT_ST_CH2_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000000)|value<<26)
}
func (o *RMT_Type) GetINT_ST_CH2_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000000) >> 26
}
func (o *RMT_Type) SetINT_ST_CH1_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *RMT_Type) GetINT_ST_CH1_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000000) >> 25
}
func (o *RMT_Type) SetINT_ST_CH0_TX_THR_EVENT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_ST_CH0_TX_THR_EVENT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000000) >> 24
}
func (o *RMT_Type) SetINT_ST_CH7_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *RMT_Type) GetINT_ST_CH7_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800000) >> 23
}
func (o *RMT_Type) SetINT_ST_CH7_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *RMT_Type) GetINT_ST_CH7_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400000) >> 22
}
func (o *RMT_Type) SetINT_ST_CH7_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *RMT_Type) GetINT_ST_CH7_TX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200000) >> 21
}
func (o *RMT_Type) SetINT_ST_CH6_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *RMT_Type) GetINT_ST_CH6_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100000) >> 20
}
func (o *RMT_Type) SetINT_ST_CH6_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetINT_ST_CH6_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetINT_ST_CH6_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetINT_ST_CH6_TX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetINT_ST_CH5_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetINT_ST_CH5_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetINT_ST_CH5_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetINT_ST_CH5_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetINT_ST_CH5_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *RMT_Type) GetINT_ST_CH5_TX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *RMT_Type) SetINT_ST_CH4_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *RMT_Type) GetINT_ST_CH4_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *RMT_Type) SetINT_ST_CH4_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *RMT_Type) GetINT_ST_CH4_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *RMT_Type) SetINT_ST_CH4_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *RMT_Type) GetINT_ST_CH4_TX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *RMT_Type) SetINT_ST_CH3_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *RMT_Type) GetINT_ST_CH3_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *RMT_Type) SetINT_ST_CH3_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *RMT_Type) GetINT_ST_CH3_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *RMT_Type) SetINT_ST_CH3_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *RMT_Type) GetINT_ST_CH3_TX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *RMT_Type) SetINT_ST_CH2_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *RMT_Type) GetINT_ST_CH2_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *RMT_Type) SetINT_ST_CH2_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetINT_ST_CH2_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetINT_ST_CH2_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetINT_ST_CH2_TX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetINT_ST_CH1_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetINT_ST_CH1_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetINT_ST_CH1_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetINT_ST_CH1_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetINT_ST_CH1_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetINT_ST_CH1_TX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetINT_ST_CH0_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_ST_CH0_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_ST_CH0_RX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_ST_CH0_RX_END_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_ST_CH0_TX_END_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_ST_CH0_TX_END_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// RMT.INT_ENA: RMT_INT_ENA
func (o *RMT_Type) SetINT_ENA_CH7_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetINT_ENA_CH7_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetINT_ENA_CH6_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetINT_ENA_CH6_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetINT_ENA_CH5_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetINT_ENA_CH5_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetINT_ENA_CH4_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetINT_ENA_CH4_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetINT_ENA_CH3_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetINT_ENA_CH3_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetINT_ENA_CH2_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000000)|value<<26)
}
func (o *RMT_Type) GetINT_ENA_CH2_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000000) >> 26
}
func (o *RMT_Type) SetINT_ENA_CH1_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *RMT_Type) GetINT_ENA_CH1_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *RMT_Type) SetINT_ENA_CH0_TX_THR_EVENT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_ENA_CH0_TX_THR_EVENT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *RMT_Type) SetINT_ENA_CH7_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *RMT_Type) GetINT_ENA_CH7_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800000) >> 23
}
func (o *RMT_Type) SetINT_ENA_CH7_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *RMT_Type) GetINT_ENA_CH7_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400000) >> 22
}
func (o *RMT_Type) SetINT_ENA_CH7_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *RMT_Type) GetINT_ENA_CH7_TX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200000) >> 21
}
func (o *RMT_Type) SetINT_ENA_CH6_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *RMT_Type) GetINT_ENA_CH6_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100000) >> 20
}
func (o *RMT_Type) SetINT_ENA_CH6_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetINT_ENA_CH6_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetINT_ENA_CH6_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetINT_ENA_CH6_TX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetINT_ENA_CH5_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetINT_ENA_CH5_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetINT_ENA_CH5_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetINT_ENA_CH5_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetINT_ENA_CH5_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *RMT_Type) GetINT_ENA_CH5_TX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *RMT_Type) SetINT_ENA_CH4_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *RMT_Type) GetINT_ENA_CH4_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *RMT_Type) SetINT_ENA_CH4_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *RMT_Type) GetINT_ENA_CH4_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *RMT_Type) SetINT_ENA_CH4_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *RMT_Type) GetINT_ENA_CH4_TX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *RMT_Type) SetINT_ENA_CH3_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *RMT_Type) GetINT_ENA_CH3_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *RMT_Type) SetINT_ENA_CH3_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *RMT_Type) GetINT_ENA_CH3_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *RMT_Type) SetINT_ENA_CH3_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *RMT_Type) GetINT_ENA_CH3_TX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *RMT_Type) SetINT_ENA_CH2_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *RMT_Type) GetINT_ENA_CH2_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *RMT_Type) SetINT_ENA_CH2_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetINT_ENA_CH2_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetINT_ENA_CH2_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetINT_ENA_CH2_TX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetINT_ENA_CH1_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetINT_ENA_CH1_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetINT_ENA_CH1_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetINT_ENA_CH1_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetINT_ENA_CH1_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetINT_ENA_CH1_TX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetINT_ENA_CH0_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_ENA_CH0_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_ENA_CH0_RX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_ENA_CH0_RX_END_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_ENA_CH0_TX_END_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_ENA_CH0_TX_END_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// RMT.INT_CLR: RMT_INT_CLR
func (o *RMT_Type) SetINT_CLR_CH7_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80000000)|value<<31)
}
func (o *RMT_Type) GetINT_CLR_CH7_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80000000) >> 31
}
func (o *RMT_Type) SetINT_CLR_CH6_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40000000)|value<<30)
}
func (o *RMT_Type) GetINT_CLR_CH6_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40000000) >> 30
}
func (o *RMT_Type) SetINT_CLR_CH5_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000000)|value<<29)
}
func (o *RMT_Type) GetINT_CLR_CH5_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000000) >> 29
}
func (o *RMT_Type) SetINT_CLR_CH4_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000000)|value<<28)
}
func (o *RMT_Type) GetINT_CLR_CH4_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000000) >> 28
}
func (o *RMT_Type) SetINT_CLR_CH3_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000000)|value<<27)
}
func (o *RMT_Type) GetINT_CLR_CH3_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000000) >> 27
}
func (o *RMT_Type) SetINT_CLR_CH2_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000000)|value<<26)
}
func (o *RMT_Type) GetINT_CLR_CH2_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000000) >> 26
}
func (o *RMT_Type) SetINT_CLR_CH1_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *RMT_Type) GetINT_CLR_CH1_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000000) >> 25
}
func (o *RMT_Type) SetINT_CLR_CH0_TX_THR_EVENT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *RMT_Type) GetINT_CLR_CH0_TX_THR_EVENT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *RMT_Type) SetINT_CLR_CH7_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *RMT_Type) GetINT_CLR_CH7_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800000) >> 23
}
func (o *RMT_Type) SetINT_CLR_CH7_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *RMT_Type) GetINT_CLR_CH7_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400000) >> 22
}
func (o *RMT_Type) SetINT_CLR_CH7_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *RMT_Type) GetINT_CLR_CH7_TX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200000) >> 21
}
func (o *RMT_Type) SetINT_CLR_CH6_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *RMT_Type) GetINT_CLR_CH6_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100000) >> 20
}
func (o *RMT_Type) SetINT_CLR_CH6_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *RMT_Type) GetINT_CLR_CH6_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80000) >> 19
}
func (o *RMT_Type) SetINT_CLR_CH6_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *RMT_Type) GetINT_CLR_CH6_TX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40000) >> 18
}
func (o *RMT_Type) SetINT_CLR_CH5_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *RMT_Type) GetINT_CLR_CH5_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000) >> 17
}
func (o *RMT_Type) SetINT_CLR_CH5_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *RMT_Type) GetINT_CLR_CH5_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *RMT_Type) SetINT_CLR_CH5_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *RMT_Type) GetINT_CLR_CH5_TX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *RMT_Type) SetINT_CLR_CH4_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *RMT_Type) GetINT_CLR_CH4_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *RMT_Type) SetINT_CLR_CH4_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *RMT_Type) GetINT_CLR_CH4_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *RMT_Type) SetINT_CLR_CH4_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *RMT_Type) GetINT_CLR_CH4_TX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *RMT_Type) SetINT_CLR_CH3_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *RMT_Type) GetINT_CLR_CH3_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *RMT_Type) SetINT_CLR_CH3_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *RMT_Type) GetINT_CLR_CH3_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *RMT_Type) SetINT_CLR_CH3_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *RMT_Type) GetINT_CLR_CH3_TX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *RMT_Type) SetINT_CLR_CH2_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *RMT_Type) GetINT_CLR_CH2_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *RMT_Type) SetINT_CLR_CH2_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *RMT_Type) GetINT_CLR_CH2_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *RMT_Type) SetINT_CLR_CH2_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *RMT_Type) GetINT_CLR_CH2_TX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *RMT_Type) SetINT_CLR_CH1_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *RMT_Type) GetINT_CLR_CH1_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *RMT_Type) SetINT_CLR_CH1_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *RMT_Type) GetINT_CLR_CH1_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *RMT_Type) SetINT_CLR_CH1_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *RMT_Type) GetINT_CLR_CH1_TX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *RMT_Type) SetINT_CLR_CH0_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *RMT_Type) GetINT_CLR_CH0_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *RMT_Type) SetINT_CLR_CH0_RX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetINT_CLR_CH0_RX_END_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetINT_CLR_CH0_TX_END_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetINT_CLR_CH0_TX_END_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// RMT.CH0CARRIER_DUTY: RMT_CH0CARRIER_DUTY
func (o *RMT_Type) SetCH0CARRIER_DUTY_CARRIER_HIGH_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH0CARRIER_DUTY_CARRIER_HIGH_CH0() uint32 {
	return (volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH0CARRIER_DUTY_CARRIER_LOW_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH0CARRIER_DUTY_CARRIER_LOW_CH0() uint32 {
	return volatile.LoadUint32(&o.CH0CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH1CARRIER_DUTY: RMT_CH1CARRIER_DUTY
func (o *RMT_Type) SetCH1CARRIER_DUTY_CARRIER_HIGH_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH1CARRIER_DUTY_CARRIER_HIGH_CH1() uint32 {
	return (volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH1CARRIER_DUTY_CARRIER_LOW_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH1CARRIER_DUTY_CARRIER_LOW_CH1() uint32 {
	return volatile.LoadUint32(&o.CH1CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH2CARRIER_DUTY: RMT_CH2CARRIER_DUTY
func (o *RMT_Type) SetCH2CARRIER_DUTY_CARRIER_HIGH_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH2CARRIER_DUTY_CARRIER_HIGH_CH2() uint32 {
	return (volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH2CARRIER_DUTY_CARRIER_LOW_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH2CARRIER_DUTY_CARRIER_LOW_CH2() uint32 {
	return volatile.LoadUint32(&o.CH2CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH3CARRIER_DUTY: RMT_CH3CARRIER_DUTY
func (o *RMT_Type) SetCH3CARRIER_DUTY_CARRIER_HIGH_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH3CARRIER_DUTY_CARRIER_HIGH_CH3() uint32 {
	return (volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH3CARRIER_DUTY_CARRIER_LOW_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH3CARRIER_DUTY_CARRIER_LOW_CH3() uint32 {
	return volatile.LoadUint32(&o.CH3CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH4CARRIER_DUTY: RMT_CH4CARRIER_DUTY
func (o *RMT_Type) SetCH4CARRIER_DUTY_CARRIER_HIGH_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH4CARRIER_DUTY_CARRIER_HIGH_CH4() uint32 {
	return (volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH4CARRIER_DUTY_CARRIER_LOW_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH4CARRIER_DUTY_CARRIER_LOW_CH4() uint32 {
	return volatile.LoadUint32(&o.CH4CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH5CARRIER_DUTY: RMT_CH5CARRIER_DUTY
func (o *RMT_Type) SetCH5CARRIER_DUTY_CARRIER_HIGH_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH5CARRIER_DUTY_CARRIER_HIGH_CH5() uint32 {
	return (volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH5CARRIER_DUTY_CARRIER_LOW_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH5CARRIER_DUTY_CARRIER_LOW_CH5() uint32 {
	return volatile.LoadUint32(&o.CH5CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH6CARRIER_DUTY: RMT_CH6CARRIER_DUTY
func (o *RMT_Type) SetCH6CARRIER_DUTY_CARRIER_HIGH_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH6CARRIER_DUTY_CARRIER_HIGH_CH6() uint32 {
	return (volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH6CARRIER_DUTY_CARRIER_LOW_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH6CARRIER_DUTY_CARRIER_LOW_CH6() uint32 {
	return volatile.LoadUint32(&o.CH6CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH7CARRIER_DUTY: RMT_CH7CARRIER_DUTY
func (o *RMT_Type) SetCH7CARRIER_DUTY_CARRIER_HIGH_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg)&^(0xffff0000)|value<<16)
}
func (o *RMT_Type) GetCH7CARRIER_DUTY_CARRIER_HIGH_CH7() uint32 {
	return (volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg) & 0xffff0000) >> 16
}
func (o *RMT_Type) SetCH7CARRIER_DUTY_CARRIER_LOW_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7CARRIER_DUTY.Reg, volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg)&^(0xffff)|value)
}
func (o *RMT_Type) GetCH7CARRIER_DUTY_CARRIER_LOW_CH7() uint32 {
	return volatile.LoadUint32(&o.CH7CARRIER_DUTY.Reg) & 0xffff
}

// RMT.CH0_TX_LIM: RMT_CH0_TX_LIM
func (o *RMT_Type) SetCH0_TX_LIM_TX_LIM_CH0(value uint32) {
	volatile.StoreUint32(&o.CH0_TX_LIM.Reg, volatile.LoadUint32(&o.CH0_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH0_TX_LIM_TX_LIM_CH0() uint32 {
	return volatile.LoadUint32(&o.CH0_TX_LIM.Reg) & 0x1ff
}

// RMT.CH1_TX_LIM: RMT_CH1_TX_LIM
func (o *RMT_Type) SetCH1_TX_LIM_TX_LIM_CH1(value uint32) {
	volatile.StoreUint32(&o.CH1_TX_LIM.Reg, volatile.LoadUint32(&o.CH1_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH1_TX_LIM_TX_LIM_CH1() uint32 {
	return volatile.LoadUint32(&o.CH1_TX_LIM.Reg) & 0x1ff
}

// RMT.CH2_TX_LIM: RMT_CH2_TX_LIM
func (o *RMT_Type) SetCH2_TX_LIM_TX_LIM_CH2(value uint32) {
	volatile.StoreUint32(&o.CH2_TX_LIM.Reg, volatile.LoadUint32(&o.CH2_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH2_TX_LIM_TX_LIM_CH2() uint32 {
	return volatile.LoadUint32(&o.CH2_TX_LIM.Reg) & 0x1ff
}

// RMT.CH3_TX_LIM: RMT_CH3_TX_LIM
func (o *RMT_Type) SetCH3_TX_LIM_TX_LIM_CH3(value uint32) {
	volatile.StoreUint32(&o.CH3_TX_LIM.Reg, volatile.LoadUint32(&o.CH3_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH3_TX_LIM_TX_LIM_CH3() uint32 {
	return volatile.LoadUint32(&o.CH3_TX_LIM.Reg) & 0x1ff
}

// RMT.CH4_TX_LIM: RMT_CH4_TX_LIM
func (o *RMT_Type) SetCH4_TX_LIM_TX_LIM_CH4(value uint32) {
	volatile.StoreUint32(&o.CH4_TX_LIM.Reg, volatile.LoadUint32(&o.CH4_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH4_TX_LIM_TX_LIM_CH4() uint32 {
	return volatile.LoadUint32(&o.CH4_TX_LIM.Reg) & 0x1ff
}

// RMT.CH5_TX_LIM: RMT_CH5_TX_LIM
func (o *RMT_Type) SetCH5_TX_LIM_TX_LIM_CH5(value uint32) {
	volatile.StoreUint32(&o.CH5_TX_LIM.Reg, volatile.LoadUint32(&o.CH5_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH5_TX_LIM_TX_LIM_CH5() uint32 {
	return volatile.LoadUint32(&o.CH5_TX_LIM.Reg) & 0x1ff
}

// RMT.CH6_TX_LIM: RMT_CH6_TX_LIM
func (o *RMT_Type) SetCH6_TX_LIM_TX_LIM_CH6(value uint32) {
	volatile.StoreUint32(&o.CH6_TX_LIM.Reg, volatile.LoadUint32(&o.CH6_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH6_TX_LIM_TX_LIM_CH6() uint32 {
	return volatile.LoadUint32(&o.CH6_TX_LIM.Reg) & 0x1ff
}

// RMT.CH7_TX_LIM: RMT_CH7_TX_LIM
func (o *RMT_Type) SetCH7_TX_LIM_TX_LIM_CH7(value uint32) {
	volatile.StoreUint32(&o.CH7_TX_LIM.Reg, volatile.LoadUint32(&o.CH7_TX_LIM.Reg)&^(0x1ff)|value)
}
func (o *RMT_Type) GetCH7_TX_LIM_TX_LIM_CH7() uint32 {
	return volatile.LoadUint32(&o.CH7_TX_LIM.Reg) & 0x1ff
}

// RMT.APB_CONF: RMT_APB_CONF
func (o *RMT_Type) SetAPB_CONF_MEM_TX_WRAP_EN(value uint32) {
	volatile.StoreUint32(&o.APB_CONF.Reg, volatile.LoadUint32(&o.APB_CONF.Reg)&^(0x2)|value<<1)
}
func (o *RMT_Type) GetAPB_CONF_MEM_TX_WRAP_EN() uint32 {
	return (volatile.LoadUint32(&o.APB_CONF.Reg) & 0x2) >> 1
}
func (o *RMT_Type) SetAPB_CONF_APB_FIFO_MASK(value uint32) {
	volatile.StoreUint32(&o.APB_CONF.Reg, volatile.LoadUint32(&o.APB_CONF.Reg)&^(0x1)|value)
}
func (o *RMT_Type) GetAPB_CONF_APB_FIFO_MASK() uint32 {
	return volatile.LoadUint32(&o.APB_CONF.Reg) & 0x1
}

// RMT.DATE: RMT_DATE
func (o *RMT_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *RMT_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type EMAC_Type struct {
}

type RTCMEM2_Type struct {
}

type GPIO_Type struct {
	BT_SELECT          volatile.Register32 // 0x0
	OUT                volatile.Register32 // 0x4
	OUT_W1TS           volatile.Register32 // 0x8
	OUT_W1TC           volatile.Register32 // 0xC
	OUT1               volatile.Register32 // 0x10
	OUT1_W1TS          volatile.Register32 // 0x14
	OUT1_W1TC          volatile.Register32 // 0x18
	SDIO_SELECT        volatile.Register32 // 0x1C
	ENABLE             volatile.Register32 // 0x20
	ENABLE_W1TS        volatile.Register32 // 0x24
	ENABLE_W1TC        volatile.Register32 // 0x28
	ENABLE1            volatile.Register32 // 0x2C
	ENABLE1_W1TS       volatile.Register32 // 0x30
	ENABLE1_W1TC       volatile.Register32 // 0x34
	STRAP              volatile.Register32 // 0x38
	IN                 volatile.Register32 // 0x3C
	IN1                volatile.Register32 // 0x40
	STATUS             volatile.Register32 // 0x44
	STATUS_W1TS        volatile.Register32 // 0x48
	STATUS_W1TC        volatile.Register32 // 0x4C
	STATUS1            volatile.Register32 // 0x50
	STATUS1_W1TS       volatile.Register32 // 0x54
	STATUS1_W1TC       volatile.Register32 // 0x58
	_                  [4]byte
	ACPU_INT           volatile.Register32 // 0x60
	ACPU_NMI_INT       volatile.Register32 // 0x64
	PCPU_INT           volatile.Register32 // 0x68
	PCPU_NMI_INT       volatile.Register32 // 0x6C
	CPUSDIO_INT        volatile.Register32 // 0x70
	ACPU_INT1          volatile.Register32 // 0x74
	ACPU_NMI_INT1      volatile.Register32 // 0x78
	PCPU_INT1          volatile.Register32 // 0x7C
	PCPU_NMI_INT1      volatile.Register32 // 0x80
	CPUSDIO_INT1       volatile.Register32 // 0x84
	PIN0               volatile.Register32 // 0x88
	PIN1               volatile.Register32 // 0x8C
	PIN2               volatile.Register32 // 0x90
	PIN3               volatile.Register32 // 0x94
	PIN4               volatile.Register32 // 0x98
	PIN5               volatile.Register32 // 0x9C
	PIN6               volatile.Register32 // 0xA0
	PIN7               volatile.Register32 // 0xA4
	PIN8               volatile.Register32 // 0xA8
	PIN9               volatile.Register32 // 0xAC
	PIN10              volatile.Register32 // 0xB0
	PIN11              volatile.Register32 // 0xB4
	PIN12              volatile.Register32 // 0xB8
	PIN13              volatile.Register32 // 0xBC
	PIN14              volatile.Register32 // 0xC0
	PIN15              volatile.Register32 // 0xC4
	PIN16              volatile.Register32 // 0xC8
	PIN17              volatile.Register32 // 0xCC
	PIN18              volatile.Register32 // 0xD0
	PIN19              volatile.Register32 // 0xD4
	PIN20              volatile.Register32 // 0xD8
	PIN21              volatile.Register32 // 0xDC
	PIN22              volatile.Register32 // 0xE0
	PIN23              volatile.Register32 // 0xE4
	PIN24              volatile.Register32 // 0xE8
	PIN25              volatile.Register32 // 0xEC
	PIN26              volatile.Register32 // 0xF0
	PIN27              volatile.Register32 // 0xF4
	PIN28              volatile.Register32 // 0xF8
	PIN29              volatile.Register32 // 0xFC
	PIN30              volatile.Register32 // 0x100
	PIN31              volatile.Register32 // 0x104
	PIN32              volatile.Register32 // 0x108
	PIN33              volatile.Register32 // 0x10C
	PIN34              volatile.Register32 // 0x110
	PIN35              volatile.Register32 // 0x114
	PIN36              volatile.Register32 // 0x118
	PIN37              volatile.Register32 // 0x11C
	PIN38              volatile.Register32 // 0x120
	PIN39              volatile.Register32 // 0x124
	CALI_CONF          volatile.Register32 // 0x128
	CALI_DATA          volatile.Register32 // 0x12C
	FUNC0_IN_SEL_CFG   volatile.Register32 // 0x130
	FUNC1_IN_SEL_CFG   volatile.Register32 // 0x134
	FUNC2_IN_SEL_CFG   volatile.Register32 // 0x138
	FUNC3_IN_SEL_CFG   volatile.Register32 // 0x13C
	FUNC4_IN_SEL_CFG   volatile.Register32 // 0x140
	FUNC5_IN_SEL_CFG   volatile.Register32 // 0x144
	FUNC6_IN_SEL_CFG   volatile.Register32 // 0x148
	FUNC7_IN_SEL_CFG   volatile.Register32 // 0x14C
	FUNC8_IN_SEL_CFG   volatile.Register32 // 0x150
	FUNC9_IN_SEL_CFG   volatile.Register32 // 0x154
	FUNC10_IN_SEL_CFG  volatile.Register32 // 0x158
	FUNC11_IN_SEL_CFG  volatile.Register32 // 0x15C
	FUNC12_IN_SEL_CFG  volatile.Register32 // 0x160
	FUNC13_IN_SEL_CFG  volatile.Register32 // 0x164
	FUNC14_IN_SEL_CFG  volatile.Register32 // 0x168
	FUNC15_IN_SEL_CFG  volatile.Register32 // 0x16C
	FUNC16_IN_SEL_CFG  volatile.Register32 // 0x170
	FUNC17_IN_SEL_CFG  volatile.Register32 // 0x174
	FUNC18_IN_SEL_CFG  volatile.Register32 // 0x178
	FUNC19_IN_SEL_CFG  volatile.Register32 // 0x17C
	FUNC20_IN_SEL_CFG  volatile.Register32 // 0x180
	FUNC21_IN_SEL_CFG  volatile.Register32 // 0x184
	FUNC22_IN_SEL_CFG  volatile.Register32 // 0x188
	FUNC23_IN_SEL_CFG  volatile.Register32 // 0x18C
	FUNC24_IN_SEL_CFG  volatile.Register32 // 0x190
	FUNC25_IN_SEL_CFG  volatile.Register32 // 0x194
	FUNC26_IN_SEL_CFG  volatile.Register32 // 0x198
	FUNC27_IN_SEL_CFG  volatile.Register32 // 0x19C
	FUNC28_IN_SEL_CFG  volatile.Register32 // 0x1A0
	FUNC29_IN_SEL_CFG  volatile.Register32 // 0x1A4
	FUNC30_IN_SEL_CFG  volatile.Register32 // 0x1A8
	FUNC31_IN_SEL_CFG  volatile.Register32 // 0x1AC
	FUNC32_IN_SEL_CFG  volatile.Register32 // 0x1B0
	FUNC33_IN_SEL_CFG  volatile.Register32 // 0x1B4
	FUNC34_IN_SEL_CFG  volatile.Register32 // 0x1B8
	FUNC35_IN_SEL_CFG  volatile.Register32 // 0x1BC
	FUNC36_IN_SEL_CFG  volatile.Register32 // 0x1C0
	FUNC37_IN_SEL_CFG  volatile.Register32 // 0x1C4
	FUNC38_IN_SEL_CFG  volatile.Register32 // 0x1C8
	FUNC39_IN_SEL_CFG  volatile.Register32 // 0x1CC
	FUNC40_IN_SEL_CFG  volatile.Register32 // 0x1D0
	FUNC41_IN_SEL_CFG  volatile.Register32 // 0x1D4
	FUNC42_IN_SEL_CFG  volatile.Register32 // 0x1D8
	FUNC43_IN_SEL_CFG  volatile.Register32 // 0x1DC
	FUNC44_IN_SEL_CFG  volatile.Register32 // 0x1E0
	FUNC45_IN_SEL_CFG  volatile.Register32 // 0x1E4
	FUNC46_IN_SEL_CFG  volatile.Register32 // 0x1E8
	FUNC47_IN_SEL_CFG  volatile.Register32 // 0x1EC
	FUNC48_IN_SEL_CFG  volatile.Register32 // 0x1F0
	FUNC49_IN_SEL_CFG  volatile.Register32 // 0x1F4
	FUNC50_IN_SEL_CFG  volatile.Register32 // 0x1F8
	FUNC51_IN_SEL_CFG  volatile.Register32 // 0x1FC
	FUNC52_IN_SEL_CFG  volatile.Register32 // 0x200
	FUNC53_IN_SEL_CFG  volatile.Register32 // 0x204
	FUNC54_IN_SEL_CFG  volatile.Register32 // 0x208
	FUNC55_IN_SEL_CFG  volatile.Register32 // 0x20C
	FUNC56_IN_SEL_CFG  volatile.Register32 // 0x210
	FUNC57_IN_SEL_CFG  volatile.Register32 // 0x214
	FUNC58_IN_SEL_CFG  volatile.Register32 // 0x218
	FUNC59_IN_SEL_CFG  volatile.Register32 // 0x21C
	FUNC60_IN_SEL_CFG  volatile.Register32 // 0x220
	FUNC61_IN_SEL_CFG  volatile.Register32 // 0x224
	FUNC62_IN_SEL_CFG  volatile.Register32 // 0x228
	FUNC63_IN_SEL_CFG  volatile.Register32 // 0x22C
	FUNC64_IN_SEL_CFG  volatile.Register32 // 0x230
	FUNC65_IN_SEL_CFG  volatile.Register32 // 0x234
	FUNC66_IN_SEL_CFG  volatile.Register32 // 0x238
	FUNC67_IN_SEL_CFG  volatile.Register32 // 0x23C
	FUNC68_IN_SEL_CFG  volatile.Register32 // 0x240
	FUNC69_IN_SEL_CFG  volatile.Register32 // 0x244
	FUNC70_IN_SEL_CFG  volatile.Register32 // 0x248
	FUNC71_IN_SEL_CFG  volatile.Register32 // 0x24C
	FUNC72_IN_SEL_CFG  volatile.Register32 // 0x250
	FUNC73_IN_SEL_CFG  volatile.Register32 // 0x254
	FUNC74_IN_SEL_CFG  volatile.Register32 // 0x258
	FUNC75_IN_SEL_CFG  volatile.Register32 // 0x25C
	FUNC76_IN_SEL_CFG  volatile.Register32 // 0x260
	FUNC77_IN_SEL_CFG  volatile.Register32 // 0x264
	FUNC78_IN_SEL_CFG  volatile.Register32 // 0x268
	FUNC79_IN_SEL_CFG  volatile.Register32 // 0x26C
	FUNC80_IN_SEL_CFG  volatile.Register32 // 0x270
	FUNC81_IN_SEL_CFG  volatile.Register32 // 0x274
	FUNC82_IN_SEL_CFG  volatile.Register32 // 0x278
	FUNC83_IN_SEL_CFG  volatile.Register32 // 0x27C
	FUNC84_IN_SEL_CFG  volatile.Register32 // 0x280
	FUNC85_IN_SEL_CFG  volatile.Register32 // 0x284
	FUNC86_IN_SEL_CFG  volatile.Register32 // 0x288
	FUNC87_IN_SEL_CFG  volatile.Register32 // 0x28C
	FUNC88_IN_SEL_CFG  volatile.Register32 // 0x290
	FUNC89_IN_SEL_CFG  volatile.Register32 // 0x294
	FUNC90_IN_SEL_CFG  volatile.Register32 // 0x298
	FUNC91_IN_SEL_CFG  volatile.Register32 // 0x29C
	FUNC92_IN_SEL_CFG  volatile.Register32 // 0x2A0
	FUNC93_IN_SEL_CFG  volatile.Register32 // 0x2A4
	FUNC94_IN_SEL_CFG  volatile.Register32 // 0x2A8
	FUNC95_IN_SEL_CFG  volatile.Register32 // 0x2AC
	FUNC96_IN_SEL_CFG  volatile.Register32 // 0x2B0
	FUNC97_IN_SEL_CFG  volatile.Register32 // 0x2B4
	FUNC98_IN_SEL_CFG  volatile.Register32 // 0x2B8
	FUNC99_IN_SEL_CFG  volatile.Register32 // 0x2BC
	FUNC100_IN_SEL_CFG volatile.Register32 // 0x2C0
	FUNC101_IN_SEL_CFG volatile.Register32 // 0x2C4
	FUNC102_IN_SEL_CFG volatile.Register32 // 0x2C8
	FUNC103_IN_SEL_CFG volatile.Register32 // 0x2CC
	FUNC104_IN_SEL_CFG volatile.Register32 // 0x2D0
	FUNC105_IN_SEL_CFG volatile.Register32 // 0x2D4
	FUNC106_IN_SEL_CFG volatile.Register32 // 0x2D8
	FUNC107_IN_SEL_CFG volatile.Register32 // 0x2DC
	FUNC108_IN_SEL_CFG volatile.Register32 // 0x2E0
	FUNC109_IN_SEL_CFG volatile.Register32 // 0x2E4
	FUNC110_IN_SEL_CFG volatile.Register32 // 0x2E8
	FUNC111_IN_SEL_CFG volatile.Register32 // 0x2EC
	FUNC112_IN_SEL_CFG volatile.Register32 // 0x2F0
	FUNC113_IN_SEL_CFG volatile.Register32 // 0x2F4
	FUNC114_IN_SEL_CFG volatile.Register32 // 0x2F8
	FUNC115_IN_SEL_CFG volatile.Register32 // 0x2FC
	FUNC116_IN_SEL_CFG volatile.Register32 // 0x300
	FUNC117_IN_SEL_CFG volatile.Register32 // 0x304
	FUNC118_IN_SEL_CFG volatile.Register32 // 0x308
	FUNC119_IN_SEL_CFG volatile.Register32 // 0x30C
	FUNC120_IN_SEL_CFG volatile.Register32 // 0x310
	FUNC121_IN_SEL_CFG volatile.Register32 // 0x314
	FUNC122_IN_SEL_CFG volatile.Register32 // 0x318
	FUNC123_IN_SEL_CFG volatile.Register32 // 0x31C
	FUNC124_IN_SEL_CFG volatile.Register32 // 0x320
	FUNC125_IN_SEL_CFG volatile.Register32 // 0x324
	FUNC126_IN_SEL_CFG volatile.Register32 // 0x328
	FUNC127_IN_SEL_CFG volatile.Register32 // 0x32C
	FUNC128_IN_SEL_CFG volatile.Register32 // 0x330
	FUNC129_IN_SEL_CFG volatile.Register32 // 0x334
	FUNC130_IN_SEL_CFG volatile.Register32 // 0x338
	FUNC131_IN_SEL_CFG volatile.Register32 // 0x33C
	FUNC132_IN_SEL_CFG volatile.Register32 // 0x340
	FUNC133_IN_SEL_CFG volatile.Register32 // 0x344
	FUNC134_IN_SEL_CFG volatile.Register32 // 0x348
	FUNC135_IN_SEL_CFG volatile.Register32 // 0x34C
	FUNC136_IN_SEL_CFG volatile.Register32 // 0x350
	FUNC137_IN_SEL_CFG volatile.Register32 // 0x354
	FUNC138_IN_SEL_CFG volatile.Register32 // 0x358
	FUNC139_IN_SEL_CFG volatile.Register32 // 0x35C
	FUNC140_IN_SEL_CFG volatile.Register32 // 0x360
	FUNC141_IN_SEL_CFG volatile.Register32 // 0x364
	FUNC142_IN_SEL_CFG volatile.Register32 // 0x368
	FUNC143_IN_SEL_CFG volatile.Register32 // 0x36C
	FUNC144_IN_SEL_CFG volatile.Register32 // 0x370
	FUNC145_IN_SEL_CFG volatile.Register32 // 0x374
	FUNC146_IN_SEL_CFG volatile.Register32 // 0x378
	FUNC147_IN_SEL_CFG volatile.Register32 // 0x37C
	FUNC148_IN_SEL_CFG volatile.Register32 // 0x380
	FUNC149_IN_SEL_CFG volatile.Register32 // 0x384
	FUNC150_IN_SEL_CFG volatile.Register32 // 0x388
	FUNC151_IN_SEL_CFG volatile.Register32 // 0x38C
	FUNC152_IN_SEL_CFG volatile.Register32 // 0x390
	FUNC153_IN_SEL_CFG volatile.Register32 // 0x394
	FUNC154_IN_SEL_CFG volatile.Register32 // 0x398
	FUNC155_IN_SEL_CFG volatile.Register32 // 0x39C
	FUNC156_IN_SEL_CFG volatile.Register32 // 0x3A0
	FUNC157_IN_SEL_CFG volatile.Register32 // 0x3A4
	FUNC158_IN_SEL_CFG volatile.Register32 // 0x3A8
	FUNC159_IN_SEL_CFG volatile.Register32 // 0x3AC
	FUNC160_IN_SEL_CFG volatile.Register32 // 0x3B0
	FUNC161_IN_SEL_CFG volatile.Register32 // 0x3B4
	FUNC162_IN_SEL_CFG volatile.Register32 // 0x3B8
	FUNC163_IN_SEL_CFG volatile.Register32 // 0x3BC
	FUNC164_IN_SEL_CFG volatile.Register32 // 0x3C0
	FUNC165_IN_SEL_CFG volatile.Register32 // 0x3C4
	FUNC166_IN_SEL_CFG volatile.Register32 // 0x3C8
	FUNC167_IN_SEL_CFG volatile.Register32 // 0x3CC
	FUNC168_IN_SEL_CFG volatile.Register32 // 0x3D0
	FUNC169_IN_SEL_CFG volatile.Register32 // 0x3D4
	FUNC170_IN_SEL_CFG volatile.Register32 // 0x3D8
	FUNC171_IN_SEL_CFG volatile.Register32 // 0x3DC
	FUNC172_IN_SEL_CFG volatile.Register32 // 0x3E0
	FUNC173_IN_SEL_CFG volatile.Register32 // 0x3E4
	FUNC174_IN_SEL_CFG volatile.Register32 // 0x3E8
	FUNC175_IN_SEL_CFG volatile.Register32 // 0x3EC
	FUNC176_IN_SEL_CFG volatile.Register32 // 0x3F0
	FUNC177_IN_SEL_CFG volatile.Register32 // 0x3F4
	FUNC178_IN_SEL_CFG volatile.Register32 // 0x3F8
	FUNC179_IN_SEL_CFG volatile.Register32 // 0x3FC
	FUNC180_IN_SEL_CFG volatile.Register32 // 0x400
	FUNC181_IN_SEL_CFG volatile.Register32 // 0x404
	FUNC182_IN_SEL_CFG volatile.Register32 // 0x408
	FUNC183_IN_SEL_CFG volatile.Register32 // 0x40C
	FUNC184_IN_SEL_CFG volatile.Register32 // 0x410
	FUNC185_IN_SEL_CFG volatile.Register32 // 0x414
	FUNC186_IN_SEL_CFG volatile.Register32 // 0x418
	FUNC187_IN_SEL_CFG volatile.Register32 // 0x41C
	FUNC188_IN_SEL_CFG volatile.Register32 // 0x420
	FUNC189_IN_SEL_CFG volatile.Register32 // 0x424
	FUNC190_IN_SEL_CFG volatile.Register32 // 0x428
	FUNC191_IN_SEL_CFG volatile.Register32 // 0x42C
	FUNC192_IN_SEL_CFG volatile.Register32 // 0x430
	FUNC193_IN_SEL_CFG volatile.Register32 // 0x434
	FUNC194_IN_SEL_CFG volatile.Register32 // 0x438
	FUNC195_IN_SEL_CFG volatile.Register32 // 0x43C
	FUNC196_IN_SEL_CFG volatile.Register32 // 0x440
	FUNC197_IN_SEL_CFG volatile.Register32 // 0x444
	FUNC198_IN_SEL_CFG volatile.Register32 // 0x448
	FUNC199_IN_SEL_CFG volatile.Register32 // 0x44C
	FUNC200_IN_SEL_CFG volatile.Register32 // 0x450
	FUNC201_IN_SEL_CFG volatile.Register32 // 0x454
	FUNC202_IN_SEL_CFG volatile.Register32 // 0x458
	FUNC203_IN_SEL_CFG volatile.Register32 // 0x45C
	FUNC204_IN_SEL_CFG volatile.Register32 // 0x460
	FUNC205_IN_SEL_CFG volatile.Register32 // 0x464
	FUNC206_IN_SEL_CFG volatile.Register32 // 0x468
	FUNC207_IN_SEL_CFG volatile.Register32 // 0x46C
	FUNC208_IN_SEL_CFG volatile.Register32 // 0x470
	FUNC209_IN_SEL_CFG volatile.Register32 // 0x474
	FUNC210_IN_SEL_CFG volatile.Register32 // 0x478
	FUNC211_IN_SEL_CFG volatile.Register32 // 0x47C
	FUNC212_IN_SEL_CFG volatile.Register32 // 0x480
	FUNC213_IN_SEL_CFG volatile.Register32 // 0x484
	FUNC214_IN_SEL_CFG volatile.Register32 // 0x488
	FUNC215_IN_SEL_CFG volatile.Register32 // 0x48C
	FUNC216_IN_SEL_CFG volatile.Register32 // 0x490
	FUNC217_IN_SEL_CFG volatile.Register32 // 0x494
	FUNC218_IN_SEL_CFG volatile.Register32 // 0x498
	FUNC219_IN_SEL_CFG volatile.Register32 // 0x49C
	FUNC220_IN_SEL_CFG volatile.Register32 // 0x4A0
	FUNC221_IN_SEL_CFG volatile.Register32 // 0x4A4
	FUNC222_IN_SEL_CFG volatile.Register32 // 0x4A8
	FUNC223_IN_SEL_CFG volatile.Register32 // 0x4AC
	FUNC224_IN_SEL_CFG volatile.Register32 // 0x4B0
	FUNC225_IN_SEL_CFG volatile.Register32 // 0x4B4
	FUNC226_IN_SEL_CFG volatile.Register32 // 0x4B8
	FUNC227_IN_SEL_CFG volatile.Register32 // 0x4BC
	FUNC228_IN_SEL_CFG volatile.Register32 // 0x4C0
	FUNC229_IN_SEL_CFG volatile.Register32 // 0x4C4
	FUNC230_IN_SEL_CFG volatile.Register32 // 0x4C8
	FUNC231_IN_SEL_CFG volatile.Register32 // 0x4CC
	FUNC232_IN_SEL_CFG volatile.Register32 // 0x4D0
	FUNC233_IN_SEL_CFG volatile.Register32 // 0x4D4
	FUNC234_IN_SEL_CFG volatile.Register32 // 0x4D8
	FUNC235_IN_SEL_CFG volatile.Register32 // 0x4DC
	FUNC236_IN_SEL_CFG volatile.Register32 // 0x4E0
	FUNC237_IN_SEL_CFG volatile.Register32 // 0x4E4
	FUNC238_IN_SEL_CFG volatile.Register32 // 0x4E8
	FUNC239_IN_SEL_CFG volatile.Register32 // 0x4EC
	FUNC240_IN_SEL_CFG volatile.Register32 // 0x4F0
	FUNC241_IN_SEL_CFG volatile.Register32 // 0x4F4
	FUNC242_IN_SEL_CFG volatile.Register32 // 0x4F8
	FUNC243_IN_SEL_CFG volatile.Register32 // 0x4FC
	FUNC244_IN_SEL_CFG volatile.Register32 // 0x500
	FUNC245_IN_SEL_CFG volatile.Register32 // 0x504
	FUNC246_IN_SEL_CFG volatile.Register32 // 0x508
	FUNC247_IN_SEL_CFG volatile.Register32 // 0x50C
	FUNC248_IN_SEL_CFG volatile.Register32 // 0x510
	FUNC249_IN_SEL_CFG volatile.Register32 // 0x514
	FUNC250_IN_SEL_CFG volatile.Register32 // 0x518
	FUNC251_IN_SEL_CFG volatile.Register32 // 0x51C
	FUNC252_IN_SEL_CFG volatile.Register32 // 0x520
	FUNC253_IN_SEL_CFG volatile.Register32 // 0x524
	FUNC254_IN_SEL_CFG volatile.Register32 // 0x528
	FUNC255_IN_SEL_CFG volatile.Register32 // 0x52C
	FUNC0_OUT_SEL_CFG  volatile.Register32 // 0x530
	FUNC1_OUT_SEL_CFG  volatile.Register32 // 0x534
	FUNC2_OUT_SEL_CFG  volatile.Register32 // 0x538
	FUNC3_OUT_SEL_CFG  volatile.Register32 // 0x53C
	FUNC4_OUT_SEL_CFG  volatile.Register32 // 0x540
	FUNC5_OUT_SEL_CFG  volatile.Register32 // 0x544
	FUNC6_OUT_SEL_CFG  volatile.Register32 // 0x548
	FUNC7_OUT_SEL_CFG  volatile.Register32 // 0x54C
	FUNC8_OUT_SEL_CFG  volatile.Register32 // 0x550
	FUNC9_OUT_SEL_CFG  volatile.Register32 // 0x554
	FUNC10_OUT_SEL_CFG volatile.Register32 // 0x558
	FUNC11_OUT_SEL_CFG volatile.Register32 // 0x55C
	FUNC12_OUT_SEL_CFG volatile.Register32 // 0x560
	FUNC13_OUT_SEL_CFG volatile.Register32 // 0x564
	FUNC14_OUT_SEL_CFG volatile.Register32 // 0x568
	FUNC15_OUT_SEL_CFG volatile.Register32 // 0x56C
	FUNC16_OUT_SEL_CFG volatile.Register32 // 0x570
	FUNC17_OUT_SEL_CFG volatile.Register32 // 0x574
	FUNC18_OUT_SEL_CFG volatile.Register32 // 0x578
	FUNC19_OUT_SEL_CFG volatile.Register32 // 0x57C
	FUNC20_OUT_SEL_CFG volatile.Register32 // 0x580
	FUNC21_OUT_SEL_CFG volatile.Register32 // 0x584
	FUNC22_OUT_SEL_CFG volatile.Register32 // 0x588
	FUNC23_OUT_SEL_CFG volatile.Register32 // 0x58C
	FUNC24_OUT_SEL_CFG volatile.Register32 // 0x590
	FUNC25_OUT_SEL_CFG volatile.Register32 // 0x594
	FUNC26_OUT_SEL_CFG volatile.Register32 // 0x598
	FUNC27_OUT_SEL_CFG volatile.Register32 // 0x59C
	FUNC28_OUT_SEL_CFG volatile.Register32 // 0x5A0
	FUNC29_OUT_SEL_CFG volatile.Register32 // 0x5A4
	FUNC30_OUT_SEL_CFG volatile.Register32 // 0x5A8
	FUNC31_OUT_SEL_CFG volatile.Register32 // 0x5AC
	FUNC32_OUT_SEL_CFG volatile.Register32 // 0x5B0
	FUNC33_OUT_SEL_CFG volatile.Register32 // 0x5B4
	FUNC34_OUT_SEL_CFG volatile.Register32 // 0x5B8
	FUNC35_OUT_SEL_CFG volatile.Register32 // 0x5BC
	FUNC36_OUT_SEL_CFG volatile.Register32 // 0x5C0
	FUNC37_OUT_SEL_CFG volatile.Register32 // 0x5C4
	FUNC38_OUT_SEL_CFG volatile.Register32 // 0x5C8
	FUNC39_OUT_SEL_CFG volatile.Register32 // 0x5CC
}

// GPIO.BT_SELECT: GPIO_BT_SELECT
func (o *GPIO_Type) SetBT_SELECT(value uint32) {
	volatile.StoreUint32(&o.BT_SELECT.Reg, value)
}
func (o *GPIO_Type) GetBT_SELECT() uint32 {
	return volatile.LoadUint32(&o.BT_SELECT.Reg)
}

// GPIO.OUT: GPIO_OUT
func (o *GPIO_Type) SetOUT(value uint32) {
	volatile.StoreUint32(&o.OUT.Reg, value)
}
func (o *GPIO_Type) GetOUT() uint32 {
	return volatile.LoadUint32(&o.OUT.Reg)
}

// GPIO.OUT_W1TS: GPIO_OUT_W1TS
func (o *GPIO_Type) SetOUT_W1TS(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TS.Reg, value)
}
func (o *GPIO_Type) GetOUT_W1TS() uint32 {
	return volatile.LoadUint32(&o.OUT_W1TS.Reg)
}

// GPIO.OUT_W1TC: GPIO_OUT_W1TC
func (o *GPIO_Type) SetOUT_W1TC(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TC.Reg, value)
}
func (o *GPIO_Type) GetOUT_W1TC() uint32 {
	return volatile.LoadUint32(&o.OUT_W1TC.Reg)
}

// GPIO.OUT1: GPIO_OUT1
func (o *GPIO_Type) SetOUT1_OUT1_DATA(value uint32) {
	volatile.StoreUint32(&o.OUT1.Reg, volatile.LoadUint32(&o.OUT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetOUT1_OUT1_DATA() uint32 {
	return volatile.LoadUint32(&o.OUT1.Reg) & 0xff
}

// GPIO.OUT1_W1TS: GPIO_OUT1_W1TS
func (o *GPIO_Type) SetOUT1_W1TS_OUT1_DATA_W1TS(value uint32) {
	volatile.StoreUint32(&o.OUT1_W1TS.Reg, volatile.LoadUint32(&o.OUT1_W1TS.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetOUT1_W1TS_OUT1_DATA_W1TS() uint32 {
	return volatile.LoadUint32(&o.OUT1_W1TS.Reg) & 0xff
}

// GPIO.OUT1_W1TC: GPIO_OUT1_W1TC
func (o *GPIO_Type) SetOUT1_W1TC_OUT1_DATA_W1TC(value uint32) {
	volatile.StoreUint32(&o.OUT1_W1TC.Reg, volatile.LoadUint32(&o.OUT1_W1TC.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetOUT1_W1TC_OUT1_DATA_W1TC() uint32 {
	return volatile.LoadUint32(&o.OUT1_W1TC.Reg) & 0xff
}

// GPIO.SDIO_SELECT: GPIO_SDIO_SELECT
func (o *GPIO_Type) SetSDIO_SELECT_SDIO_SEL(value uint32) {
	volatile.StoreUint32(&o.SDIO_SELECT.Reg, volatile.LoadUint32(&o.SDIO_SELECT.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSDIO_SELECT_SDIO_SEL() uint32 {
	return volatile.LoadUint32(&o.SDIO_SELECT.Reg) & 0xff
}

// GPIO.ENABLE: GPIO_ENABLE
func (o *GPIO_Type) SetENABLE(value uint32) {
	volatile.StoreUint32(&o.ENABLE.Reg, value)
}
func (o *GPIO_Type) GetENABLE() uint32 {
	return volatile.LoadUint32(&o.ENABLE.Reg)
}

// GPIO.ENABLE_W1TS: GPIO_ENABLE_W1TS
func (o *GPIO_Type) SetENABLE_W1TS(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TS.Reg, value)
}
func (o *GPIO_Type) GetENABLE_W1TS() uint32 {
	return volatile.LoadUint32(&o.ENABLE_W1TS.Reg)
}

// GPIO.ENABLE_W1TC: GPIO_ENABLE_W1TC
func (o *GPIO_Type) SetENABLE_W1TC(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TC.Reg, value)
}
func (o *GPIO_Type) GetENABLE_W1TC() uint32 {
	return volatile.LoadUint32(&o.ENABLE_W1TC.Reg)
}

// GPIO.ENABLE1: GPIO_ENABLE1
func (o *GPIO_Type) SetENABLE1_ENABLE1_DATA(value uint32) {
	volatile.StoreUint32(&o.ENABLE1.Reg, volatile.LoadUint32(&o.ENABLE1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetENABLE1_ENABLE1_DATA() uint32 {
	return volatile.LoadUint32(&o.ENABLE1.Reg) & 0xff
}

// GPIO.ENABLE1_W1TS: GPIO_ENABLE1_W1TS
func (o *GPIO_Type) SetENABLE1_W1TS_ENABLE1_DATA_W1TS(value uint32) {
	volatile.StoreUint32(&o.ENABLE1_W1TS.Reg, volatile.LoadUint32(&o.ENABLE1_W1TS.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetENABLE1_W1TS_ENABLE1_DATA_W1TS() uint32 {
	return volatile.LoadUint32(&o.ENABLE1_W1TS.Reg) & 0xff
}

// GPIO.ENABLE1_W1TC: GPIO_ENABLE1_W1TC
func (o *GPIO_Type) SetENABLE1_W1TC_ENABLE1_DATA_W1TC(value uint32) {
	volatile.StoreUint32(&o.ENABLE1_W1TC.Reg, volatile.LoadUint32(&o.ENABLE1_W1TC.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetENABLE1_W1TC_ENABLE1_DATA_W1TC() uint32 {
	return volatile.LoadUint32(&o.ENABLE1_W1TC.Reg) & 0xff
}

// GPIO.STRAP: GPIO_STRAP
func (o *GPIO_Type) SetSTRAP_STRAPPING(value uint32) {
	volatile.StoreUint32(&o.STRAP.Reg, volatile.LoadUint32(&o.STRAP.Reg)&^(0xffff)|value)
}
func (o *GPIO_Type) GetSTRAP_STRAPPING() uint32 {
	return volatile.LoadUint32(&o.STRAP.Reg) & 0xffff
}

// GPIO.IN: GPIO_IN
func (o *GPIO_Type) SetIN(value uint32) {
	volatile.StoreUint32(&o.IN.Reg, value)
}
func (o *GPIO_Type) GetIN() uint32 {
	return volatile.LoadUint32(&o.IN.Reg)
}

// GPIO.IN1: GPIO_IN1
func (o *GPIO_Type) SetIN1_IN1_DATA(value uint32) {
	volatile.StoreUint32(&o.IN1.Reg, volatile.LoadUint32(&o.IN1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetIN1_IN1_DATA() uint32 {
	return volatile.LoadUint32(&o.IN1.Reg) & 0xff
}

// GPIO.STATUS: GPIO_STATUS
func (o *GPIO_Type) SetSTATUS(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, value)
}
func (o *GPIO_Type) GetSTATUS() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg)
}

// GPIO.STATUS_W1TS: GPIO_STATUS_W1TS
func (o *GPIO_Type) SetSTATUS_W1TS(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TS.Reg, value)
}
func (o *GPIO_Type) GetSTATUS_W1TS() uint32 {
	return volatile.LoadUint32(&o.STATUS_W1TS.Reg)
}

// GPIO.STATUS_W1TC: GPIO_STATUS_W1TC
func (o *GPIO_Type) SetSTATUS_W1TC(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TC.Reg, value)
}
func (o *GPIO_Type) GetSTATUS_W1TC() uint32 {
	return volatile.LoadUint32(&o.STATUS_W1TC.Reg)
}

// GPIO.STATUS1: GPIO_STATUS1
func (o *GPIO_Type) SetSTATUS1_STATUS1_INT(value uint32) {
	volatile.StoreUint32(&o.STATUS1.Reg, volatile.LoadUint32(&o.STATUS1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSTATUS1_STATUS1_INT() uint32 {
	return volatile.LoadUint32(&o.STATUS1.Reg) & 0xff
}

// GPIO.STATUS1_W1TS: GPIO_STATUS1_W1TS
func (o *GPIO_Type) SetSTATUS1_W1TS_STATUS1_INT_W1TS(value uint32) {
	volatile.StoreUint32(&o.STATUS1_W1TS.Reg, volatile.LoadUint32(&o.STATUS1_W1TS.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSTATUS1_W1TS_STATUS1_INT_W1TS() uint32 {
	return volatile.LoadUint32(&o.STATUS1_W1TS.Reg) & 0xff
}

// GPIO.STATUS1_W1TC: GPIO_STATUS1_W1TC
func (o *GPIO_Type) SetSTATUS1_W1TC_STATUS1_INT_W1TC(value uint32) {
	volatile.StoreUint32(&o.STATUS1_W1TC.Reg, volatile.LoadUint32(&o.STATUS1_W1TC.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetSTATUS1_W1TC_STATUS1_INT_W1TC() uint32 {
	return volatile.LoadUint32(&o.STATUS1_W1TC.Reg) & 0xff
}

// GPIO.ACPU_INT: GPIO_ACPU_INT
func (o *GPIO_Type) SetACPU_INT(value uint32) {
	volatile.StoreUint32(&o.ACPU_INT.Reg, value)
}
func (o *GPIO_Type) GetACPU_INT() uint32 {
	return volatile.LoadUint32(&o.ACPU_INT.Reg)
}

// GPIO.ACPU_NMI_INT: GPIO_ACPU_NMI_INT
func (o *GPIO_Type) SetACPU_NMI_INT(value uint32) {
	volatile.StoreUint32(&o.ACPU_NMI_INT.Reg, value)
}
func (o *GPIO_Type) GetACPU_NMI_INT() uint32 {
	return volatile.LoadUint32(&o.ACPU_NMI_INT.Reg)
}

// GPIO.PCPU_INT: GPIO_PCPU_INT
func (o *GPIO_Type) SetPCPU_INT(value uint32) {
	volatile.StoreUint32(&o.PCPU_INT.Reg, value)
}
func (o *GPIO_Type) GetPCPU_INT() uint32 {
	return volatile.LoadUint32(&o.PCPU_INT.Reg)
}

// GPIO.PCPU_NMI_INT: GPIO_PCPU_NMI_INT
func (o *GPIO_Type) SetPCPU_NMI_INT(value uint32) {
	volatile.StoreUint32(&o.PCPU_NMI_INT.Reg, value)
}
func (o *GPIO_Type) GetPCPU_NMI_INT() uint32 {
	return volatile.LoadUint32(&o.PCPU_NMI_INT.Reg)
}

// GPIO.CPUSDIO_INT: GPIO_CPUSDIO_INT
func (o *GPIO_Type) SetCPUSDIO_INT(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT.Reg, value)
}
func (o *GPIO_Type) GetCPUSDIO_INT() uint32 {
	return volatile.LoadUint32(&o.CPUSDIO_INT.Reg)
}

// GPIO.ACPU_INT1: GPIO_ACPU_INT1
func (o *GPIO_Type) SetACPU_INT1_APPCPU_INT_H(value uint32) {
	volatile.StoreUint32(&o.ACPU_INT1.Reg, volatile.LoadUint32(&o.ACPU_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetACPU_INT1_APPCPU_INT_H() uint32 {
	return volatile.LoadUint32(&o.ACPU_INT1.Reg) & 0xff
}

// GPIO.ACPU_NMI_INT1: GPIO_ACPU_NMI_INT1
func (o *GPIO_Type) SetACPU_NMI_INT1_APPCPU_NMI_INT_H(value uint32) {
	volatile.StoreUint32(&o.ACPU_NMI_INT1.Reg, volatile.LoadUint32(&o.ACPU_NMI_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetACPU_NMI_INT1_APPCPU_NMI_INT_H() uint32 {
	return volatile.LoadUint32(&o.ACPU_NMI_INT1.Reg) & 0xff
}

// GPIO.PCPU_INT1: GPIO_PCPU_INT1
func (o *GPIO_Type) SetPCPU_INT1_PROCPU_INT_H(value uint32) {
	volatile.StoreUint32(&o.PCPU_INT1.Reg, volatile.LoadUint32(&o.PCPU_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetPCPU_INT1_PROCPU_INT_H() uint32 {
	return volatile.LoadUint32(&o.PCPU_INT1.Reg) & 0xff
}

// GPIO.PCPU_NMI_INT1: GPIO_PCPU_NMI_INT1
func (o *GPIO_Type) SetPCPU_NMI_INT1_PROCPU_NMI_INT_H(value uint32) {
	volatile.StoreUint32(&o.PCPU_NMI_INT1.Reg, volatile.LoadUint32(&o.PCPU_NMI_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetPCPU_NMI_INT1_PROCPU_NMI_INT_H() uint32 {
	return volatile.LoadUint32(&o.PCPU_NMI_INT1.Reg) & 0xff
}

// GPIO.CPUSDIO_INT1: GPIO_CPUSDIO_INT1
func (o *GPIO_Type) SetCPUSDIO_INT1_SDIO_INT_H(value uint32) {
	volatile.StoreUint32(&o.CPUSDIO_INT1.Reg, volatile.LoadUint32(&o.CPUSDIO_INT1.Reg)&^(0xff)|value)
}
func (o *GPIO_Type) GetCPUSDIO_INT1_SDIO_INT_H() uint32 {
	return volatile.LoadUint32(&o.CPUSDIO_INT1.Reg) & 0xff
}

// GPIO.PIN0: GPIO_PIN0
func (o *GPIO_Type) SetPIN0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN0_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN0_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN0_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN0_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN0_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN0_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN0_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN0_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x4) >> 2
}

// GPIO.PIN1: GPIO_PIN0
func (o *GPIO_Type) SetPIN1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN1_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN1_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN1_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN1_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN1_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN1_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN1_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN1_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x4) >> 2
}

// GPIO.PIN2: GPIO_PIN0
func (o *GPIO_Type) SetPIN2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN2_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN2_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN2_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN2_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN2_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN2_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN2_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN2_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x4) >> 2
}

// GPIO.PIN3: GPIO_PIN0
func (o *GPIO_Type) SetPIN3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN3_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN3_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN3_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN3_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN3_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN3_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN3_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN3_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x4) >> 2
}

// GPIO.PIN4: GPIO_PIN0
func (o *GPIO_Type) SetPIN4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN4_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN4_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN4_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN4_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN4_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN4_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN4_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN4_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x4) >> 2
}

// GPIO.PIN5: GPIO_PIN0
func (o *GPIO_Type) SetPIN5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN5_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN5_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN5_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN5_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN5_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN5_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN5_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN5_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x4) >> 2
}

// GPIO.PIN6: GPIO_PIN0
func (o *GPIO_Type) SetPIN6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN6_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN6_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN6_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN6_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN6_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN6_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN6_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN6_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x4) >> 2
}

// GPIO.PIN7: GPIO_PIN0
func (o *GPIO_Type) SetPIN7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN7_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN7_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN7_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN7_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN7_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN7_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN7_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN7_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x4) >> 2
}

// GPIO.PIN8: GPIO_PIN0
func (o *GPIO_Type) SetPIN8_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN8_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN8_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN8_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN8_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN8_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN8_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN8_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN8_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN8_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x4) >> 2
}

// GPIO.PIN9: GPIO_PIN0
func (o *GPIO_Type) SetPIN9_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN9_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN9_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN9_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN9_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN9_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN9_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN9_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN9_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN9_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x4) >> 2
}

// GPIO.PIN10: GPIO_PIN0
func (o *GPIO_Type) SetPIN10_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN10_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN10_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN10_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN10_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN10_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN10_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN10_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN10_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN10_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x4) >> 2
}

// GPIO.PIN11: GPIO_PIN0
func (o *GPIO_Type) SetPIN11_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN11_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN11_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN11_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN11_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN11_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN11_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN11_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN11_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN11_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x4) >> 2
}

// GPIO.PIN12: GPIO_PIN0
func (o *GPIO_Type) SetPIN12_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN12_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN12_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN12_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN12_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN12_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN12_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN12_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN12_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN12_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x4) >> 2
}

// GPIO.PIN13: GPIO_PIN0
func (o *GPIO_Type) SetPIN13_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN13_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN13_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN13_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN13_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN13_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN13_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN13_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN13_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN13_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x4) >> 2
}

// GPIO.PIN14: GPIO_PIN0
func (o *GPIO_Type) SetPIN14_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN14_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN14_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN14_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN14_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN14_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN14_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN14_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN14_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN14_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x4) >> 2
}

// GPIO.PIN15: GPIO_PIN0
func (o *GPIO_Type) SetPIN15_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN15_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN15_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN15_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN15_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN15_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN15_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN15_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN15_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN15_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x4) >> 2
}

// GPIO.PIN16: GPIO_PIN0
func (o *GPIO_Type) SetPIN16_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN16_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN16_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN16_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN16_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN16_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN16_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN16_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN16_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN16_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x4) >> 2
}

// GPIO.PIN17: GPIO_PIN0
func (o *GPIO_Type) SetPIN17_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN17_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN17_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN17_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN17_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN17_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN17_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN17_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN17_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN17_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x4) >> 2
}

// GPIO.PIN18: GPIO_PIN0
func (o *GPIO_Type) SetPIN18_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN18_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN18_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN18_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN18_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN18_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN18_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN18_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN18_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN18.Reg, volatile.LoadUint32(&o.PIN18.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN18_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN18.Reg) & 0x4) >> 2
}

// GPIO.PIN19: GPIO_PIN0
func (o *GPIO_Type) SetPIN19_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN19_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN19_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN19_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN19_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN19_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN19_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN19_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN19_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN19.Reg, volatile.LoadUint32(&o.PIN19.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN19_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN19.Reg) & 0x4) >> 2
}

// GPIO.PIN20: GPIO_PIN0
func (o *GPIO_Type) SetPIN20_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN20_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN20_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN20_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN20_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN20_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN20_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN20_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN20_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN20.Reg, volatile.LoadUint32(&o.PIN20.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN20_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN20.Reg) & 0x4) >> 2
}

// GPIO.PIN21: GPIO_PIN0
func (o *GPIO_Type) SetPIN21_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN21_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN21_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN21_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN21_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN21_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN21_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN21_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN21_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN21.Reg, volatile.LoadUint32(&o.PIN21.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN21_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN21.Reg) & 0x4) >> 2
}

// GPIO.PIN22: GPIO_PIN0
func (o *GPIO_Type) SetPIN22_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN22_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN22_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN22_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN22_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN22_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN22_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN22_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN22_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN22.Reg, volatile.LoadUint32(&o.PIN22.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN22_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN22.Reg) & 0x4) >> 2
}

// GPIO.PIN23: GPIO_PIN0
func (o *GPIO_Type) SetPIN23_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN23_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN23_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN23_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN23_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN23_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN23_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN23_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN23_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN23.Reg, volatile.LoadUint32(&o.PIN23.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN23_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN23.Reg) & 0x4) >> 2
}

// GPIO.PIN24: GPIO_PIN0
func (o *GPIO_Type) SetPIN24_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN24_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN24_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN24_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN24_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN24_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN24_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN24_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN24_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN24.Reg, volatile.LoadUint32(&o.PIN24.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN24_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN24.Reg) & 0x4) >> 2
}

// GPIO.PIN25: GPIO_PIN0
func (o *GPIO_Type) SetPIN25_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN25_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN25_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN25_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN25_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN25_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN25_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN25_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN25_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN25.Reg, volatile.LoadUint32(&o.PIN25.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN25_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN25.Reg) & 0x4) >> 2
}

// GPIO.PIN26: GPIO_PIN0
func (o *GPIO_Type) SetPIN26_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN26_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN26_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN26_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN26_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN26_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN26_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN26_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN26_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN26.Reg, volatile.LoadUint32(&o.PIN26.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN26_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN26.Reg) & 0x4) >> 2
}

// GPIO.PIN27: GPIO_PIN0
func (o *GPIO_Type) SetPIN27_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN27_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN27_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN27_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN27_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN27_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN27_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN27_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN27_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN27.Reg, volatile.LoadUint32(&o.PIN27.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN27_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN27.Reg) & 0x4) >> 2
}

// GPIO.PIN28: GPIO_PIN0
func (o *GPIO_Type) SetPIN28_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN28_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN28_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN28_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN28_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN28_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN28_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN28_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN28_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN28.Reg, volatile.LoadUint32(&o.PIN28.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN28_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN28.Reg) & 0x4) >> 2
}

// GPIO.PIN29: GPIO_PIN0
func (o *GPIO_Type) SetPIN29_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN29_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN29_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN29_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN29_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN29_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN29_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN29_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN29_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN29.Reg, volatile.LoadUint32(&o.PIN29.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN29_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN29.Reg) & 0x4) >> 2
}

// GPIO.PIN30: GPIO_PIN0
func (o *GPIO_Type) SetPIN30_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN30_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN30_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN30_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN30_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN30_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN30_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN30_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN30_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN30.Reg, volatile.LoadUint32(&o.PIN30.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN30_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN30.Reg) & 0x4) >> 2
}

// GPIO.PIN31: GPIO_PIN0
func (o *GPIO_Type) SetPIN31_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN31_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN31_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN31_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN31_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN31_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN31_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN31_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN31_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN31.Reg, volatile.LoadUint32(&o.PIN31.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN31_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN31.Reg) & 0x4) >> 2
}

// GPIO.PIN32: GPIO_PIN0
func (o *GPIO_Type) SetPIN32_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN32_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN32_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN32_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN32_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN32_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN32_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN32_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN32_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN32.Reg, volatile.LoadUint32(&o.PIN32.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN32_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN32.Reg) & 0x4) >> 2
}

// GPIO.PIN33: GPIO_PIN0
func (o *GPIO_Type) SetPIN33_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN33_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN33_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN33_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN33_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN33_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN33_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN33_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN33_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN33.Reg, volatile.LoadUint32(&o.PIN33.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN33_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN33.Reg) & 0x4) >> 2
}

// GPIO.PIN34: GPIO_PIN0
func (o *GPIO_Type) SetPIN34_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN34_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN34_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN34_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN34_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN34_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN34_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN34_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN34_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN34.Reg, volatile.LoadUint32(&o.PIN34.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN34_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN34.Reg) & 0x4) >> 2
}

// GPIO.PIN35: GPIO_PIN0
func (o *GPIO_Type) SetPIN35_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN35_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN35_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN35_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN35_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN35_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN35_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN35_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN35_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN35.Reg, volatile.LoadUint32(&o.PIN35.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN35_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN35.Reg) & 0x4) >> 2
}

// GPIO.PIN36: GPIO_PIN0
func (o *GPIO_Type) SetPIN36_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN36_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN36_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN36_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN36_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN36_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN36_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN36_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN36_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN36.Reg, volatile.LoadUint32(&o.PIN36.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN36_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN36.Reg) & 0x4) >> 2
}

// GPIO.PIN37: GPIO_PIN0
func (o *GPIO_Type) SetPIN37_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN37_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN37_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN37_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN37_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN37_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN37_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN37_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN37_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN37.Reg, volatile.LoadUint32(&o.PIN37.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN37_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN37.Reg) & 0x4) >> 2
}

// GPIO.PIN38: GPIO_PIN0
func (o *GPIO_Type) SetPIN38_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN38_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN38_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN38_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN38_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN38_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN38_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN38_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN38_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN38.Reg, volatile.LoadUint32(&o.PIN38.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN38_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN38.Reg) & 0x4) >> 2
}

// GPIO.PIN39: GPIO_PIN0
func (o *GPIO_Type) SetPIN39_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x3e000)|value<<13)
}
func (o *GPIO_Type) GetPIN39_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x3e000) >> 13
}
func (o *GPIO_Type) SetPIN39_CONFIG(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x1800)|value<<11)
}
func (o *GPIO_Type) GetPIN39_CONFIG() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x1800) >> 11
}
func (o *GPIO_Type) SetPIN39_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetPIN39_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetPIN39_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x380)|value<<7)
}
func (o *GPIO_Type) GetPIN39_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x380) >> 7
}
func (o *GPIO_Type) SetPIN39_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN39.Reg, volatile.LoadUint32(&o.PIN39.Reg)&^(0x4)|value<<2)
}
func (o *GPIO_Type) GetPIN39_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN39.Reg) & 0x4) >> 2
}

// GPIO.CALI_CONF: GPIO_cali_conf
func (o *GPIO_Type) SetCALI_CONF_CALI_START(value uint32) {
	volatile.StoreUint32(&o.CALI_CONF.Reg, volatile.LoadUint32(&o.CALI_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_Type) GetCALI_CONF_CALI_START() uint32 {
	return (volatile.LoadUint32(&o.CALI_CONF.Reg) & 0x80000000) >> 31
}
func (o *GPIO_Type) SetCALI_CONF_CALI_RTC_MAX(value uint32) {
	volatile.StoreUint32(&o.CALI_CONF.Reg, volatile.LoadUint32(&o.CALI_CONF.Reg)&^(0x3ff)|value)
}
func (o *GPIO_Type) GetCALI_CONF_CALI_RTC_MAX() uint32 {
	return volatile.LoadUint32(&o.CALI_CONF.Reg) & 0x3ff
}

// GPIO.CALI_DATA: GPIO_cali_data
func (o *GPIO_Type) SetCALI_DATA_CALI_RDY_SYNC2(value uint32) {
	volatile.StoreUint32(&o.CALI_DATA.Reg, volatile.LoadUint32(&o.CALI_DATA.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_Type) GetCALI_DATA_CALI_RDY_SYNC2() uint32 {
	return (volatile.LoadUint32(&o.CALI_DATA.Reg) & 0x80000000) >> 31
}
func (o *GPIO_Type) SetCALI_DATA_CALI_RDY_REAL(value uint32) {
	volatile.StoreUint32(&o.CALI_DATA.Reg, volatile.LoadUint32(&o.CALI_DATA.Reg)&^(0x40000000)|value<<30)
}
func (o *GPIO_Type) GetCALI_DATA_CALI_RDY_REAL() uint32 {
	return (volatile.LoadUint32(&o.CALI_DATA.Reg) & 0x40000000) >> 30
}
func (o *GPIO_Type) SetCALI_DATA_CALI_VALUE_SYNC2(value uint32) {
	volatile.StoreUint32(&o.CALI_DATA.Reg, volatile.LoadUint32(&o.CALI_DATA.Reg)&^(0xfffff)|value)
}
func (o *GPIO_Type) GetCALI_DATA_CALI_VALUE_SYNC2() uint32 {
	return volatile.LoadUint32(&o.CALI_DATA.Reg) & 0xfffff
}

// GPIO.FUNC0_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC0_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC0_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC0_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC0_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC0_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC0_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC0_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC1_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC1_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC1_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC1_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC1_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC1_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC1_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC1_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC2_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC2_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC2_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC2_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC2_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC2_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC2_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC2_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC3_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC3_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC3_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC3_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC3_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC3_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC3_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC3_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC4_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC4_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC4_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC4_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC4_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC4_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC4_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC4_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC5_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC5_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC5_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC5_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC5_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC5_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC5_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC5_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC6_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC6_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC6_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC6_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC6_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC6_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC6_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC6_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC7_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC7_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC7_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC7_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC7_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC7_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC7_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC7_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC8_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC8_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC8_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC8_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC8_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC8_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC8_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC8_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC9_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC9_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC9_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC9_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC9_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC9_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC9_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC9_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC10_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC10_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC10_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC10_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC10_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC10_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC10_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC10_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC11_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC11_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC11_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC11_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC11_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC11_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC11_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC11_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC12_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC12_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC12_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC12_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC12_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC12_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC12_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC12_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC13_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC13_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC13_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC13_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC13_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC13_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC13_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC13_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC14_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC14_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC14_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC14_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC14_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC14_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC14_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC14_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC15_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC15_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC15_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC15_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC15_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC15_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC15_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC15_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC16_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC16_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC16_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC16_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC16_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC16_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC16_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC16_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC17_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC17_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC17_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC17_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC17_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC17_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC17_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC17_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC18_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC18_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC18_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC18_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC18_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC18_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC18_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC18_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC19_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC19_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC19_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC19_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC19_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC19_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC19_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC19_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC20_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC20_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC20_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC20_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC20_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC20_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC20_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC20_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC21_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC21_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC21_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC21_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC21_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC21_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC21_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC21_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC22_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC22_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC22_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC22_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC22_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC22_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC22_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC22_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC23_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC23_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC23_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC23_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC23_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC23_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC23_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC23_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC24_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC24_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC24_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC24_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC24_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC24_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC24_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC24_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC25_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC25_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC25_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC25_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC25_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC25_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC25_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC25_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC26_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC26_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC26_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC26_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC26_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC26_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC26_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC26_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC27_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC27_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC27_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC27_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC27_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC27_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC27_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC27_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC28_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC28_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC28_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC28_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC28_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC28_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC28_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC28_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC29_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC29_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC29_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC29_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC29_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC29_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC29_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC29_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC30_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC30_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC30_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC30_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC30_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC30_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC30_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC30_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC31_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC31_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC31_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC31_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC31_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC31_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC31_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC31_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC32_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC32_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC32_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC32_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC32_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC32_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC32_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC32_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC33_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC33_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC33_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC33_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC33_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC33_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC33_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC33_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC34_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC34_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC34_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC34_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC34_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC34_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC34_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC34_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC35_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC35_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC35_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC35_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC35_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC35_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC35_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC35_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC36_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC36_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC36_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC36_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC36_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC36_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC36_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC36_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC37_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC37_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC37_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC37_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC37_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC37_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC37_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC37_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC38_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC38_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC38_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC38_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC38_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC38_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC38_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC38_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC39_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC39_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC39_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC39_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC39_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC39_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC39_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC39_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC40_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC40_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC40_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC40_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC40_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC40_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC40_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC40_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC40_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC40_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC40_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC41_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC41_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC41_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC41_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC41_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC41_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC41_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC41_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC41_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC41_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC41_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC42_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC42_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC42_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC42_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC42_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC42_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC42_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC42_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC42_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC42_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC42_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC43_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC43_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC43_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC43_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC43_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC43_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC43_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC43_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC43_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC43_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC43_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC44_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC44_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC44_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC44_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC44_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC44_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC44_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC44_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC44_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC44_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC44_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC45_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC45_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC45_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC45_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC45_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC45_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC45_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC45_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC45_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC45_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC45_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC46_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC46_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC46_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC46_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC46_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC46_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC46_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC46_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC46_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC46_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC46_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC47_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC47_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC47_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC47_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC47_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC47_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC47_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC47_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC47_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC47_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC47_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC48_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC48_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC48_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC48_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC48_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC48_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC48_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC48_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC48_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC48_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC48_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC49_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC49_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC49_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC49_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC49_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC49_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC49_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC49_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC49_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC49_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC49_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC50_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC50_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC50_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC50_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC50_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC50_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC50_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC50_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC50_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC50_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC50_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC51_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC51_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC51_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC51_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC51_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC51_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC51_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC51_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC51_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC51_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC51_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC52_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC52_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC52_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC52_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC52_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC52_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC52_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC52_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC52_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC52_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC52_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC53_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC53_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC53_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC53_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC53_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC53_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC53_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC53_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC53_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC53_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC53_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC54_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC54_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC54_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC54_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC54_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC54_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC54_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC54_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC54_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC54_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC54_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC55_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC55_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC55_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC55_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC55_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC55_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC55_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC55_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC55_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC55_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC55_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC56_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC56_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC56_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC56_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC56_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC56_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC56_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC56_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC56_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC56_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC56_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC57_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC57_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC57_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC57_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC57_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC57_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC57_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC57_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC57_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC57_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC57_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC58_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC58_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC58_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC58_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC58_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC58_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC58_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC58_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC58_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC58_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC58_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC59_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC59_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC59_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC59_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC59_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC59_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC59_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC59_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC59_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC59_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC59_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC60_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC60_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC60_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC60_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC60_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC60_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC60_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC60_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC60_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC60_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC60_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC61_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC61_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC61_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC61_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC61_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC61_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC61_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC61_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC61_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC61_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC61_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC62_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC62_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC62_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC62_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC62_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC62_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC62_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC62_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC62_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC62_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC62_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC63_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC63_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC63_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC63_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC63_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC63_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC63_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC63_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC63_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC63_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC63_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC64_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC64_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC64_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC64_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC64_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC64_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC64_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC64_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC64_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC64_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC64_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC65_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC65_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC65_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC65_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC65_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC65_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC65_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC65_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC65_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC65_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC65_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC66_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC66_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC66_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC66_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC66_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC66_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC66_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC66_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC66_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC66_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC66_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC67_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC67_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC67_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC67_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC67_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC67_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC67_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC67_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC67_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC67_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC67_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC68_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC68_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC68_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC68_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC68_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC68_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC68_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC68_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC68_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC68_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC68_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC69_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC69_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC69_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC69_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC69_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC69_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC69_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC69_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC69_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC69_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC69_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC70_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC70_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC70_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC70_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC70_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC70_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC70_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC70_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC70_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC70_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC70_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC71_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC71_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC71_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC71_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC71_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC71_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC71_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC71_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC71_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC71_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC71_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC72_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC72_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC72_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC72_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC72_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC72_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC72_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC72_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC72_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC72_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC72_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC73_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC73_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC73_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC73_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC73_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC73_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC73_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC73_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC73_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC73_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC73_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC74_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC74_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC74_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC74_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC74_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC74_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC74_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC74_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC74_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC74_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC74_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC75_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC75_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC75_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC75_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC75_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC75_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC75_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC75_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC75_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC75_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC75_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC76_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC76_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC76_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC76_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC76_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC76_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC76_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC76_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC76_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC76_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC76_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC77_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC77_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC77_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC77_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC77_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC77_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC77_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC77_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC77_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC77_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC77_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC78_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC78_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC78_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC78_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC78_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC78_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC78_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC78_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC78_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC78_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC78_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC79_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC79_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC79_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC79_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC79_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC79_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC79_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC79_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC79_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC79_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC79_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC80_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC80_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC80_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC80_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC80_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC80_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC80_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC80_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC80_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC80_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC80_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC81_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC81_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC81_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC81_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC81_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC81_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC81_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC81_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC81_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC81_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC81_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC82_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC82_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC82_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC82_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC82_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC82_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC82_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC82_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC82_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC82_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC82_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC83_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC83_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC83_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC83_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC83_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC83_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC83_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC83_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC83_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC83_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC83_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC84_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC84_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC84_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC84_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC84_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC84_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC84_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC84_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC84_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC84_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC84_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC85_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC85_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC85_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC85_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC85_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC85_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC85_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC85_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC85_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC85_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC85_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC86_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC86_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC86_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC86_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC86_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC86_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC86_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC86_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC86_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC86_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC86_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC87_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC87_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC87_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC87_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC87_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC87_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC87_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC87_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC87_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC87_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC87_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC88_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC88_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC88_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC88_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC88_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC88_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC88_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC88_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC88_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC88_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC88_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC89_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC89_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC89_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC89_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC89_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC89_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC89_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC89_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC89_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC89_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC89_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC90_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC90_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC90_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC90_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC90_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC90_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC90_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC90_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC90_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC90_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC90_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC91_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC91_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC91_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC91_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC91_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC91_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC91_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC91_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC91_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC91_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC91_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC92_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC92_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC92_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC92_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC92_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC92_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC92_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC92_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC92_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC92_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC92_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC93_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC93_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC93_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC93_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC93_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC93_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC93_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC93_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC93_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC93_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC93_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC94_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC94_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC94_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC94_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC94_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC94_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC94_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC94_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC94_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC94_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC94_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC95_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC95_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC95_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC95_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC95_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC95_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC95_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC95_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC95_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC95_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC95_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC96_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC96_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC96_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC96_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC96_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC96_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC96_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC96_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC96_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC96_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC96_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC97_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC97_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC97_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC97_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC97_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC97_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC97_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC97_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC97_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC97_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC97_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC98_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC98_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC98_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC98_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC98_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC98_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC98_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC98_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC98_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC98_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC98_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC99_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC99_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC99_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC99_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC99_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC99_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC99_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC99_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC99_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC99_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC99_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC100_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC100_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC100_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC100_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC100_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC100_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC100_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC100_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC100_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC100_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC100_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC101_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC101_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC101_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC101_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC101_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC101_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC101_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC101_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC101_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC101_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC101_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC102_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC102_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC102_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC102_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC102_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC102_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC102_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC102_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC102_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC102_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC102_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC103_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC103_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC103_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC103_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC103_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC103_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC103_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC103_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC103_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC103_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC103_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC104_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC104_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC104_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC104_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC104_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC104_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC104_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC104_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC104_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC104_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC104_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC105_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC105_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC105_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC105_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC105_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC105_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC105_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC105_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC105_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC105_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC105_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC106_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC106_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC106_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC106_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC106_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC106_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC106_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC106_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC106_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC106_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC106_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC107_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC107_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC107_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC107_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC107_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC107_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC107_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC107_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC107_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC107_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC107_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC108_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC108_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC108_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC108_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC108_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC108_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC108_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC108_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC108_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC108_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC108_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC109_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC109_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC109_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC109_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC109_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC109_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC109_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC109_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC109_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC109_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC109_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC110_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC110_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC110_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC110_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC110_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC110_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC110_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC110_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC110_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC110_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC110_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC111_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC111_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC111_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC111_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC111_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC111_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC111_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC111_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC111_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC111_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC111_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC112_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC112_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC112_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC112_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC112_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC112_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC112_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC112_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC112_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC112_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC112_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC113_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC113_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC113_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC113_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC113_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC113_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC113_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC113_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC113_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC113_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC113_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC114_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC114_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC114_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC114_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC114_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC114_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC114_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC114_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC114_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC114_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC114_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC115_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC115_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC115_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC115_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC115_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC115_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC115_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC115_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC115_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC115_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC115_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC116_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC116_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC116_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC116_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC116_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC116_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC116_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC116_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC116_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC116_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC116_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC117_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC117_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC117_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC117_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC117_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC117_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC117_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC117_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC117_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC117_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC117_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC118_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC118_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC118_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC118_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC118_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC118_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC118_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC118_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC118_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC118_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC118_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC119_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC119_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC119_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC119_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC119_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC119_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC119_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC119_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC119_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC119_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC119_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC120_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC120_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC120_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC120_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC120_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC120_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC120_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC120_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC120_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC120_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC120_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC121_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC121_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC121_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC121_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC121_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC121_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC121_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC121_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC121_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC121_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC121_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC122_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC122_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC122_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC122_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC122_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC122_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC122_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC122_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC122_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC122_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC122_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC123_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC123_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC123_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC123_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC123_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC123_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC123_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC123_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC123_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC123_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC123_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC124_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC124_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC124_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC124_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC124_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC124_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC124_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC124_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC124_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC124_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC124_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC125_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC125_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC125_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC125_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC125_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC125_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC125_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC125_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC125_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC125_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC125_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC126_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC126_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC126_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC126_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC126_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC126_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC126_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC126_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC126_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC126_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC126_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC127_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC127_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC127_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC127_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC127_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC127_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC127_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC127_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC127_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC127_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC127_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC128_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC128_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC128_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC128_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC128_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC128_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC128_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC128_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC128_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC128_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC128_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC129_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC129_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC129_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC129_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC129_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC129_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC129_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC129_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC129_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC129_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC129_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC130_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC130_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC130_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC130_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC130_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC130_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC130_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC130_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC130_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC130_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC130_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC131_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC131_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC131_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC131_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC131_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC131_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC131_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC131_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC131_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC131_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC131_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC132_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC132_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC132_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC132_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC132_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC132_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC132_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC132_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC132_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC132_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC132_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC133_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC133_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC133_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC133_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC133_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC133_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC133_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC133_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC133_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC133_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC133_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC134_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC134_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC134_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC134_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC134_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC134_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC134_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC134_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC134_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC134_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC134_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC135_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC135_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC135_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC135_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC135_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC135_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC135_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC135_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC135_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC135_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC135_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC136_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC136_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC136_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC136_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC136_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC136_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC136_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC136_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC136_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC136_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC136_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC137_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC137_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC137_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC137_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC137_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC137_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC137_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC137_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC137_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC137_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC137_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC138_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC138_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC138_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC138_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC138_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC138_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC138_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC138_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC138_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC138_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC138_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC139_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC139_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC139_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC139_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC139_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC139_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC139_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC139_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC139_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC139_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC139_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC140_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC140_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC140_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC140_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC140_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC140_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC140_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC140_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC140_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC140_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC140_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC141_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC141_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC141_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC141_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC141_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC141_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC141_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC141_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC141_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC141_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC141_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC142_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC142_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC142_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC142_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC142_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC142_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC142_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC142_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC142_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC142_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC142_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC143_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC143_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC143_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC143_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC143_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC143_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC143_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC143_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC143_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC143_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC143_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC144_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC144_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC144_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC144_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC144_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC144_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC144_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC144_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC144_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC144_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC144_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC145_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC145_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC145_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC145_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC145_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC145_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC145_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC145_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC145_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC145_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC145_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC146_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC146_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC146_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC146_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC146_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC146_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC146_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC146_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC146_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC146_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC146_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC147_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC147_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC147_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC147_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC147_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC147_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC147_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC147_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC147_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC147_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC147_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC148_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC148_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC148_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC148_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC148_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC148_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC148_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC148_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC148_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC148_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC148_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC149_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC149_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC149_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC149_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC149_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC149_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC149_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC149_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC149_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC149_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC149_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC150_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC150_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC150_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC150_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC150_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC150_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC150_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC150_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC150_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC150_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC150_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC151_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC151_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC151_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC151_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC151_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC151_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC151_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC151_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC151_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC151_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC151_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC152_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC152_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC152_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC152_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC152_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC152_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC152_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC152_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC152_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC152_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC152_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC153_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC153_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC153_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC153_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC153_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC153_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC153_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC153_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC153_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC153_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC153_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC154_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC154_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC154_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC154_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC154_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC154_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC154_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC154_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC154_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC154_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC154_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC155_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC155_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC155_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC155_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC155_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC155_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC155_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC155_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC155_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC155_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC155_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC156_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC156_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC156_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC156_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC156_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC156_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC156_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC156_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC156_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC156_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC156_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC157_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC157_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC157_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC157_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC157_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC157_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC157_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC157_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC157_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC157_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC157_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC158_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC158_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC158_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC158_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC158_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC158_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC158_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC158_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC158_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC158_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC158_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC159_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC159_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC159_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC159_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC159_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC159_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC159_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC159_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC159_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC159_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC159_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC160_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC160_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC160_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC160_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC160_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC160_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC160_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC160_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC160_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC160_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC160_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC161_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC161_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC161_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC161_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC161_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC161_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC161_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC161_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC161_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC161_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC161_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC162_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC162_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC162_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC162_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC162_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC162_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC162_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC162_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC162_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC162_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC162_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC163_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC163_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC163_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC163_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC163_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC163_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC163_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC163_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC163_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC163_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC163_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC164_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC164_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC164_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC164_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC164_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC164_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC164_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC164_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC164_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC164_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC164_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC165_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC165_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC165_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC165_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC165_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC165_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC165_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC165_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC165_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC165_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC165_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC166_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC166_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC166_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC166_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC166_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC166_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC166_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC166_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC166_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC166_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC166_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC167_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC167_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC167_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC167_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC167_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC167_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC167_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC167_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC167_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC167_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC167_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC168_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC168_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC168_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC168_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC168_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC168_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC168_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC168_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC168_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC168_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC168_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC169_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC169_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC169_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC169_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC169_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC169_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC169_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC169_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC169_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC169_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC169_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC170_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC170_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC170_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC170_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC170_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC170_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC170_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC170_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC170_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC170_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC170_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC171_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC171_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC171_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC171_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC171_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC171_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC171_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC171_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC171_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC171_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC171_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC172_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC172_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC172_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC172_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC172_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC172_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC172_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC172_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC172_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC172_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC172_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC173_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC173_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC173_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC173_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC173_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC173_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC173_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC173_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC173_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC173_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC173_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC174_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC174_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC174_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC174_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC174_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC174_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC174_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC174_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC174_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC174_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC174_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC175_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC175_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC175_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC175_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC175_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC175_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC175_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC175_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC175_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC175_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC175_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC176_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC176_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC176_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC176_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC176_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC176_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC176_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC176_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC176_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC176_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC176_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC177_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC177_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC177_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC177_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC177_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC177_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC177_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC177_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC177_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC177_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC177_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC178_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC178_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC178_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC178_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC178_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC178_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC178_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC178_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC178_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC178_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC178_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC179_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC179_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC179_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC179_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC179_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC179_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC179_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC179_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC179_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC179_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC179_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC180_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC180_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC180_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC180_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC180_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC180_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC180_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC180_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC180_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC180_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC180_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC181_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC181_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC181_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC181_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC181_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC181_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC181_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC181_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC181_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC181_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC181_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC182_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC182_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC182_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC182_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC182_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC182_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC182_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC182_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC182_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC182_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC182_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC183_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC183_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC183_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC183_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC183_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC183_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC183_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC183_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC183_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC183_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC183_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC184_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC184_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC184_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC184_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC184_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC184_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC184_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC184_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC184_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC184_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC184_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC185_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC185_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC185_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC185_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC185_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC185_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC185_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC185_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC185_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC185_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC185_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC186_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC186_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC186_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC186_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC186_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC186_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC186_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC186_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC186_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC186_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC186_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC187_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC187_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC187_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC187_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC187_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC187_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC187_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC187_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC187_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC187_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC187_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC188_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC188_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC188_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC188_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC188_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC188_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC188_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC188_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC188_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC188_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC188_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC189_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC189_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC189_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC189_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC189_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC189_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC189_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC189_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC189_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC189_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC189_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC190_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC190_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC190_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC190_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC190_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC190_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC190_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC190_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC190_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC190_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC190_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC191_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC191_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC191_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC191_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC191_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC191_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC191_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC191_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC191_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC191_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC191_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC192_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC192_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC192_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC192_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC192_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC192_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC192_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC192_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC192_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC192_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC192_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC193_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC193_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC193_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC193_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC193_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC193_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC193_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC193_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC193_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC193_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC193_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC194_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC194_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC194_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC194_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC194_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC194_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC194_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC194_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC194_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC194_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC194_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC195_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC195_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC195_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC195_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC195_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC195_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC195_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC195_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC195_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC195_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC195_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC196_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC196_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC196_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC196_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC196_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC196_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC196_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC196_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC196_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC196_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC196_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC197_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC197_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC197_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC197_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC197_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC197_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC197_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC197_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC197_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC197_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC197_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC198_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC198_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC198_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC198_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC198_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC198_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC198_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC198_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC198_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC198_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC198_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC199_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC199_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC199_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC199_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC199_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC199_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC199_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC199_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC199_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC199_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC199_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC200_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC200_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC200_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC200_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC200_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC200_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC200_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC200_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC200_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC200_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC200_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC201_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC201_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC201_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC201_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC201_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC201_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC201_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC201_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC201_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC201_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC201_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC202_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC202_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC202_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC202_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC202_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC202_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC202_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC202_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC202_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC202_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC202_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC203_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC203_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC203_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC203_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC203_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC203_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC203_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC203_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC203_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC203_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC203_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC204_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC204_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC204_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC204_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC204_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC204_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC204_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC204_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC204_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC204_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC204_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC205_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC205_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC205_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC205_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC205_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC205_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC205_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC205_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC205_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC205_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC205_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC206_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC206_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC206_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC206_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC206_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC206_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC206_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC206_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC206_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC206_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC206_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC207_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC207_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC207_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC207_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC207_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC207_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC207_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC207_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC207_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC207_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC207_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC208_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC208_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC208_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC208_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC208_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC208_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC208_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC208_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC208_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC208_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC208_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC209_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC209_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC209_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC209_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC209_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC209_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC209_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC209_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC209_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC209_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC209_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC210_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC210_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC210_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC210_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC210_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC210_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC210_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC210_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC210_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC210_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC210_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC211_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC211_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC211_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC211_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC211_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC211_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC211_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC211_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC211_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC211_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC211_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC212_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC212_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC212_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC212_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC212_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC212_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC212_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC212_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC212_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC212_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC212_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC213_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC213_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC213_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC213_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC213_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC213_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC213_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC213_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC213_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC213_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC213_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC214_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC214_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC214_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC214_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC214_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC214_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC214_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC214_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC214_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC214_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC214_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC215_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC215_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC215_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC215_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC215_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC215_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC215_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC215_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC215_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC215_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC215_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC216_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC216_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC216_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC216_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC216_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC216_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC216_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC216_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC216_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC216_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC216_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC217_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC217_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC217_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC217_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC217_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC217_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC217_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC217_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC217_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC217_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC217_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC218_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC218_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC218_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC218_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC218_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC218_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC218_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC218_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC218_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC218_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC218_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC219_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC219_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC219_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC219_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC219_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC219_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC219_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC219_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC219_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC219_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC219_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC220_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC220_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC220_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC220_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC220_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC220_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC220_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC220_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC220_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC220_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC220_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC221_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC221_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC221_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC221_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC221_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC221_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC221_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC221_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC221_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC221_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC221_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC222_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC222_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC222_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC222_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC222_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC222_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC222_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC222_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC222_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC222_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC222_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC223_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC223_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC223_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC223_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC223_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC223_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC223_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC223_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC223_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC223_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC223_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC224_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC224_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC224_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC224_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC224_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC224_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC224_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC224_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC224_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC224_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC224_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC225_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC225_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC225_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC225_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC225_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC225_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC225_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC225_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC225_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC225_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC225_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC226_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC226_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC226_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC226_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC226_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC226_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC226_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC226_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC226_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC226_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC226_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC227_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC227_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC227_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC227_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC227_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC227_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC227_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC227_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC227_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC227_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC227_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC228_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC228_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC228_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC228_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC228_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC228_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC228_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC228_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC228_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC228_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC228_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC229_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC229_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC229_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC229_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC229_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC229_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC229_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC229_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC229_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC229_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC229_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC230_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC230_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC230_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC230_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC230_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC230_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC230_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC230_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC230_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC230_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC230_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC231_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC231_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC231_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC231_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC231_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC231_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC231_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC231_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC231_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC231_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC231_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC232_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC232_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC232_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC232_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC232_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC232_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC232_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC232_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC232_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC232_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC232_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC233_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC233_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC233_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC233_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC233_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC233_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC233_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC233_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC233_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC233_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC233_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC234_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC234_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC234_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC234_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC234_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC234_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC234_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC234_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC234_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC234_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC234_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC235_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC235_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC235_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC235_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC235_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC235_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC235_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC235_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC235_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC235_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC235_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC236_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC236_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC236_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC236_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC236_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC236_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC236_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC236_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC236_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC236_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC236_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC237_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC237_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC237_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC237_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC237_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC237_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC237_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC237_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC237_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC237_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC237_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC238_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC238_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC238_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC238_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC238_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC238_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC238_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC238_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC238_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC238_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC238_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC239_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC239_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC239_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC239_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC239_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC239_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC239_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC239_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC239_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC239_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC239_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC240_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC240_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC240_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC240_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC240_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC240_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC240_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC240_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC240_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC240_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC240_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC241_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC241_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC241_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC241_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC241_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC241_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC241_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC241_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC241_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC241_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC241_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC242_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC242_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC242_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC242_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC242_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC242_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC242_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC242_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC242_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC242_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC242_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC243_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC243_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC243_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC243_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC243_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC243_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC243_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC243_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC243_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC243_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC243_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC244_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC244_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC244_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC244_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC244_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC244_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC244_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC244_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC244_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC244_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC244_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC245_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC245_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC245_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC245_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC245_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC245_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC245_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC245_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC245_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC245_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC245_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC246_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC246_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC246_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC246_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC246_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC246_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC246_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC246_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC246_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC246_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC246_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC247_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC247_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC247_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC247_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC247_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC247_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC247_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC247_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC247_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC247_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC247_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC248_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC248_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC248_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC248_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC248_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC248_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC248_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC248_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC248_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC248_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC248_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC249_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC249_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC249_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC249_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC249_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC249_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC249_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC249_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC249_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC249_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC249_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC250_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC250_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC250_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC250_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC250_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC250_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC250_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC250_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC250_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC250_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC250_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC251_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC251_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC251_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC251_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC251_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC251_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC251_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC251_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC251_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC251_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC251_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC252_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC252_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC252_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC252_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC252_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC252_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC252_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC252_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC252_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC252_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC252_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC253_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC253_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC253_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC253_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC253_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC253_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC253_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC253_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC253_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC253_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC253_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC254_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC254_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC254_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC254_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC254_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC254_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC254_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC254_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC254_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC254_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC254_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC255_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
func (o *GPIO_Type) SetFUNC255_IN_SEL_CFG_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC255_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg)&^(0x80)|value<<7)
}
func (o *GPIO_Type) GetFUNC255_IN_SEL_CFG_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg) & 0x80) >> 7
}
func (o *GPIO_Type) SetFUNC255_IN_SEL_CFG_IN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC255_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg)&^(0x40)|value<<6)
}
func (o *GPIO_Type) GetFUNC255_IN_SEL_CFG_IN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg) & 0x40) >> 6
}
func (o *GPIO_Type) SetFUNC255_IN_SEL_CFG_IN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC255_IN_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg)&^(0x3f)|value)
}
func (o *GPIO_Type) GetFUNC255_IN_SEL_CFG_IN_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC255_IN_SEL_CFG.Reg) & 0x3f
}

// GPIO.FUNC0_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC0_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC0_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC0_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC0_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC1_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC1_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC1_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC1_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC1_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC2_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC2_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC2_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC2_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC2_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC3_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC3_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC3_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC3_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC3_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC4_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC4_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC4_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC4_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC4_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC5_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC5_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC5_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC5_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC5_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC6_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC6_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC6_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC6_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC6_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC7_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC7_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC7_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC7_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC7_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC8_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC8_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC8_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC8_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC8_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC9_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC9_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC9_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC9_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC9_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC10_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC10_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC10_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC10_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC10_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC11_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC11_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC11_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC11_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC11_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC12_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC12_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC12_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC12_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC12_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC13_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC13_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC13_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC13_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC13_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC14_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC14_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC14_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC14_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC14_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC15_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC15_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC15_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC15_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC15_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC16_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC16_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC16_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC16_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC16_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC17_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC17_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC17_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC17_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC17_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC18_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC18_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC18_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC18_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC18_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC19_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC19_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC19_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC19_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC19_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC20_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC20_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC20_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC20_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC20_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC21_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC21_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC21_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC21_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC21_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC22_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC22_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC22_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC22_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC22_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC23_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC23_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC23_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC23_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC23_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC24_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC24_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC24_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC24_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC24_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC25_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC25_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC25_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC25_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC25_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC26_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC26_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC26_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC26_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC26_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC27_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC27_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC27_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC27_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC27_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC28_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC28_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC28_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC28_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC28_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC29_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC29_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC29_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC29_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC29_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC30_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC30_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC30_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC30_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC30_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC31_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC31_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC31_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC31_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC31_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC32_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC32_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC32_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC32_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC32_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC33_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC33_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC33_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC33_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC33_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC34_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC34_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC34_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC34_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC34_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC35_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC35_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC35_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC35_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC35_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC36_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC36_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC36_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC36_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC36_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC37_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC37_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC37_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC37_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC37_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC38_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC38_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC38_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC38_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC38_OUT_SEL_CFG.Reg) & 0x1ff
}

// GPIO.FUNC39_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_OEN_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x800)|value<<11)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_OEN_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x800) >> 11
}
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_OEN_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x400)|value<<10)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_OEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x400) >> 10
}
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_OUT_INV_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x200)|value<<9)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_OUT_INV_SEL() uint32 {
	return (volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x200) >> 9
}
func (o *GPIO_Type) SetFUNC39_OUT_SEL_CFG_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.FUNC39_OUT_SEL_CFG.Reg, volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg)&^(0x1ff)|value)
}
func (o *GPIO_Type) GetFUNC39_OUT_SEL_CFG_OUT_SEL() uint32 {
	return volatile.LoadUint32(&o.FUNC39_OUT_SEL_CFG.Reg) & 0x1ff
}

type FRC_TIMER_Type struct {
}

type UHCI_Type struct {
	CONF0                    volatile.Register32 // 0x0
	INT_RAW                  volatile.Register32 // 0x4
	INT_ST                   volatile.Register32 // 0x8
	INT_ENA                  volatile.Register32 // 0xC
	INT_CLR                  volatile.Register32 // 0x10
	DMA_OUT_STATUS           volatile.Register32 // 0x14
	DMA_OUT_PUSH             volatile.Register32 // 0x18
	DMA_IN_STATUS            volatile.Register32 // 0x1C
	DMA_IN_POP               volatile.Register32 // 0x20
	DMA_OUT_LINK             volatile.Register32 // 0x24
	DMA_IN_LINK              volatile.Register32 // 0x28
	CONF1                    volatile.Register32 // 0x2C
	STATE0                   volatile.Register32 // 0x30
	STATE1                   volatile.Register32 // 0x34
	DMA_OUT_EOF_DES_ADDR     volatile.Register32 // 0x38
	DMA_IN_SUC_EOF_DES_ADDR  volatile.Register32 // 0x3C
	DMA_IN_ERR_EOF_DES_ADDR  volatile.Register32 // 0x40
	DMA_OUT_EOF_BFR_DES_ADDR volatile.Register32 // 0x44
	AHB_TEST                 volatile.Register32 // 0x48
	DMA_IN_DSCR              volatile.Register32 // 0x4C
	DMA_IN_DSCR_BF0          volatile.Register32 // 0x50
	DMA_IN_DSCR_BF1          volatile.Register32 // 0x54
	DMA_OUT_DSCR             volatile.Register32 // 0x58
	DMA_OUT_DSCR_BF0         volatile.Register32 // 0x5C
	DMA_OUT_DSCR_BF1         volatile.Register32 // 0x60
	ESCAPE_CONF              volatile.Register32 // 0x64
	HUNG_CONF                volatile.Register32 // 0x68
	_                        [4]byte
	RX_HEAD                  volatile.Register32 // 0x70
	QUICK_SENT               volatile.Register32 // 0x74
	Q0_WORD0                 volatile.Register32 // 0x78
	Q0_WORD1                 volatile.Register32 // 0x7C
	Q1_WORD0                 volatile.Register32 // 0x80
	Q1_WORD1                 volatile.Register32 // 0x84
	Q2_WORD0                 volatile.Register32 // 0x88
	Q2_WORD1                 volatile.Register32 // 0x8C
	Q3_WORD0                 volatile.Register32 // 0x90
	Q3_WORD1                 volatile.Register32 // 0x94
	Q4_WORD0                 volatile.Register32 // 0x98
	Q4_WORD1                 volatile.Register32 // 0x9C
	Q5_WORD0                 volatile.Register32 // 0xA0
	Q5_WORD1                 volatile.Register32 // 0xA4
	Q6_WORD0                 volatile.Register32 // 0xA8
	Q6_WORD1                 volatile.Register32 // 0xAC
	ESC_CONF0                volatile.Register32 // 0xB0
	ESC_CONF1                volatile.Register32 // 0xB4
	ESC_CONF2                volatile.Register32 // 0xB8
	ESC_CONF3                volatile.Register32 // 0xBC
	PKT_THRES                volatile.Register32 // 0xC0
	_                        [56]byte
	DATE                     volatile.Register32 // 0xFC
}

// UHCI.CONF0: UHCI_CONF0
func (o *UHCI_Type) SetCONF0_UART_RX_BRK_EOF_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800000)|value<<23)
}
func (o *UHCI_Type) GetCONF0_UART_RX_BRK_EOF_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800000) >> 23
}
func (o *UHCI_Type) SetCONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400000)|value<<22)
}
func (o *UHCI_Type) GetCONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400000) >> 22
}
func (o *UHCI_Type) SetCONF0_ENCODE_CRC_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200000)|value<<21)
}
func (o *UHCI_Type) GetCONF0_ENCODE_CRC_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200000) >> 21
}
func (o *UHCI_Type) SetCONF0_LEN_EOF_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100000)|value<<20)
}
func (o *UHCI_Type) GetCONF0_LEN_EOF_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100000) >> 20
}
func (o *UHCI_Type) SetCONF0_UART_IDLE_EOF_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000)|value<<19)
}
func (o *UHCI_Type) GetCONF0_UART_IDLE_EOF_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000) >> 19
}
func (o *UHCI_Type) SetCONF0_CRC_REC_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000)|value<<18)
}
func (o *UHCI_Type) GetCONF0_CRC_REC_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000) >> 18
}
func (o *UHCI_Type) SetCONF0_HEAD_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000)|value<<17)
}
func (o *UHCI_Type) GetCONF0_HEAD_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000) >> 17
}
func (o *UHCI_Type) SetCONF0_SEPER_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetCONF0_SEPER_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetCONF0_MEM_TRANS_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetCONF0_MEM_TRANS_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetCONF0_OUT_DATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetCONF0_OUT_DATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetCONF0_INDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetCONF0_INDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetCONF0_OUTDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetCONF0_OUTDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetCONF0_UART2_CE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetCONF0_UART2_CE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetCONF0_UART1_CE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetCONF0_UART1_CE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetCONF0_UART0_CE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetCONF0_UART0_CE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetCONF0_OUT_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetCONF0_OUT_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetCONF0_OUT_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetCONF0_OUT_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetCONF0_OUT_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetCONF0_OUT_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetCONF0_OUT_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetCONF0_OUT_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetCONF0_IN_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetCONF0_IN_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetCONF0_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetCONF0_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetCONF0_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetCONF0_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetCONF0_OUT_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetCONF0_OUT_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetCONF0_IN_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetCONF0_IN_RST() uint32 {
	return volatile.LoadUint32(&o.CONF0.Reg) & 0x1
}

// UHCI.INT_RAW: UHCI_INT_RAW
func (o *UHCI_Type) SetINT_RAW_DMA_INFIFO_FULL_WM_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_RAW_DMA_INFIFO_FULL_WM_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetINT_RAW_SEND_A_Q_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_RAW_SEND_A_Q_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_RAW_SEND_S_Q_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_RAW_SEND_S_Q_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_RAW_OUT_TOTAL_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_RAW_OUT_TOTAL_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_RAW_OUTLINK_EOF_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_RAW_OUTLINK_EOF_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_RAW_IN_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_RAW_IN_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_RAW_OUT_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_RAW_OUT_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_RAW_IN_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_RAW_IN_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_RAW_OUT_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_RAW_OUT_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_RAW_OUT_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_RAW_OUT_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_RAW_IN_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_RAW_IN_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_RAW_IN_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_RAW_IN_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_RAW_IN_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_RAW_IN_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_RAW_TX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_RAW_TX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_RAW_RX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_RAW_RX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_RAW_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_RAW_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_RAW_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_RAW_RX_START_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// UHCI.INT_ST: UHCI_INT_ST
func (o *UHCI_Type) SetINT_ST_DMA_INFIFO_FULL_WM_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_ST_DMA_INFIFO_FULL_WM_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetINT_ST_SEND_A_Q_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_ST_SEND_A_Q_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_ST_SEND_S_Q_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_ST_SEND_S_Q_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_ST_OUT_TOTAL_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_ST_OUT_TOTAL_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_ST_OUTLINK_EOF_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_ST_OUTLINK_EOF_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_ST_IN_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_ST_IN_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_ST_OUT_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_ST_OUT_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_ST_IN_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_ST_IN_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_ST_OUT_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_ST_OUT_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_ST_OUT_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_ST_OUT_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_ST_IN_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_ST_IN_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_ST_IN_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_ST_IN_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_ST_IN_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_ST_IN_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_ST_TX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_ST_TX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_ST_RX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_ST_RX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_ST_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_ST_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_ST_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_ST_RX_START_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// UHCI.INT_ENA: UHCI_INT_ENA
func (o *UHCI_Type) SetINT_ENA_DMA_INFIFO_FULL_WM_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_ENA_DMA_INFIFO_FULL_WM_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetINT_ENA_SEND_A_Q_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_ENA_SEND_A_Q_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_ENA_SEND_S_Q_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_ENA_SEND_S_Q_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_ENA_OUT_TOTAL_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_ENA_OUT_TOTAL_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_ENA_OUTLINK_EOF_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_ENA_OUTLINK_EOF_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_ENA_IN_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_ENA_IN_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_ENA_OUT_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_ENA_OUT_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_ENA_IN_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_ENA_IN_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_ENA_OUT_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_ENA_OUT_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_ENA_OUT_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_ENA_OUT_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_ENA_IN_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_ENA_IN_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_ENA_IN_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_ENA_IN_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_ENA_IN_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_ENA_IN_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_ENA_TX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_ENA_TX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_ENA_RX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_ENA_RX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_ENA_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_ENA_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_ENA_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_ENA_RX_START_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// UHCI.INT_CLR: UHCI_INT_CLR
func (o *UHCI_Type) SetINT_CLR_DMA_INFIFO_FULL_WM_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetINT_CLR_DMA_INFIFO_FULL_WM_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetINT_CLR_SEND_A_Q_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *UHCI_Type) GetINT_CLR_SEND_A_Q_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *UHCI_Type) SetINT_CLR_SEND_S_Q_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *UHCI_Type) GetINT_CLR_SEND_S_Q_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *UHCI_Type) SetINT_CLR_OUT_TOTAL_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *UHCI_Type) GetINT_CLR_OUT_TOTAL_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *UHCI_Type) SetINT_CLR_OUTLINK_EOF_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *UHCI_Type) GetINT_CLR_OUTLINK_EOF_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *UHCI_Type) SetINT_CLR_IN_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetINT_CLR_IN_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetINT_CLR_OUT_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *UHCI_Type) GetINT_CLR_OUT_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *UHCI_Type) SetINT_CLR_IN_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *UHCI_Type) GetINT_CLR_IN_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *UHCI_Type) SetINT_CLR_OUT_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetINT_CLR_OUT_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetINT_CLR_OUT_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetINT_CLR_OUT_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetINT_CLR_IN_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetINT_CLR_IN_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetINT_CLR_IN_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetINT_CLR_IN_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetINT_CLR_IN_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetINT_CLR_IN_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetINT_CLR_TX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetINT_CLR_TX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetINT_CLR_RX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetINT_CLR_RX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetINT_CLR_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetINT_CLR_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetINT_CLR_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetINT_CLR_RX_START_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// UHCI.DMA_OUT_STATUS: UHCI_DMA_OUT_STATUS
func (o *UHCI_Type) SetDMA_OUT_STATUS_OUT_EMPTY(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_STATUS.Reg, volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetDMA_OUT_STATUS_OUT_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetDMA_OUT_STATUS_OUT_FULL(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_STATUS.Reg, volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetDMA_OUT_STATUS_OUT_FULL() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_STATUS.Reg) & 0x1
}

// UHCI.DMA_OUT_PUSH: UHCI_DMA_OUT_PUSH
func (o *UHCI_Type) SetDMA_OUT_PUSH_OUTFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_PUSH.Reg, volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetDMA_OUT_PUSH_OUTFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetDMA_OUT_PUSH_OUTFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_PUSH.Reg, volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg)&^(0x1ff)|value)
}
func (o *UHCI_Type) GetDMA_OUT_PUSH_OUTFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_PUSH.Reg) & 0x1ff
}

// UHCI.DMA_IN_STATUS: UHCI_DMA_IN_STATUS
func (o *UHCI_Type) SetDMA_IN_STATUS_RX_ERR_CAUSE(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_STATUS.Reg, volatile.LoadUint32(&o.DMA_IN_STATUS.Reg)&^(0x70)|value<<4)
}
func (o *UHCI_Type) GetDMA_IN_STATUS_RX_ERR_CAUSE() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_STATUS.Reg) & 0x70) >> 4
}
func (o *UHCI_Type) SetDMA_IN_STATUS_IN_EMPTY(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_STATUS.Reg, volatile.LoadUint32(&o.DMA_IN_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetDMA_IN_STATUS_IN_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_STATUS.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetDMA_IN_STATUS_IN_FULL(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_STATUS.Reg, volatile.LoadUint32(&o.DMA_IN_STATUS.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetDMA_IN_STATUS_IN_FULL() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_STATUS.Reg) & 0x1
}

// UHCI.DMA_IN_POP: UHCI_DMA_IN_POP
func (o *UHCI_Type) SetDMA_IN_POP_INFIFO_POP(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_POP.Reg, volatile.LoadUint32(&o.DMA_IN_POP.Reg)&^(0x10000)|value<<16)
}
func (o *UHCI_Type) GetDMA_IN_POP_INFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_POP.Reg) & 0x10000) >> 16
}
func (o *UHCI_Type) SetDMA_IN_POP_INFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_POP.Reg, volatile.LoadUint32(&o.DMA_IN_POP.Reg)&^(0xfff)|value)
}
func (o *UHCI_Type) GetDMA_IN_POP_INFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_POP.Reg) & 0xfff
}

// UHCI.DMA_OUT_LINK: UHCI_DMA_OUT_LINK
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x80000000) >> 31
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x40000000) >> 30
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x20000000) >> 29
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0x10000000) >> 28
}
func (o *UHCI_Type) SetDMA_OUT_LINK_OUTLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_LINK.Reg, volatile.LoadUint32(&o.DMA_OUT_LINK.Reg)&^(0xfffff)|value)
}
func (o *UHCI_Type) GetDMA_OUT_LINK_OUTLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_LINK.Reg) & 0xfffff
}

// UHCI.DMA_IN_LINK: UHCI_DMA_IN_LINK
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x80000000) >> 31
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x40000000) >> 30
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_START(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_START() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x20000000) >> 29
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x10000000) >> 28
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0x100000)|value<<20)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0x100000) >> 20
}
func (o *UHCI_Type) SetDMA_IN_LINK_INLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_LINK.Reg, volatile.LoadUint32(&o.DMA_IN_LINK.Reg)&^(0xfffff)|value)
}
func (o *UHCI_Type) GetDMA_IN_LINK_INLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_LINK.Reg) & 0xfffff
}

// UHCI.CONF1: UHCI_CONF1
func (o *UHCI_Type) SetCONF1_DMA_INFIFO_FULL_THRS(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x1ffe00)|value<<9)
}
func (o *UHCI_Type) GetCONF1_DMA_INFIFO_FULL_THRS() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x1ffe00) >> 9
}
func (o *UHCI_Type) SetCONF1_SW_START(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x100)|value<<8)
}
func (o *UHCI_Type) GetCONF1_SW_START() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x100) >> 8
}
func (o *UHCI_Type) SetCONF1_WAIT_SW_START(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetCONF1_WAIT_SW_START() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetCONF1_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetCONF1_CHECK_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetCONF1_TX_ACK_NUM_RE(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetCONF1_TX_ACK_NUM_RE() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetCONF1_TX_CHECK_SUM_RE(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetCONF1_TX_CHECK_SUM_RE() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetCONF1_SAVE_HEAD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetCONF1_SAVE_HEAD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetCONF1_CRC_DISABLE(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetCONF1_CRC_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetCONF1_CHECK_SEQ_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetCONF1_CHECK_SEQ_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetCONF1_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetCONF1_CHECK_SUM_EN() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x1
}

// UHCI.STATE0: UHCI_STATE0
func (o *UHCI_Type) SetSTATE0(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, value)
}
func (o *UHCI_Type) GetSTATE0() uint32 {
	return volatile.LoadUint32(&o.STATE0.Reg)
}

// UHCI.STATE1: UHCI_STATE1
func (o *UHCI_Type) SetSTATE1(value uint32) {
	volatile.StoreUint32(&o.STATE1.Reg, value)
}
func (o *UHCI_Type) GetSTATE1() uint32 {
	return volatile.LoadUint32(&o.STATE1.Reg)
}

// UHCI.DMA_OUT_EOF_DES_ADDR: UHCI_DMA_OUT_EOF_DES_ADDR
func (o *UHCI_Type) SetDMA_OUT_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_EOF_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_EOF_DES_ADDR.Reg)
}

// UHCI.DMA_IN_SUC_EOF_DES_ADDR: UHCI_DMA_IN_SUC_EOF_DES_ADDR
func (o *UHCI_Type) SetDMA_IN_SUC_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_SUC_EOF_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_SUC_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_SUC_EOF_DES_ADDR.Reg)
}

// UHCI.DMA_IN_ERR_EOF_DES_ADDR: UHCI_DMA_IN_ERR_EOF_DES_ADDR
func (o *UHCI_Type) SetDMA_IN_ERR_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_ERR_EOF_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_ERR_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_ERR_EOF_DES_ADDR.Reg)
}

// UHCI.DMA_OUT_EOF_BFR_DES_ADDR: UHCI_DMA_OUT_EOF_BFR_DES_ADDR
func (o *UHCI_Type) SetDMA_OUT_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_EOF_BFR_DES_ADDR.Reg)
}

// UHCI.AHB_TEST: UHCI_AHB_TEST
func (o *UHCI_Type) SetAHB_TEST_AHB_TESTADDR(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x30)|value<<4)
}
func (o *UHCI_Type) GetAHB_TEST_AHB_TESTADDR() uint32 {
	return (volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x30) >> 4
}
func (o *UHCI_Type) SetAHB_TEST_AHB_TESTMODE(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x7)|value)
}
func (o *UHCI_Type) GetAHB_TEST_AHB_TESTMODE() uint32 {
	return volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x7
}

// UHCI.DMA_IN_DSCR: UHCI_DMA_IN_DSCR
func (o *UHCI_Type) SetDMA_IN_DSCR(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_DSCR.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_DSCR() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_DSCR.Reg)
}

// UHCI.DMA_IN_DSCR_BF0: UHCI_DMA_IN_DSCR_BF0
func (o *UHCI_Type) SetDMA_IN_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_DSCR_BF0.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_DSCR_BF0.Reg)
}

// UHCI.DMA_IN_DSCR_BF1: UHCI_DMA_IN_DSCR_BF1
func (o *UHCI_Type) SetDMA_IN_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.DMA_IN_DSCR_BF1.Reg, value)
}
func (o *UHCI_Type) GetDMA_IN_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.DMA_IN_DSCR_BF1.Reg)
}

// UHCI.DMA_OUT_DSCR: UHCI_DMA_OUT_DSCR
func (o *UHCI_Type) SetDMA_OUT_DSCR(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_DSCR.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_DSCR() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_DSCR.Reg)
}

// UHCI.DMA_OUT_DSCR_BF0: UHCI_DMA_OUT_DSCR_BF0
func (o *UHCI_Type) SetDMA_OUT_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_DSCR_BF0.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_DSCR_BF0.Reg)
}

// UHCI.DMA_OUT_DSCR_BF1: UHCI_DMA_OUT_DSCR_BF1
func (o *UHCI_Type) SetDMA_OUT_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.DMA_OUT_DSCR_BF1.Reg, value)
}
func (o *UHCI_Type) GetDMA_OUT_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.DMA_OUT_DSCR_BF1.Reg)
}

// UHCI.ESCAPE_CONF: UHCI_ESCAPE_CONF
func (o *UHCI_Type) SetESCAPE_CONF_RX_13_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_13_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetESCAPE_CONF_RX_11_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x40)|value<<6)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_11_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x40) >> 6
}
func (o *UHCI_Type) SetESCAPE_CONF_RX_DB_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x20)|value<<5)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_DB_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x20) >> 5
}
func (o *UHCI_Type) SetESCAPE_CONF_RX_C0_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x10)|value<<4)
}
func (o *UHCI_Type) GetESCAPE_CONF_RX_C0_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x10) >> 4
}
func (o *UHCI_Type) SetESCAPE_CONF_TX_13_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_13_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetESCAPE_CONF_TX_11_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x4)|value<<2)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_11_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x4) >> 2
}
func (o *UHCI_Type) SetESCAPE_CONF_TX_DB_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x2)|value<<1)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_DB_ESC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x2) >> 1
}
func (o *UHCI_Type) SetESCAPE_CONF_TX_C0_ESC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCAPE_CONF.Reg, volatile.LoadUint32(&o.ESCAPE_CONF.Reg)&^(0x1)|value)
}
func (o *UHCI_Type) GetESCAPE_CONF_TX_C0_ESC_EN() uint32 {
	return volatile.LoadUint32(&o.ESCAPE_CONF.Reg) & 0x1
}

// UHCI.HUNG_CONF: UHCI_HUNG_CONF
func (o *UHCI_Type) SetHUNG_CONF_RXFIFO_TIMEOUT_ENA(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *UHCI_Type) GetHUNG_CONF_RXFIFO_TIMEOUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x800000) >> 23
}
func (o *UHCI_Type) SetHUNG_CONF_RXFIFO_TIMEOUT_SHIFT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x700000)|value<<20)
}
func (o *UHCI_Type) GetHUNG_CONF_RXFIFO_TIMEOUT_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x700000) >> 20
}
func (o *UHCI_Type) SetHUNG_CONF_RXFIFO_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0xff000)|value<<12)
}
func (o *UHCI_Type) GetHUNG_CONF_RXFIFO_TIMEOUT() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0xff000) >> 12
}
func (o *UHCI_Type) SetHUNG_CONF_TXFIFO_TIMEOUT_ENA(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x800)|value<<11)
}
func (o *UHCI_Type) GetHUNG_CONF_TXFIFO_TIMEOUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x800) >> 11
}
func (o *UHCI_Type) SetHUNG_CONF_TXFIFO_TIMEOUT_SHIFT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0x700)|value<<8)
}
func (o *UHCI_Type) GetHUNG_CONF_TXFIFO_TIMEOUT_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0x700) >> 8
}
func (o *UHCI_Type) SetHUNG_CONF_TXFIFO_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.HUNG_CONF.Reg, volatile.LoadUint32(&o.HUNG_CONF.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetHUNG_CONF_TXFIFO_TIMEOUT() uint32 {
	return volatile.LoadUint32(&o.HUNG_CONF.Reg) & 0xff
}

// UHCI.RX_HEAD: UHCI_RX_HEAD
func (o *UHCI_Type) SetRX_HEAD(value uint32) {
	volatile.StoreUint32(&o.RX_HEAD.Reg, value)
}
func (o *UHCI_Type) GetRX_HEAD() uint32 {
	return volatile.LoadUint32(&o.RX_HEAD.Reg)
}

// UHCI.QUICK_SENT: UHCI_QUICK_SENT
func (o *UHCI_Type) SetQUICK_SENT_ALWAYS_SEND_EN(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x80)|value<<7)
}
func (o *UHCI_Type) GetQUICK_SENT_ALWAYS_SEND_EN() uint32 {
	return (volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x80) >> 7
}
func (o *UHCI_Type) SetQUICK_SENT_ALWAYS_SEND_NUM(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x70)|value<<4)
}
func (o *UHCI_Type) GetQUICK_SENT_ALWAYS_SEND_NUM() uint32 {
	return (volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x70) >> 4
}
func (o *UHCI_Type) SetQUICK_SENT_SINGLE_SEND_EN(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x8)|value<<3)
}
func (o *UHCI_Type) GetQUICK_SENT_SINGLE_SEND_EN() uint32 {
	return (volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x8) >> 3
}
func (o *UHCI_Type) SetQUICK_SENT_SINGLE_SEND_NUM(value uint32) {
	volatile.StoreUint32(&o.QUICK_SENT.Reg, volatile.LoadUint32(&o.QUICK_SENT.Reg)&^(0x7)|value)
}
func (o *UHCI_Type) GetQUICK_SENT_SINGLE_SEND_NUM() uint32 {
	return volatile.LoadUint32(&o.QUICK_SENT.Reg) & 0x7
}

// UHCI.Q0_WORD0: UHCI_Q0_WORD0
func (o *UHCI_Type) SetQ0_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q0_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ0_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q0_WORD0.Reg)
}

// UHCI.Q0_WORD1: UHCI_Q0_WORD1
func (o *UHCI_Type) SetQ0_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q0_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ0_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q0_WORD1.Reg)
}

// UHCI.Q1_WORD0: UHCI_Q1_WORD0
func (o *UHCI_Type) SetQ1_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q1_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ1_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q1_WORD0.Reg)
}

// UHCI.Q1_WORD1: UHCI_Q1_WORD1
func (o *UHCI_Type) SetQ1_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q1_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ1_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q1_WORD1.Reg)
}

// UHCI.Q2_WORD0: UHCI_Q2_WORD0
func (o *UHCI_Type) SetQ2_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q2_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ2_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q2_WORD0.Reg)
}

// UHCI.Q2_WORD1: UHCI_Q2_WORD1
func (o *UHCI_Type) SetQ2_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q2_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ2_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q2_WORD1.Reg)
}

// UHCI.Q3_WORD0: UHCI_Q3_WORD0
func (o *UHCI_Type) SetQ3_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q3_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ3_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q3_WORD0.Reg)
}

// UHCI.Q3_WORD1: UHCI_Q3_WORD1
func (o *UHCI_Type) SetQ3_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q3_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ3_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q3_WORD1.Reg)
}

// UHCI.Q4_WORD0: UHCI_Q4_WORD0
func (o *UHCI_Type) SetQ4_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q4_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ4_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q4_WORD0.Reg)
}

// UHCI.Q4_WORD1: UHCI_Q4_WORD1
func (o *UHCI_Type) SetQ4_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q4_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ4_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q4_WORD1.Reg)
}

// UHCI.Q5_WORD0: UHCI_Q5_WORD0
func (o *UHCI_Type) SetQ5_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q5_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ5_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q5_WORD0.Reg)
}

// UHCI.Q5_WORD1: UHCI_Q5_WORD1
func (o *UHCI_Type) SetQ5_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q5_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ5_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q5_WORD1.Reg)
}

// UHCI.Q6_WORD0: UHCI_Q6_WORD0
func (o *UHCI_Type) SetQ6_WORD0(value uint32) {
	volatile.StoreUint32(&o.Q6_WORD0.Reg, value)
}
func (o *UHCI_Type) GetQ6_WORD0() uint32 {
	return volatile.LoadUint32(&o.Q6_WORD0.Reg)
}

// UHCI.Q6_WORD1: UHCI_Q6_WORD1
func (o *UHCI_Type) SetQ6_WORD1(value uint32) {
	volatile.StoreUint32(&o.Q6_WORD1.Reg, value)
}
func (o *UHCI_Type) GetQ6_WORD1() uint32 {
	return volatile.LoadUint32(&o.Q6_WORD1.Reg)
}

// UHCI.ESC_CONF0: UHCI_ESC_CONF0
func (o *UHCI_Type) SetESC_CONF0_SEPER_ESC_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF0.Reg, volatile.LoadUint32(&o.ESC_CONF0.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF0_SEPER_ESC_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF0.Reg) & 0xff0000) >> 16
}
func (o *UHCI_Type) SetESC_CONF0_SEPER_ESC_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF0.Reg, volatile.LoadUint32(&o.ESC_CONF0.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF0_SEPER_ESC_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF0.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF0_SEPER_CHAR(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF0.Reg, volatile.LoadUint32(&o.ESC_CONF0.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF0_SEPER_CHAR() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF0.Reg) & 0xff
}

// UHCI.ESC_CONF1: UHCI_ESC_CONF1
func (o *UHCI_Type) SetESC_CONF1_ESC_SEQ0_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF1.Reg, volatile.LoadUint32(&o.ESC_CONF1.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF1_ESC_SEQ0_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF1.Reg) & 0xff0000) >> 16
}
func (o *UHCI_Type) SetESC_CONF1_ESC_SEQ0_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF1.Reg, volatile.LoadUint32(&o.ESC_CONF1.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF1_ESC_SEQ0_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF1.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF1_ESC_SEQ0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF1.Reg, volatile.LoadUint32(&o.ESC_CONF1.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF1_ESC_SEQ0() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF1.Reg) & 0xff
}

// UHCI.ESC_CONF2: UHCI_ESC_CONF2
func (o *UHCI_Type) SetESC_CONF2_ESC_SEQ1_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF2.Reg, volatile.LoadUint32(&o.ESC_CONF2.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF2_ESC_SEQ1_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF2.Reg) & 0xff0000) >> 16
}
func (o *UHCI_Type) SetESC_CONF2_ESC_SEQ1_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF2.Reg, volatile.LoadUint32(&o.ESC_CONF2.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF2_ESC_SEQ1_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF2.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF2_ESC_SEQ1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF2.Reg, volatile.LoadUint32(&o.ESC_CONF2.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF2_ESC_SEQ1() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF2.Reg) & 0xff
}

// UHCI.ESC_CONF3: UHCI_ESC_CONF3
func (o *UHCI_Type) SetESC_CONF3_ESC_SEQ2_CHAR1(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF3.Reg, volatile.LoadUint32(&o.ESC_CONF3.Reg)&^(0xff0000)|value<<16)
}
func (o *UHCI_Type) GetESC_CONF3_ESC_SEQ2_CHAR1() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF3.Reg) & 0xff0000) >> 16
}
func (o *UHCI_Type) SetESC_CONF3_ESC_SEQ2_CHAR0(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF3.Reg, volatile.LoadUint32(&o.ESC_CONF3.Reg)&^(0xff00)|value<<8)
}
func (o *UHCI_Type) GetESC_CONF3_ESC_SEQ2_CHAR0() uint32 {
	return (volatile.LoadUint32(&o.ESC_CONF3.Reg) & 0xff00) >> 8
}
func (o *UHCI_Type) SetESC_CONF3_ESC_SEQ2(value uint32) {
	volatile.StoreUint32(&o.ESC_CONF3.Reg, volatile.LoadUint32(&o.ESC_CONF3.Reg)&^(0xff)|value)
}
func (o *UHCI_Type) GetESC_CONF3_ESC_SEQ2() uint32 {
	return volatile.LoadUint32(&o.ESC_CONF3.Reg) & 0xff
}

// UHCI.PKT_THRES: UHCI_PKT_THRES
func (o *UHCI_Type) SetPKT_THRES_PKT_THRS(value uint32) {
	volatile.StoreUint32(&o.PKT_THRES.Reg, volatile.LoadUint32(&o.PKT_THRES.Reg)&^(0x1fff)|value)
}
func (o *UHCI_Type) GetPKT_THRES_PKT_THRS() uint32 {
	return volatile.LoadUint32(&o.PKT_THRES.Reg) & 0x1fff
}

// UHCI.DATE: UHCI_DATE
func (o *UHCI_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *UHCI_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type SLCHOST_Type struct {
	_                           [16]byte
	HOST_SLCHOST_FUNC2_0        volatile.Register32 // 0x10
	HOST_SLCHOST_FUNC2_1        volatile.Register32 // 0x14
	_                           [8]byte
	HOST_SLCHOST_FUNC2_2        volatile.Register32 // 0x20
	_                           [16]byte
	HOST_SLCHOST_GPIO_STATUS0   volatile.Register32 // 0x34
	HOST_SLCHOST_GPIO_STATUS1   volatile.Register32 // 0x38
	HOST_SLCHOST_GPIO_IN0       volatile.Register32 // 0x3C
	HOST_SLCHOST_GPIO_IN1       volatile.Register32 // 0x40
	HOST_SLC0HOST_TOKEN_RDATA   volatile.Register32 // 0x44
	HOST_SLC0_HOST_PF           volatile.Register32 // 0x48
	HOST_SLC1_HOST_PF           volatile.Register32 // 0x4C
	HOST_SLC0HOST_INT_RAW       volatile.Register32 // 0x50
	HOST_SLC1HOST_INT_RAW       volatile.Register32 // 0x54
	HOST_SLC0HOST_INT_ST        volatile.Register32 // 0x58
	HOST_SLC1HOST_INT_ST        volatile.Register32 // 0x5C
	HOST_SLCHOST_PKT_LEN        volatile.Register32 // 0x60
	HOST_SLCHOST_STATE_W0       volatile.Register32 // 0x64
	HOST_SLCHOST_STATE_W1       volatile.Register32 // 0x68
	HOST_SLCHOST_CONF_W0        volatile.Register32 // 0x6C
	HOST_SLCHOST_CONF_W1        volatile.Register32 // 0x70
	HOST_SLCHOST_CONF_W2        volatile.Register32 // 0x74
	HOST_SLCHOST_CONF_W3        volatile.Register32 // 0x78
	HOST_SLCHOST_CONF_W4        volatile.Register32 // 0x7C
	HOST_SLCHOST_CONF_W5        volatile.Register32 // 0x80
	_                           [4]byte
	HOST_SLCHOST_CONF_W6        volatile.Register32 // 0x88
	HOST_SLCHOST_CONF_W7        volatile.Register32 // 0x8C
	HOST_SLCHOST_PKT_LEN0       volatile.Register32 // 0x90
	HOST_SLCHOST_PKT_LEN1       volatile.Register32 // 0x94
	HOST_SLCHOST_PKT_LEN2       volatile.Register32 // 0x98
	HOST_SLCHOST_CONF_W8        volatile.Register32 // 0x9C
	HOST_SLCHOST_CONF_W9        volatile.Register32 // 0xA0
	HOST_SLCHOST_CONF_W10       volatile.Register32 // 0xA4
	HOST_SLCHOST_CONF_W11       volatile.Register32 // 0xA8
	HOST_SLCHOST_CONF_W12       volatile.Register32 // 0xAC
	HOST_SLCHOST_CONF_W13       volatile.Register32 // 0xB0
	HOST_SLCHOST_CONF_W14       volatile.Register32 // 0xB4
	HOST_SLCHOST_CONF_W15       volatile.Register32 // 0xB8
	HOST_SLCHOST_CHECK_SUM0     volatile.Register32 // 0xBC
	HOST_SLCHOST_CHECK_SUM1     volatile.Register32 // 0xC0
	HOST_SLC1HOST_TOKEN_RDATA   volatile.Register32 // 0xC4
	HOST_SLC0HOST_TOKEN_WDATA   volatile.Register32 // 0xC8
	HOST_SLC1HOST_TOKEN_WDATA   volatile.Register32 // 0xCC
	HOST_SLCHOST_TOKEN_CON      volatile.Register32 // 0xD0
	HOST_SLC0HOST_INT_CLR       volatile.Register32 // 0xD4
	HOST_SLC1HOST_INT_CLR       volatile.Register32 // 0xD8
	HOST_SLC0HOST_FUNC1_INT_ENA volatile.Register32 // 0xDC
	HOST_SLC1HOST_FUNC1_INT_ENA volatile.Register32 // 0xE0
	HOST_SLC0HOST_FUNC2_INT_ENA volatile.Register32 // 0xE4
	HOST_SLC1HOST_FUNC2_INT_ENA volatile.Register32 // 0xE8
	HOST_SLC0HOST_INT_ENA       volatile.Register32 // 0xEC
	HOST_SLC1HOST_INT_ENA       volatile.Register32 // 0xF0
	HOST_SLC0HOST_RX_INFOR      volatile.Register32 // 0xF4
	HOST_SLC1HOST_RX_INFOR      volatile.Register32 // 0xF8
	HOST_SLC0HOST_LEN_WD        volatile.Register32 // 0xFC
	HOST_SLC_APBWIN_WDATA       volatile.Register32 // 0x100
	HOST_SLC_APBWIN_CONF        volatile.Register32 // 0x104
	HOST_SLC_APBWIN_RDATA       volatile.Register32 // 0x108
	HOST_SLCHOST_RDCLR0         volatile.Register32 // 0x10C
	HOST_SLCHOST_RDCLR1         volatile.Register32 // 0x110
	HOST_SLC0HOST_INT_ENA1      volatile.Register32 // 0x114
	HOST_SLC1HOST_INT_ENA1      volatile.Register32 // 0x118
	_                           [92]byte
	HOST_SLCHOSTDATE            volatile.Register32 // 0x178
	HOST_SLCHOSTID              volatile.Register32 // 0x17C
	_                           [112]byte
	HOST_SLCHOST_CONF           volatile.Register32 // 0x1F0
	HOST_SLCHOST_INF_ST         volatile.Register32 // 0x1F4
}

// SLCHOST.HOST_SLCHOST_FUNC2_0: HOST_SLCHOST_FUNC2_0
func (o *SLCHOST_Type) SetHOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_FUNC2_0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_0.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_0.Reg) & 0x1000000) >> 24
}

// SLCHOST.HOST_SLCHOST_FUNC2_1: HOST_SLCHOST_FUNC2_1
func (o *SLCHOST_Type) SetHOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_FUNC2_1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_1.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_1.Reg) & 0x1
}

// SLCHOST.HOST_SLCHOST_FUNC2_2: HOST_SLCHOST_FUNC2_2
func (o *SLCHOST_Type) SetHOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_FUNC2_2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_2.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_FUNC2_2.Reg) & 0x1
}

// SLCHOST.HOST_SLCHOST_GPIO_STATUS0: HOST_SLCHOST_GPIO_STATUS0
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_STATUS0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_STATUS0.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_STATUS0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_STATUS0.Reg)
}

// SLCHOST.HOST_SLCHOST_GPIO_STATUS1: HOST_SLCHOST_GPIO_STATUS1
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_STATUS1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_STATUS1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_STATUS1.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_GPIO_IN0: HOST_SLCHOST_GPIO_IN0
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_IN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_IN0.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_IN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_IN0.Reg)
}

// SLCHOST.HOST_SLCHOST_GPIO_IN1: HOST_SLCHOST_GPIO_IN1
func (o *SLCHOST_Type) SetHOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_GPIO_IN1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_IN1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_GPIO_IN1.Reg) & 0xff
}

// SLCHOST.HOST_SLC0HOST_TOKEN_RDATA: HOST_SLC0HOST_TOKEN_RDATA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0xf0000000)|value<<28)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0xf0000000) >> 28
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0xfff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_RDATA.Reg) & 0xfff
}

// SLCHOST.HOST_SLC0_HOST_PF: HOST_SLC0_HOST_PF
func (o *SLCHOST_Type) SetHOST_SLC0_HOST_PF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0_HOST_PF.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC0_HOST_PF() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0_HOST_PF.Reg)
}

// SLCHOST.HOST_SLC1_HOST_PF: HOST_SLC1_HOST_PF
func (o *SLCHOST_Type) SetHOST_SLC1_HOST_PF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1_HOST_PF.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC1_HOST_PF() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1_HOST_PF.Reg)
}

// SLCHOST.HOST_SLC0HOST_INT_RAW: HOST_SLC0HOST_INT_RAW
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_RAW.Reg) & 0x1
}

// SLCHOST.HOST_SLC1HOST_INT_RAW: HOST_SLC1HOST_INT_RAW
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_RAW.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_RAW.Reg) & 0x1
}

// SLCHOST.HOST_SLC0HOST_INT_ST: HOST_SLC0HOST_INT_ST
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ST.Reg) & 0x1
}

// SLCHOST.HOST_SLC1HOST_INT_ST: HOST_SLC1HOST_INT_ST
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ST.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ST.Reg) & 0x1
}

// SLCHOST.HOST_SLCHOST_PKT_LEN: HOST_SLCHOST_PKT_LEN
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg)&^(0xfff00000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg) & 0xfff00000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN.Reg) & 0xfffff
}

// SLCHOST.HOST_SLCHOST_STATE_W0: HOST_SLCHOST_STATE_W0
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W0.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_STATE_W1: HOST_SLCHOST_STATE_W1
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_STATE_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_STATE_W1.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W0: HOST_SLCHOST_CONF_W0
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W0.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W1: HOST_SLCHOST_CONF_W1
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W1.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W2: HOST_SLCHOST_CONF_W2
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W2.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W3: HOST_SLCHOST_CONF_W3
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W3.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W3.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W4: HOST_SLCHOST_CONF_W4
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W4.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W4.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W5: HOST_SLCHOST_CONF_W5
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W5.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W5.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W6: HOST_SLCHOST_CONF_W6
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W6.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W6.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W7: HOST_SLCHOST_CONF_W7
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W7.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W7.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_PKT_LEN0: HOST_SLCHOST_PKT_LEN0
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN0.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN0.Reg) & 0xfffff
}

// SLCHOST.HOST_SLCHOST_PKT_LEN1: HOST_SLCHOST_PKT_LEN1
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN1.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN1.Reg) & 0xfffff
}

// SLCHOST.HOST_SLCHOST_PKT_LEN2: HOST_SLCHOST_PKT_LEN2
func (o *SLCHOST_Type) SetHOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_PKT_LEN2.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN2.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_PKT_LEN2.Reg) & 0xfffff
}

// SLCHOST.HOST_SLCHOST_CONF_W8: HOST_SLCHOST_CONF_W8
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W8.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W8.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W9: HOST_SLCHOST_CONF_W9
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W9.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W9.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W10: HOST_SLCHOST_CONF_W10
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W10.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W10.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W11: HOST_SLCHOST_CONF_W11
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W11.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W11.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W12: HOST_SLCHOST_CONF_W12
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W12.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W12.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W13: HOST_SLCHOST_CONF_W13
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W13.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W13.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W14: HOST_SLCHOST_CONF_W14
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W14.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W14.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CONF_W15: HOST_SLCHOST_CONF_W15
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff00)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff00) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF_W15.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg)&^(0xff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF_W15.Reg) & 0xff
}

// SLCHOST.HOST_SLCHOST_CHECK_SUM0: HOST_SLCHOST_CHECK_SUM0
func (o *SLCHOST_Type) SetHOST_SLCHOST_CHECK_SUM0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CHECK_SUM0.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CHECK_SUM0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CHECK_SUM0.Reg)
}

// SLCHOST.HOST_SLCHOST_CHECK_SUM1: HOST_SLCHOST_CHECK_SUM1
func (o *SLCHOST_Type) SetHOST_SLCHOST_CHECK_SUM1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CHECK_SUM1.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CHECK_SUM1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CHECK_SUM1.Reg)
}

// SLCHOST.HOST_SLC1HOST_TOKEN_RDATA: HOST_SLC1HOST_TOKEN_RDATA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0xf0000000)|value<<28)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0xf0000000) >> 28
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0xfff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_RDATA.Reg) & 0xfff
}

// SLCHOST.HOST_SLC0HOST_TOKEN_WDATA: HOST_SLC0HOST_TOKEN_WDATA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg) & 0xfff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_TOKEN_WDATA.Reg) & 0xfff
}

// SLCHOST.HOST_SLC1HOST_TOKEN_WDATA: HOST_SLC1HOST_TOKEN_WDATA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg) & 0xfff0000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg)&^(0xfff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_TOKEN_WDATA.Reg) & 0xfff
}

// SLCHOST.HOST_SLCHOST_TOKEN_CON: HOST_SLCHOST_TOKEN_CON
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_TOKEN_CON.Reg) & 0x1
}

// SLCHOST.HOST_SLC0HOST_INT_CLR: HOST_SLC0HOST_INT_CLR
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_CLR.Reg) & 0x1
}

// SLCHOST.HOST_SLC1HOST_INT_CLR: HOST_SLC1HOST_INT_CLR
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_CLR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_CLR.Reg) & 0x1
}

// SLCHOST.HOST_SLC0HOST_FUNC1_INT_ENA: HOST_SLC0HOST_FUNC1_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC1_INT_ENA.Reg) & 0x1
}

// SLCHOST.HOST_SLC1HOST_FUNC1_INT_ENA: HOST_SLC1HOST_FUNC1_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC1_INT_ENA.Reg) & 0x1
}

// SLCHOST.HOST_SLC0HOST_FUNC2_INT_ENA: HOST_SLC0HOST_FUNC2_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_FUNC2_INT_ENA.Reg) & 0x1
}

// SLCHOST.HOST_SLC1HOST_FUNC2_INT_ENA: HOST_SLC1HOST_FUNC2_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_FUNC2_INT_ENA.Reg) & 0x1
}

// SLCHOST.HOST_SLC0HOST_INT_ENA: HOST_SLC0HOST_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA.Reg) & 0x1
}

// SLCHOST.HOST_SLC1HOST_INT_ENA: HOST_SLC1HOST_INT_ENA
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA.Reg) & 0x1
}

// SLCHOST.HOST_SLC0HOST_RX_INFOR: HOST_SLC0HOST_RX_INFOR
func (o *SLCHOST_Type) SetHOST_SLC0HOST_RX_INFOR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_RX_INFOR.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_RX_INFOR.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_RX_INFOR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_RX_INFOR.Reg) & 0xfffff
}

// SLCHOST.HOST_SLC1HOST_RX_INFOR: HOST_SLC1HOST_RX_INFOR
func (o *SLCHOST_Type) SetHOST_SLC1HOST_RX_INFOR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_RX_INFOR.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_RX_INFOR.Reg)&^(0xfffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_RX_INFOR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_RX_INFOR.Reg) & 0xfffff
}

// SLCHOST.HOST_SLC0HOST_LEN_WD: HOST_SLC0HOST_LEN_WD
func (o *SLCHOST_Type) SetHOST_SLC0HOST_LEN_WD(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_LEN_WD.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_LEN_WD() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_LEN_WD.Reg)
}

// SLCHOST.HOST_SLC_APBWIN_WDATA: HOST_SLC_APBWIN_WDATA
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_WDATA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_WDATA.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_WDATA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC_APBWIN_WDATA.Reg)
}

// SLCHOST.HOST_SLC_APBWIN_CONF: HOST_SLC_APBWIN_CONF
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_CONF.Reg, volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg) & 0x20000000) >> 29
}
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_CONF.Reg, volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg) & 0x10000000) >> 28
}
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_CONF.Reg, volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg)&^(0xfffffff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC_APBWIN_CONF.Reg) & 0xfffffff
}

// SLCHOST.HOST_SLC_APBWIN_RDATA: HOST_SLC_APBWIN_RDATA
func (o *SLCHOST_Type) SetHOST_SLC_APBWIN_RDATA(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC_APBWIN_RDATA.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLC_APBWIN_RDATA() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC_APBWIN_RDATA.Reg)
}

// SLCHOST.HOST_SLCHOST_RDCLR0: HOST_SLCHOST_RDCLR0
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg)&^(0x3fe00)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg) & 0x3fe00) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR0.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg)&^(0x1ff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR0.Reg) & 0x1ff
}

// SLCHOST.HOST_SLCHOST_RDCLR1: HOST_SLCHOST_RDCLR1
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg)&^(0x3fe00)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg) & 0x3fe00) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_RDCLR1.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg)&^(0x1ff)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_RDCLR1.Reg) & 0x1ff
}

// SLCHOST.HOST_SLC0HOST_INT_ENA1: HOST_SLC0HOST_INT_ENA1
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC0HOST_INT_ENA1.Reg) & 0x1
}

// SLCHOST.HOST_SLC1HOST_INT_ENA1: HOST_SLC1HOST_INT_ENA1
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x1000000) >> 24
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLCHOST_Type) SetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg, volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLCHOST_Type) GetHOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o.HOST_SLC1HOST_INT_ENA1.Reg) & 0x1
}

// SLCHOST.HOST_SLCHOSTDATE: HOST_SLCHOSTDATE
func (o *SLCHOST_Type) SetHOST_SLCHOSTDATE(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOSTDATE.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOSTDATE() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOSTDATE.Reg)
}

// SLCHOST.HOST_SLCHOSTID: HOST_SLCHOSTID
func (o *SLCHOST_Type) SetHOST_SLCHOSTID(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOSTID.Reg, value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOSTID() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOSTID.Reg)
}

// SLCHOST.HOST_SLCHOST_CONF: HOST_SLCHOST_CONF
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_HSPEED_CON_EN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_HSPEED_CON_EN() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x8000000) >> 27
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x4000000) >> 26
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x2000000) >> 25
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_QUICK_IN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x1f00000)|value<<20)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_QUICK_IN() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x1f00000) >> 20
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_POS_SAMP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0xf8000)|value<<15)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_POS_SAMP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0xf8000) >> 15
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x7c00)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x7c00) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_SDIO20(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x3e0)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_SDIO20() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x3e0) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_CONF_HOST_FRC_SDIO11(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_CONF.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg)&^(0x1f)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_CONF_HOST_FRC_SDIO11() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_CONF.Reg) & 0x1f
}

// SLCHOST.HOST_SLCHOST_INF_ST: HOST_SLCHOST_INF_ST
func (o *SLCHOST_Type) SetHOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_INF_ST.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg)&^(0x7c00)|value<<10)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg) & 0x7c00) >> 10
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_INF_ST.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg)&^(0x3e0)|value<<5)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP() uint32 {
	return (volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg) & 0x3e0) >> 5
}
func (o *SLCHOST_Type) SetHOST_SLCHOST_INF_ST_HOST_SDIO20_MODE(value uint32) {
	volatile.StoreUint32(&o.HOST_SLCHOST_INF_ST.Reg, volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg)&^(0x1f)|value)
}
func (o *SLCHOST_Type) GetHOST_SLCHOST_INF_ST_HOST_SDIO20_MODE() uint32 {
	return volatile.LoadUint32(&o.HOST_SLCHOST_INF_ST.Reg) & 0x1f
}

type SLC_Type struct {
	CONF0                  volatile.Register32 // 0x0
	_0INT_RAW              volatile.Register32 // 0x4
	_0INT_ST               volatile.Register32 // 0x8
	_0INT_ENA              volatile.Register32 // 0xC
	_0INT_CLR              volatile.Register32 // 0x10
	_1INT_RAW              volatile.Register32 // 0x14
	_1INT_ST               volatile.Register32 // 0x18
	_1INT_ENA              volatile.Register32 // 0x1C
	_1INT_CLR              volatile.Register32 // 0x20
	RX_STATUS              volatile.Register32 // 0x24
	_0RXFIFO_PUSH          volatile.Register32 // 0x28
	_1RXFIFO_PUSH          volatile.Register32 // 0x2C
	TX_STATUS              volatile.Register32 // 0x30
	_0TXFIFO_POP           volatile.Register32 // 0x34
	_1TXFIFO_POP           volatile.Register32 // 0x38
	_0RX_LINK              volatile.Register32 // 0x3C
	_0TX_LINK              volatile.Register32 // 0x40
	_1RX_LINK              volatile.Register32 // 0x44
	_1TX_LINK              volatile.Register32 // 0x48
	INTVEC_TOHOST          volatile.Register32 // 0x4C
	_0TOKEN0               volatile.Register32 // 0x50
	_0TOKEN1               volatile.Register32 // 0x54
	_1TOKEN0               volatile.Register32 // 0x58
	_1TOKEN1               volatile.Register32 // 0x5C
	CONF1                  volatile.Register32 // 0x60
	_0_STATE0              volatile.Register32 // 0x64
	_0_STATE1              volatile.Register32 // 0x68
	_1_STATE0              volatile.Register32 // 0x6C
	_1_STATE1              volatile.Register32 // 0x70
	BRIDGE_CONF            volatile.Register32 // 0x74
	_0_TO_EOF_DES_ADDR     volatile.Register32 // 0x78
	_0_TX_EOF_DES_ADDR     volatile.Register32 // 0x7C
	_0_TO_EOF_BFR_DES_ADDR volatile.Register32 // 0x80
	_1_TO_EOF_DES_ADDR     volatile.Register32 // 0x84
	_1_TX_EOF_DES_ADDR     volatile.Register32 // 0x88
	_1_TO_EOF_BFR_DES_ADDR volatile.Register32 // 0x8C
	AHB_TEST               volatile.Register32 // 0x90
	SDIO_ST                volatile.Register32 // 0x94
	RX_DSCR_CONF           volatile.Register32 // 0x98
	_0_TXLINK_DSCR         volatile.Register32 // 0x9C
	_0_TXLINK_DSCR_BF0     volatile.Register32 // 0xA0
	_0_TXLINK_DSCR_BF1     volatile.Register32 // 0xA4
	_0_RXLINK_DSCR         volatile.Register32 // 0xA8
	_0_RXLINK_DSCR_BF0     volatile.Register32 // 0xAC
	_0_RXLINK_DSCR_BF1     volatile.Register32 // 0xB0
	_1_TXLINK_DSCR         volatile.Register32 // 0xB4
	_1_TXLINK_DSCR_BF0     volatile.Register32 // 0xB8
	_1_TXLINK_DSCR_BF1     volatile.Register32 // 0xBC
	_1_RXLINK_DSCR         volatile.Register32 // 0xC0
	_1_RXLINK_DSCR_BF0     volatile.Register32 // 0xC4
	_1_RXLINK_DSCR_BF1     volatile.Register32 // 0xC8
	_0_TX_ERREOF_DES_ADDR  volatile.Register32 // 0xCC
	_1_TX_ERREOF_DES_ADDR  volatile.Register32 // 0xD0
	TOKEN_LAT              volatile.Register32 // 0xD4
	TX_DSCR_CONF           volatile.Register32 // 0xD8
	CMD_INFOR0             volatile.Register32 // 0xDC
	CMD_INFOR1             volatile.Register32 // 0xE0
	_0_LEN_CONF            volatile.Register32 // 0xE4
	_0_LENGTH              volatile.Register32 // 0xE8
	_0_TXPKT_H_DSCR        volatile.Register32 // 0xEC
	_0_TXPKT_E_DSCR        volatile.Register32 // 0xF0
	_0_RXPKT_H_DSCR        volatile.Register32 // 0xF4
	_0_RXPKT_E_DSCR        volatile.Register32 // 0xF8
	_0_TXPKTU_H_DSCR       volatile.Register32 // 0xFC
	_0_TXPKTU_E_DSCR       volatile.Register32 // 0x100
	_0_RXPKTU_H_DSCR       volatile.Register32 // 0x104
	_0_RXPKTU_E_DSCR       volatile.Register32 // 0x108
	_                      [8]byte
	SEQ_POSITION           volatile.Register32 // 0x114
	_0_DSCR_REC_CONF       volatile.Register32 // 0x118
	SDIO_CRC_ST0           volatile.Register32 // 0x11C
	SDIO_CRC_ST1           volatile.Register32 // 0x120
	_0_EOF_START_DES       volatile.Register32 // 0x124
	_0_PUSH_DSCR_ADDR      volatile.Register32 // 0x128
	_0_DONE_DSCR_ADDR      volatile.Register32 // 0x12C
	_0_SUB_START_DES       volatile.Register32 // 0x130
	_0_DSCR_CNT            volatile.Register32 // 0x134
	_0_LEN_LIM_CONF        volatile.Register32 // 0x138
	_0INT_ST1              volatile.Register32 // 0x13C
	_0INT_ENA1             volatile.Register32 // 0x140
	_1INT_ST1              volatile.Register32 // 0x144
	_1INT_ENA1             volatile.Register32 // 0x148
	_                      [172]byte
	DATE                   volatile.Register32 // 0x1F8
	ID                     volatile.Register32 // 0x1FC
}

// SLC.CONF0: SLC_CONF0
func (o *SLC_Type) SetCONF0_SLC1_TOKEN_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) GetCONF0_SLC1_TOKEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000000) >> 31
}
func (o *SLC_Type) SetCONF0_SLC1_TOKEN_AUTO_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) GetCONF0_SLC1_TOKEN_AUTO_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) SetCONF0_SLC1_TXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) GetCONF0_SLC1_TXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) SetCONF0_SLC1_TXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) GetCONF0_SLC1_TXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) SetCONF0_SLC1_TXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000000)|value<<27)
}
func (o *SLC_Type) GetCONF0_SLC1_TXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000000) >> 27
}
func (o *SLC_Type) SetCONF0_SLC1_RXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) GetCONF0_SLC1_RXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) SetCONF0_SLC1_RXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) GetCONF0_SLC1_RXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) SetCONF0_SLC1_RXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) GetCONF0_SLC1_RXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) SetCONF0_SLC1_RX_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) SetCONF0_SLC1_RX_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) SetCONF0_SLC1_RX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) SetCONF0_SLC1_TX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) GetCONF0_SLC1_TX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) SetCONF0_SLC1_WR_RETRY_MASK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) GetCONF0_SLC1_WR_RETRY_MASK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) SetCONF0_SLC0_WR_RETRY_MASK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) GetCONF0_SLC0_WR_RETRY_MASK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) SetCONF0_SLC1_RX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetCONF0_SLC1_RX_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetCONF0_SLC1_TX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetCONF0_SLC1_TX_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetCONF0_SLC0_TOKEN_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) GetCONF0_SLC0_TOKEN_SEL() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) SetCONF0_SLC0_TOKEN_AUTO_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) GetCONF0_SLC0_TOKEN_AUTO_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) SetCONF0_SLC0_TXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) GetCONF0_SLC0_TXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) SetCONF0_SLC0_TXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) GetCONF0_SLC0_TXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) SetCONF0_SLC0_TXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) GetCONF0_SLC0_TXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800) >> 11
}
func (o *SLC_Type) SetCONF0_SLC0_RXLINK_AUTO_RET(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) GetCONF0_SLC0_RXLINK_AUTO_RET() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400) >> 10
}
func (o *SLC_Type) SetCONF0_SLC0_RXDATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) GetCONF0_SLC0_RXDATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200) >> 9
}
func (o *SLC_Type) SetCONF0_SLC0_RXDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) GetCONF0_SLC0_RXDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100) >> 8
}
func (o *SLC_Type) SetCONF0_SLC0_RX_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80) >> 7
}
func (o *SLC_Type) SetCONF0_SLC0_RX_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40) >> 6
}
func (o *SLC_Type) SetCONF0_SLC0_RX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20) >> 5
}
func (o *SLC_Type) SetCONF0_SLC0_TX_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) GetCONF0_SLC0_TX_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10) >> 4
}
func (o *SLC_Type) SetCONF0_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) GetCONF0_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8) >> 3
}
func (o *SLC_Type) SetCONF0_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) GetCONF0_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4) >> 2
}
func (o *SLC_Type) SetCONF0_SLC0_RX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetCONF0_SLC0_RX_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetCONF0_SLC0_TX_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetCONF0_SLC0_TX_RST() uint32 {
	return volatile.LoadUint32(&o.CONF0.Reg) & 0x1
}

// SLC._0INT_RAW: SLC_0INT_RAW
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0INT_RAW_CMD_DTC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_RAW_CMD_DTC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TOHOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TOHOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_RAW_SLC0_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_RAW_SLC0_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_RAW_FRHOST_BIT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._0INT_RAW.Reg, volatile.LoadUint32(&o._0INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_RAW_FRHOST_BIT0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o._0INT_RAW.Reg) & 0x1
}

// SLC._0INT_ST: SLC_0INT_ST
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_QUICK_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_QUICK_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0INT_ST_CMD_DTC_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ST_CMD_DTC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ST_SLC0_WR_RETRY_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_WR_RETRY_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ST_SLC0_HOST_RD_ACK_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_HOST_RD_ACK_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TOHOST_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TOHOST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ST_SLC0_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ST_SLC0_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ST_SLC0_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT7_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT6_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT5_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT4_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT3_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ST_FRHOST_BIT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._0INT_ST.Reg, volatile.LoadUint32(&o._0INT_ST.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ST_FRHOST_BIT0_INT_ST() uint32 {
	return volatile.LoadUint32(&o._0INT_ST.Reg) & 0x1
}

// SLC._0INT_ENA: SLC_0INT_ENA
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0INT_ENA_CMD_DTC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ENA_CMD_DTC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TOHOST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TOHOST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ENA_SLC0_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ENA_SLC0_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ENA_FRHOST_BIT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA.Reg, volatile.LoadUint32(&o._0INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ENA_FRHOST_BIT0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o._0INT_ENA.Reg) & 0x1
}

// SLC._0INT_CLR: SLC_0INT_CLR
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0INT_CLR_CMD_DTC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_CLR_CMD_DTC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TOHOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TOHOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_CLR_SLC0_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_CLR_SLC0_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_CLR_FRHOST_BIT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._0INT_CLR.Reg, volatile.LoadUint32(&o._0INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_CLR_FRHOST_BIT0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o._0INT_CLR.Reg) & 0x1
}

// SLC._1INT_RAW: SLC_1INT_RAW
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TOHOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TOHOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_UDF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_UDF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_TX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_TX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_RAW_SLC1_RX_START_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_RAW_SLC1_RX_START_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT15_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT15_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT14_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT14_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT13_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT13_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT12_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT12_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT11_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT11_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT10_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT10_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT9_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT9_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_RAW_FRHOST_BIT8_INT_RAW(value uint32) {
	volatile.StoreUint32(&o._1INT_RAW.Reg, volatile.LoadUint32(&o._1INT_RAW.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_RAW_FRHOST_BIT8_INT_RAW() uint32 {
	return volatile.LoadUint32(&o._1INT_RAW.Reg) & 0x1
}

// SLC._1INT_ST: SLC_1INT_ST
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_1INT_ST_SLC1_WR_RETRY_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_WR_RETRY_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ST_SLC1_HOST_RD_ACK_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_HOST_RD_ACK_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TOHOST_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TOHOST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TOKEN1_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TOKEN1_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TOKEN0_1TO0_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TOKEN0_1TO0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_UDF_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_UDF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ST_SLC1_TX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_TX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ST_SLC1_RX_START_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ST_SLC1_RX_START_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT15_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT15_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT14_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT14_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT13_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT13_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT12_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT12_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT11_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT11_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT10_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT10_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT9_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT9_INT_ST() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ST_FRHOST_BIT8_INT_ST(value uint32) {
	volatile.StoreUint32(&o._1INT_ST.Reg, volatile.LoadUint32(&o._1INT_ST.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ST_FRHOST_BIT8_INT_ST() uint32 {
	return volatile.LoadUint32(&o._1INT_ST.Reg) & 0x1
}

// SLC._1INT_ENA: SLC_1INT_ENA
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TOHOST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TOHOST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_UDF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_UDF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_TX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_TX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ENA_SLC1_RX_START_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ENA_SLC1_RX_START_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT15_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT15_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT14_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT14_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT13_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT13_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT12_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT12_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT11_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT11_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT10_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT10_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT9_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT9_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ENA_FRHOST_BIT8_INT_ENA(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA.Reg, volatile.LoadUint32(&o._1INT_ENA.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ENA_FRHOST_BIT8_INT_ENA() uint32 {
	return volatile.LoadUint32(&o._1INT_ENA.Reg) & 0x1
}

// SLC._1INT_CLR: SLC_1INT_CLR
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TOHOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TOHOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_UDF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_UDF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_TX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_TX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_CLR_SLC1_RX_START_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_CLR_SLC1_RX_START_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT15_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT15_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT14_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT14_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT13_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT13_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT12_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT12_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT11_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT11_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT10_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT10_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT9_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT9_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_CLR_FRHOST_BIT8_INT_CLR(value uint32) {
	volatile.StoreUint32(&o._1INT_CLR.Reg, volatile.LoadUint32(&o._1INT_CLR.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_CLR_FRHOST_BIT8_INT_CLR() uint32 {
	return volatile.LoadUint32(&o._1INT_CLR.Reg) & 0x1
}

// SLC.RX_STATUS: SLC_RX_STATUS
func (o *SLC_Type) SetRX_STATUS_SLC1_RX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetRX_STATUS_SLC1_RX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetRX_STATUS_SLC1_RX_FULL(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetRX_STATUS_SLC1_RX_FULL() uint32 {
	return (volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetRX_STATUS_SLC0_RX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetRX_STATUS_SLC0_RX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetRX_STATUS_SLC0_RX_FULL(value uint32) {
	volatile.StoreUint32(&o.RX_STATUS.Reg, volatile.LoadUint32(&o.RX_STATUS.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetRX_STATUS_SLC0_RX_FULL() uint32 {
	return volatile.LoadUint32(&o.RX_STATUS.Reg) & 0x1
}

// SLC._0RXFIFO_PUSH: SLC_0RXFIFO_PUSH
func (o *SLC_Type) Set_0RXFIFO_PUSH_SLC0_RXFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o._0RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0RXFIFO_PUSH_SLC0_RXFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0RXFIFO_PUSH_SLC0_RXFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o._0RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg)&^(0x1ff)|value)
}
func (o *SLC_Type) Get_0RXFIFO_PUSH_SLC0_RXFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o._0RXFIFO_PUSH.Reg) & 0x1ff
}

// SLC._1RXFIFO_PUSH: SLC_1RXFIFO_PUSH
func (o *SLC_Type) Set_1RXFIFO_PUSH_SLC1_RXFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o._1RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1RXFIFO_PUSH_SLC1_RXFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1RXFIFO_PUSH_SLC1_RXFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o._1RXFIFO_PUSH.Reg, volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg)&^(0x1ff)|value)
}
func (o *SLC_Type) Get_1RXFIFO_PUSH_SLC1_RXFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o._1RXFIFO_PUSH.Reg) & 0x1ff
}

// SLC.TX_STATUS: SLC_TX_STATUS
func (o *SLC_Type) SetTX_STATUS_SLC1_TX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetTX_STATUS_SLC1_TX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetTX_STATUS_SLC1_TX_FULL(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetTX_STATUS_SLC1_TX_FULL() uint32 {
	return (volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetTX_STATUS_SLC0_TX_EMPTY(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetTX_STATUS_SLC0_TX_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetTX_STATUS_SLC0_TX_FULL(value uint32) {
	volatile.StoreUint32(&o.TX_STATUS.Reg, volatile.LoadUint32(&o.TX_STATUS.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetTX_STATUS_SLC0_TX_FULL() uint32 {
	return volatile.LoadUint32(&o.TX_STATUS.Reg) & 0x1
}

// SLC._0TXFIFO_POP: SLC_0TXFIFO_POP
func (o *SLC_Type) Set_0TXFIFO_POP_SLC0_TXFIFO_POP(value uint32) {
	volatile.StoreUint32(&o._0TXFIFO_POP.Reg, volatile.LoadUint32(&o._0TXFIFO_POP.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0TXFIFO_POP_SLC0_TXFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o._0TXFIFO_POP.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0TXFIFO_POP_SLC0_TXFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o._0TXFIFO_POP.Reg, volatile.LoadUint32(&o._0TXFIFO_POP.Reg)&^(0x7ff)|value)
}
func (o *SLC_Type) Get_0TXFIFO_POP_SLC0_TXFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o._0TXFIFO_POP.Reg) & 0x7ff
}

// SLC._1TXFIFO_POP: SLC_1TXFIFO_POP
func (o *SLC_Type) Set_1TXFIFO_POP_SLC1_TXFIFO_POP(value uint32) {
	volatile.StoreUint32(&o._1TXFIFO_POP.Reg, volatile.LoadUint32(&o._1TXFIFO_POP.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1TXFIFO_POP_SLC1_TXFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o._1TXFIFO_POP.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1TXFIFO_POP_SLC1_TXFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o._1TXFIFO_POP.Reg, volatile.LoadUint32(&o._1TXFIFO_POP.Reg)&^(0x7ff)|value)
}
func (o *SLC_Type) Get_1TXFIFO_POP_SLC1_TXFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o._1TXFIFO_POP.Reg) & 0x7ff
}

// SLC._0RX_LINK: SLC_0RX_LINK
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x80000000) >> 31
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_START(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._0RX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_0RX_LINK_SLC0_RXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._0RX_LINK.Reg, volatile.LoadUint32(&o._0RX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0RX_LINK_SLC0_RXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._0RX_LINK.Reg) & 0xfffff
}

// SLC._0TX_LINK: SLC_0TX_LINK
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x80000000) >> 31
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_START(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._0TX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_0TX_LINK_SLC0_TXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._0TX_LINK.Reg, volatile.LoadUint32(&o._0TX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0TX_LINK_SLC0_TXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._0TX_LINK.Reg) & 0xfffff
}

// SLC._1RX_LINK: SLC_1RX_LINK
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x80000000) >> 31
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_START(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_BT_PACKET(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_BT_PACKET() uint32 {
	return (volatile.LoadUint32(&o._1RX_LINK.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1RX_LINK_SLC1_RXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._1RX_LINK.Reg, volatile.LoadUint32(&o._1RX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_1RX_LINK_SLC1_RXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._1RX_LINK.Reg) & 0xfffff
}

// SLC._1TX_LINK: SLC_1TX_LINK
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_PARK(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x80000000) >> 31
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x40000000) >> 30
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_START(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_START() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x20000000) >> 29
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_STOP(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o._1TX_LINK.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_1TX_LINK_SLC1_TXLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o._1TX_LINK.Reg, volatile.LoadUint32(&o._1TX_LINK.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_1TX_LINK_SLC1_TXLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o._1TX_LINK.Reg) & 0xfffff
}

// SLC.INTVEC_TOHOST: SLC_INTVEC_TOHOST
func (o *SLC_Type) SetINTVEC_TOHOST_SLC1_TOHOST_INTVEC(value uint32) {
	volatile.StoreUint32(&o.INTVEC_TOHOST.Reg, volatile.LoadUint32(&o.INTVEC_TOHOST.Reg)&^(0xff0000)|value<<16)
}
func (o *SLC_Type) GetINTVEC_TOHOST_SLC1_TOHOST_INTVEC() uint32 {
	return (volatile.LoadUint32(&o.INTVEC_TOHOST.Reg) & 0xff0000) >> 16
}
func (o *SLC_Type) SetINTVEC_TOHOST_SLC0_TOHOST_INTVEC(value uint32) {
	volatile.StoreUint32(&o.INTVEC_TOHOST.Reg, volatile.LoadUint32(&o.INTVEC_TOHOST.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetINTVEC_TOHOST_SLC0_TOHOST_INTVEC() uint32 {
	return volatile.LoadUint32(&o.INTVEC_TOHOST.Reg) & 0xff
}

// SLC._0TOKEN0: SLC_0TOKEN0
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0xfff0000) >> 16
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_INC(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_INC() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN0.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0TOKEN0_SLC0_TOKEN0_WDATA(value uint32) {
	volatile.StoreUint32(&o._0TOKEN0.Reg, volatile.LoadUint32(&o._0TOKEN0.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_0TOKEN0_SLC0_TOKEN0_WDATA() uint32 {
	return volatile.LoadUint32(&o._0TOKEN0.Reg) & 0xfff
}

// SLC._0TOKEN1: SLC_0TOKEN1
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0xfff0000) >> 16
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_INC(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_INC() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o._0TOKEN1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0TOKEN1_SLC0_TOKEN1_WDATA(value uint32) {
	volatile.StoreUint32(&o._0TOKEN1.Reg, volatile.LoadUint32(&o._0TOKEN1.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_0TOKEN1_SLC0_TOKEN1_WDATA() uint32 {
	return volatile.LoadUint32(&o._0TOKEN1.Reg) & 0xfff
}

// SLC._1TOKEN0: SLC_1TOKEN0
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0xfff0000) >> 16
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_INC(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_INC() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_WR(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_WR() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN0.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1TOKEN0_SLC1_TOKEN0_WDATA(value uint32) {
	volatile.StoreUint32(&o._1TOKEN0.Reg, volatile.LoadUint32(&o._1TOKEN0.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_1TOKEN0_SLC1_TOKEN0_WDATA() uint32 {
	return volatile.LoadUint32(&o._1TOKEN0.Reg) & 0xfff
}

// SLC._1TOKEN1: SLC_1TOKEN1
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0xfff0000) >> 16
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_INC(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_INC() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_WR(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_WR() uint32 {
	return (volatile.LoadUint32(&o._1TOKEN1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1TOKEN1_SLC1_TOKEN1_WDATA(value uint32) {
	volatile.StoreUint32(&o._1TOKEN1.Reg, volatile.LoadUint32(&o._1TOKEN1.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) Get_1TOKEN1_SLC1_TOKEN1_WDATA() uint32 {
	return volatile.LoadUint32(&o._1TOKEN1.Reg) & 0xfff
}

// SLC.CONF1: SLC_CONF1
func (o *SLC_Type) SetCONF1_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) GetCONF1_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) SetCONF1_SLC1_RX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) GetCONF1_SLC1_RX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) SetCONF1_SLC1_TX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) GetCONF1_SLC1_TX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) SetCONF1_HOST_INT_LEVEL_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) GetCONF1_HOST_INT_LEVEL_SEL() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) SetCONF1_SLC1_RX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) GetCONF1_SLC1_RX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) SetCONF1_SLC1_TX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetCONF1_SLC1_TX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetCONF1_SLC1_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetCONF1_SLC1_CHECK_OWNER() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetCONF1_SLC0_RX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) GetCONF1_SLC0_RX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) SetCONF1_SLC0_TX_STITCH_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) GetCONF1_SLC0_TX_STITCH_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) SetCONF1_SLC0_LEN_AUTO_CLR(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) GetCONF1_SLC0_LEN_AUTO_CLR() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) SetCONF1_CMD_HOLD_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) GetCONF1_CMD_HOLD_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) SetCONF1_SLC0_RX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) GetCONF1_SLC0_RX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) SetCONF1_SLC0_TX_CHECK_SUM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetCONF1_SLC0_TX_CHECK_SUM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetCONF1_SLC0_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetCONF1_SLC0_CHECK_OWNER() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x1
}

// SLC._0_STATE0: SLC_0_STATE0
func (o *SLC_Type) Set_0_STATE0(value uint32) {
	volatile.StoreUint32(&o._0_STATE0.Reg, value)
}
func (o *SLC_Type) Get_0_STATE0() uint32 {
	return volatile.LoadUint32(&o._0_STATE0.Reg)
}

// SLC._0_STATE1: SLC_0_STATE1
func (o *SLC_Type) Set_0_STATE1(value uint32) {
	volatile.StoreUint32(&o._0_STATE1.Reg, value)
}
func (o *SLC_Type) Get_0_STATE1() uint32 {
	return volatile.LoadUint32(&o._0_STATE1.Reg)
}

// SLC._1_STATE0: SLC_1_STATE0
func (o *SLC_Type) Set_1_STATE0(value uint32) {
	volatile.StoreUint32(&o._1_STATE0.Reg, value)
}
func (o *SLC_Type) Get_1_STATE0() uint32 {
	return volatile.LoadUint32(&o._1_STATE0.Reg)
}

// SLC._1_STATE1: SLC_1_STATE1
func (o *SLC_Type) Set_1_STATE1(value uint32) {
	volatile.StoreUint32(&o._1_STATE1.Reg, value)
}
func (o *SLC_Type) Get_1_STATE1() uint32 {
	return volatile.LoadUint32(&o._1_STATE1.Reg)
}

// SLC.BRIDGE_CONF: SLC_BRIDGE_CONF
func (o *SLC_Type) SetBRIDGE_CONF_TX_PUSH_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0xffff0000)|value<<16)
}
func (o *SLC_Type) GetBRIDGE_CONF_TX_PUSH_IDLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0xffff0000) >> 16
}
func (o *SLC_Type) SetBRIDGE_CONF_SLC1_TX_DUMMY_MODE(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) GetBRIDGE_CONF_SLC1_TX_DUMMY_MODE() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) SetBRIDGE_CONF_HDA_MAP_128K(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) GetBRIDGE_CONF_HDA_MAP_128K() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) SetBRIDGE_CONF_SLC0_TX_DUMMY_MODE(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) GetBRIDGE_CONF_SLC0_TX_DUMMY_MODE() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) SetBRIDGE_CONF_FIFO_MAP_ENA(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0xf00)|value<<8)
}
func (o *SLC_Type) GetBRIDGE_CONF_FIFO_MAP_ENA() uint32 {
	return (volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0xf00) >> 8
}
func (o *SLC_Type) SetBRIDGE_CONF_TXEOF_ENA(value uint32) {
	volatile.StoreUint32(&o.BRIDGE_CONF.Reg, volatile.LoadUint32(&o.BRIDGE_CONF.Reg)&^(0x3f)|value)
}
func (o *SLC_Type) GetBRIDGE_CONF_TXEOF_ENA() uint32 {
	return volatile.LoadUint32(&o.BRIDGE_CONF.Reg) & 0x3f
}

// SLC._0_TO_EOF_DES_ADDR: SLC_0_TO_EOF_DES_ADDR
func (o *SLC_Type) Set_0_TO_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TO_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TO_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TO_EOF_DES_ADDR.Reg)
}

// SLC._0_TX_EOF_DES_ADDR: SLC_0_TX_EOF_DES_ADDR
func (o *SLC_Type) Set_0_TX_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TX_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TX_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TX_EOF_DES_ADDR.Reg)
}

// SLC._0_TO_EOF_BFR_DES_ADDR: SLC_0_TO_EOF_BFR_DES_ADDR
func (o *SLC_Type) Set_0_TO_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TO_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TO_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TO_EOF_BFR_DES_ADDR.Reg)
}

// SLC._1_TO_EOF_DES_ADDR: SLC_1_TO_EOF_DES_ADDR
func (o *SLC_Type) Set_1_TO_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TO_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TO_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TO_EOF_DES_ADDR.Reg)
}

// SLC._1_TX_EOF_DES_ADDR: SLC_1_TX_EOF_DES_ADDR
func (o *SLC_Type) Set_1_TX_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TX_EOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TX_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TX_EOF_DES_ADDR.Reg)
}

// SLC._1_TO_EOF_BFR_DES_ADDR: SLC_1_TO_EOF_BFR_DES_ADDR
func (o *SLC_Type) Set_1_TO_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TO_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TO_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TO_EOF_BFR_DES_ADDR.Reg)
}

// SLC.AHB_TEST: SLC_AHB_TEST
func (o *SLC_Type) SetAHB_TEST_AHB_TESTADDR(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x30)|value<<4)
}
func (o *SLC_Type) GetAHB_TEST_AHB_TESTADDR() uint32 {
	return (volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x30) >> 4
}
func (o *SLC_Type) SetAHB_TEST_AHB_TESTMODE(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x7)|value)
}
func (o *SLC_Type) GetAHB_TEST_AHB_TESTMODE() uint32 {
	return volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x7
}

// SLC.SDIO_ST: SLC_SDIO_ST
func (o *SLC_Type) SetSDIO_ST_FUNC2_ACC_STATE(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x1f000000)|value<<24)
}
func (o *SLC_Type) GetSDIO_ST_FUNC2_ACC_STATE() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x1f000000) >> 24
}
func (o *SLC_Type) SetSDIO_ST_FUNC1_ACC_STATE(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x1f0000)|value<<16)
}
func (o *SLC_Type) GetSDIO_ST_FUNC1_ACC_STATE() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x1f0000) >> 16
}
func (o *SLC_Type) SetSDIO_ST_BUS_ST(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x7000)|value<<12)
}
func (o *SLC_Type) GetSDIO_ST_BUS_ST() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x7000) >> 12
}
func (o *SLC_Type) SetSDIO_ST_SDIO_WAKEUP(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) GetSDIO_ST_SDIO_WAKEUP() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x100) >> 8
}
func (o *SLC_Type) SetSDIO_ST_FUNC_ST(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0xf0)|value<<4)
}
func (o *SLC_Type) GetSDIO_ST_FUNC_ST() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ST.Reg) & 0xf0) >> 4
}
func (o *SLC_Type) SetSDIO_ST_CMD_ST(value uint32) {
	volatile.StoreUint32(&o.SDIO_ST.Reg, volatile.LoadUint32(&o.SDIO_ST.Reg)&^(0x7)|value)
}
func (o *SLC_Type) GetSDIO_ST_CMD_ST() uint32 {
	return volatile.LoadUint32(&o.SDIO_ST.Reg) & 0x7
}

// SLC.RX_DSCR_CONF: SLC_RX_DSCR_CONF
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0xffe00000)|value<<21)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0xffe00000) >> 21
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RX_FILL_EN(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RX_FILL_EN() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RX_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RX_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_RX_FILL_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_RX_FILL_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_INFOR_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_INFOR_NO_REPLACE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0xffe0)|value<<5)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0xffe0) >> 5
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RX_FILL_EN(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RX_FILL_EN() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x10) >> 4
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RX_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RX_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x8) >> 3
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_RX_FILL_MODE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_RX_FILL_MODE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x4) >> 2
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_INFOR_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_INFOR_NO_REPLACE() uint32 {
	return (volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x2) >> 1
}
func (o *SLC_Type) SetRX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE(value uint32) {
	volatile.StoreUint32(&o.RX_DSCR_CONF.Reg, volatile.LoadUint32(&o.RX_DSCR_CONF.Reg)&^(0x1)|value)
}
func (o *SLC_Type) GetRX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE() uint32 {
	return volatile.LoadUint32(&o.RX_DSCR_CONF.Reg) & 0x1
}

// SLC._0_TXLINK_DSCR: SLC_0_TXLINK_DSCR
func (o *SLC_Type) Set_0_TXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXLINK_DSCR.Reg)
}

// SLC._0_TXLINK_DSCR_BF0: SLC_0_TXLINK_DSCR_BF0
func (o *SLC_Type) Set_0_TXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._0_TXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_0_TXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._0_TXLINK_DSCR_BF0.Reg)
}

// SLC._0_TXLINK_DSCR_BF1: SLC_0_TXLINK_DSCR_BF1
func (o *SLC_Type) Set_0_TXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._0_TXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_0_TXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._0_TXLINK_DSCR_BF1.Reg)
}

// SLC._0_RXLINK_DSCR: SLC_0_RXLINK_DSCR
func (o *SLC_Type) Set_0_RXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXLINK_DSCR.Reg)
}

// SLC._0_RXLINK_DSCR_BF0: SLC_0_RXLINK_DSCR_BF0
func (o *SLC_Type) Set_0_RXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._0_RXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_0_RXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._0_RXLINK_DSCR_BF0.Reg)
}

// SLC._0_RXLINK_DSCR_BF1: SLC_0_RXLINK_DSCR_BF1
func (o *SLC_Type) Set_0_RXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._0_RXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_0_RXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._0_RXLINK_DSCR_BF1.Reg)
}

// SLC._1_TXLINK_DSCR: SLC_1_TXLINK_DSCR
func (o *SLC_Type) Set_1_TXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._1_TXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_1_TXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._1_TXLINK_DSCR.Reg)
}

// SLC._1_TXLINK_DSCR_BF0: SLC_1_TXLINK_DSCR_BF0
func (o *SLC_Type) Set_1_TXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._1_TXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_1_TXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._1_TXLINK_DSCR_BF0.Reg)
}

// SLC._1_TXLINK_DSCR_BF1: SLC_1_TXLINK_DSCR_BF1
func (o *SLC_Type) Set_1_TXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._1_TXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_1_TXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._1_TXLINK_DSCR_BF1.Reg)
}

// SLC._1_RXLINK_DSCR: SLC_1_RXLINK_DSCR
func (o *SLC_Type) Set_1_RXLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o._1_RXLINK_DSCR.Reg, value)
}
func (o *SLC_Type) Get_1_RXLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o._1_RXLINK_DSCR.Reg)
}

// SLC._1_RXLINK_DSCR_BF0: SLC_1_RXLINK_DSCR_BF0
func (o *SLC_Type) Set_1_RXLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o._1_RXLINK_DSCR_BF0.Reg, value)
}
func (o *SLC_Type) Get_1_RXLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o._1_RXLINK_DSCR_BF0.Reg)
}

// SLC._1_RXLINK_DSCR_BF1: SLC_1_RXLINK_DSCR_BF1
func (o *SLC_Type) Set_1_RXLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o._1_RXLINK_DSCR_BF1.Reg, value)
}
func (o *SLC_Type) Get_1_RXLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o._1_RXLINK_DSCR_BF1.Reg)
}

// SLC._0_TX_ERREOF_DES_ADDR: SLC_0_TX_ERREOF_DES_ADDR
func (o *SLC_Type) Set_0_TX_ERREOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_TX_ERREOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_TX_ERREOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_TX_ERREOF_DES_ADDR.Reg)
}

// SLC._1_TX_ERREOF_DES_ADDR: SLC_1_TX_ERREOF_DES_ADDR
func (o *SLC_Type) Set_1_TX_ERREOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o._1_TX_ERREOF_DES_ADDR.Reg, value)
}
func (o *SLC_Type) Get_1_TX_ERREOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o._1_TX_ERREOF_DES_ADDR.Reg)
}

// SLC.TOKEN_LAT: SLC_TOKEN_LAT
func (o *SLC_Type) SetTOKEN_LAT_SLC1_TOKEN(value uint32) {
	volatile.StoreUint32(&o.TOKEN_LAT.Reg, volatile.LoadUint32(&o.TOKEN_LAT.Reg)&^(0xfff0000)|value<<16)
}
func (o *SLC_Type) GetTOKEN_LAT_SLC1_TOKEN() uint32 {
	return (volatile.LoadUint32(&o.TOKEN_LAT.Reg) & 0xfff0000) >> 16
}
func (o *SLC_Type) SetTOKEN_LAT_SLC0_TOKEN(value uint32) {
	volatile.StoreUint32(&o.TOKEN_LAT.Reg, volatile.LoadUint32(&o.TOKEN_LAT.Reg)&^(0xfff)|value)
}
func (o *SLC_Type) GetTOKEN_LAT_SLC0_TOKEN() uint32 {
	return volatile.LoadUint32(&o.TOKEN_LAT.Reg) & 0xfff
}

// SLC.TX_DSCR_CONF: SLC_TX_DSCR_CONF
func (o *SLC_Type) SetTX_DSCR_CONF_WR_RETRY_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.TX_DSCR_CONF.Reg, volatile.LoadUint32(&o.TX_DSCR_CONF.Reg)&^(0x7ff)|value)
}
func (o *SLC_Type) GetTX_DSCR_CONF_WR_RETRY_THRESHOLD() uint32 {
	return volatile.LoadUint32(&o.TX_DSCR_CONF.Reg) & 0x7ff
}

// SLC.CMD_INFOR0: SLC_CMD_INFOR0
func (o *SLC_Type) SetCMD_INFOR0(value uint32) {
	volatile.StoreUint32(&o.CMD_INFOR0.Reg, value)
}
func (o *SLC_Type) GetCMD_INFOR0() uint32 {
	return volatile.LoadUint32(&o.CMD_INFOR0.Reg)
}

// SLC.CMD_INFOR1: SLC_CMD_INFOR1
func (o *SLC_Type) SetCMD_INFOR1(value uint32) {
	volatile.StoreUint32(&o.CMD_INFOR1.Reg, value)
}
func (o *SLC_Type) GetCMD_INFOR1() uint32 {
	return volatile.LoadUint32(&o.CMD_INFOR1.Reg)
}

// SLC._0_LEN_CONF: SLC_0_LEN_CONF
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_TX_NEW_PKT_IND(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_TX_NEW_PKT_IND() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x10000000) >> 28
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_RX_NEW_PKT_IND(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_RX_NEW_PKT_IND() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x8000000) >> 27
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_TX_GET_USED_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_TX_GET_USED_DSCR() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_RX_GET_USED_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_RX_GET_USED_DSCR() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_INC_MORE(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_INC_MORE() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_INC(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_INC() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_WR(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_WR() uint32 {
	return (volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0_LEN_CONF_SLC0_LEN_WDATA(value uint32) {
	volatile.StoreUint32(&o._0_LEN_CONF.Reg, volatile.LoadUint32(&o._0_LEN_CONF.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0_LEN_CONF_SLC0_LEN_WDATA() uint32 {
	return volatile.LoadUint32(&o._0_LEN_CONF.Reg) & 0xfffff
}

// SLC._0_LENGTH: SLC_0_LENGTH
func (o *SLC_Type) Set_0_LENGTH_SLC0_LEN(value uint32) {
	volatile.StoreUint32(&o._0_LENGTH.Reg, volatile.LoadUint32(&o._0_LENGTH.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0_LENGTH_SLC0_LEN() uint32 {
	return volatile.LoadUint32(&o._0_LENGTH.Reg) & 0xfffff
}

// SLC._0_TXPKT_H_DSCR: SLC_0_TXPKT_H_DSCR
func (o *SLC_Type) Set_0_TXPKT_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKT_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKT_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKT_H_DSCR.Reg)
}

// SLC._0_TXPKT_E_DSCR: SLC_0_TXPKT_E_DSCR
func (o *SLC_Type) Set_0_TXPKT_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKT_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKT_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKT_E_DSCR.Reg)
}

// SLC._0_RXPKT_H_DSCR: SLC_0_RXPKT_H_DSCR
func (o *SLC_Type) Set_0_RXPKT_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKT_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKT_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKT_H_DSCR.Reg)
}

// SLC._0_RXPKT_E_DSCR: SLC_0_RXPKT_E_DSCR
func (o *SLC_Type) Set_0_RXPKT_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKT_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKT_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKT_E_DSCR.Reg)
}

// SLC._0_TXPKTU_H_DSCR: SLC_0_TXPKTU_H_DSCR
func (o *SLC_Type) Set_0_TXPKTU_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKTU_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKTU_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKTU_H_DSCR.Reg)
}

// SLC._0_TXPKTU_E_DSCR: SLC_0_TXPKTU_E_DSCR
func (o *SLC_Type) Set_0_TXPKTU_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_TXPKTU_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_TXPKTU_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_TXPKTU_E_DSCR.Reg)
}

// SLC._0_RXPKTU_H_DSCR: SLC_0_RXPKTU_H_DSCR
func (o *SLC_Type) Set_0_RXPKTU_H_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKTU_H_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKTU_H_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKTU_H_DSCR.Reg)
}

// SLC._0_RXPKTU_E_DSCR: SLC_0_RXPKTU_E_DSCR
func (o *SLC_Type) Set_0_RXPKTU_E_DSCR(value uint32) {
	volatile.StoreUint32(&o._0_RXPKTU_E_DSCR.Reg, value)
}
func (o *SLC_Type) Get_0_RXPKTU_E_DSCR() uint32 {
	return volatile.LoadUint32(&o._0_RXPKTU_E_DSCR.Reg)
}

// SLC.SEQ_POSITION: SLC_SEQ_POSITION
func (o *SLC_Type) SetSEQ_POSITION_SLC1_SEQ_POSITION(value uint32) {
	volatile.StoreUint32(&o.SEQ_POSITION.Reg, volatile.LoadUint32(&o.SEQ_POSITION.Reg)&^(0xff00)|value<<8)
}
func (o *SLC_Type) GetSEQ_POSITION_SLC1_SEQ_POSITION() uint32 {
	return (volatile.LoadUint32(&o.SEQ_POSITION.Reg) & 0xff00) >> 8
}
func (o *SLC_Type) SetSEQ_POSITION_SLC0_SEQ_POSITION(value uint32) {
	volatile.StoreUint32(&o.SEQ_POSITION.Reg, volatile.LoadUint32(&o.SEQ_POSITION.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetSEQ_POSITION_SLC0_SEQ_POSITION() uint32 {
	return volatile.LoadUint32(&o.SEQ_POSITION.Reg) & 0xff
}

// SLC._0_DSCR_REC_CONF: SLC_0_DSCR_REC_CONF
func (o *SLC_Type) Set_0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM(value uint32) {
	volatile.StoreUint32(&o._0_DSCR_REC_CONF.Reg, volatile.LoadUint32(&o._0_DSCR_REC_CONF.Reg)&^(0x3ff)|value)
}
func (o *SLC_Type) Get_0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM() uint32 {
	return volatile.LoadUint32(&o._0_DSCR_REC_CONF.Reg) & 0x3ff
}

// SLC.SDIO_CRC_ST0: SLC_SDIO_CRC_ST0
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT3_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff000000)|value<<24)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT3_CRC_ERR_CNT() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff000000) >> 24
}
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT2_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff0000)|value<<16)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT2_CRC_ERR_CNT() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff0000) >> 16
}
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT1_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff00)|value<<8)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT1_CRC_ERR_CNT() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff00) >> 8
}
func (o *SLC_Type) SetSDIO_CRC_ST0_DAT0_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST0.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetSDIO_CRC_ST0_DAT0_CRC_ERR_CNT() uint32 {
	return volatile.LoadUint32(&o.SDIO_CRC_ST0.Reg) & 0xff
}

// SLC.SDIO_CRC_ST1: SLC_SDIO_CRC_ST1
func (o *SLC_Type) SetSDIO_CRC_ST1_ERR_CNT_CLR(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST1.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg)&^(0x80000000)|value<<31)
}
func (o *SLC_Type) GetSDIO_CRC_ST1_ERR_CNT_CLR() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg) & 0x80000000) >> 31
}
func (o *SLC_Type) SetSDIO_CRC_ST1_CMD_CRC_ERR_CNT(value uint32) {
	volatile.StoreUint32(&o.SDIO_CRC_ST1.Reg, volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg)&^(0xff)|value)
}
func (o *SLC_Type) GetSDIO_CRC_ST1_CMD_CRC_ERR_CNT() uint32 {
	return volatile.LoadUint32(&o.SDIO_CRC_ST1.Reg) & 0xff
}

// SLC._0_EOF_START_DES: SLC_0_EOF_START_DES
func (o *SLC_Type) Set_0_EOF_START_DES(value uint32) {
	volatile.StoreUint32(&o._0_EOF_START_DES.Reg, value)
}
func (o *SLC_Type) Get_0_EOF_START_DES() uint32 {
	return volatile.LoadUint32(&o._0_EOF_START_DES.Reg)
}

// SLC._0_PUSH_DSCR_ADDR: SLC_0_PUSH_DSCR_ADDR
func (o *SLC_Type) Set_0_PUSH_DSCR_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_PUSH_DSCR_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_PUSH_DSCR_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_PUSH_DSCR_ADDR.Reg)
}

// SLC._0_DONE_DSCR_ADDR: SLC_0_DONE_DSCR_ADDR
func (o *SLC_Type) Set_0_DONE_DSCR_ADDR(value uint32) {
	volatile.StoreUint32(&o._0_DONE_DSCR_ADDR.Reg, value)
}
func (o *SLC_Type) Get_0_DONE_DSCR_ADDR() uint32 {
	return volatile.LoadUint32(&o._0_DONE_DSCR_ADDR.Reg)
}

// SLC._0_SUB_START_DES: SLC_0_SUB_START_DES
func (o *SLC_Type) Set_0_SUB_START_DES(value uint32) {
	volatile.StoreUint32(&o._0_SUB_START_DES.Reg, value)
}
func (o *SLC_Type) Get_0_SUB_START_DES() uint32 {
	return volatile.LoadUint32(&o._0_SUB_START_DES.Reg)
}

// SLC._0_DSCR_CNT: SLC_0_DSCR_CNT
func (o *SLC_Type) Set_0_DSCR_CNT_SLC0_RX_GET_EOF_OCC(value uint32) {
	volatile.StoreUint32(&o._0_DSCR_CNT.Reg, volatile.LoadUint32(&o._0_DSCR_CNT.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0_DSCR_CNT_SLC0_RX_GET_EOF_OCC() uint32 {
	return (volatile.LoadUint32(&o._0_DSCR_CNT.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT(value uint32) {
	volatile.StoreUint32(&o._0_DSCR_CNT.Reg, volatile.LoadUint32(&o._0_DSCR_CNT.Reg)&^(0x3ff)|value)
}
func (o *SLC_Type) Get_0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT() uint32 {
	return volatile.LoadUint32(&o._0_DSCR_CNT.Reg) & 0x3ff
}

// SLC._0_LEN_LIM_CONF: SLC_0_LEN_LIM_CONF
func (o *SLC_Type) Set_0_LEN_LIM_CONF_SLC0_LEN_LIM(value uint32) {
	volatile.StoreUint32(&o._0_LEN_LIM_CONF.Reg, volatile.LoadUint32(&o._0_LEN_LIM_CONF.Reg)&^(0xfffff)|value)
}
func (o *SLC_Type) Get_0_LEN_LIM_CONF_SLC0_LEN_LIM() uint32 {
	return volatile.LoadUint32(&o._0_LEN_LIM_CONF.Reg) & 0xfffff
}

// SLC._0INT_ST1: SLC_0INT_ST1
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0INT_ST1_CMD_DTC_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ST1_CMD_DTC_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TOHOST_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TOHOST_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_OVF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_OVF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_UDF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_UDF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_TX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_TX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ST1_SLC0_RX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ST1_SLC0_RX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT7_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT7_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT6_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT6_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT5_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT5_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT4_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT4_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT3_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT3_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT2_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT2_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT1_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT1_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ST1_FRHOST_BIT0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._0INT_ST1.Reg, volatile.LoadUint32(&o._0INT_ST1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ST1_FRHOST_BIT0_INT_ST1() uint32 {
	return volatile.LoadUint32(&o._0INT_ST1.Reg) & 0x1
}

// SLC._0INT_ENA1: SLC_0INT_ENA1
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x4000000)|value<<26)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x4000000) >> 26
}
func (o *SLC_Type) Set_0INT_ENA1_CMD_DTC_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x2000000)|value<<25)
}
func (o *SLC_Type) Get_0INT_ENA1_CMD_DTC_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x2000000) >> 25
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TOHOST_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TOHOST_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_0INT_ENA1_SLC0_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_0INT_ENA1_SLC0_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT7_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT7_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT6_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT6_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT5_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT5_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT4_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT4_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT3_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT3_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT2_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT2_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT1_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT1_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_0INT_ENA1_FRHOST_BIT0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._0INT_ENA1.Reg, volatile.LoadUint32(&o._0INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_0INT_ENA1_FRHOST_BIT0_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o._0INT_ENA1.Reg) & 0x1
}

// SLC._1INT_ST1: SLC_1INT_ST1
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TOHOST_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TOHOST_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_DONE_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_DONE_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_OVF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_OVF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_UDF_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_UDF_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_TX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_TX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ST1_SLC1_RX_START_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ST1_SLC1_RX_START_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT15_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT15_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT14_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT14_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT13_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT13_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT12_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT12_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT11_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT11_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT10_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT10_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT9_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT9_INT_ST1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ST1_FRHOST_BIT8_INT_ST1(value uint32) {
	volatile.StoreUint32(&o._1INT_ST1.Reg, volatile.LoadUint32(&o._1INT_ST1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ST1_FRHOST_BIT8_INT_ST1() uint32 {
	return volatile.LoadUint32(&o._1INT_ST1.Reg) & 0x1
}

// SLC._1INT_ENA1: SLC_1INT_ENA1
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x1000000)|value<<24)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x1000000) >> 24
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x800000)|value<<23)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x800000) >> 23
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x400000)|value<<22)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x400000) >> 22
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x200000)|value<<21)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x200000) >> 21
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x100000)|value<<20)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x100000) >> 20
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x80000)|value<<19)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x80000) >> 19
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TOHOST_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x40000)|value<<18)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TOHOST_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x40000) >> 18
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x20000)|value<<17)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x20000) >> 17
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x10000)|value<<16)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x10000) >> 16
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x8000)|value<<15)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x8000) >> 15
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_DONE_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x4000)|value<<14)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_DONE_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x4000) >> 14
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x2000)|value<<13)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x2000) >> 13
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x1000)|value<<12)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x1000) >> 12
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_OVF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x800)|value<<11)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_OVF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x800) >> 11
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_UDF_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x400)|value<<10)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_UDF_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x400) >> 10
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_TX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x200)|value<<9)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_TX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x200) >> 9
}
func (o *SLC_Type) Set_1INT_ENA1_SLC1_RX_START_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x100)|value<<8)
}
func (o *SLC_Type) Get_1INT_ENA1_SLC1_RX_START_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x100) >> 8
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT15_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x80)|value<<7)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT15_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x80) >> 7
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT14_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x40)|value<<6)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT14_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x40) >> 6
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT13_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x20)|value<<5)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT13_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x20) >> 5
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT12_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x10)|value<<4)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT12_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x10) >> 4
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT11_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x8)|value<<3)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT11_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x8) >> 3
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT10_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x4)|value<<2)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT10_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x4) >> 2
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT9_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x2)|value<<1)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT9_INT_ENA1() uint32 {
	return (volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x2) >> 1
}
func (o *SLC_Type) Set_1INT_ENA1_FRHOST_BIT8_INT_ENA1(value uint32) {
	volatile.StoreUint32(&o._1INT_ENA1.Reg, volatile.LoadUint32(&o._1INT_ENA1.Reg)&^(0x1)|value)
}
func (o *SLC_Type) Get_1INT_ENA1_FRHOST_BIT8_INT_ENA1() uint32 {
	return volatile.LoadUint32(&o._1INT_ENA1.Reg) & 0x1
}

// SLC.DATE: SLC_DATE
func (o *SLC_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *SLC_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// SLC.ID: SLC_ID
func (o *SLC_Type) SetID(value uint32) {
	volatile.StoreUint32(&o.ID.Reg, value)
}
func (o *SLC_Type) GetID() uint32 {
	return volatile.LoadUint32(&o.ID.Reg)
}

type RTCMEM0_Type struct {
}

type SHA_Type struct {
}

type RTCCNTL_Type struct {
	OPTIONS0           volatile.Register32 // 0x0
	SLP_TIMER0         volatile.Register32 // 0x4
	SLP_TIMER1         volatile.Register32 // 0x8
	TIME_UPDATE        volatile.Register32 // 0xC
	TIME0              volatile.Register32 // 0x10
	TIME1              volatile.Register32 // 0x14
	STATE0             volatile.Register32 // 0x18
	TIMER1             volatile.Register32 // 0x1C
	TIMER2             volatile.Register32 // 0x20
	TIMER3             volatile.Register32 // 0x24
	TIMER4             volatile.Register32 // 0x28
	TIMER5             volatile.Register32 // 0x2C
	ANA_CONF           volatile.Register32 // 0x30
	RESET_STATE        volatile.Register32 // 0x34
	WAKEUP_STATE       volatile.Register32 // 0x38
	INT_ENA            volatile.Register32 // 0x3C
	INT_RAW            volatile.Register32 // 0x40
	INT_ST             volatile.Register32 // 0x44
	INT_CLR            volatile.Register32 // 0x48
	STORE0             volatile.Register32 // 0x4C
	STORE1             volatile.Register32 // 0x50
	STORE2             volatile.Register32 // 0x54
	STORE3             volatile.Register32 // 0x58
	EXT_XTL_CONF       volatile.Register32 // 0x5C
	EXT_WAKEUP_CONF    volatile.Register32 // 0x60
	SLP_REJECT_CONF    volatile.Register32 // 0x64
	CPU_PERIOD_CONF    volatile.Register32 // 0x68
	SDIO_ACT_CONF      volatile.Register32 // 0x6C
	CLK_CONF           volatile.Register32 // 0x70
	SDIO_CONF          volatile.Register32 // 0x74
	BIAS_CONF          volatile.Register32 // 0x78
	CNTL               volatile.Register32 // 0x7C
	PWC                volatile.Register32 // 0x80
	DIG_PWC            volatile.Register32 // 0x84
	DIG_ISO            volatile.Register32 // 0x88
	WDTCONFIG0         volatile.Register32 // 0x8C
	WDTCONFIG1         volatile.Register32 // 0x90
	WDTCONFIG2         volatile.Register32 // 0x94
	WDTCONFIG3         volatile.Register32 // 0x98
	WDTCONFIG4         volatile.Register32 // 0x9C
	WDTFEED            volatile.Register32 // 0xA0
	WDTWPROTECT        volatile.Register32 // 0xA4
	TEST_MUX           volatile.Register32 // 0xA8
	SW_CPU_STALL       volatile.Register32 // 0xAC
	STORE4             volatile.Register32 // 0xB0
	STORE5             volatile.Register32 // 0xB4
	STORE6             volatile.Register32 // 0xB8
	STORE7             volatile.Register32 // 0xBC
	_                  [4]byte
	DIAG1              volatile.Register32 // 0xC4
	HOLD_FORCE         volatile.Register32 // 0xC8
	EXT_WAKEUP1        volatile.Register32 // 0xCC
	EXT_WAKEUP1_STATUS volatile.Register32 // 0xD0
	BROWN_OUT          volatile.Register32 // 0xD4
	_                  [100]byte
	DATE               volatile.Register32 // 0x13C
	_                  [537681612]byte
	APLL               volatile.Register32 // 0x200C600C
	PLL                volatile.Register32 // 0x200C6010
}

// RTCCNTL.OPTIONS0: RTC_CNTL_OPTIONS0
func (o *RTCCNTL_Type) SetOPTIONS0_SW_SYS_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetOPTIONS0_SW_SYS_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetOPTIONS0_DG_WRAP_FORCE_NORST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetOPTIONS0_DG_WRAP_FORCE_NORST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetOPTIONS0_DG_WRAP_FORCE_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetOPTIONS0_DG_WRAP_FORCE_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetOPTIONS0_ANALOG_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetOPTIONS0_ANALOG_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetOPTIONS0_PLL_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCCNTL_Type) GetOPTIONS0_PLL_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x8000000) >> 27
}
func (o *RTCCNTL_Type) SetOPTIONS0_XTL_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetOPTIONS0_XTL_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetOPTIONS0_ANALOG_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetOPTIONS0_ANALOG_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x2000000) >> 25
}
func (o *RTCCNTL_Type) SetOPTIONS0_PLL_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetOPTIONS0_PLL_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetOPTIONS0_XTL_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x800000)|value<<23)
}
func (o *RTCCNTL_Type) GetOPTIONS0_XTL_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x800000) >> 23
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_CORE_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x400000)|value<<22)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_CORE_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x400000) >> 22
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_CORE_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x200000)|value<<21)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_CORE_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x200000) >> 21
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_CORE_FOLW_8M(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x100000)|value<<20)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_CORE_FOLW_8M() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x100000) >> 20
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_I2C_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x80000)|value<<19)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_I2C_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x80000) >> 19
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_I2C_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x40000)|value<<18)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_I2C_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x40000) >> 18
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_I2C_FOLW_8M(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x20000)|value<<17)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_I2C_FOLW_8M() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x20000) >> 17
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_FORCE_NOSLEEP(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x10000)|value<<16)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_FORCE_NOSLEEP() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x10000) >> 16
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_FORCE_SLEEP(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x8000)|value<<15)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_FORCE_SLEEP() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x8000) >> 15
}
func (o *RTCCNTL_Type) SetOPTIONS0_BIAS_SLEEP_FOLW_8M(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x4000)|value<<14)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BIAS_SLEEP_FOLW_8M() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x4000) >> 14
}
func (o *RTCCNTL_Type) SetOPTIONS0_XTL_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x2000)|value<<13)
}
func (o *RTCCNTL_Type) GetOPTIONS0_XTL_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x2000) >> 13
}
func (o *RTCCNTL_Type) SetOPTIONS0_XTL_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x1000)|value<<12)
}
func (o *RTCCNTL_Type) GetOPTIONS0_XTL_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x1000) >> 12
}
func (o *RTCCNTL_Type) SetOPTIONS0_BBPLL_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x800)|value<<11)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BBPLL_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x800) >> 11
}
func (o *RTCCNTL_Type) SetOPTIONS0_BBPLL_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x400)|value<<10)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BBPLL_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x400) >> 10
}
func (o *RTCCNTL_Type) SetOPTIONS0_BBPLL_I2C_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x200)|value<<9)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BBPLL_I2C_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x200) >> 9
}
func (o *RTCCNTL_Type) SetOPTIONS0_BBPLL_I2C_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BBPLL_I2C_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetOPTIONS0_BB_I2C_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BB_I2C_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetOPTIONS0_BB_I2C_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetOPTIONS0_BB_I2C_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetOPTIONS0_SW_PROCPU_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetOPTIONS0_SW_PROCPU_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetOPTIONS0_SW_APPCPU_RST(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetOPTIONS0_SW_APPCPU_RST() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetOPTIONS0_SW_STALL_PROCPU_C0(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0xc)|value<<2)
}
func (o *RTCCNTL_Type) GetOPTIONS0_SW_STALL_PROCPU_C0() uint32 {
	return (volatile.LoadUint32(&o.OPTIONS0.Reg) & 0xc) >> 2
}
func (o *RTCCNTL_Type) SetOPTIONS0_SW_STALL_APPCPU_C0(value uint32) {
	volatile.StoreUint32(&o.OPTIONS0.Reg, volatile.LoadUint32(&o.OPTIONS0.Reg)&^(0x3)|value)
}
func (o *RTCCNTL_Type) GetOPTIONS0_SW_STALL_APPCPU_C0() uint32 {
	return volatile.LoadUint32(&o.OPTIONS0.Reg) & 0x3
}

// RTCCNTL.SLP_TIMER0: RTC_CNTL_SLP_TIMER0
func (o *RTCCNTL_Type) SetSLP_TIMER0(value uint32) {
	volatile.StoreUint32(&o.SLP_TIMER0.Reg, value)
}
func (o *RTCCNTL_Type) GetSLP_TIMER0() uint32 {
	return volatile.LoadUint32(&o.SLP_TIMER0.Reg)
}

// RTCCNTL.SLP_TIMER1: RTC_CNTL_SLP_TIMER1
func (o *RTCCNTL_Type) SetSLP_TIMER1_MAIN_TIMER_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_TIMER1.Reg, volatile.LoadUint32(&o.SLP_TIMER1.Reg)&^(0x10000)|value<<16)
}
func (o *RTCCNTL_Type) GetSLP_TIMER1_MAIN_TIMER_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_TIMER1.Reg) & 0x10000) >> 16
}
func (o *RTCCNTL_Type) SetSLP_TIMER1_SLP_VAL_HI(value uint32) {
	volatile.StoreUint32(&o.SLP_TIMER1.Reg, volatile.LoadUint32(&o.SLP_TIMER1.Reg)&^(0xffff)|value)
}
func (o *RTCCNTL_Type) GetSLP_TIMER1_SLP_VAL_HI() uint32 {
	return volatile.LoadUint32(&o.SLP_TIMER1.Reg) & 0xffff
}

// RTCCNTL.TIME_UPDATE: RTC_CNTL_TIME_UPDATE
func (o *RTCCNTL_Type) SetTIME_UPDATE(value uint32) {
	volatile.StoreUint32(&o.TIME_UPDATE.Reg, volatile.LoadUint32(&o.TIME_UPDATE.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetTIME_UPDATE() uint32 {
	return (volatile.LoadUint32(&o.TIME_UPDATE.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetTIME_UPDATE_TIME_VALID(value uint32) {
	volatile.StoreUint32(&o.TIME_UPDATE.Reg, volatile.LoadUint32(&o.TIME_UPDATE.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetTIME_UPDATE_TIME_VALID() uint32 {
	return (volatile.LoadUint32(&o.TIME_UPDATE.Reg) & 0x40000000) >> 30
}

// RTCCNTL.TIME0: RTC_CNTL_TIME0
func (o *RTCCNTL_Type) SetTIME0(value uint32) {
	volatile.StoreUint32(&o.TIME0.Reg, value)
}
func (o *RTCCNTL_Type) GetTIME0() uint32 {
	return volatile.LoadUint32(&o.TIME0.Reg)
}

// RTCCNTL.TIME1: RTC_CNTL_TIME1
func (o *RTCCNTL_Type) SetTIME1_TIME_HI(value uint32) {
	volatile.StoreUint32(&o.TIME1.Reg, volatile.LoadUint32(&o.TIME1.Reg)&^(0xffff)|value)
}
func (o *RTCCNTL_Type) GetTIME1_TIME_HI() uint32 {
	return volatile.LoadUint32(&o.TIME1.Reg) & 0xffff
}

// RTCCNTL.STATE0: RTC_CNTL_STATE0
func (o *RTCCNTL_Type) SetSTATE0_SLEEP_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetSTATE0_SLEEP_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetSTATE0_SLP_REJECT(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetSTATE0_SLP_REJECT() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetSTATE0_SLP_WAKEUP(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetSTATE0_SLP_WAKEUP() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetSTATE0_SDIO_ACTIVE_IND(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetSTATE0_SDIO_ACTIVE_IND() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetSTATE0_ULP_CP_SLP_TIMER_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetSTATE0_ULP_CP_SLP_TIMER_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetSTATE0_TOUCH_SLP_TIMER_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x800000)|value<<23)
}
func (o *RTCCNTL_Type) GetSTATE0_TOUCH_SLP_TIMER_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x800000) >> 23
}
func (o *RTCCNTL_Type) SetSTATE0_APB2RTC_BRIDGE_SEL(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x400000)|value<<22)
}
func (o *RTCCNTL_Type) GetSTATE0_APB2RTC_BRIDGE_SEL() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x400000) >> 22
}
func (o *RTCCNTL_Type) SetSTATE0_ULP_CP_WAKEUP_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x200000)|value<<21)
}
func (o *RTCCNTL_Type) GetSTATE0_ULP_CP_WAKEUP_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x200000) >> 21
}
func (o *RTCCNTL_Type) SetSTATE0_TOUCH_WAKEUP_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.STATE0.Reg, volatile.LoadUint32(&o.STATE0.Reg)&^(0x100000)|value<<20)
}
func (o *RTCCNTL_Type) GetSTATE0_TOUCH_WAKEUP_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.STATE0.Reg) & 0x100000) >> 20
}

// RTCCNTL.TIMER1: RTC_CNTL_TIMER1
func (o *RTCCNTL_Type) SetTIMER1_PLL_BUF_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0xff000000)|value<<24)
}
func (o *RTCCNTL_Type) GetTIMER1_PLL_BUF_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0xff000000) >> 24
}
func (o *RTCCNTL_Type) SetTIMER1_XTL_BUF_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0xffc000)|value<<14)
}
func (o *RTCCNTL_Type) GetTIMER1_XTL_BUF_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0xffc000) >> 14
}
func (o *RTCCNTL_Type) SetTIMER1_CK8M_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0x3fc0)|value<<6)
}
func (o *RTCCNTL_Type) GetTIMER1_CK8M_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0x3fc0) >> 6
}
func (o *RTCCNTL_Type) SetTIMER1_CPU_STALL_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0x3e)|value<<1)
}
func (o *RTCCNTL_Type) GetTIMER1_CPU_STALL_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER1.Reg) & 0x3e) >> 1
}
func (o *RTCCNTL_Type) SetTIMER1_CPU_STALL_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER1.Reg, volatile.LoadUint32(&o.TIMER1.Reg)&^(0x1)|value)
}
func (o *RTCCNTL_Type) GetTIMER1_CPU_STALL_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER1.Reg) & 0x1
}

// RTCCNTL.TIMER2: RTC_CNTL_TIMER2
func (o *RTCCNTL_Type) SetTIMER2_MIN_TIME_CK8M_OFF(value uint32) {
	volatile.StoreUint32(&o.TIMER2.Reg, volatile.LoadUint32(&o.TIMER2.Reg)&^(0xff000000)|value<<24)
}
func (o *RTCCNTL_Type) GetTIMER2_MIN_TIME_CK8M_OFF() uint32 {
	return (volatile.LoadUint32(&o.TIMER2.Reg) & 0xff000000) >> 24
}
func (o *RTCCNTL_Type) SetTIMER2_ULPCP_TOUCH_START_WAIT(value uint32) {
	volatile.StoreUint32(&o.TIMER2.Reg, volatile.LoadUint32(&o.TIMER2.Reg)&^(0xff8000)|value<<15)
}
func (o *RTCCNTL_Type) GetTIMER2_ULPCP_TOUCH_START_WAIT() uint32 {
	return (volatile.LoadUint32(&o.TIMER2.Reg) & 0xff8000) >> 15
}

// RTCCNTL.TIMER3: RTC_CNTL_TIMER3
func (o *RTCCNTL_Type) SetTIMER3_ROM_RAM_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0xfe000000)|value<<25)
}
func (o *RTCCNTL_Type) GetTIMER3_ROM_RAM_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER3.Reg) & 0xfe000000) >> 25
}
func (o *RTCCNTL_Type) SetTIMER3_ROM_RAM_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0x1ff0000)|value<<16)
}
func (o *RTCCNTL_Type) GetTIMER3_ROM_RAM_WAIT_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER3.Reg) & 0x1ff0000) >> 16
}
func (o *RTCCNTL_Type) SetTIMER3_WIFI_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0xfe00)|value<<9)
}
func (o *RTCCNTL_Type) GetTIMER3_WIFI_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER3.Reg) & 0xfe00) >> 9
}
func (o *RTCCNTL_Type) SetTIMER3_WIFI_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER3.Reg, volatile.LoadUint32(&o.TIMER3.Reg)&^(0x1ff)|value)
}
func (o *RTCCNTL_Type) GetTIMER3_WIFI_WAIT_TIMER() uint32 {
	return volatile.LoadUint32(&o.TIMER3.Reg) & 0x1ff
}

// RTCCNTL.TIMER4: RTC_CNTL_TIMER4
func (o *RTCCNTL_Type) SetTIMER4_DG_WRAP_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0xfe000000)|value<<25)
}
func (o *RTCCNTL_Type) GetTIMER4_DG_WRAP_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER4.Reg) & 0xfe000000) >> 25
}
func (o *RTCCNTL_Type) SetTIMER4_DG_WRAP_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0x1ff0000)|value<<16)
}
func (o *RTCCNTL_Type) GetTIMER4_DG_WRAP_WAIT_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER4.Reg) & 0x1ff0000) >> 16
}
func (o *RTCCNTL_Type) SetTIMER4_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0xfe00)|value<<9)
}
func (o *RTCCNTL_Type) GetTIMER4_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER4.Reg) & 0xfe00) >> 9
}
func (o *RTCCNTL_Type) SetTIMER4_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER4.Reg, volatile.LoadUint32(&o.TIMER4.Reg)&^(0x1ff)|value)
}
func (o *RTCCNTL_Type) GetTIMER4_WAIT_TIMER() uint32 {
	return volatile.LoadUint32(&o.TIMER4.Reg) & 0x1ff
}

// RTCCNTL.TIMER5: RTC_CNTL_TIMER5
func (o *RTCCNTL_Type) SetTIMER5_RTCMEM_POWERUP_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0xfe000000)|value<<25)
}
func (o *RTCCNTL_Type) GetTIMER5_RTCMEM_POWERUP_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER5.Reg) & 0xfe000000) >> 25
}
func (o *RTCCNTL_Type) SetTIMER5_RTCMEM_WAIT_TIMER(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0x1ff0000)|value<<16)
}
func (o *RTCCNTL_Type) GetTIMER5_RTCMEM_WAIT_TIMER() uint32 {
	return (volatile.LoadUint32(&o.TIMER5.Reg) & 0x1ff0000) >> 16
}
func (o *RTCCNTL_Type) SetTIMER5_MIN_SLP_VAL(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0xff00)|value<<8)
}
func (o *RTCCNTL_Type) GetTIMER5_MIN_SLP_VAL() uint32 {
	return (volatile.LoadUint32(&o.TIMER5.Reg) & 0xff00) >> 8
}
func (o *RTCCNTL_Type) SetTIMER5_ULP_CP_SUBTIMER_PREDIV(value uint32) {
	volatile.StoreUint32(&o.TIMER5.Reg, volatile.LoadUint32(&o.TIMER5.Reg)&^(0xff)|value)
}
func (o *RTCCNTL_Type) GetTIMER5_ULP_CP_SUBTIMER_PREDIV() uint32 {
	return volatile.LoadUint32(&o.TIMER5.Reg) & 0xff
}

// RTCCNTL.ANA_CONF: RTC_CNTL_ANA_CONF
func (o *RTCCNTL_Type) SetANA_CONF_PLL_I2C_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetANA_CONF_PLL_I2C_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetANA_CONF_CKGEN_I2C_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetANA_CONF_CKGEN_I2C_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetANA_CONF_RFRX_PBUS_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetANA_CONF_RFRX_PBUS_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetANA_CONF_TXRF_I2C_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCCNTL_Type) GetANA_CONF_TXRF_I2C_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x8000000) >> 27
}
func (o *RTCCNTL_Type) SetANA_CONF_PVTMON_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetANA_CONF_PVTMON_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetANA_CONF_BBPLL_CAL_SLP_START(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetANA_CONF_BBPLL_CAL_SLP_START() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x2000000) >> 25
}
func (o *RTCCNTL_Type) SetANA_CONF_PLLA_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetANA_CONF_PLLA_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetANA_CONF_PLLA_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.ANA_CONF.Reg, volatile.LoadUint32(&o.ANA_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *RTCCNTL_Type) GetANA_CONF_PLLA_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.ANA_CONF.Reg) & 0x800000) >> 23
}

// RTCCNTL.RESET_STATE: RTC_CNTL_RESET_STATE
func (o *RTCCNTL_Type) SetRESET_STATE_PROCPU_STAT_VECTOR_SEL(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0x2000)|value<<13)
}
func (o *RTCCNTL_Type) GetRESET_STATE_PROCPU_STAT_VECTOR_SEL() uint32 {
	return (volatile.LoadUint32(&o.RESET_STATE.Reg) & 0x2000) >> 13
}
func (o *RTCCNTL_Type) SetRESET_STATE_APPCPU_STAT_VECTOR_SEL(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0x1000)|value<<12)
}
func (o *RTCCNTL_Type) GetRESET_STATE_APPCPU_STAT_VECTOR_SEL() uint32 {
	return (volatile.LoadUint32(&o.RESET_STATE.Reg) & 0x1000) >> 12
}
func (o *RTCCNTL_Type) SetRESET_STATE_RESET_CAUSE_APPCPU(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0xfc0)|value<<6)
}
func (o *RTCCNTL_Type) GetRESET_STATE_RESET_CAUSE_APPCPU() uint32 {
	return (volatile.LoadUint32(&o.RESET_STATE.Reg) & 0xfc0) >> 6
}
func (o *RTCCNTL_Type) SetRESET_STATE_RESET_CAUSE_PROCPU(value uint32) {
	volatile.StoreUint32(&o.RESET_STATE.Reg, volatile.LoadUint32(&o.RESET_STATE.Reg)&^(0x3f)|value)
}
func (o *RTCCNTL_Type) GetRESET_STATE_RESET_CAUSE_PROCPU() uint32 {
	return volatile.LoadUint32(&o.RESET_STATE.Reg) & 0x3f
}

// RTCCNTL.WAKEUP_STATE: RTC_CNTL_WAKEUP_STATE
func (o *RTCCNTL_Type) SetWAKEUP_STATE_GPIO_WAKEUP_FILTER(value uint32) {
	volatile.StoreUint32(&o.WAKEUP_STATE.Reg, volatile.LoadUint32(&o.WAKEUP_STATE.Reg)&^(0x400000)|value<<22)
}
func (o *RTCCNTL_Type) GetWAKEUP_STATE_GPIO_WAKEUP_FILTER() uint32 {
	return (volatile.LoadUint32(&o.WAKEUP_STATE.Reg) & 0x400000) >> 22
}
func (o *RTCCNTL_Type) SetWAKEUP_STATE_WAKEUP_ENA(value uint32) {
	volatile.StoreUint32(&o.WAKEUP_STATE.Reg, volatile.LoadUint32(&o.WAKEUP_STATE.Reg)&^(0x3ff800)|value<<11)
}
func (o *RTCCNTL_Type) GetWAKEUP_STATE_WAKEUP_ENA() uint32 {
	return (volatile.LoadUint32(&o.WAKEUP_STATE.Reg) & 0x3ff800) >> 11
}
func (o *RTCCNTL_Type) SetWAKEUP_STATE_WAKEUP_CAUSE(value uint32) {
	volatile.StoreUint32(&o.WAKEUP_STATE.Reg, volatile.LoadUint32(&o.WAKEUP_STATE.Reg)&^(0x7ff)|value)
}
func (o *RTCCNTL_Type) GetWAKEUP_STATE_WAKEUP_CAUSE() uint32 {
	return volatile.LoadUint32(&o.WAKEUP_STATE.Reg) & 0x7ff
}

// RTCCNTL.INT_ENA: RTC_CNTL_INT_ENA
func (o *RTCCNTL_Type) SetINT_ENA_MAIN_TIMER_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetINT_ENA_MAIN_TIMER_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetINT_ENA_BROWN_OUT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetINT_ENA_BROWN_OUT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetINT_ENA_TOUCH_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetINT_ENA_TOUCH_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetINT_ENA_ULP_CP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetINT_ENA_ULP_CP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetINT_ENA_TIME_VALID_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetINT_ENA_TIME_VALID_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetINT_ENA_WDT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *RTCCNTL_Type) GetINT_ENA_WDT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *RTCCNTL_Type) SetINT_ENA_SDIO_IDLE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *RTCCNTL_Type) GetINT_ENA_SDIO_IDLE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *RTCCNTL_Type) SetINT_ENA_SLP_REJECT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *RTCCNTL_Type) GetINT_ENA_SLP_REJECT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *RTCCNTL_Type) SetINT_ENA_SLP_WAKEUP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *RTCCNTL_Type) GetINT_ENA_SLP_WAKEUP_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// RTCCNTL.INT_RAW: RTC_CNTL_INT_RAW
func (o *RTCCNTL_Type) SetINT_RAW_MAIN_TIMER_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetINT_RAW_MAIN_TIMER_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetINT_RAW_BROWN_OUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetINT_RAW_BROWN_OUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetINT_RAW_TOUCH_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetINT_RAW_TOUCH_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetINT_RAW_ULP_CP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetINT_RAW_ULP_CP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetINT_RAW_TIME_VALID_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetINT_RAW_TIME_VALID_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetINT_RAW_WDT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *RTCCNTL_Type) GetINT_RAW_WDT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *RTCCNTL_Type) SetINT_RAW_SDIO_IDLE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *RTCCNTL_Type) GetINT_RAW_SDIO_IDLE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *RTCCNTL_Type) SetINT_RAW_SLP_REJECT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *RTCCNTL_Type) GetINT_RAW_SLP_REJECT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *RTCCNTL_Type) SetINT_RAW_SLP_WAKEUP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *RTCCNTL_Type) GetINT_RAW_SLP_WAKEUP_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// RTCCNTL.INT_ST: RTC_CNTL_INT_ST
func (o *RTCCNTL_Type) SetINT_ST_MAIN_TIMER_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetINT_ST_MAIN_TIMER_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetINT_ST_BROWN_OUT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetINT_ST_BROWN_OUT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetINT_ST_TOUCH_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetINT_ST_TOUCH_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetINT_ST_SAR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetINT_ST_SAR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetINT_ST_TIME_VALID_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetINT_ST_TIME_VALID_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetINT_ST_WDT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *RTCCNTL_Type) GetINT_ST_WDT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *RTCCNTL_Type) SetINT_ST_SDIO_IDLE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *RTCCNTL_Type) GetINT_ST_SDIO_IDLE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *RTCCNTL_Type) SetINT_ST_SLP_REJECT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *RTCCNTL_Type) GetINT_ST_SLP_REJECT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *RTCCNTL_Type) SetINT_ST_SLP_WAKEUP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *RTCCNTL_Type) GetINT_ST_SLP_WAKEUP_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// RTCCNTL.INT_CLR: RTC_CNTL_INT_CLR
func (o *RTCCNTL_Type) SetINT_CLR_MAIN_TIMER_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetINT_CLR_MAIN_TIMER_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetINT_CLR_BROWN_OUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetINT_CLR_BROWN_OUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetINT_CLR_TOUCH_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetINT_CLR_TOUCH_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetINT_CLR_SAR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetINT_CLR_SAR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetINT_CLR_TIME_VALID_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetINT_CLR_TIME_VALID_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetINT_CLR_WDT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *RTCCNTL_Type) GetINT_CLR_WDT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *RTCCNTL_Type) SetINT_CLR_SDIO_IDLE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *RTCCNTL_Type) GetINT_CLR_SDIO_IDLE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *RTCCNTL_Type) SetINT_CLR_SLP_REJECT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *RTCCNTL_Type) GetINT_CLR_SLP_REJECT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *RTCCNTL_Type) SetINT_CLR_SLP_WAKEUP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *RTCCNTL_Type) GetINT_CLR_SLP_WAKEUP_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// RTCCNTL.STORE0: RTC_CNTL_STORE0
func (o *RTCCNTL_Type) SetSTORE0(value uint32) {
	volatile.StoreUint32(&o.STORE0.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE0() uint32 {
	return volatile.LoadUint32(&o.STORE0.Reg)
}

// RTCCNTL.STORE1: RTC_CNTL_STORE1
func (o *RTCCNTL_Type) SetSTORE1(value uint32) {
	volatile.StoreUint32(&o.STORE1.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE1() uint32 {
	return volatile.LoadUint32(&o.STORE1.Reg)
}

// RTCCNTL.STORE2: RTC_CNTL_STORE2
func (o *RTCCNTL_Type) SetSTORE2(value uint32) {
	volatile.StoreUint32(&o.STORE2.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE2() uint32 {
	return volatile.LoadUint32(&o.STORE2.Reg)
}

// RTCCNTL.STORE3: RTC_CNTL_STORE3
func (o *RTCCNTL_Type) SetSTORE3(value uint32) {
	volatile.StoreUint32(&o.STORE3.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE3() uint32 {
	return volatile.LoadUint32(&o.STORE3.Reg)
}

// RTCCNTL.EXT_XTL_CONF: RTC_CNTL_EXT_XTL_CONF
func (o *RTCCNTL_Type) SetEXT_XTL_CONF_XTL_EXT_CTR_EN(value uint32) {
	volatile.StoreUint32(&o.EXT_XTL_CONF.Reg, volatile.LoadUint32(&o.EXT_XTL_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetEXT_XTL_CONF_XTL_EXT_CTR_EN() uint32 {
	return (volatile.LoadUint32(&o.EXT_XTL_CONF.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetEXT_XTL_CONF_XTL_EXT_CTR_LV(value uint32) {
	volatile.StoreUint32(&o.EXT_XTL_CONF.Reg, volatile.LoadUint32(&o.EXT_XTL_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetEXT_XTL_CONF_XTL_EXT_CTR_LV() uint32 {
	return (volatile.LoadUint32(&o.EXT_XTL_CONF.Reg) & 0x40000000) >> 30
}

// RTCCNTL.EXT_WAKEUP_CONF: RTC_CNTL_EXT_WAKEUP_CONF
func (o *RTCCNTL_Type) SetEXT_WAKEUP_CONF_EXT_WAKEUP1_LV(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP_CONF.Reg, volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetEXT_WAKEUP_CONF_EXT_WAKEUP1_LV() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetEXT_WAKEUP_CONF_EXT_WAKEUP0_LV(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP_CONF.Reg, volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetEXT_WAKEUP_CONF_EXT_WAKEUP0_LV() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP_CONF.Reg) & 0x40000000) >> 30
}

// RTCCNTL.SLP_REJECT_CONF: RTC_CNTL_SLP_REJECT_CONF
func (o *RTCCNTL_Type) SetSLP_REJECT_CONF_REJECT_CAUSE(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0xf0000000)|value<<28)
}
func (o *RTCCNTL_Type) GetSLP_REJECT_CONF_REJECT_CAUSE() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0xf0000000) >> 28
}
func (o *RTCCNTL_Type) SetSLP_REJECT_CONF_DEEP_SLP_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCCNTL_Type) GetSLP_REJECT_CONF_DEEP_SLP_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x8000000) >> 27
}
func (o *RTCCNTL_Type) SetSLP_REJECT_CONF_LIGHT_SLP_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetSLP_REJECT_CONF_LIGHT_SLP_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetSLP_REJECT_CONF_SDIO_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetSLP_REJECT_CONF_SDIO_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x2000000) >> 25
}
func (o *RTCCNTL_Type) SetSLP_REJECT_CONF_GPIO_REJECT_EN(value uint32) {
	volatile.StoreUint32(&o.SLP_REJECT_CONF.Reg, volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetSLP_REJECT_CONF_GPIO_REJECT_EN() uint32 {
	return (volatile.LoadUint32(&o.SLP_REJECT_CONF.Reg) & 0x1000000) >> 24
}

// RTCCNTL.CPU_PERIOD_CONF: RTC_CNTL_CPU_PERIOD_CONF
func (o *RTCCNTL_Type) SetCPU_PERIOD_CONF_CPUPERIOD_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PERIOD_CONF.Reg, volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTCCNTL_Type) GetCPU_PERIOD_CONF_CPUPERIOD_SEL() uint32 {
	return (volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg) & 0xc0000000) >> 30
}
func (o *RTCCNTL_Type) SetCPU_PERIOD_CONF_CPUSEL_CONF(value uint32) {
	volatile.StoreUint32(&o.CPU_PERIOD_CONF.Reg, volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetCPU_PERIOD_CONF_CPUSEL_CONF() uint32 {
	return (volatile.LoadUint32(&o.CPU_PERIOD_CONF.Reg) & 0x20000000) >> 29
}

// RTCCNTL.SDIO_ACT_CONF: RTC_CNTL_SDIO_ACT_CONF
func (o *RTCCNTL_Type) SetSDIO_ACT_CONF_SDIO_ACT_DNUM(value uint32) {
	volatile.StoreUint32(&o.SDIO_ACT_CONF.Reg, volatile.LoadUint32(&o.SDIO_ACT_CONF.Reg)&^(0xffc00000)|value<<22)
}
func (o *RTCCNTL_Type) GetSDIO_ACT_CONF_SDIO_ACT_DNUM() uint32 {
	return (volatile.LoadUint32(&o.SDIO_ACT_CONF.Reg) & 0xffc00000) >> 22
}

// RTCCNTL.CLK_CONF: RTC_CNTL_CLK_CONF
func (o *RTCCNTL_Type) SetCLK_CONF_ANA_CLK_RTC_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTCCNTL_Type) GetCLK_CONF_ANA_CLK_RTC_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0xc0000000) >> 30
}
func (o *RTCCNTL_Type) SetCLK_CONF_FAST_CLK_RTC_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetCLK_CONF_FAST_CLK_RTC_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetCLK_CONF_SOC_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x18000000)|value<<27)
}
func (o *RTCCNTL_Type) GetCLK_CONF_SOC_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x18000000) >> 27
}
func (o *RTCCNTL_Type) SetCLK_CONF_CK8M_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetCLK_CONF_CK8M_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetCLK_CONF_CK8M_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetCLK_CONF_CK8M_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x2000000) >> 25
}
func (o *RTCCNTL_Type) SetCLK_CONF_CK8M_DFREQ(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x1fe0000)|value<<17)
}
func (o *RTCCNTL_Type) GetCLK_CONF_CK8M_DFREQ() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x1fe0000) >> 17
}
func (o *RTCCNTL_Type) SetCLK_CONF_CK8M_FORCE_NOGATING(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x10000)|value<<16)
}
func (o *RTCCNTL_Type) GetCLK_CONF_CK8M_FORCE_NOGATING() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x10000) >> 16
}
func (o *RTCCNTL_Type) SetCLK_CONF_XTAL_FORCE_NOGATING(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x8000)|value<<15)
}
func (o *RTCCNTL_Type) GetCLK_CONF_XTAL_FORCE_NOGATING() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x8000) >> 15
}
func (o *RTCCNTL_Type) SetCLK_CONF_CK8M_DIV_SEL(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x7000)|value<<12)
}
func (o *RTCCNTL_Type) GetCLK_CONF_CK8M_DIV_SEL() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x7000) >> 12
}
func (o *RTCCNTL_Type) SetCLK_CONF_CK8M_DFREQ_FORCE(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x800)|value<<11)
}
func (o *RTCCNTL_Type) GetCLK_CONF_CK8M_DFREQ_FORCE() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x800) >> 11
}
func (o *RTCCNTL_Type) SetCLK_CONF_DIG_CLK8M_EN(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x400)|value<<10)
}
func (o *RTCCNTL_Type) GetCLK_CONF_DIG_CLK8M_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x400) >> 10
}
func (o *RTCCNTL_Type) SetCLK_CONF_DIG_CLK8M_D256_EN(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x200)|value<<9)
}
func (o *RTCCNTL_Type) GetCLK_CONF_DIG_CLK8M_D256_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x200) >> 9
}
func (o *RTCCNTL_Type) SetCLK_CONF_DIG_XTAL32K_EN(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetCLK_CONF_DIG_XTAL32K_EN() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetCLK_CONF_ENB_CK8M_DIV(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetCLK_CONF_ENB_CK8M_DIV() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetCLK_CONF_ENB_CK8M(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetCLK_CONF_ENB_CK8M() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetCLK_CONF_CK8M_DIV(value uint32) {
	volatile.StoreUint32(&o.CLK_CONF.Reg, volatile.LoadUint32(&o.CLK_CONF.Reg)&^(0x30)|value<<4)
}
func (o *RTCCNTL_Type) GetCLK_CONF_CK8M_DIV() uint32 {
	return (volatile.LoadUint32(&o.CLK_CONF.Reg) & 0x30) >> 4
}

// RTCCNTL.SDIO_CONF: RTC_CNTL_SDIO_CONF
func (o *RTCCNTL_Type) SetSDIO_CONF_XPD_SDIO_REG(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_XPD_SDIO_REG() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetSDIO_CONF_DREFH_SDIO(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_DREFH_SDIO() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x60000000) >> 29
}
func (o *RTCCNTL_Type) SetSDIO_CONF_DREFM_SDIO(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x18000000)|value<<27)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_DREFM_SDIO() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x18000000) >> 27
}
func (o *RTCCNTL_Type) SetSDIO_CONF_DREFL_SDIO(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x6000000)|value<<25)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_DREFL_SDIO() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x6000000) >> 25
}
func (o *RTCCNTL_Type) SetSDIO_CONF_REG1P8_READY(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_REG1P8_READY() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetSDIO_CONF_SDIO_TIEH(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_SDIO_TIEH() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x800000) >> 23
}
func (o *RTCCNTL_Type) SetSDIO_CONF_SDIO_FORCE(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x400000)|value<<22)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_SDIO_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x400000) >> 22
}
func (o *RTCCNTL_Type) SetSDIO_CONF_SDIO_PD_EN(value uint32) {
	volatile.StoreUint32(&o.SDIO_CONF.Reg, volatile.LoadUint32(&o.SDIO_CONF.Reg)&^(0x200000)|value<<21)
}
func (o *RTCCNTL_Type) GetSDIO_CONF_SDIO_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.SDIO_CONF.Reg) & 0x200000) >> 21
}

// RTCCNTL.BIAS_CONF: RTC_CNTL_BIAS_CONF
func (o *RTCCNTL_Type) SetBIAS_CONF_RST_BIAS_I2C(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_RST_BIAS_I2C() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DEC_HEARTBEAT_WIDTH(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DEC_HEARTBEAT_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetBIAS_CONF_INC_HEARTBEAT_PERIOD(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_INC_HEARTBEAT_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DEC_HEARTBEAT_PERIOD(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DEC_HEARTBEAT_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetBIAS_CONF_INC_HEARTBEAT_REFRESH(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_INC_HEARTBEAT_REFRESH() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x8000000) >> 27
}
func (o *RTCCNTL_Type) SetBIAS_CONF_ENB_SCK_XTAL(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_ENB_SCK_XTAL() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DBG_ATTEN(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x3000000)|value<<24)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DBG_ATTEN() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x3000000) >> 24
}
func (o *RTCCNTL_Type) SetBIAS_CONF_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetBIAS_CONF_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DBOOST_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DBOOST_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DBOOST_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DBOOST_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DBIAS_WAK(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0xe000000)|value<<25)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DBIAS_WAK() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0xe000000) >> 25
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DBIAS_SLP(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x1c00000)|value<<22)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DBIAS_SLP() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x1c00000) >> 22
}
func (o *RTCCNTL_Type) SetBIAS_CONF_SCK_DCAP(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x3fc000)|value<<14)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_SCK_DCAP() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x3fc000) >> 14
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DIG_DBIAS_WAK(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x3800)|value<<11)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DIG_DBIAS_WAK() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x3800) >> 11
}
func (o *RTCCNTL_Type) SetBIAS_CONF_DIG_DBIAS_SLP(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x700)|value<<8)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_DIG_DBIAS_SLP() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x700) >> 8
}
func (o *RTCCNTL_Type) SetBIAS_CONF_SCK_DCAP_FORCE(value uint32) {
	volatile.StoreUint32(&o.BIAS_CONF.Reg, volatile.LoadUint32(&o.BIAS_CONF.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetBIAS_CONF_SCK_DCAP_FORCE() uint32 {
	return (volatile.LoadUint32(&o.BIAS_CONF.Reg) & 0x80) >> 7
}

// RTCCNTL.CNTL: RTC Control Register
func (o *RTCCNTL_Type) SetCNTL_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetCNTL_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetCNTL_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetCNTL_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetCNTL_FORCE_DBOOST_PU(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetCNTL_FORCE_DBOOST_PU() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetCNTL_FORCE_DBOOST_PD(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetCNTL_FORCE_DBOOST_PD() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetCNTL_DBIAS_WAK(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0xe000000)|value<<25)
}
func (o *RTCCNTL_Type) GetCNTL_DBIAS_WAK() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0xe000000) >> 25
}
func (o *RTCCNTL_Type) SetCNTL_DBIAS_SLP(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x1c00000)|value<<22)
}
func (o *RTCCNTL_Type) GetCNTL_DBIAS_SLP() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x1c00000) >> 22
}
func (o *RTCCNTL_Type) SetCNTL_SCK_DCAP(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x3fc000)|value<<14)
}
func (o *RTCCNTL_Type) GetCNTL_SCK_DCAP() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x3fc000) >> 14
}
func (o *RTCCNTL_Type) SetCNTL_DIG_DBIAS_WAK(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x3800)|value<<11)
}
func (o *RTCCNTL_Type) GetCNTL_DIG_DBIAS_WAK() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x3800) >> 11
}
func (o *RTCCNTL_Type) SetCNTL_DIG_DBIAS_SLP(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x700)|value<<8)
}
func (o *RTCCNTL_Type) GetCNTL_DIG_DBIAS_SLP() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x700) >> 8
}
func (o *RTCCNTL_Type) SetCNTL_SCK_DCAP_FORCE(value uint32) {
	volatile.StoreUint32(&o.CNTL.Reg, volatile.LoadUint32(&o.CNTL.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetCNTL_SCK_DCAP_FORCE() uint32 {
	return (volatile.LoadUint32(&o.CNTL.Reg) & 0x80) >> 7
}

// RTCCNTL.PWC: RTC_CNTL_PWC
func (o *RTCCNTL_Type) SetPWC_PD_EN(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x100000)|value<<20)
}
func (o *RTCCNTL_Type) GetPWC_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x100000) >> 20
}
func (o *RTCCNTL_Type) SetPWC_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x80000)|value<<19)
}
func (o *RTCCNTL_Type) GetPWC_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x80000) >> 19
}
func (o *RTCCNTL_Type) SetPWC_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x40000)|value<<18)
}
func (o *RTCCNTL_Type) GetPWC_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x40000) >> 18
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_PD_EN(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x20000)|value<<17)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x20000) >> 17
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x10000)|value<<16)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x10000) >> 16
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x8000)|value<<15)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x8000) >> 15
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_PD_EN(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x4000)|value<<14)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x4000) >> 14
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x2000)|value<<13)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x2000) >> 13
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x1000)|value<<12)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x1000) >> 12
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_FORCE_LPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x800)|value<<11)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_FORCE_LPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x800) >> 11
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_FORCE_LPD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x400)|value<<10)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_FORCE_LPD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x400) >> 10
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_FOLW_CPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x200)|value<<9)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_FOLW_CPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x200) >> 9
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_FORCE_LPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_FORCE_LPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_FORCE_LPD(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_FORCE_LPD() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_FOLW_CPU(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_FOLW_CPU() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetPWC_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetPWC_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetPWC_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetPWC_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x8)|value<<3)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x8) >> 3
}
func (o *RTCCNTL_Type) SetPWC_SLOWMEM_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x4)|value<<2)
}
func (o *RTCCNTL_Type) GetPWC_SLOWMEM_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x4) >> 2
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x2)|value<<1)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.PWC.Reg) & 0x2) >> 1
}
func (o *RTCCNTL_Type) SetPWC_FASTMEM_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.PWC.Reg, volatile.LoadUint32(&o.PWC.Reg)&^(0x1)|value)
}
func (o *RTCCNTL_Type) GetPWC_FASTMEM_FORCE_NOISO() uint32 {
	return volatile.LoadUint32(&o.PWC.Reg) & 0x1
}

// RTCCNTL.DIG_PWC: RTC_CNTL_DIG_PWC
func (o *RTCCNTL_Type) SetDIG_PWC_DG_WRAP_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetDIG_PWC_DG_WRAP_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetDIG_PWC_WIFI_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetDIG_PWC_WIFI_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM4_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM4_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM3_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM3_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM2_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM2_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x8000000) >> 27
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM1_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM1_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM0_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM0_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x2000000) >> 25
}
func (o *RTCCNTL_Type) SetDIG_PWC_ROM0_PD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetDIG_PWC_ROM0_PD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetDIG_PWC_DG_WRAP_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x100000)|value<<20)
}
func (o *RTCCNTL_Type) GetDIG_PWC_DG_WRAP_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x100000) >> 20
}
func (o *RTCCNTL_Type) SetDIG_PWC_DG_WRAP_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x80000)|value<<19)
}
func (o *RTCCNTL_Type) GetDIG_PWC_DG_WRAP_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x80000) >> 19
}
func (o *RTCCNTL_Type) SetDIG_PWC_WIFI_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x40000)|value<<18)
}
func (o *RTCCNTL_Type) GetDIG_PWC_WIFI_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x40000) >> 18
}
func (o *RTCCNTL_Type) SetDIG_PWC_WIFI_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x20000)|value<<17)
}
func (o *RTCCNTL_Type) GetDIG_PWC_WIFI_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x20000) >> 17
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM4_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x10000)|value<<16)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM4_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x10000) >> 16
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM4_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x8000)|value<<15)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM4_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x8000) >> 15
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM3_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x4000)|value<<14)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM3_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x4000) >> 14
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM3_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x2000)|value<<13)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM3_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x2000) >> 13
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM2_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x1000)|value<<12)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM2_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x1000) >> 12
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM2_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x800)|value<<11)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM2_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x800) >> 11
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM1_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x400)|value<<10)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM1_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x400) >> 10
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM1_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x200)|value<<9)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM1_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x200) >> 9
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM0_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM0_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetDIG_PWC_INTER_RAM0_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetDIG_PWC_INTER_RAM0_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetDIG_PWC_ROM0_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetDIG_PWC_ROM0_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetDIG_PWC_ROM0_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetDIG_PWC_ROM0_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetDIG_PWC_LSLP_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetDIG_PWC_LSLP_MEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetDIG_PWC_LSLP_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.DIG_PWC.Reg, volatile.LoadUint32(&o.DIG_PWC.Reg)&^(0x8)|value<<3)
}
func (o *RTCCNTL_Type) GetDIG_PWC_LSLP_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.DIG_PWC.Reg) & 0x8) >> 3
}

// RTCCNTL.DIG_ISO: RTC_CNTL_DIG_ISO
func (o *RTCCNTL_Type) SetDIG_ISO_DG_WRAP_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_WRAP_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetDIG_ISO_DG_WRAP_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_WRAP_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetDIG_ISO_WIFI_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetDIG_ISO_WIFI_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x20000000) >> 29
}
func (o *RTCCNTL_Type) SetDIG_ISO_WIFI_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCCNTL_Type) GetDIG_ISO_WIFI_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x10000000) >> 28
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM4_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM4_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x8000000) >> 27
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM4_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM4_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM3_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM3_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x2000000) >> 25
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM3_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM3_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM2_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x800000)|value<<23)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM2_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x800000) >> 23
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM2_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x400000)|value<<22)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM2_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x400000) >> 22
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM1_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x200000)|value<<21)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM1_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x200000) >> 21
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM1_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x100000)|value<<20)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM1_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x100000) >> 20
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM0_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x80000)|value<<19)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM0_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x80000) >> 19
}
func (o *RTCCNTL_Type) SetDIG_ISO_INTER_RAM0_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x40000)|value<<18)
}
func (o *RTCCNTL_Type) GetDIG_ISO_INTER_RAM0_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x40000) >> 18
}
func (o *RTCCNTL_Type) SetDIG_ISO_ROM0_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x20000)|value<<17)
}
func (o *RTCCNTL_Type) GetDIG_ISO_ROM0_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x20000) >> 17
}
func (o *RTCCNTL_Type) SetDIG_ISO_ROM0_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x10000)|value<<16)
}
func (o *RTCCNTL_Type) GetDIG_ISO_ROM0_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x10000) >> 16
}
func (o *RTCCNTL_Type) SetDIG_ISO_DG_PAD_FORCE_HOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x8000)|value<<15)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_PAD_FORCE_HOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x8000) >> 15
}
func (o *RTCCNTL_Type) SetDIG_ISO_DG_PAD_FORCE_UNHOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x4000)|value<<14)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_PAD_FORCE_UNHOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x4000) >> 14
}
func (o *RTCCNTL_Type) SetDIG_ISO_DG_PAD_FORCE_ISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x2000)|value<<13)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_PAD_FORCE_ISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x2000) >> 13
}
func (o *RTCCNTL_Type) SetDIG_ISO_DG_PAD_FORCE_NOISO(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x1000)|value<<12)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_PAD_FORCE_NOISO() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x1000) >> 12
}
func (o *RTCCNTL_Type) SetDIG_ISO_DG_PAD_AUTOHOLD_EN(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x800)|value<<11)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_PAD_AUTOHOLD_EN() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x800) >> 11
}
func (o *RTCCNTL_Type) SetDIG_ISO_CLR_DG_PAD_AUTOHOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x400)|value<<10)
}
func (o *RTCCNTL_Type) GetDIG_ISO_CLR_DG_PAD_AUTOHOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x400) >> 10
}
func (o *RTCCNTL_Type) SetDIG_ISO_DG_PAD_AUTOHOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x200)|value<<9)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DG_PAD_AUTOHOLD() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x200) >> 9
}
func (o *RTCCNTL_Type) SetDIG_ISO_DIG_ISO_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DIG_ISO_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetDIG_ISO_DIG_ISO_FORCE_OFF(value uint32) {
	volatile.StoreUint32(&o.DIG_ISO.Reg, volatile.LoadUint32(&o.DIG_ISO.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetDIG_ISO_DIG_ISO_FORCE_OFF() uint32 {
	return (volatile.LoadUint32(&o.DIG_ISO.Reg) & 0x80) >> 7
}

// RTCCNTL.WDTCONFIG0: RTC_CNTL_WDTCONFIG0
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_STG0(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x70000000)|value<<28)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_STG0() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x70000000) >> 28
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_STG1(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0xe000000)|value<<25)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_STG1() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0xe000000) >> 25
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_STG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1c00000)|value<<22)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_STG2() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1c00000) >> 22
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_STG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x380000)|value<<19)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_STG3() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x380000) >> 19
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x40000)|value<<18)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x40000) >> 18
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x20000)|value<<17)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x20000) >> 17
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_CPU_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1c000)|value<<14)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_CPU_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1c000) >> 14
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_SYS_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x3800)|value<<11)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_SYS_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x3800) >> 11
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x400)|value<<10)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x400) >> 10
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_PROCPU_RESET_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x200)|value<<9)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_PROCPU_RESET_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x200) >> 9
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_APPCPU_RESET_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_APPCPU_RESET_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetWDTCONFIG0_WDT_PAUSE_IN_SLP(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetWDTCONFIG0_WDT_PAUSE_IN_SLP() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x80) >> 7
}

// RTCCNTL.WDTCONFIG1: RTC_CNTL_WDTCONFIG1
func (o *RTCCNTL_Type) SetWDTCONFIG1(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG1.Reg, value)
}
func (o *RTCCNTL_Type) GetWDTCONFIG1() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG1.Reg)
}

// RTCCNTL.WDTCONFIG2: RTC_CNTL_WDTCONFIG2
func (o *RTCCNTL_Type) SetWDTCONFIG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG2.Reg, value)
}
func (o *RTCCNTL_Type) GetWDTCONFIG2() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG2.Reg)
}

// RTCCNTL.WDTCONFIG3: RTC_CNTL_WDTCONFIG3
func (o *RTCCNTL_Type) SetWDTCONFIG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG3.Reg, value)
}
func (o *RTCCNTL_Type) GetWDTCONFIG3() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG3.Reg)
}

// RTCCNTL.WDTCONFIG4: RTC_CNTL_WDTCONFIG4
func (o *RTCCNTL_Type) SetWDTCONFIG4(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG4.Reg, value)
}
func (o *RTCCNTL_Type) GetWDTCONFIG4() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG4.Reg)
}

// RTCCNTL.WDTFEED: RTC_CNTL_WDTFEED
func (o *RTCCNTL_Type) SetWDTFEED_WDT_FEED(value uint32) {
	volatile.StoreUint32(&o.WDTFEED.Reg, volatile.LoadUint32(&o.WDTFEED.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetWDTFEED_WDT_FEED() uint32 {
	return (volatile.LoadUint32(&o.WDTFEED.Reg) & 0x80000000) >> 31
}

// RTCCNTL.WDTWPROTECT: RTC_CNTL_WDTWPROTECT
func (o *RTCCNTL_Type) SetWDTWPROTECT(value uint32) {
	volatile.StoreUint32(&o.WDTWPROTECT.Reg, value)
}
func (o *RTCCNTL_Type) GetWDTWPROTECT() uint32 {
	return volatile.LoadUint32(&o.WDTWPROTECT.Reg)
}

// RTCCNTL.TEST_MUX: RTC_CNTL_TEST_MUX
func (o *RTCCNTL_Type) SetTEST_MUX_DTEST_RTC(value uint32) {
	volatile.StoreUint32(&o.TEST_MUX.Reg, volatile.LoadUint32(&o.TEST_MUX.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTCCNTL_Type) GetTEST_MUX_DTEST_RTC() uint32 {
	return (volatile.LoadUint32(&o.TEST_MUX.Reg) & 0xc0000000) >> 30
}
func (o *RTCCNTL_Type) SetTEST_MUX_ENT_RTC(value uint32) {
	volatile.StoreUint32(&o.TEST_MUX.Reg, volatile.LoadUint32(&o.TEST_MUX.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCCNTL_Type) GetTEST_MUX_ENT_RTC() uint32 {
	return (volatile.LoadUint32(&o.TEST_MUX.Reg) & 0x20000000) >> 29
}

// RTCCNTL.SW_CPU_STALL: RTC_CNTL_SW_CPU_STALL
func (o *RTCCNTL_Type) SetSW_CPU_STALL_SW_STALL_PROCPU_C1(value uint32) {
	volatile.StoreUint32(&o.SW_CPU_STALL.Reg, volatile.LoadUint32(&o.SW_CPU_STALL.Reg)&^(0xfc000000)|value<<26)
}
func (o *RTCCNTL_Type) GetSW_CPU_STALL_SW_STALL_PROCPU_C1() uint32 {
	return (volatile.LoadUint32(&o.SW_CPU_STALL.Reg) & 0xfc000000) >> 26
}
func (o *RTCCNTL_Type) SetSW_CPU_STALL_SW_STALL_APPCPU_C1(value uint32) {
	volatile.StoreUint32(&o.SW_CPU_STALL.Reg, volatile.LoadUint32(&o.SW_CPU_STALL.Reg)&^(0x3f00000)|value<<20)
}
func (o *RTCCNTL_Type) GetSW_CPU_STALL_SW_STALL_APPCPU_C1() uint32 {
	return (volatile.LoadUint32(&o.SW_CPU_STALL.Reg) & 0x3f00000) >> 20
}

// RTCCNTL.STORE4: RTC_CNTL_STORE4
func (o *RTCCNTL_Type) SetSTORE4(value uint32) {
	volatile.StoreUint32(&o.STORE4.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE4() uint32 {
	return volatile.LoadUint32(&o.STORE4.Reg)
}

// RTCCNTL.STORE5: RTC_CNTL_STORE5
func (o *RTCCNTL_Type) SetSTORE5(value uint32) {
	volatile.StoreUint32(&o.STORE5.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE5() uint32 {
	return volatile.LoadUint32(&o.STORE5.Reg)
}

// RTCCNTL.STORE6: RTC_CNTL_STORE6
func (o *RTCCNTL_Type) SetSTORE6(value uint32) {
	volatile.StoreUint32(&o.STORE6.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE6() uint32 {
	return volatile.LoadUint32(&o.STORE6.Reg)
}

// RTCCNTL.STORE7: RTC_CNTL_STORE7
func (o *RTCCNTL_Type) SetSTORE7(value uint32) {
	volatile.StoreUint32(&o.STORE7.Reg, value)
}
func (o *RTCCNTL_Type) GetSTORE7() uint32 {
	return volatile.LoadUint32(&o.STORE7.Reg)
}

// RTCCNTL.DIAG1: RTC_CNTL_DIAG1
func (o *RTCCNTL_Type) SetDIAG1(value uint32) {
	volatile.StoreUint32(&o.DIAG1.Reg, value)
}
func (o *RTCCNTL_Type) GetDIAG1() uint32 {
	return volatile.LoadUint32(&o.DIAG1.Reg)
}

// RTCCNTL.HOLD_FORCE: RTC_CNTL_HOLD_FORCE
func (o *RTCCNTL_Type) SetHOLD_FORCE_X32N_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x20000)|value<<17)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_X32N_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x20000) >> 17
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_X32P_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x10000)|value<<16)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_X32P_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x10000) >> 16
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD7_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x8000)|value<<15)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD7_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x8000) >> 15
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD6_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x4000)|value<<14)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD6_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x4000) >> 14
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD5_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD5_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x2000) >> 13
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD4_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x1000)|value<<12)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD4_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x1000) >> 12
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD3_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x800)|value<<11)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD3_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x800) >> 11
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x400) >> 10
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x200)|value<<9)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD1_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x200) >> 9
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_TOUCH_PAD0_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x100)|value<<8)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_TOUCH_PAD0_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x100) >> 8
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_SENSE4_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x80)|value<<7)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_SENSE4_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x80) >> 7
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_SENSE3_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x40)|value<<6)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_SENSE3_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x40) >> 6
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_SENSE2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x20)|value<<5)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_SENSE2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x20) >> 5
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_SENSE1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x10)|value<<4)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_SENSE1_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x10) >> 4
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_PDAC2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x8)|value<<3)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_PDAC2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x8) >> 3
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_PDAC1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x4)|value<<2)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_PDAC1_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x4) >> 2
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_ADC2_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x2)|value<<1)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_ADC2_HOLD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x2) >> 1
}
func (o *RTCCNTL_Type) SetHOLD_FORCE_ADC1_HOLD_FORCE(value uint32) {
	volatile.StoreUint32(&o.HOLD_FORCE.Reg, volatile.LoadUint32(&o.HOLD_FORCE.Reg)&^(0x1)|value)
}
func (o *RTCCNTL_Type) GetHOLD_FORCE_ADC1_HOLD_FORCE() uint32 {
	return volatile.LoadUint32(&o.HOLD_FORCE.Reg) & 0x1
}

// RTCCNTL.EXT_WAKEUP1: RTC_CNTL_EXT_WAKEUP1
func (o *RTCCNTL_Type) SetEXT_WAKEUP1_EXT_WAKEUP1_STATUS_CLR(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP1.Reg, volatile.LoadUint32(&o.EXT_WAKEUP1.Reg)&^(0x40000)|value<<18)
}
func (o *RTCCNTL_Type) GetEXT_WAKEUP1_EXT_WAKEUP1_STATUS_CLR() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP1.Reg) & 0x40000) >> 18
}
func (o *RTCCNTL_Type) SetEXT_WAKEUP1_EXT_WAKEUP1_SEL(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP1.Reg, volatile.LoadUint32(&o.EXT_WAKEUP1.Reg)&^(0x3ffff)|value)
}
func (o *RTCCNTL_Type) GetEXT_WAKEUP1_EXT_WAKEUP1_SEL() uint32 {
	return volatile.LoadUint32(&o.EXT_WAKEUP1.Reg) & 0x3ffff
}

// RTCCNTL.EXT_WAKEUP1_STATUS: RTC_CNTL_EXT_WAKEUP1_STATUS
func (o *RTCCNTL_Type) SetEXT_WAKEUP1_STATUS(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP1_STATUS.Reg, volatile.LoadUint32(&o.EXT_WAKEUP1_STATUS.Reg)&^(0x3ffff)|value)
}
func (o *RTCCNTL_Type) GetEXT_WAKEUP1_STATUS() uint32 {
	return volatile.LoadUint32(&o.EXT_WAKEUP1_STATUS.Reg) & 0x3ffff
}

// RTCCNTL.BROWN_OUT: RTC_CNTL_BROWN_OUT
func (o *RTCCNTL_Type) SetBROWN_OUT_BROWN_OUT_DET(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCCNTL_Type) GetBROWN_OUT_BROWN_OUT_DET() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x80000000) >> 31
}
func (o *RTCCNTL_Type) SetBROWN_OUT_BROWN_OUT_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCCNTL_Type) GetBROWN_OUT_BROWN_OUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x40000000) >> 30
}
func (o *RTCCNTL_Type) SetBROWN_OUT_DBROWN_OUT_THRES(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x38000000)|value<<27)
}
func (o *RTCCNTL_Type) GetBROWN_OUT_DBROWN_OUT_THRES() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x38000000) >> 27
}
func (o *RTCCNTL_Type) SetBROWN_OUT_BROWN_OUT_RST_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCCNTL_Type) GetBROWN_OUT_BROWN_OUT_RST_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x4000000) >> 26
}
func (o *RTCCNTL_Type) SetBROWN_OUT_BROWN_OUT_RST_WAIT(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x3ff0000)|value<<16)
}
func (o *RTCCNTL_Type) GetBROWN_OUT_BROWN_OUT_RST_WAIT() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x3ff0000) >> 16
}
func (o *RTCCNTL_Type) SetBROWN_OUT_BROWN_OUT_PD_RF_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x8000)|value<<15)
}
func (o *RTCCNTL_Type) GetBROWN_OUT_BROWN_OUT_PD_RF_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x8000) >> 15
}
func (o *RTCCNTL_Type) SetBROWN_OUT_BROWN_OUT_CLOSE_FLASH_ENA(value uint32) {
	volatile.StoreUint32(&o.BROWN_OUT.Reg, volatile.LoadUint32(&o.BROWN_OUT.Reg)&^(0x4000)|value<<14)
}
func (o *RTCCNTL_Type) GetBROWN_OUT_BROWN_OUT_CLOSE_FLASH_ENA() uint32 {
	return (volatile.LoadUint32(&o.BROWN_OUT.Reg) & 0x4000) >> 14
}

// RTCCNTL.DATE: RTC_CNTL_DATE
func (o *RTCCNTL_Type) SetDATE_CNTL_DATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *RTCCNTL_Type) GetDATE_CNTL_DATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

// RTCCNTL.APLL: APLL I2C Register
func (o *RTCCNTL_Type) SetAPLL_BLOCK(value uint32) {
	volatile.StoreUint32(&o.APLL.Reg, volatile.LoadUint32(&o.APLL.Reg)&^(0xff)|value)
}
func (o *RTCCNTL_Type) GetAPLL_BLOCK() uint32 {
	return volatile.LoadUint32(&o.APLL.Reg) & 0xff
}
func (o *RTCCNTL_Type) SetAPLL_ADDR(value uint32) {
	volatile.StoreUint32(&o.APLL.Reg, volatile.LoadUint32(&o.APLL.Reg)&^(0xff00)|value<<8)
}
func (o *RTCCNTL_Type) GetAPLL_ADDR() uint32 {
	return (volatile.LoadUint32(&o.APLL.Reg) & 0xff00) >> 8
}
func (o *RTCCNTL_Type) SetAPLL_DATA(value uint32) {
	volatile.StoreUint32(&o.APLL.Reg, volatile.LoadUint32(&o.APLL.Reg)&^(0xff0000)|value<<16)
}
func (o *RTCCNTL_Type) GetAPLL_DATA() uint32 {
	return (volatile.LoadUint32(&o.APLL.Reg) & 0xff0000) >> 16
}
func (o *RTCCNTL_Type) SetAPLL_WRITE(value uint32) {
	volatile.StoreUint32(&o.APLL.Reg, volatile.LoadUint32(&o.APLL.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetAPLL_WRITE() uint32 {
	return (volatile.LoadUint32(&o.APLL.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetAPLL_BUSY(value uint32) {
	volatile.StoreUint32(&o.APLL.Reg, volatile.LoadUint32(&o.APLL.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetAPLL_BUSY() uint32 {
	return (volatile.LoadUint32(&o.APLL.Reg) & 0x2000000) >> 25
}

// RTCCNTL.PLL: PLL I2C Register
func (o *RTCCNTL_Type) SetPLL_BLOCK(value uint32) {
	volatile.StoreUint32(&o.PLL.Reg, volatile.LoadUint32(&o.PLL.Reg)&^(0xff)|value)
}
func (o *RTCCNTL_Type) GetPLL_BLOCK() uint32 {
	return volatile.LoadUint32(&o.PLL.Reg) & 0xff
}
func (o *RTCCNTL_Type) SetPLL_ADDR(value uint32) {
	volatile.StoreUint32(&o.PLL.Reg, volatile.LoadUint32(&o.PLL.Reg)&^(0xff00)|value<<8)
}
func (o *RTCCNTL_Type) GetPLL_ADDR() uint32 {
	return (volatile.LoadUint32(&o.PLL.Reg) & 0xff00) >> 8
}
func (o *RTCCNTL_Type) SetPLL_DATA(value uint32) {
	volatile.StoreUint32(&o.PLL.Reg, volatile.LoadUint32(&o.PLL.Reg)&^(0xff0000)|value<<16)
}
func (o *RTCCNTL_Type) GetPLL_DATA() uint32 {
	return (volatile.LoadUint32(&o.PLL.Reg) & 0xff0000) >> 16
}
func (o *RTCCNTL_Type) SetPLL_WRITE(value uint32) {
	volatile.StoreUint32(&o.PLL.Reg, volatile.LoadUint32(&o.PLL.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCCNTL_Type) GetPLL_WRITE() uint32 {
	return (volatile.LoadUint32(&o.PLL.Reg) & 0x1000000) >> 24
}
func (o *RTCCNTL_Type) SetPLL_BUSY(value uint32) {
	volatile.StoreUint32(&o.PLL.Reg, volatile.LoadUint32(&o.PLL.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCCNTL_Type) GetPLL_BUSY() uint32 {
	return (volatile.LoadUint32(&o.PLL.Reg) & 0x2000000) >> 25
}

type SENS_Type struct {
	SAR_READ_CTRL     volatile.Register32 // 0x0
	SAR_READ_STATUS1  volatile.Register32 // 0x4
	SAR_MEAS_WAIT1    volatile.Register32 // 0x8
	SAR_MEAS_WAIT2    volatile.Register32 // 0xC
	SAR_MEAS_CTRL     volatile.Register32 // 0x10
	SAR_READ_STATUS2  volatile.Register32 // 0x14
	ULP_CP_SLEEP_CYC0 volatile.Register32 // 0x18
	ULP_CP_SLEEP_CYC1 volatile.Register32 // 0x1C
	ULP_CP_SLEEP_CYC2 volatile.Register32 // 0x20
	ULP_CP_SLEEP_CYC3 volatile.Register32 // 0x24
	ULP_CP_SLEEP_CYC4 volatile.Register32 // 0x28
	SAR_START_FORCE   volatile.Register32 // 0x2C
	SAR_MEM_WR_CTRL   volatile.Register32 // 0x30
	SAR_ATTEN1        volatile.Register32 // 0x34
	SAR_ATTEN2        volatile.Register32 // 0x38
	SAR_SLAVE_ADDR1   volatile.Register32 // 0x3C
	SAR_SLAVE_ADDR2   volatile.Register32 // 0x40
	SAR_SLAVE_ADDR3   volatile.Register32 // 0x44
	SAR_SLAVE_ADDR4   volatile.Register32 // 0x48
	SAR_TSENS_CTRL    volatile.Register32 // 0x4C
	SAR_I2C_CTRL      volatile.Register32 // 0x50
	SAR_MEAS_START1   volatile.Register32 // 0x54
	SAR_TOUCH_CTRL1   volatile.Register32 // 0x58
	SAR_TOUCH_THRES1  volatile.Register32 // 0x5C
	SAR_TOUCH_THRES2  volatile.Register32 // 0x60
	SAR_TOUCH_THRES3  volatile.Register32 // 0x64
	SAR_TOUCH_THRES4  volatile.Register32 // 0x68
	SAR_TOUCH_THRES5  volatile.Register32 // 0x6C
	SAR_TOUCH_OUT1    volatile.Register32 // 0x70
	SAR_TOUCH_OUT2    volatile.Register32 // 0x74
	SAR_TOUCH_OUT3    volatile.Register32 // 0x78
	SAR_TOUCH_OUT4    volatile.Register32 // 0x7C
	SAR_TOUCH_OUT5    volatile.Register32 // 0x80
	SAR_TOUCH_CTRL2   volatile.Register32 // 0x84
	_                 [4]byte
	SAR_TOUCH_ENABLE  volatile.Register32 // 0x8C
	SAR_READ_CTRL2    volatile.Register32 // 0x90
	SAR_MEAS_START2   volatile.Register32 // 0x94
	SAR_DAC_CTRL1     volatile.Register32 // 0x98
	SAR_DAC_CTRL2     volatile.Register32 // 0x9C
	SAR_MEAS_CTRL2    volatile.Register32 // 0xA0
	_                 [84]byte
	SAR_NOUSE         volatile.Register32 // 0xF8
	SARDATE           volatile.Register32 // 0xFC
}

// SENS.SAR_READ_CTRL: SENS_SAR_READ_CTRL
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_DATA_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x10000000)|value<<28)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_DATA_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x10000000) >> 28
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_DIG_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x8000000)|value<<27)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_DIG_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x8000000) >> 27
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_SAMPLE_NUM(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x7f80000)|value<<19)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_SAMPLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x7f80000) >> 19
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_SAMPLE_BIT(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_SAMPLE_BIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_SAMPLE_CYCLE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0xff00)|value<<8)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_SAMPLE_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0xff00) >> 8
}
func (o *SENS_Type) SetSAR_READ_CTRL_SAR1_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL.Reg)&^(0xff)|value)
}
func (o *SENS_Type) GetSAR_READ_CTRL_SAR1_CLK_DIV() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_CTRL.Reg) & 0xff
}

// SENS.SAR_READ_STATUS1: SENS_SAR_READ_STATUS1
func (o *SENS_Type) SetSAR_READ_STATUS1(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_STATUS1.Reg, value)
}
func (o *SENS_Type) GetSAR_READ_STATUS1() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_STATUS1.Reg)
}

// SENS.SAR_MEAS_WAIT1: SENS_SAR_MEAS_WAIT1
func (o *SENS_Type) SetSAR_MEAS_WAIT1_SAR_AMP_WAIT2(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT1.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT1_SAR_AMP_WAIT2() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_WAIT1_SAR_AMP_WAIT1(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT1.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT1_SAR_AMP_WAIT1() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_WAIT1.Reg) & 0xffff
}

// SENS.SAR_MEAS_WAIT2: SENS_SAR_MEAS_WAIT2
func (o *SENS_Type) SetSAR_MEAS_WAIT2_SAR2_RSTB_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0xff00000)|value<<20)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_SAR2_RSTB_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0xff00000) >> 20
}
func (o *SENS_Type) SetSAR_MEAS_WAIT2_FORCE_XPD_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0xc0000)|value<<18)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_FORCE_XPD_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0xc0000) >> 18
}
func (o *SENS_Type) SetSAR_MEAS_WAIT2_FORCE_XPD_AMP(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_FORCE_XPD_AMP() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_WAIT2_SAR_AMP_WAIT3(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_WAIT2.Reg, volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_WAIT2_SAR_AMP_WAIT3() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_WAIT2.Reg) & 0xffff
}

// SENS.SAR_MEAS_CTRL: SENS_SAR_MEAS_CTRL
func (o *SENS_Type) SetSAR_MEAS_CTRL_SAR2_XPD_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xff000000)|value<<24)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_SAR2_XPD_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xff000000) >> 24
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_SAR_RSTB_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf00000)|value<<20)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_SAR_RSTB_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf00000) >> 20
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_XPD_SAR_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf0000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_XPD_SAR_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf0000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf000)|value<<12)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf000) >> 12
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_AMP_SHORT_REF_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf00)|value<<8)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_AMP_SHORT_REF_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf00) >> 8
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_AMP_RST_FB_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf0)|value<<4)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_AMP_RST_FB_FSM() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf0) >> 4
}
func (o *SENS_Type) SetSAR_MEAS_CTRL_XPD_SAR_AMP_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg)&^(0xf)|value)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL_XPD_SAR_AMP_FSM() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_CTRL.Reg) & 0xf
}

// SENS.SAR_READ_STATUS2: SENS_SAR_READ_STATUS2
func (o *SENS_Type) SetSAR_READ_STATUS2(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_STATUS2.Reg, value)
}
func (o *SENS_Type) GetSAR_READ_STATUS2() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_STATUS2.Reg)
}

// SENS.ULP_CP_SLEEP_CYC0: SENS_ULP_CP_SLEEP_CYC0
func (o *SENS_Type) SetULP_CP_SLEEP_CYC0(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC0.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC0() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC0.Reg)
}

// SENS.ULP_CP_SLEEP_CYC1: SENS_ULP_CP_SLEEP_CYC1
func (o *SENS_Type) SetULP_CP_SLEEP_CYC1(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC1.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC1() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC1.Reg)
}

// SENS.ULP_CP_SLEEP_CYC2: SENS_ULP_CP_SLEEP_CYC2
func (o *SENS_Type) SetULP_CP_SLEEP_CYC2(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC2.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC2() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC2.Reg)
}

// SENS.ULP_CP_SLEEP_CYC3: SENS_ULP_CP_SLEEP_CYC3
func (o *SENS_Type) SetULP_CP_SLEEP_CYC3(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC3.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC3() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC3.Reg)
}

// SENS.ULP_CP_SLEEP_CYC4: SENS_ULP_CP_SLEEP_CYC4
func (o *SENS_Type) SetULP_CP_SLEEP_CYC4(value uint32) {
	volatile.StoreUint32(&o.ULP_CP_SLEEP_CYC4.Reg, value)
}
func (o *SENS_Type) GetULP_CP_SLEEP_CYC4() uint32 {
	return volatile.LoadUint32(&o.ULP_CP_SLEEP_CYC4.Reg)
}

// SENS.SAR_START_FORCE: SENS_SAR_START_FORCE
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_PWDET_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_PWDET_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR1_STOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x800000)|value<<23)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR1_STOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x800000) >> 23
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_STOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x400000)|value<<22)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_STOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x400000) >> 22
}
func (o *SENS_Type) SetSAR_START_FORCE_PC_INIT(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_START_FORCE_PC_INIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_START_FORCE_SARCLK_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *SENS_Type) GetSAR_START_FORCE_SARCLK_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x400) >> 10
}
func (o *SENS_Type) SetSAR_START_FORCE_ULP_CP_START_TOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x200)|value<<9)
}
func (o *SENS_Type) GetSAR_START_FORCE_ULP_CP_START_TOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x200) >> 9
}
func (o *SENS_Type) SetSAR_START_FORCE_ULP_CP_FORCE_START_TOP(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x100)|value<<8)
}
func (o *SENS_Type) GetSAR_START_FORCE_ULP_CP_FORCE_START_TOP() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x100) >> 8
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_PWDET_CCT(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0xe0)|value<<5)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_PWDET_CCT() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0xe0) >> 5
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_EN_TEST(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x10)|value<<4)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_EN_TEST() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x10) >> 4
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR2_BIT_WIDTH(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0xc)|value<<2)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR2_BIT_WIDTH() uint32 {
	return (volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0xc) >> 2
}
func (o *SENS_Type) SetSAR_START_FORCE_SAR1_BIT_WIDTH(value uint32) {
	volatile.StoreUint32(&o.SAR_START_FORCE.Reg, volatile.LoadUint32(&o.SAR_START_FORCE.Reg)&^(0x3)|value)
}
func (o *SENS_Type) GetSAR_START_FORCE_SAR1_BIT_WIDTH() uint32 {
	return volatile.LoadUint32(&o.SAR_START_FORCE.Reg) & 0x3
}

// SENS.SAR_MEM_WR_CTRL: SENS_SAR_MEM_WR_CTRL
func (o *SENS_Type) SetSAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEM_WR_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg)&^(0x400000)|value<<22)
}
func (o *SENS_Type) GetSAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg) & 0x400000) >> 22
}
func (o *SENS_Type) SetSAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEM_WR_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT(value uint32) {
	volatile.StoreUint32(&o.SAR_MEM_WR_CTRL.Reg, volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT() uint32 {
	return volatile.LoadUint32(&o.SAR_MEM_WR_CTRL.Reg) & 0x7ff
}

// SENS.SAR_ATTEN1: SENS_SAR_ATTEN1
func (o *SENS_Type) SetSAR_ATTEN1(value uint32) {
	volatile.StoreUint32(&o.SAR_ATTEN1.Reg, value)
}
func (o *SENS_Type) GetSAR_ATTEN1() uint32 {
	return volatile.LoadUint32(&o.SAR_ATTEN1.Reg)
}

// SENS.SAR_ATTEN2: SENS_SAR_ATTEN2
func (o *SENS_Type) SetSAR_ATTEN2(value uint32) {
	volatile.StoreUint32(&o.SAR_ATTEN2.Reg, value)
}
func (o *SENS_Type) GetSAR_ATTEN2() uint32 {
	return volatile.LoadUint32(&o.SAR_ATTEN2.Reg)
}

// SENS.SAR_SLAVE_ADDR1: SENS_SAR_SLAVE_ADDR1
func (o *SENS_Type) SetSAR_SLAVE_ADDR1_MEAS_STATUS(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR1.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg)&^(0x3fc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR1_MEAS_STATUS() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg) & 0x3fc00000) >> 22
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR1.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR1.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR1.Reg) & 0x7ff
}

// SENS.SAR_SLAVE_ADDR2: SENS_SAR_SLAVE_ADDR2
func (o *SENS_Type) SetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR2.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR2.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR2.Reg) & 0x7ff
}

// SENS.SAR_SLAVE_ADDR3: SENS_SAR_SLAVE_ADDR3
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_TSENS_RDY_OUT(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x40000000)|value<<30)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_TSENS_RDY_OUT() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x40000000) >> 30
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_TSENS_OUT(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x3fc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_TSENS_OUT() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x3fc00000) >> 22
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR3.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR3.Reg) & 0x7ff
}

// SENS.SAR_SLAVE_ADDR4: SENS_SAR_SLAVE_ADDR4
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_DONE(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x40000000)|value<<30)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_DONE() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x40000000) >> 30
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_RDATA(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x3fc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_RDATA() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x3fc00000) >> 22
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x3ff800)|value<<11)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6() uint32 {
	return (volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x3ff800) >> 11
}
func (o *SENS_Type) SetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7(value uint32) {
	volatile.StoreUint32(&o.SAR_SLAVE_ADDR4.Reg, volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg)&^(0x7ff)|value)
}
func (o *SENS_Type) GetSAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7() uint32 {
	return volatile.LoadUint32(&o.SAR_SLAVE_ADDR4.Reg) & 0x7ff
}

// SENS.SAR_TSENS_CTRL: SENS_SAR_TSENS_CTRL
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_DUMP_OUT(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x4000000)|value<<26)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_DUMP_OUT() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x4000000) >> 26
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_POWER_UP_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_POWER_UP_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x2000000) >> 25
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_POWER_UP(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_POWER_UP() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0xff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_CLK_DIV() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0xff0000) >> 16
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_IN_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_IN_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x8000) >> 15
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x4000) >> 14
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_CLK_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_CLK_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x2000) >> 13
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_XPD_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_XPD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0x1000) >> 12
}
func (o *SENS_Type) SetSAR_TSENS_CTRL_TSENS_XPD_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_TSENS_CTRL.Reg, volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg)&^(0xfff)|value)
}
func (o *SENS_Type) GetSAR_TSENS_CTRL_TSENS_XPD_WAIT() uint32 {
	return volatile.LoadUint32(&o.SAR_TSENS_CTRL.Reg) & 0xfff
}

// SENS.SAR_I2C_CTRL: SENS_SAR_I2C_CTRL
func (o *SENS_Type) SetSAR_I2C_CTRL_SAR_I2C_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_CTRL.Reg, volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg)&^(0x20000000)|value<<29)
}
func (o *SENS_Type) GetSAR_I2C_CTRL_SAR_I2C_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg) & 0x20000000) >> 29
}
func (o *SENS_Type) SetSAR_I2C_CTRL_SAR_I2C_START(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_CTRL.Reg, volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg)&^(0x10000000)|value<<28)
}
func (o *SENS_Type) GetSAR_I2C_CTRL_SAR_I2C_START() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg) & 0x10000000) >> 28
}
func (o *SENS_Type) SetSAR_I2C_CTRL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_CTRL.Reg, volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg)&^(0xfffffff)|value)
}
func (o *SENS_Type) GetSAR_I2C_CTRL() uint32 {
	return volatile.LoadUint32(&o.SAR_I2C_CTRL.Reg) & 0xfffffff
}

// SENS.SAR_MEAS_START1: SENS_SAR_MEAS_START1
func (o *SENS_Type) SetSAR_MEAS_START1_SAR1_EN_PAD_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x80000000)|value<<31)
}
func (o *SENS_Type) GetSAR_MEAS_START1_SAR1_EN_PAD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x80000000) >> 31
}
func (o *SENS_Type) SetSAR_MEAS_START1_SAR1_EN_PAD(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x7ff80000)|value<<19)
}
func (o *SENS_Type) GetSAR_MEAS_START1_SAR1_EN_PAD() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x7ff80000) >> 19
}
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_START_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x20000)|value<<17)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_START_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x20000) >> 17
}
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_DONE_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0x10000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_DONE_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0x10000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_START1_MEAS1_DATA_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START1.Reg, volatile.LoadUint32(&o.SAR_MEAS_START1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_START1_MEAS1_DATA_SAR() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_START1.Reg) & 0xffff
}

// SENS.SAR_TOUCH_CTRL1: SENS_SAR_TOUCH_CTRL1
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_HALL_PHASE_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x8000000)|value<<27)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_HALL_PHASE_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x8000000) >> 27
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_XPD_HALL_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x4000000)|value<<26)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_XPD_HALL_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x4000000) >> 26
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_OUT_1EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_OUT_1EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x2000000) >> 25
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_OUT_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_OUT_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_XPD_WAIT(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0xff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_XPD_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0xff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_CTRL1.Reg) & 0xffff
}

// SENS.SAR_TOUCH_THRES1: SENS_SAR_TOUCH_THRES1
func (o *SENS_Type) SetSAR_TOUCH_THRES1_TOUCH_OUT_TH0(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES1_TOUCH_OUT_TH0() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_THRES1_TOUCH_OUT_TH1(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES1_TOUCH_OUT_TH1() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES1.Reg) & 0xffff
}

// SENS.SAR_TOUCH_THRES2: SENS_SAR_TOUCH_THRES2
func (o *SENS_Type) SetSAR_TOUCH_THRES2_TOUCH_OUT_TH2(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES2_TOUCH_OUT_TH2() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_THRES2_TOUCH_OUT_TH3(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES2_TOUCH_OUT_TH3() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES2.Reg) & 0xffff
}

// SENS.SAR_TOUCH_THRES3: SENS_SAR_TOUCH_THRES3
func (o *SENS_Type) SetSAR_TOUCH_THRES3_TOUCH_OUT_TH4(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES3_TOUCH_OUT_TH4() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_THRES3_TOUCH_OUT_TH5(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES3_TOUCH_OUT_TH5() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES3.Reg) & 0xffff
}

// SENS.SAR_TOUCH_THRES4: SENS_SAR_TOUCH_THRES4
func (o *SENS_Type) SetSAR_TOUCH_THRES4_TOUCH_OUT_TH6(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES4_TOUCH_OUT_TH6() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_THRES4_TOUCH_OUT_TH7(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES4_TOUCH_OUT_TH7() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES4.Reg) & 0xffff
}

// SENS.SAR_TOUCH_THRES5: SENS_SAR_TOUCH_THRES5
func (o *SENS_Type) SetSAR_TOUCH_THRES5_TOUCH_OUT_TH8(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES5_TOUCH_OUT_TH8() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_THRES5_TOUCH_OUT_TH9(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_THRES5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_THRES5_TOUCH_OUT_TH9() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_THRES5.Reg) & 0xffff
}

// SENS.SAR_TOUCH_OUT1: SENS_SAR_TOUCH_OUT1
func (o *SENS_Type) SetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT0(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT0() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT1(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT1.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT1_TOUCH_MEAS_OUT1() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT1.Reg) & 0xffff
}

// SENS.SAR_TOUCH_OUT2: SENS_SAR_TOUCH_OUT2
func (o *SENS_Type) SetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT2(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT2() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT3(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT2_TOUCH_MEAS_OUT3() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT2.Reg) & 0xffff
}

// SENS.SAR_TOUCH_OUT3: SENS_SAR_TOUCH_OUT3
func (o *SENS_Type) SetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT4(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT4() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT5(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT3.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT3_TOUCH_MEAS_OUT5() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT3.Reg) & 0xffff
}

// SENS.SAR_TOUCH_OUT4: SENS_SAR_TOUCH_OUT4
func (o *SENS_Type) SetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT6(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT6() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT7(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT4.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT4_TOUCH_MEAS_OUT7() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT4.Reg) & 0xffff
}

// SENS.SAR_TOUCH_OUT5: SENS_SAR_TOUCH_OUT5
func (o *SENS_Type) SetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT8(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg)&^(0xffff0000)|value<<16)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT8() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg) & 0xffff0000) >> 16
}
func (o *SENS_Type) SetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT9(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_OUT5.Reg, volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_OUT5_TOUCH_MEAS_OUT9() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_OUT5.Reg) & 0xffff
}

// SENS.SAR_TOUCH_CTRL2: SENS_SAR_TOUCH_CTRL2
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x40000000)|value<<30)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x40000000) >> 30
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x3fffc000)|value<<14)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x3fffc000) >> 14
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x2000)|value<<13)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x2000) >> 13
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_START_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x1000)|value<<12)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_START_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x1000) >> 12
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_START_FSM_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x800)|value<<11)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_START_FSM_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x800) >> 11
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_MEAS_DONE(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x400)|value<<10)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_MEAS_DONE() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x400) >> 10
}
func (o *SENS_Type) SetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_CTRL2.Reg, volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg)&^(0x3ff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_CTRL2_TOUCH_MEAS_EN() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_CTRL2.Reg) & 0x3ff
}

// SENS.SAR_TOUCH_ENABLE: SENS_SAR_TOUCH_ENABLE
func (o *SENS_Type) SetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_ENABLE.Reg, volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg)&^(0x3ff00000)|value<<20)
}
func (o *SENS_Type) GetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg) & 0x3ff00000) >> 20
}
func (o *SENS_Type) SetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_ENABLE.Reg, volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg)&^(0xffc00)|value<<10)
}
func (o *SENS_Type) GetSAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2() uint32 {
	return (volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg) & 0xffc00) >> 10
}
func (o *SENS_Type) SetSAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN(value uint32) {
	volatile.StoreUint32(&o.SAR_TOUCH_ENABLE.Reg, volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg)&^(0x3ff)|value)
}
func (o *SENS_Type) GetSAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN() uint32 {
	return volatile.LoadUint32(&o.SAR_TOUCH_ENABLE.Reg) & 0x3ff
}

// SENS.SAR_READ_CTRL2: SENS_SAR_READ_CTRL2
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_DATA_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x20000000)|value<<29)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_DATA_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x20000000) >> 29
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_DIG_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x10000000)|value<<28)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_DIG_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x10000000) >> 28
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_PWDET_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x8000000)|value<<27)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_PWDET_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x8000000) >> 27
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_SAMPLE_NUM(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x7f80000)|value<<19)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_SAMPLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x7f80000) >> 19
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_SAMPLE_BIT(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_SAMPLE_BIT() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_SAMPLE_CYCLE(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0xff00)|value<<8)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_SAMPLE_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0xff00) >> 8
}
func (o *SENS_Type) SetSAR_READ_CTRL2_SAR2_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.SAR_READ_CTRL2.Reg, volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg)&^(0xff)|value)
}
func (o *SENS_Type) GetSAR_READ_CTRL2_SAR2_CLK_DIV() uint32 {
	return volatile.LoadUint32(&o.SAR_READ_CTRL2.Reg) & 0xff
}

// SENS.SAR_MEAS_START2: SENS_SAR_MEAS_START2
func (o *SENS_Type) SetSAR_MEAS_START2_SAR2_EN_PAD_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x80000000)|value<<31)
}
func (o *SENS_Type) GetSAR_MEAS_START2_SAR2_EN_PAD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x80000000) >> 31
}
func (o *SENS_Type) SetSAR_MEAS_START2_SAR2_EN_PAD(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x7ff80000)|value<<19)
}
func (o *SENS_Type) GetSAR_MEAS_START2_SAR2_EN_PAD() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x7ff80000) >> 19
}
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x40000)|value<<18)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_START_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x40000) >> 18
}
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_START_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x20000)|value<<17)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_START_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x20000) >> 17
}
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_DONE_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0x10000)|value<<16)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_DONE_SAR() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0x10000) >> 16
}
func (o *SENS_Type) SetSAR_MEAS_START2_MEAS2_DATA_SAR(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_START2.Reg, volatile.LoadUint32(&o.SAR_MEAS_START2.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_MEAS_START2_MEAS2_DATA_SAR() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_START2.Reg) & 0xffff
}

// SENS.SAR_DAC_CTRL1: SENS_SAR_DAC_CTRL1
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_CLK_INV(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_CLK_INV() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x2000000) >> 25
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_CLK_FORCE_LOW(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x800000)|value<<23)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_CLK_FORCE_LOW() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x800000) >> 23
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DAC_DIG_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x400000)|value<<22)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DAC_DIG_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x400000) >> 22
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_DEBUG_BIT_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x3e0000)|value<<17)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_DEBUG_BIT_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x3e0000) >> 17
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_SW_TONE_EN(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0x10000)|value<<16)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_SW_TONE_EN() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0x10000) >> 16
}
func (o *SENS_Type) SetSAR_DAC_CTRL1_SW_FSTEP(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL1.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg)&^(0xffff)|value)
}
func (o *SENS_Type) GetSAR_DAC_CTRL1_SW_FSTEP() uint32 {
	return volatile.LoadUint32(&o.SAR_DAC_CTRL1.Reg) & 0xffff
}

// SENS.SAR_DAC_CTRL2: SENS_SAR_DAC_CTRL2
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_CW_EN2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x2000000)|value<<25)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_CW_EN2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x2000000) >> 25
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_CW_EN1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x1000000)|value<<24)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_CW_EN1() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x1000000) >> 24
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_INV2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xc00000)|value<<22)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_INV2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xc00000) >> 22
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_INV1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x300000)|value<<20)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_INV1() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x300000) >> 20
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_SCALE2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xc0000)|value<<18)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_SCALE2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xc0000) >> 18
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_SCALE1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0x30000)|value<<16)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_SCALE1() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0x30000) >> 16
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_DC2(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xff00)|value<<8)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_DC2() uint32 {
	return (volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xff00) >> 8
}
func (o *SENS_Type) SetSAR_DAC_CTRL2_DAC_DC1(value uint32) {
	volatile.StoreUint32(&o.SAR_DAC_CTRL2.Reg, volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg)&^(0xff)|value)
}
func (o *SENS_Type) GetSAR_DAC_CTRL2_DAC_DC1() uint32 {
	return volatile.LoadUint32(&o.SAR_DAC_CTRL2.Reg) & 0xff
}

// SENS.SAR_MEAS_CTRL2: SENS_SAR_MEAS_CTRL2
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x60000)|value<<17)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x60000) >> 17
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x18000)|value<<15)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x18000) >> 15
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_RST_FB_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x6000)|value<<13)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_RST_FB_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x6000) >> 13
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR2_RSTB_FORCE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x1800)|value<<11)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR2_RSTB_FORCE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x1800) >> 11
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x400)|value<<10)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x400) >> 10
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x200)|value<<9)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x200) >> 9
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x100)|value<<8)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x100) >> 8
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x80)|value<<7)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x80) >> 7
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x40)|value<<6)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x40) >> 6
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x20)|value<<5)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x20) >> 5
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0x10)|value<<4)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE() uint32 {
	return (volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0x10) >> 4
}
func (o *SENS_Type) SetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM(value uint32) {
	volatile.StoreUint32(&o.SAR_MEAS_CTRL2.Reg, volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg)&^(0xf)|value)
}
func (o *SENS_Type) GetSAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM() uint32 {
	return volatile.LoadUint32(&o.SAR_MEAS_CTRL2.Reg) & 0xf
}

// SENS.SAR_NOUSE: SENS_SAR_NOUSE
func (o *SENS_Type) SetSAR_NOUSE(value uint32) {
	volatile.StoreUint32(&o.SAR_NOUSE.Reg, value)
}
func (o *SENS_Type) GetSAR_NOUSE() uint32 {
	return volatile.LoadUint32(&o.SAR_NOUSE.Reg)
}

// SENS.SARDATE: SENS_SARDATE
func (o *SENS_Type) SetSARDATE_SAR_DATE(value uint32) {
	volatile.StoreUint32(&o.SARDATE.Reg, volatile.LoadUint32(&o.SARDATE.Reg)&^(0xfffffff)|value)
}
func (o *SENS_Type) GetSARDATE_SAR_DATE() uint32 {
	return volatile.LoadUint32(&o.SARDATE.Reg) & 0xfffffff
}

type NRX_Type struct {
}

type RTCIO_Type struct {
	OUT           volatile.Register32 // 0x0
	OUT_W1TS      volatile.Register32 // 0x4
	OUT_W1TC      volatile.Register32 // 0x8
	ENABLE        volatile.Register32 // 0xC
	ENABLE_W1TS   volatile.Register32 // 0x10
	ENABLE_W1TC   volatile.Register32 // 0x14
	STATUS        volatile.Register32 // 0x18
	STATUS_W1TS   volatile.Register32 // 0x1C
	STATUS_W1TC   volatile.Register32 // 0x20
	IN            volatile.Register32 // 0x24
	PIN0          volatile.Register32 // 0x28
	PIN1          volatile.Register32 // 0x2C
	PIN2          volatile.Register32 // 0x30
	PIN3          volatile.Register32 // 0x34
	PIN4          volatile.Register32 // 0x38
	PIN5          volatile.Register32 // 0x3C
	PIN6          volatile.Register32 // 0x40
	PIN7          volatile.Register32 // 0x44
	PIN8          volatile.Register32 // 0x48
	PIN9          volatile.Register32 // 0x4C
	PIN10         volatile.Register32 // 0x50
	PIN11         volatile.Register32 // 0x54
	PIN12         volatile.Register32 // 0x58
	PIN13         volatile.Register32 // 0x5C
	PIN14         volatile.Register32 // 0x60
	PIN15         volatile.Register32 // 0x64
	PIN16         volatile.Register32 // 0x68
	PIN17         volatile.Register32 // 0x6C
	RTC_DEBUG_SEL volatile.Register32 // 0x70
	DIG_PAD_HOLD  volatile.Register32 // 0x74
	HALL_SENS     volatile.Register32 // 0x78
	SENSOR_PADS   volatile.Register32 // 0x7C
	ADC_PAD       volatile.Register32 // 0x80
	PAD_DAC1      volatile.Register32 // 0x84
	PAD_DAC2      volatile.Register32 // 0x88
	XTAL_32K_PAD  volatile.Register32 // 0x8C
	TOUCH_CFG     volatile.Register32 // 0x90
	TOUCH_PAD0    volatile.Register32 // 0x94
	TOUCH_PAD1    volatile.Register32 // 0x98
	TOUCH_PAD2    volatile.Register32 // 0x9C
	TOUCH_PAD3    volatile.Register32 // 0xA0
	TOUCH_PAD4    volatile.Register32 // 0xA4
	TOUCH_PAD5    volatile.Register32 // 0xA8
	TOUCH_PAD6    volatile.Register32 // 0xAC
	TOUCH_PAD7    volatile.Register32 // 0xB0
	TOUCH_PAD8    volatile.Register32 // 0xB4
	TOUCH_PAD9    volatile.Register32 // 0xB8
	EXT_WAKEUP0   volatile.Register32 // 0xBC
	XTL_EXT_CTR   volatile.Register32 // 0xC0
	SAR_I2C_IO    volatile.Register32 // 0xC4
	DATE          volatile.Register32 // 0xC8
}

// RTCIO.OUT: RTC_GPIO_OUT
func (o *RTCIO_Type) SetOUT_OUT_DATA(value uint32) {
	volatile.StoreUint32(&o.OUT.Reg, volatile.LoadUint32(&o.OUT.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetOUT_OUT_DATA() uint32 {
	return (volatile.LoadUint32(&o.OUT.Reg) & 0xffffc000) >> 14
}

// RTCIO.OUT_W1TS: RTC_GPIO_OUT_W1TS
func (o *RTCIO_Type) SetOUT_W1TS_OUT_DATA_W1TS(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TS.Reg, volatile.LoadUint32(&o.OUT_W1TS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetOUT_W1TS_OUT_DATA_W1TS() uint32 {
	return (volatile.LoadUint32(&o.OUT_W1TS.Reg) & 0xffffc000) >> 14
}

// RTCIO.OUT_W1TC: RTC_GPIO_OUT_W1TC
func (o *RTCIO_Type) SetOUT_W1TC_OUT_DATA_W1TC(value uint32) {
	volatile.StoreUint32(&o.OUT_W1TC.Reg, volatile.LoadUint32(&o.OUT_W1TC.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetOUT_W1TC_OUT_DATA_W1TC() uint32 {
	return (volatile.LoadUint32(&o.OUT_W1TC.Reg) & 0xffffc000) >> 14
}

// RTCIO.ENABLE: RTC_GPIO_ENABLE
func (o *RTCIO_Type) SetENABLE(value uint32) {
	volatile.StoreUint32(&o.ENABLE.Reg, volatile.LoadUint32(&o.ENABLE.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetENABLE() uint32 {
	return (volatile.LoadUint32(&o.ENABLE.Reg) & 0xffffc000) >> 14
}

// RTCIO.ENABLE_W1TS: RTC_GPIO_ENABLE_W1TS
func (o *RTCIO_Type) SetENABLE_W1TS(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TS.Reg, volatile.LoadUint32(&o.ENABLE_W1TS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetENABLE_W1TS() uint32 {
	return (volatile.LoadUint32(&o.ENABLE_W1TS.Reg) & 0xffffc000) >> 14
}

// RTCIO.ENABLE_W1TC: RTC_GPIO_ENABLE_W1TC
func (o *RTCIO_Type) SetENABLE_W1TC(value uint32) {
	volatile.StoreUint32(&o.ENABLE_W1TC.Reg, volatile.LoadUint32(&o.ENABLE_W1TC.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetENABLE_W1TC() uint32 {
	return (volatile.LoadUint32(&o.ENABLE_W1TC.Reg) & 0xffffc000) >> 14
}

// RTCIO.STATUS: RTC_GPIO_STATUS
func (o *RTCIO_Type) SetSTATUS_STATUS_INT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetSTATUS_STATUS_INT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xffffc000) >> 14
}

// RTCIO.STATUS_W1TS: RTC_GPIO_STATUS_W1TS
func (o *RTCIO_Type) SetSTATUS_W1TS_STATUS_INT_W1TS(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TS.Reg, volatile.LoadUint32(&o.STATUS_W1TS.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetSTATUS_W1TS_STATUS_INT_W1TS() uint32 {
	return (volatile.LoadUint32(&o.STATUS_W1TS.Reg) & 0xffffc000) >> 14
}

// RTCIO.STATUS_W1TC: RTC_GPIO_STATUS_W1TC
func (o *RTCIO_Type) SetSTATUS_W1TC_STATUS_INT_W1TC(value uint32) {
	volatile.StoreUint32(&o.STATUS_W1TC.Reg, volatile.LoadUint32(&o.STATUS_W1TC.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetSTATUS_W1TC_STATUS_INT_W1TC() uint32 {
	return (volatile.LoadUint32(&o.STATUS_W1TC.Reg) & 0xffffc000) >> 14
}

// RTCIO.IN: RTC_GPIO_IN
func (o *RTCIO_Type) SetIN_IN_NEXT(value uint32) {
	volatile.StoreUint32(&o.IN.Reg, volatile.LoadUint32(&o.IN.Reg)&^(0xffffc000)|value<<14)
}
func (o *RTCIO_Type) GetIN_IN_NEXT() uint32 {
	return (volatile.LoadUint32(&o.IN.Reg) & 0xffffc000) >> 14
}

// RTCIO.PIN0: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN0_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN0_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN0_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN0_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN0_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN0.Reg, volatile.LoadUint32(&o.PIN0.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN0_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN0.Reg) & 0x4) >> 2
}

// RTCIO.PIN1: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN1_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN1_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN1_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN1_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN1_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN1.Reg, volatile.LoadUint32(&o.PIN1.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN1_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN1.Reg) & 0x4) >> 2
}

// RTCIO.PIN2: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN2_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN2_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN2_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN2_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN2_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN2.Reg, volatile.LoadUint32(&o.PIN2.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN2_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN2.Reg) & 0x4) >> 2
}

// RTCIO.PIN3: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN3_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN3_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN3_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN3_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN3_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN3.Reg, volatile.LoadUint32(&o.PIN3.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN3_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN3.Reg) & 0x4) >> 2
}

// RTCIO.PIN4: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN4_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN4_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN4_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN4_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN4_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN4.Reg, volatile.LoadUint32(&o.PIN4.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN4_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN4.Reg) & 0x4) >> 2
}

// RTCIO.PIN5: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN5_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN5_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN5_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN5_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN5_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN5.Reg, volatile.LoadUint32(&o.PIN5.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN5_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN5.Reg) & 0x4) >> 2
}

// RTCIO.PIN6: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN6_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN6_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN6_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN6_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN6_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN6.Reg, volatile.LoadUint32(&o.PIN6.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN6_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN6.Reg) & 0x4) >> 2
}

// RTCIO.PIN7: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN7_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN7_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN7_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN7_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN7_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN7.Reg, volatile.LoadUint32(&o.PIN7.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN7_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN7.Reg) & 0x4) >> 2
}

// RTCIO.PIN8: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN8_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN8_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN8_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN8_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN8_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN8.Reg, volatile.LoadUint32(&o.PIN8.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN8_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN8.Reg) & 0x4) >> 2
}

// RTCIO.PIN9: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN9_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN9_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN9_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN9_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN9_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN9.Reg, volatile.LoadUint32(&o.PIN9.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN9_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN9.Reg) & 0x4) >> 2
}

// RTCIO.PIN10: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN10_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN10_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN10_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN10_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN10_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN10.Reg, volatile.LoadUint32(&o.PIN10.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN10_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN10.Reg) & 0x4) >> 2
}

// RTCIO.PIN11: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN11_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN11_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN11_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN11_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN11_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN11.Reg, volatile.LoadUint32(&o.PIN11.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN11_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN11.Reg) & 0x4) >> 2
}

// RTCIO.PIN12: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN12_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN12_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN12_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN12_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN12_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN12.Reg, volatile.LoadUint32(&o.PIN12.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN12_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN12.Reg) & 0x4) >> 2
}

// RTCIO.PIN13: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN13_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN13_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN13_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN13_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN13_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN13.Reg, volatile.LoadUint32(&o.PIN13.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN13_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN13.Reg) & 0x4) >> 2
}

// RTCIO.PIN14: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN14_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN14_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN14_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN14_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN14_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN14.Reg, volatile.LoadUint32(&o.PIN14.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN14_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN14.Reg) & 0x4) >> 2
}

// RTCIO.PIN15: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN15_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN15_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN15_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN15_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN15_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN15.Reg, volatile.LoadUint32(&o.PIN15.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN15_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN15.Reg) & 0x4) >> 2
}

// RTCIO.PIN16: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN16_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN16_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN16_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN16_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN16_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN16.Reg, volatile.LoadUint32(&o.PIN16.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN16_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN16.Reg) & 0x4) >> 2
}

// RTCIO.PIN17: RTC_GPIO_PIN0
func (o *RTCIO_Type) SetPIN17_WAKEUP_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPIN17_WAKEUP_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetPIN17_INT_TYPE(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x380)|value<<7)
}
func (o *RTCIO_Type) GetPIN17_INT_TYPE() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x380) >> 7
}
func (o *RTCIO_Type) SetPIN17_PAD_DRIVER(value uint32) {
	volatile.StoreUint32(&o.PIN17.Reg, volatile.LoadUint32(&o.PIN17.Reg)&^(0x4)|value<<2)
}
func (o *RTCIO_Type) GetPIN17_PAD_DRIVER() uint32 {
	return (volatile.LoadUint32(&o.PIN17.Reg) & 0x4) >> 2
}

// RTCIO.RTC_DEBUG_SEL: RTC_IO_RTC_DEBUG_SEL
func (o *RTCIO_Type) SetRTC_DEBUG_SEL_DEBUG_12M_NO_GATING(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCIO_Type) GetRTC_DEBUG_SEL_DEBUG_12M_NO_GATING() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x2000000) >> 25
}
func (o *RTCIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL4(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x1f00000)|value<<20)
}
func (o *RTCIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL4() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x1f00000) >> 20
}
func (o *RTCIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL3(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0xf8000)|value<<15)
}
func (o *RTCIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL3() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0xf8000) >> 15
}
func (o *RTCIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL2(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x7c00)|value<<10)
}
func (o *RTCIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL2() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x7c00) >> 10
}
func (o *RTCIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL1(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x3e0)|value<<5)
}
func (o *RTCIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL1() uint32 {
	return (volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x3e0) >> 5
}
func (o *RTCIO_Type) SetRTC_DEBUG_SEL_DEBUG_SEL0(value uint32) {
	volatile.StoreUint32(&o.RTC_DEBUG_SEL.Reg, volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg)&^(0x1f)|value)
}
func (o *RTCIO_Type) GetRTC_DEBUG_SEL_DEBUG_SEL0() uint32 {
	return volatile.LoadUint32(&o.RTC_DEBUG_SEL.Reg) & 0x1f
}

// RTCIO.DIG_PAD_HOLD: RTC_IO_DIG_PAD_HOLD
func (o *RTCIO_Type) SetDIG_PAD_HOLD(value uint32) {
	volatile.StoreUint32(&o.DIG_PAD_HOLD.Reg, value)
}
func (o *RTCIO_Type) GetDIG_PAD_HOLD() uint32 {
	return volatile.LoadUint32(&o.DIG_PAD_HOLD.Reg)
}

// RTCIO.HALL_SENS: RTC_IO_HALL_SENS
func (o *RTCIO_Type) SetHALL_SENS_XPD_HALL(value uint32) {
	volatile.StoreUint32(&o.HALL_SENS.Reg, volatile.LoadUint32(&o.HALL_SENS.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetHALL_SENS_XPD_HALL() uint32 {
	return (volatile.LoadUint32(&o.HALL_SENS.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetHALL_SENS_HALL_PHASE(value uint32) {
	volatile.StoreUint32(&o.HALL_SENS.Reg, volatile.LoadUint32(&o.HALL_SENS.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCIO_Type) GetHALL_SENS_HALL_PHASE() uint32 {
	return (volatile.LoadUint32(&o.HALL_SENS.Reg) & 0x40000000) >> 30
}

// RTCIO.SENSOR_PADS: RTC_IO_SENSOR_PADS
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE1_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE2_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x40000000) >> 30
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE3_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE3_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x20000000) >> 29
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE4_HOLD(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE4_HOLD() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x4000000)|value<<26)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x4000000) >> 26
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE3_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE3_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x2000000) >> 25
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE4_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE4_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x1000000) >> 24
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0xc00000)|value<<22)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0xc00000) >> 22
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE3_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x3000)|value<<12)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE3_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x3000) >> 12
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE3_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x800)|value<<11)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE3_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x800) >> 11
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE3_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE3_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x400) >> 10
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE3_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x200)|value<<9)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE3_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x200) >> 9
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE4_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x180)|value<<7)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE4_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x180) >> 7
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE4_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x40)|value<<6)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE4_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x40) >> 6
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE4_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x20)|value<<5)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE4_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x20) >> 5
}
func (o *RTCIO_Type) SetSENSOR_PADS_SENSE4_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SENSOR_PADS.Reg, volatile.LoadUint32(&o.SENSOR_PADS.Reg)&^(0x10)|value<<4)
}
func (o *RTCIO_Type) GetSENSOR_PADS_SENSE4_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SENSOR_PADS.Reg) & 0x10) >> 4
}

// RTCIO.ADC_PAD: RTC_IO_ADC_PAD
func (o *RTCIO_Type) SetADC_PAD_ADC1_HOLD(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetADC_PAD_ADC1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetADC_PAD_ADC2_HOLD(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x40000000)|value<<30)
}
func (o *RTCIO_Type) GetADC_PAD_ADC2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x40000000) >> 30
}
func (o *RTCIO_Type) SetADC_PAD_ADC1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCIO_Type) GetADC_PAD_ADC1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x20000000) >> 29
}
func (o *RTCIO_Type) SetADC_PAD_ADC2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetADC_PAD_ADC2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetADC_PAD_ADC1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0xc000000)|value<<26)
}
func (o *RTCIO_Type) GetADC_PAD_ADC1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0xc000000) >> 26
}
func (o *RTCIO_Type) SetADC_PAD_ADC1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x2000000)|value<<25)
}
func (o *RTCIO_Type) GetADC_PAD_ADC1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x2000000) >> 25
}
func (o *RTCIO_Type) SetADC_PAD_ADC1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCIO_Type) GetADC_PAD_ADC1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x1000000) >> 24
}
func (o *RTCIO_Type) SetADC_PAD_ADC1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x800000)|value<<23)
}
func (o *RTCIO_Type) GetADC_PAD_ADC1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x800000) >> 23
}
func (o *RTCIO_Type) SetADC_PAD_ADC2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x600000)|value<<21)
}
func (o *RTCIO_Type) GetADC_PAD_ADC2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x600000) >> 21
}
func (o *RTCIO_Type) SetADC_PAD_ADC2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetADC_PAD_ADC2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetADC_PAD_ADC2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetADC_PAD_ADC2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetADC_PAD_ADC2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.ADC_PAD.Reg, volatile.LoadUint32(&o.ADC_PAD.Reg)&^(0x40000)|value<<18)
}
func (o *RTCIO_Type) GetADC_PAD_ADC2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.ADC_PAD.Reg) & 0x40000) >> 18
}

// RTCIO.PAD_DAC1: RTC_IO_PAD_DAC1
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_DRV(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_DRV() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0xc0000000) >> 30
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_HOLD(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x20000000) >> 29
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_RDE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_RDE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_RUE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_RUE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x7f80000)|value<<19)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x7f80000) >> 19
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_XPD_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x40000)|value<<18)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_XPD_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x40000) >> 18
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x20000)|value<<17)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x20000) >> 17
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x18000)|value<<15)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x18000) >> 15
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x1000) >> 12
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x800)|value<<11)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x800) >> 11
}
func (o *RTCIO_Type) SetPAD_DAC1_PDAC1_DAC_XPD_FORCE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC1.Reg, volatile.LoadUint32(&o.PAD_DAC1.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPAD_DAC1_PDAC1_DAC_XPD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC1.Reg) & 0x400) >> 10
}

// RTCIO.PAD_DAC2: RTC_IO_PAD_DAC2
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_DRV(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_DRV() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0xc0000000) >> 30
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_HOLD(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x20000000) >> 29
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_RDE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_RDE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_RUE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_RUE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x7f80000)|value<<19)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x7f80000) >> 19
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_XPD_DAC(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x40000)|value<<18)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_XPD_DAC() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x40000) >> 18
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x20000)|value<<17)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x20000) >> 17
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x18000)|value<<15)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x18000) >> 15
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x1000) >> 12
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x800)|value<<11)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x800) >> 11
}
func (o *RTCIO_Type) SetPAD_DAC2_PDAC2_DAC_XPD_FORCE(value uint32) {
	volatile.StoreUint32(&o.PAD_DAC2.Reg, volatile.LoadUint32(&o.PAD_DAC2.Reg)&^(0x400)|value<<10)
}
func (o *RTCIO_Type) GetPAD_DAC2_PDAC2_DAC_XPD_FORCE() uint32 {
	return (volatile.LoadUint32(&o.PAD_DAC2.Reg) & 0x400) >> 10
}

// RTCIO.XTAL_32K_PAD: RTC_IO_XTAL_32K_PAD
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_DRV(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_DRV() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0xc0000000) >> 30
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_HOLD(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x20000000)|value<<29)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_HOLD() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x20000000) >> 29
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_RDE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_RDE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_RUE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_RUE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_DRV(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x6000000)|value<<25)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_DRV() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x6000000) >> 25
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_HOLD(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x1000000)|value<<24)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_HOLD() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x1000000) >> 24
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_RDE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x800000)|value<<23)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_RDE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x800000) >> 23
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_RUE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_RUE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_DAC_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x300000)|value<<20)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_DAC_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x300000) >> 20
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_XPD_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_XPD_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x40000)|value<<18)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x40000) >> 18
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x20000)|value<<17)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x20000) >> 17
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x18000)|value<<15)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x18000) >> 15
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x1000) >> 12
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32N_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x800)|value<<11)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32N_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x800) >> 11
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x600)|value<<9)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x600) >> 9
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x100)|value<<8)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x100) >> 8
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x80)|value<<7)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x80) >> 7
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x40)|value<<6)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x40) >> 6
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_X32P_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x20)|value<<5)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_X32P_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x20) >> 5
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_DRES_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x18)|value<<3)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_DRES_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x18) >> 3
}
func (o *RTCIO_Type) SetXTAL_32K_PAD_DBIAS_XTAL_32K(value uint32) {
	volatile.StoreUint32(&o.XTAL_32K_PAD.Reg, volatile.LoadUint32(&o.XTAL_32K_PAD.Reg)&^(0x6)|value<<1)
}
func (o *RTCIO_Type) GetXTAL_32K_PAD_DBIAS_XTAL_32K() uint32 {
	return (volatile.LoadUint32(&o.XTAL_32K_PAD.Reg) & 0x6) >> 1
}

// RTCIO.TOUCH_CFG: RTC_IO_TOUCH_CFG
func (o *RTCIO_Type) SetTOUCH_CFG_TOUCH_XPD_BIAS(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_CFG_TOUCH_XPD_BIAS() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_CFG_TOUCH_DREFH(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_CFG_TOUCH_DREFH() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_CFG_TOUCH_DREFL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x18000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_CFG_TOUCH_DREFL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x18000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_CFG_TOUCH_DRANGE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x6000000)|value<<25)
}
func (o *RTCIO_Type) GetTOUCH_CFG_TOUCH_DRANGE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x6000000) >> 25
}
func (o *RTCIO_Type) SetTOUCH_CFG_TOUCH_DCUR(value uint32) {
	volatile.StoreUint32(&o.TOUCH_CFG.Reg, volatile.LoadUint32(&o.TOUCH_CFG.Reg)&^(0x1800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_CFG_TOUCH_DCUR() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_CFG.Reg) & 0x1800000) >> 23
}

// RTCIO.TOUCH_PAD0: RTC_IO_TOUCH_PAD0
func (o *RTCIO_Type) SetTOUCH_PAD0_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD0_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD0_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD0_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD0_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD0_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD0_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD0_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD0_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD0_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD0_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD0_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD0_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD0_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD0_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD0.Reg, volatile.LoadUint32(&o.TOUCH_PAD0.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD0_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD0.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD1: RTC_IO_TOUCH_PAD1
func (o *RTCIO_Type) SetTOUCH_PAD1_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD1_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD1_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD1_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD1_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD1_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD1_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD1_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD1_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD1_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD1_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD1_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD1_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD1.Reg, volatile.LoadUint32(&o.TOUCH_PAD1.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD1_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD1.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD2: RTC_IO_TOUCH_PAD2
func (o *RTCIO_Type) SetTOUCH_PAD2_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD2_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD2_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD2_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD2_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD2_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD2_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD2_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD2_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD2_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD2_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD2_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD2_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD2.Reg, volatile.LoadUint32(&o.TOUCH_PAD2.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD2_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD2.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD3: RTC_IO_TOUCH_PAD3
func (o *RTCIO_Type) SetTOUCH_PAD3_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD3_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD3_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD3_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD3_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD3_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD3_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD3_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD3_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD3_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD3_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD3_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD3_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD3_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD3_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD3.Reg, volatile.LoadUint32(&o.TOUCH_PAD3.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD3_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD3.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD4: RTC_IO_TOUCH_PAD4
func (o *RTCIO_Type) SetTOUCH_PAD4_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD4_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD4_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD4_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD4_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD4_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD4_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD4_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD4_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD4_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD4_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD4_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD4_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD4_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD4_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD4.Reg, volatile.LoadUint32(&o.TOUCH_PAD4.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD4_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD4.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD5: RTC_IO_TOUCH_PAD5
func (o *RTCIO_Type) SetTOUCH_PAD5_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD5_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD5_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD5_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD5_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD5_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD5_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD5_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD5_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD5_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD5_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD5_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD5_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD5_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD5_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD5.Reg, volatile.LoadUint32(&o.TOUCH_PAD5.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD5_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD5.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD6: RTC_IO_TOUCH_PAD6
func (o *RTCIO_Type) SetTOUCH_PAD6_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD6_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD6_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD6_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD6_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD6_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD6_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD6_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD6_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD6_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD6_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD6_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD6_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD6_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD6_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD6.Reg, volatile.LoadUint32(&o.TOUCH_PAD6.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD6_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD6.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD7: RTC_IO_TOUCH_PAD7
func (o *RTCIO_Type) SetTOUCH_PAD7_HOLD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x80000000)|value<<31)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_HOLD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x80000000) >> 31
}
func (o *RTCIO_Type) SetTOUCH_PAD7_DRV(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x60000000)|value<<29)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_DRV() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x60000000) >> 29
}
func (o *RTCIO_Type) SetTOUCH_PAD7_RDE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x10000000)|value<<28)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_RDE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x10000000) >> 28
}
func (o *RTCIO_Type) SetTOUCH_PAD7_RUE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x8000000)|value<<27)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_RUE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x8000000) >> 27
}
func (o *RTCIO_Type) SetTOUCH_PAD7_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD7_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD7_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD7_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD7_MUX_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_MUX_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x80000) >> 19
}
func (o *RTCIO_Type) SetTOUCH_PAD7_FUN_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x60000)|value<<17)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_FUN_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x60000) >> 17
}
func (o *RTCIO_Type) SetTOUCH_PAD7_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x10000)|value<<16)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x10000) >> 16
}
func (o *RTCIO_Type) SetTOUCH_PAD7_SLP_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x8000)|value<<15)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_SLP_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x8000) >> 15
}
func (o *RTCIO_Type) SetTOUCH_PAD7_SLP_OE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x4000)|value<<14)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_SLP_OE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x4000) >> 14
}
func (o *RTCIO_Type) SetTOUCH_PAD7_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x2000)|value<<13)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x2000) >> 13
}
func (o *RTCIO_Type) SetTOUCH_PAD7_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD7.Reg, volatile.LoadUint32(&o.TOUCH_PAD7.Reg)&^(0x1000)|value<<12)
}
func (o *RTCIO_Type) GetTOUCH_PAD7_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD7.Reg) & 0x1000) >> 12
}

// RTCIO.TOUCH_PAD8: RTC_IO_TOUCH_PAD8
func (o *RTCIO_Type) SetTOUCH_PAD8_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD8_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD8_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD8_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD8_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD8_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD8_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD8_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD8_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD8.Reg, volatile.LoadUint32(&o.TOUCH_PAD8.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD8_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD8.Reg) & 0x80000) >> 19
}

// RTCIO.TOUCH_PAD9: RTC_IO_TOUCH_PAD9
func (o *RTCIO_Type) SetTOUCH_PAD9_DAC(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x3800000)|value<<23)
}
func (o *RTCIO_Type) GetTOUCH_PAD9_DAC() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x3800000) >> 23
}
func (o *RTCIO_Type) SetTOUCH_PAD9_START(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x400000)|value<<22)
}
func (o *RTCIO_Type) GetTOUCH_PAD9_START() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x400000) >> 22
}
func (o *RTCIO_Type) SetTOUCH_PAD9_TIE_OPT(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x200000)|value<<21)
}
func (o *RTCIO_Type) GetTOUCH_PAD9_TIE_OPT() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x200000) >> 21
}
func (o *RTCIO_Type) SetTOUCH_PAD9_XPD(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x100000)|value<<20)
}
func (o *RTCIO_Type) GetTOUCH_PAD9_XPD() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x100000) >> 20
}
func (o *RTCIO_Type) SetTOUCH_PAD9_TO_GPIO(value uint32) {
	volatile.StoreUint32(&o.TOUCH_PAD9.Reg, volatile.LoadUint32(&o.TOUCH_PAD9.Reg)&^(0x80000)|value<<19)
}
func (o *RTCIO_Type) GetTOUCH_PAD9_TO_GPIO() uint32 {
	return (volatile.LoadUint32(&o.TOUCH_PAD9.Reg) & 0x80000) >> 19
}

// RTCIO.EXT_WAKEUP0: RTC_IO_EXT_WAKEUP0
func (o *RTCIO_Type) SetEXT_WAKEUP0_EXT_WAKEUP0_SEL(value uint32) {
	volatile.StoreUint32(&o.EXT_WAKEUP0.Reg, volatile.LoadUint32(&o.EXT_WAKEUP0.Reg)&^(0xf8000000)|value<<27)
}
func (o *RTCIO_Type) GetEXT_WAKEUP0_EXT_WAKEUP0_SEL() uint32 {
	return (volatile.LoadUint32(&o.EXT_WAKEUP0.Reg) & 0xf8000000) >> 27
}

// RTCIO.XTL_EXT_CTR: RTC_IO_XTL_EXT_CTR
func (o *RTCIO_Type) SetXTL_EXT_CTR_XTL_EXT_CTR_SEL(value uint32) {
	volatile.StoreUint32(&o.XTL_EXT_CTR.Reg, volatile.LoadUint32(&o.XTL_EXT_CTR.Reg)&^(0xf8000000)|value<<27)
}
func (o *RTCIO_Type) GetXTL_EXT_CTR_XTL_EXT_CTR_SEL() uint32 {
	return (volatile.LoadUint32(&o.XTL_EXT_CTR.Reg) & 0xf8000000) >> 27
}

// RTCIO.SAR_I2C_IO: RTC_IO_SAR_I2C_IO
func (o *RTCIO_Type) SetSAR_I2C_IO_SAR_I2C_SDA_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_IO.Reg, volatile.LoadUint32(&o.SAR_I2C_IO.Reg)&^(0xc0000000)|value<<30)
}
func (o *RTCIO_Type) GetSAR_I2C_IO_SAR_I2C_SDA_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_IO.Reg) & 0xc0000000) >> 30
}
func (o *RTCIO_Type) SetSAR_I2C_IO_SAR_I2C_SCL_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_IO.Reg, volatile.LoadUint32(&o.SAR_I2C_IO.Reg)&^(0x30000000)|value<<28)
}
func (o *RTCIO_Type) GetSAR_I2C_IO_SAR_I2C_SCL_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_IO.Reg) & 0x30000000) >> 28
}
func (o *RTCIO_Type) SetSAR_I2C_IO_SAR_DEBUG_BIT_SEL(value uint32) {
	volatile.StoreUint32(&o.SAR_I2C_IO.Reg, volatile.LoadUint32(&o.SAR_I2C_IO.Reg)&^(0xf800000)|value<<23)
}
func (o *RTCIO_Type) GetSAR_I2C_IO_SAR_DEBUG_BIT_SEL() uint32 {
	return (volatile.LoadUint32(&o.SAR_I2C_IO.Reg) & 0xf800000) >> 23
}

// RTCIO.DATE: RTC_IO_DATE
func (o *RTCIO_Type) SetDATE_IO_DATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *RTCIO_Type) GetDATE_IO_DATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

type FE_Type struct {
}

type BB_Type struct {
}

type DPORT_Type struct {
	PRO_BOOT_REMAP_CTRL           volatile.Register32 // 0x0
	APP_BOOT_REMAP_CTRL           volatile.Register32 // 0x4
	ACCESS_CHECK                  volatile.Register32 // 0x8
	PRO_DPORT_APB_MASK0           volatile.Register32 // 0xC
	PRO_DPORT_APB_MASK1           volatile.Register32 // 0x10
	APP_DPORT_APB_MASK0           volatile.Register32 // 0x14
	APP_DPORT_APB_MASK1           volatile.Register32 // 0x18
	PERI_CLK_EN                   volatile.Register32 // 0x1C
	PERI_RST_EN                   volatile.Register32 // 0x20
	WIFI_BB_CFG                   volatile.Register32 // 0x24
	WIFI_BB_CFG_2                 volatile.Register32 // 0x28
	APPCPU_CTRL_A                 volatile.Register32 // 0x2C
	APPCPU_CTRL_B                 volatile.Register32 // 0x30
	APPCPU_CTRL_C                 volatile.Register32 // 0x34
	APPCPU_CTRL_D                 volatile.Register32 // 0x38
	CPU_PER_CONF                  volatile.Register32 // 0x3C
	PRO_CACHE_CTRL                volatile.Register32 // 0x40
	PRO_CACHE_CTRL1               volatile.Register32 // 0x44
	PRO_CACHE_LOCK_0_ADDR         volatile.Register32 // 0x48
	PRO_CACHE_LOCK_1_ADDR         volatile.Register32 // 0x4C
	PRO_CACHE_LOCK_2_ADDR         volatile.Register32 // 0x50
	PRO_CACHE_LOCK_3_ADDR         volatile.Register32 // 0x54
	APP_CACHE_CTRL                volatile.Register32 // 0x58
	APP_CACHE_CTRL1               volatile.Register32 // 0x5C
	APP_CACHE_LOCK_0_ADDR         volatile.Register32 // 0x60
	APP_CACHE_LOCK_1_ADDR         volatile.Register32 // 0x64
	APP_CACHE_LOCK_2_ADDR         volatile.Register32 // 0x68
	APP_CACHE_LOCK_3_ADDR         volatile.Register32 // 0x6C
	TRACEMEM_MUX_MODE             volatile.Register32 // 0x70
	PRO_TRACEMEM_ENA              volatile.Register32 // 0x74
	APP_TRACEMEM_ENA              volatile.Register32 // 0x78
	CACHE_MUX_MODE                volatile.Register32 // 0x7C
	IMMU_PAGE_MODE                volatile.Register32 // 0x80
	DMMU_PAGE_MODE                volatile.Register32 // 0x84
	ROM_MPU_ENA                   volatile.Register32 // 0x88
	MEM_PD_MASK                   volatile.Register32 // 0x8C
	ROM_PD_CTRL                   volatile.Register32 // 0x90
	ROM_FO_CTRL                   volatile.Register32 // 0x94
	SRAM_PD_CTRL_0                volatile.Register32 // 0x98
	SRAM_PD_CTRL_1                volatile.Register32 // 0x9C
	SRAM_FO_CTRL_0                volatile.Register32 // 0xA0
	SRAM_FO_CTRL_1                volatile.Register32 // 0xA4
	IRAM_DRAM_AHB_SEL             volatile.Register32 // 0xA8
	TAG_FO_CTRL                   volatile.Register32 // 0xAC
	AHB_LITE_MASK                 volatile.Register32 // 0xB0
	AHB_MPU_TABLE_0               volatile.Register32 // 0xB4
	AHB_MPU_TABLE_1               volatile.Register32 // 0xB8
	HOST_INF_SEL                  volatile.Register32 // 0xBC
	PERIP_CLK_EN                  volatile.Register32 // 0xC0
	PERIP_RST_EN                  volatile.Register32 // 0xC4
	_                             [4]byte
	WIFI_CLK_EN                   volatile.Register32 // 0xCC
	CORE_RST_EN                   volatile.Register32 // 0xD0
	BT_LPCK_DIV_INT               volatile.Register32 // 0xD4
	BT_LPCK_DIV_FRAC              volatile.Register32 // 0xD8
	CPU_INTR_FROM_CPU_0           volatile.Register32 // 0xDC
	CPU_INTR_FROM_CPU_1           volatile.Register32 // 0xE0
	CPU_INTR_FROM_CPU_2           volatile.Register32 // 0xE4
	CPU_INTR_FROM_CPU_3           volatile.Register32 // 0xE8
	PRO_INTR_STATUS_0             volatile.Register32 // 0xEC
	PRO_INTR_STATUS_1             volatile.Register32 // 0xF0
	PRO_INTR_STATUS_2             volatile.Register32 // 0xF4
	APP_INTR_STATUS_0             volatile.Register32 // 0xF8
	APP_INTR_STATUS_1             volatile.Register32 // 0xFC
	APP_INTR_STATUS_2             volatile.Register32 // 0x100
	PRO_MAC_INTR_MAP              volatile.Register32 // 0x104
	PRO_MAC_NMI_MAP               volatile.Register32 // 0x108
	PRO_BB_INT_MAP                volatile.Register32 // 0x10C
	PRO_BT_MAC_INT_MAP            volatile.Register32 // 0x110
	PRO_BT_BB_INT_MAP             volatile.Register32 // 0x114
	PRO_BT_BB_NMI_MAP             volatile.Register32 // 0x118
	PRO_RWBT_IRQ_MAP              volatile.Register32 // 0x11C
	PRO_RWBLE_IRQ_MAP             volatile.Register32 // 0x120
	PRO_RWBT_NMI_MAP              volatile.Register32 // 0x124
	PRO_RWBLE_NMI_MAP             volatile.Register32 // 0x128
	PRO_SLC0_INTR_MAP             volatile.Register32 // 0x12C
	PRO_SLC1_INTR_MAP             volatile.Register32 // 0x130
	PRO_UHCI0_INTR_MAP            volatile.Register32 // 0x134
	PRO_UHCI1_INTR_MAP            volatile.Register32 // 0x138
	PRO_TG_T0_LEVEL_INT_MAP       volatile.Register32 // 0x13C
	PRO_TG_T1_LEVEL_INT_MAP       volatile.Register32 // 0x140
	PRO_TG_WDT_LEVEL_INT_MAP      volatile.Register32 // 0x144
	PRO_TG_LACT_LEVEL_INT_MAP     volatile.Register32 // 0x148
	PRO_TG1_T0_LEVEL_INT_MAP      volatile.Register32 // 0x14C
	PRO_TG1_T1_LEVEL_INT_MAP      volatile.Register32 // 0x150
	PRO_TG1_WDT_LEVEL_INT_MAP     volatile.Register32 // 0x154
	PRO_TG1_LACT_LEVEL_INT_MAP    volatile.Register32 // 0x158
	PRO_GPIO_INTERRUPT_MAP        volatile.Register32 // 0x15C
	PRO_GPIO_INTERRUPT_NMI_MAP    volatile.Register32 // 0x160
	PRO_CPU_INTR_FROM_CPU_0_MAP   volatile.Register32 // 0x164
	PRO_CPU_INTR_FROM_CPU_1_MAP   volatile.Register32 // 0x168
	PRO_CPU_INTR_FROM_CPU_2_MAP   volatile.Register32 // 0x16C
	PRO_CPU_INTR_FROM_CPU_3_MAP   volatile.Register32 // 0x170
	PRO_SPI_INTR_0_MAP            volatile.Register32 // 0x174
	PRO_SPI_INTR_1_MAP            volatile.Register32 // 0x178
	PRO_SPI_INTR_2_MAP            volatile.Register32 // 0x17C
	PRO_SPI_INTR_3_MAP            volatile.Register32 // 0x180
	PRO_I2S0_INT_MAP              volatile.Register32 // 0x184
	PRO_I2S1_INT_MAP              volatile.Register32 // 0x188
	PRO_UART_INTR_MAP             volatile.Register32 // 0x18C
	PRO_UART1_INTR_MAP            volatile.Register32 // 0x190
	PRO_UART2_INTR_MAP            volatile.Register32 // 0x194
	PRO_SDIO_HOST_INTERRUPT_MAP   volatile.Register32 // 0x198
	PRO_EMAC_INT_MAP              volatile.Register32 // 0x19C
	PRO_PWM0_INTR_MAP             volatile.Register32 // 0x1A0
	PRO_PWM1_INTR_MAP             volatile.Register32 // 0x1A4
	PRO_PWM2_INTR_MAP             volatile.Register32 // 0x1A8
	PRO_PWM3_INTR_MAP             volatile.Register32 // 0x1AC
	PRO_LEDC_INT_MAP              volatile.Register32 // 0x1B0
	PRO_EFUSE_INT_MAP             volatile.Register32 // 0x1B4
	PRO_CAN_INT_MAP               volatile.Register32 // 0x1B8
	PRO_RTC_CORE_INTR_MAP         volatile.Register32 // 0x1BC
	PRO_RMT_INTR_MAP              volatile.Register32 // 0x1C0
	PRO_PCNT_INTR_MAP             volatile.Register32 // 0x1C4
	PRO_I2C_EXT0_INTR_MAP         volatile.Register32 // 0x1C8
	PRO_I2C_EXT1_INTR_MAP         volatile.Register32 // 0x1CC
	PRO_RSA_INTR_MAP              volatile.Register32 // 0x1D0
	PRO_SPI1_DMA_INT_MAP          volatile.Register32 // 0x1D4
	PRO_SPI2_DMA_INT_MAP          volatile.Register32 // 0x1D8
	PRO_SPI3_DMA_INT_MAP          volatile.Register32 // 0x1DC
	PRO_WDG_INT_MAP               volatile.Register32 // 0x1E0
	PRO_TIMER_INT1_MAP            volatile.Register32 // 0x1E4
	PRO_TIMER_INT2_MAP            volatile.Register32 // 0x1E8
	PRO_TG_T0_EDGE_INT_MAP        volatile.Register32 // 0x1EC
	PRO_TG_T1_EDGE_INT_MAP        volatile.Register32 // 0x1F0
	PRO_TG_WDT_EDGE_INT_MAP       volatile.Register32 // 0x1F4
	PRO_TG_LACT_EDGE_INT_MAP      volatile.Register32 // 0x1F8
	PRO_TG1_T0_EDGE_INT_MAP       volatile.Register32 // 0x1FC
	PRO_TG1_T1_EDGE_INT_MAP       volatile.Register32 // 0x200
	PRO_TG1_WDT_EDGE_INT_MAP      volatile.Register32 // 0x204
	PRO_TG1_LACT_EDGE_INT_MAP     volatile.Register32 // 0x208
	PRO_MMU_IA_INT_MAP            volatile.Register32 // 0x20C
	PRO_MPU_IA_INT_MAP            volatile.Register32 // 0x210
	PRO_CACHE_IA_INT_MAP          volatile.Register32 // 0x214
	APP_MAC_INTR_MAP              volatile.Register32 // 0x218
	APP_MAC_NMI_MAP               volatile.Register32 // 0x21C
	APP_BB_INT_MAP                volatile.Register32 // 0x220
	APP_BT_MAC_INT_MAP            volatile.Register32 // 0x224
	APP_BT_BB_INT_MAP             volatile.Register32 // 0x228
	APP_BT_BB_NMI_MAP             volatile.Register32 // 0x22C
	APP_RWBT_IRQ_MAP              volatile.Register32 // 0x230
	APP_RWBLE_IRQ_MAP             volatile.Register32 // 0x234
	APP_RWBT_NMI_MAP              volatile.Register32 // 0x238
	APP_RWBLE_NMI_MAP             volatile.Register32 // 0x23C
	APP_SLC0_INTR_MAP             volatile.Register32 // 0x240
	APP_SLC1_INTR_MAP             volatile.Register32 // 0x244
	APP_UHCI0_INTR_MAP            volatile.Register32 // 0x248
	APP_UHCI1_INTR_MAP            volatile.Register32 // 0x24C
	APP_TG_T0_LEVEL_INT_MAP       volatile.Register32 // 0x250
	APP_TG_T1_LEVEL_INT_MAP       volatile.Register32 // 0x254
	APP_TG_WDT_LEVEL_INT_MAP      volatile.Register32 // 0x258
	APP_TG_LACT_LEVEL_INT_MAP     volatile.Register32 // 0x25C
	APP_TG1_T0_LEVEL_INT_MAP      volatile.Register32 // 0x260
	APP_TG1_T1_LEVEL_INT_MAP      volatile.Register32 // 0x264
	APP_TG1_WDT_LEVEL_INT_MAP     volatile.Register32 // 0x268
	APP_TG1_LACT_LEVEL_INT_MAP    volatile.Register32 // 0x26C
	APP_GPIO_INTERRUPT_MAP        volatile.Register32 // 0x270
	APP_GPIO_INTERRUPT_NMI_MAP    volatile.Register32 // 0x274
	APP_CPU_INTR_FROM_CPU_0_MAP   volatile.Register32 // 0x278
	APP_CPU_INTR_FROM_CPU_1_MAP   volatile.Register32 // 0x27C
	APP_CPU_INTR_FROM_CPU_2_MAP   volatile.Register32 // 0x280
	APP_CPU_INTR_FROM_CPU_3_MAP   volatile.Register32 // 0x284
	APP_SPI_INTR_0_MAP            volatile.Register32 // 0x288
	APP_SPI_INTR_1_MAP            volatile.Register32 // 0x28C
	APP_SPI_INTR_2_MAP            volatile.Register32 // 0x290
	APP_SPI_INTR_3_MAP            volatile.Register32 // 0x294
	APP_I2S0_INT_MAP              volatile.Register32 // 0x298
	APP_I2S1_INT_MAP              volatile.Register32 // 0x29C
	APP_UART_INTR_MAP             volatile.Register32 // 0x2A0
	APP_UART1_INTR_MAP            volatile.Register32 // 0x2A4
	APP_UART2_INTR_MAP            volatile.Register32 // 0x2A8
	APP_SDIO_HOST_INTERRUPT_MAP   volatile.Register32 // 0x2AC
	APP_EMAC_INT_MAP              volatile.Register32 // 0x2B0
	APP_PWM0_INTR_MAP             volatile.Register32 // 0x2B4
	APP_PWM1_INTR_MAP             volatile.Register32 // 0x2B8
	APP_PWM2_INTR_MAP             volatile.Register32 // 0x2BC
	APP_PWM3_INTR_MAP             volatile.Register32 // 0x2C0
	APP_LEDC_INT_MAP              volatile.Register32 // 0x2C4
	APP_EFUSE_INT_MAP             volatile.Register32 // 0x2C8
	APP_CAN_INT_MAP               volatile.Register32 // 0x2CC
	APP_RTC_CORE_INTR_MAP         volatile.Register32 // 0x2D0
	APP_RMT_INTR_MAP              volatile.Register32 // 0x2D4
	APP_PCNT_INTR_MAP             volatile.Register32 // 0x2D8
	APP_I2C_EXT0_INTR_MAP         volatile.Register32 // 0x2DC
	APP_I2C_EXT1_INTR_MAP         volatile.Register32 // 0x2E0
	APP_RSA_INTR_MAP              volatile.Register32 // 0x2E4
	APP_SPI1_DMA_INT_MAP          volatile.Register32 // 0x2E8
	APP_SPI2_DMA_INT_MAP          volatile.Register32 // 0x2EC
	APP_SPI3_DMA_INT_MAP          volatile.Register32 // 0x2F0
	APP_WDG_INT_MAP               volatile.Register32 // 0x2F4
	APP_TIMER_INT1_MAP            volatile.Register32 // 0x2F8
	APP_TIMER_INT2_MAP            volatile.Register32 // 0x2FC
	APP_TG_T0_EDGE_INT_MAP        volatile.Register32 // 0x300
	APP_TG_T1_EDGE_INT_MAP        volatile.Register32 // 0x304
	APP_TG_WDT_EDGE_INT_MAP       volatile.Register32 // 0x308
	APP_TG_LACT_EDGE_INT_MAP      volatile.Register32 // 0x30C
	APP_TG1_T0_EDGE_INT_MAP       volatile.Register32 // 0x310
	APP_TG1_T1_EDGE_INT_MAP       volatile.Register32 // 0x314
	APP_TG1_WDT_EDGE_INT_MAP      volatile.Register32 // 0x318
	APP_TG1_LACT_EDGE_INT_MAP     volatile.Register32 // 0x31C
	APP_MMU_IA_INT_MAP            volatile.Register32 // 0x320
	APP_MPU_IA_INT_MAP            volatile.Register32 // 0x324
	APP_CACHE_IA_INT_MAP          volatile.Register32 // 0x328
	AHBLITE_MPU_TABLE_UART        volatile.Register32 // 0x32C
	AHBLITE_MPU_TABLE_SPI1        volatile.Register32 // 0x330
	AHBLITE_MPU_TABLE_SPI0        volatile.Register32 // 0x334
	AHBLITE_MPU_TABLE_GPIO        volatile.Register32 // 0x338
	AHBLITE_MPU_TABLE_FE2         volatile.Register32 // 0x33C
	AHBLITE_MPU_TABLE_FE          volatile.Register32 // 0x340
	AHBLITE_MPU_TABLE_TIMER       volatile.Register32 // 0x344
	AHBLITE_MPU_TABLE_RTC         volatile.Register32 // 0x348
	AHBLITE_MPU_TABLE_IO_MUX      volatile.Register32 // 0x34C
	AHBLITE_MPU_TABLE_WDG         volatile.Register32 // 0x350
	AHBLITE_MPU_TABLE_HINF        volatile.Register32 // 0x354
	AHBLITE_MPU_TABLE_UHCI1       volatile.Register32 // 0x358
	AHBLITE_MPU_TABLE_MISC        volatile.Register32 // 0x35C
	AHBLITE_MPU_TABLE_I2C         volatile.Register32 // 0x360
	AHBLITE_MPU_TABLE_I2S0        volatile.Register32 // 0x364
	AHBLITE_MPU_TABLE_UART1       volatile.Register32 // 0x368
	AHBLITE_MPU_TABLE_BT          volatile.Register32 // 0x36C
	AHBLITE_MPU_TABLE_BT_BUFFER   volatile.Register32 // 0x370
	AHBLITE_MPU_TABLE_I2C_EXT0    volatile.Register32 // 0x374
	AHBLITE_MPU_TABLE_UHCI0       volatile.Register32 // 0x378
	AHBLITE_MPU_TABLE_SLCHOST     volatile.Register32 // 0x37C
	AHBLITE_MPU_TABLE_RMT         volatile.Register32 // 0x380
	AHBLITE_MPU_TABLE_PCNT        volatile.Register32 // 0x384
	AHBLITE_MPU_TABLE_SLC         volatile.Register32 // 0x388
	AHBLITE_MPU_TABLE_LEDC        volatile.Register32 // 0x38C
	AHBLITE_MPU_TABLE_EFUSE       volatile.Register32 // 0x390
	AHBLITE_MPU_TABLE_SPI_ENCRYPT volatile.Register32 // 0x394
	AHBLITE_MPU_TABLE_BB          volatile.Register32 // 0x398
	AHBLITE_MPU_TABLE_PWM0        volatile.Register32 // 0x39C
	AHBLITE_MPU_TABLE_TIMERGROUP  volatile.Register32 // 0x3A0
	AHBLITE_MPU_TABLE_TIMERGROUP1 volatile.Register32 // 0x3A4
	AHBLITE_MPU_TABLE_SPI2        volatile.Register32 // 0x3A8
	AHBLITE_MPU_TABLE_SPI3        volatile.Register32 // 0x3AC
	AHBLITE_MPU_TABLE_APB_CTRL    volatile.Register32 // 0x3B0
	AHBLITE_MPU_TABLE_I2C_EXT1    volatile.Register32 // 0x3B4
	AHBLITE_MPU_TABLE_SDIO_HOST   volatile.Register32 // 0x3B8
	AHBLITE_MPU_TABLE_EMAC        volatile.Register32 // 0x3BC
	AHBLITE_MPU_TABLE_CAN         volatile.Register32 // 0x3C0
	AHBLITE_MPU_TABLE_PWM1        volatile.Register32 // 0x3C4
	AHBLITE_MPU_TABLE_I2S1        volatile.Register32 // 0x3C8
	AHBLITE_MPU_TABLE_UART2       volatile.Register32 // 0x3CC
	AHBLITE_MPU_TABLE_PWM2        volatile.Register32 // 0x3D0
	AHBLITE_MPU_TABLE_PWM3        volatile.Register32 // 0x3D4
	AHBLITE_MPU_TABLE_RWBT        volatile.Register32 // 0x3D8
	AHBLITE_MPU_TABLE_BTMAC       volatile.Register32 // 0x3DC
	AHBLITE_MPU_TABLE_WIFIMAC     volatile.Register32 // 0x3E0
	AHBLITE_MPU_TABLE_PWR         volatile.Register32 // 0x3E4
	MEM_ACCESS_DBUG0              volatile.Register32 // 0x3E8
	MEM_ACCESS_DBUG1              volatile.Register32 // 0x3EC
	PRO_DCACHE_DBUG0              volatile.Register32 // 0x3F0
	PRO_DCACHE_DBUG1              volatile.Register32 // 0x3F4
	PRO_DCACHE_DBUG2              volatile.Register32 // 0x3F8
	PRO_DCACHE_DBUG3              volatile.Register32 // 0x3FC
	PRO_DCACHE_DBUG4              volatile.Register32 // 0x400
	PRO_DCACHE_DBUG5              volatile.Register32 // 0x404
	PRO_DCACHE_DBUG6              volatile.Register32 // 0x408
	PRO_DCACHE_DBUG7              volatile.Register32 // 0x40C
	PRO_DCACHE_DBUG8              volatile.Register32 // 0x410
	PRO_DCACHE_DBUG9              volatile.Register32 // 0x414
	APP_DCACHE_DBUG0              volatile.Register32 // 0x418
	APP_DCACHE_DBUG1              volatile.Register32 // 0x41C
	APP_DCACHE_DBUG2              volatile.Register32 // 0x420
	APP_DCACHE_DBUG3              volatile.Register32 // 0x424
	APP_DCACHE_DBUG4              volatile.Register32 // 0x428
	APP_DCACHE_DBUG5              volatile.Register32 // 0x42C
	APP_DCACHE_DBUG6              volatile.Register32 // 0x430
	APP_DCACHE_DBUG7              volatile.Register32 // 0x434
	APP_DCACHE_DBUG8              volatile.Register32 // 0x438
	APP_DCACHE_DBUG9              volatile.Register32 // 0x43C
	PRO_CPU_RECORD_CTRL           volatile.Register32 // 0x440
	PRO_CPU_RECORD_STATUS         volatile.Register32 // 0x444
	PRO_CPU_RECORD_PID            volatile.Register32 // 0x448
	PRO_CPU_RECORD_PDEBUGINST     volatile.Register32 // 0x44C
	PRO_CPU_RECORD_PDEBUGSTATUS   volatile.Register32 // 0x450
	PRO_CPU_RECORD_PDEBUGDATA     volatile.Register32 // 0x454
	PRO_CPU_RECORD_PDEBUGPC       volatile.Register32 // 0x458
	PRO_CPU_RECORD_PDEBUGLS0STAT  volatile.Register32 // 0x45C
	PRO_CPU_RECORD_PDEBUGLS0ADDR  volatile.Register32 // 0x460
	PRO_CPU_RECORD_PDEBUGLS0DATA  volatile.Register32 // 0x464
	APP_CPU_RECORD_CTRL           volatile.Register32 // 0x468
	APP_CPU_RECORD_STATUS         volatile.Register32 // 0x46C
	APP_CPU_RECORD_PID            volatile.Register32 // 0x470
	APP_CPU_RECORD_PDEBUGINST     volatile.Register32 // 0x474
	APP_CPU_RECORD_PDEBUGSTATUS   volatile.Register32 // 0x478
	APP_CPU_RECORD_PDEBUGDATA     volatile.Register32 // 0x47C
	APP_CPU_RECORD_PDEBUGPC       volatile.Register32 // 0x480
	APP_CPU_RECORD_PDEBUGLS0STAT  volatile.Register32 // 0x484
	APP_CPU_RECORD_PDEBUGLS0ADDR  volatile.Register32 // 0x488
	APP_CPU_RECORD_PDEBUGLS0DATA  volatile.Register32 // 0x48C
	RSA_PD_CTRL                   volatile.Register32 // 0x490
	ROM_MPU_TABLE0                volatile.Register32 // 0x494
	ROM_MPU_TABLE1                volatile.Register32 // 0x498
	ROM_MPU_TABLE2                volatile.Register32 // 0x49C
	ROM_MPU_TABLE3                volatile.Register32 // 0x4A0
	SHROM_MPU_TABLE0              volatile.Register32 // 0x4A4
	SHROM_MPU_TABLE1              volatile.Register32 // 0x4A8
	SHROM_MPU_TABLE2              volatile.Register32 // 0x4AC
	SHROM_MPU_TABLE3              volatile.Register32 // 0x4B0
	SHROM_MPU_TABLE4              volatile.Register32 // 0x4B4
	SHROM_MPU_TABLE5              volatile.Register32 // 0x4B8
	SHROM_MPU_TABLE6              volatile.Register32 // 0x4BC
	SHROM_MPU_TABLE7              volatile.Register32 // 0x4C0
	SHROM_MPU_TABLE8              volatile.Register32 // 0x4C4
	SHROM_MPU_TABLE9              volatile.Register32 // 0x4C8
	SHROM_MPU_TABLE10             volatile.Register32 // 0x4CC
	SHROM_MPU_TABLE11             volatile.Register32 // 0x4D0
	SHROM_MPU_TABLE12             volatile.Register32 // 0x4D4
	SHROM_MPU_TABLE13             volatile.Register32 // 0x4D8
	SHROM_MPU_TABLE14             volatile.Register32 // 0x4DC
	SHROM_MPU_TABLE15             volatile.Register32 // 0x4E0
	SHROM_MPU_TABLE16             volatile.Register32 // 0x4E4
	SHROM_MPU_TABLE17             volatile.Register32 // 0x4E8
	SHROM_MPU_TABLE18             volatile.Register32 // 0x4EC
	SHROM_MPU_TABLE19             volatile.Register32 // 0x4F0
	SHROM_MPU_TABLE20             volatile.Register32 // 0x4F4
	SHROM_MPU_TABLE21             volatile.Register32 // 0x4F8
	SHROM_MPU_TABLE22             volatile.Register32 // 0x4FC
	SHROM_MPU_TABLE23             volatile.Register32 // 0x500
	IMMU_TABLE0                   volatile.Register32 // 0x504
	IMMU_TABLE1                   volatile.Register32 // 0x508
	IMMU_TABLE2                   volatile.Register32 // 0x50C
	IMMU_TABLE3                   volatile.Register32 // 0x510
	IMMU_TABLE4                   volatile.Register32 // 0x514
	IMMU_TABLE5                   volatile.Register32 // 0x518
	IMMU_TABLE6                   volatile.Register32 // 0x51C
	IMMU_TABLE7                   volatile.Register32 // 0x520
	IMMU_TABLE8                   volatile.Register32 // 0x524
	IMMU_TABLE9                   volatile.Register32 // 0x528
	IMMU_TABLE10                  volatile.Register32 // 0x52C
	IMMU_TABLE11                  volatile.Register32 // 0x530
	IMMU_TABLE12                  volatile.Register32 // 0x534
	IMMU_TABLE13                  volatile.Register32 // 0x538
	IMMU_TABLE14                  volatile.Register32 // 0x53C
	IMMU_TABLE15                  volatile.Register32 // 0x540
	DMMU_TABLE0                   volatile.Register32 // 0x544
	DMMU_TABLE1                   volatile.Register32 // 0x548
	DMMU_TABLE2                   volatile.Register32 // 0x54C
	DMMU_TABLE3                   volatile.Register32 // 0x550
	DMMU_TABLE4                   volatile.Register32 // 0x554
	DMMU_TABLE5                   volatile.Register32 // 0x558
	DMMU_TABLE6                   volatile.Register32 // 0x55C
	DMMU_TABLE7                   volatile.Register32 // 0x560
	DMMU_TABLE8                   volatile.Register32 // 0x564
	DMMU_TABLE9                   volatile.Register32 // 0x568
	DMMU_TABLE10                  volatile.Register32 // 0x56C
	DMMU_TABLE11                  volatile.Register32 // 0x570
	DMMU_TABLE12                  volatile.Register32 // 0x574
	DMMU_TABLE13                  volatile.Register32 // 0x578
	DMMU_TABLE14                  volatile.Register32 // 0x57C
	DMMU_TABLE15                  volatile.Register32 // 0x580
	PRO_INTRUSION_CTRL            volatile.Register32 // 0x584
	PRO_INTRUSION_STATUS          volatile.Register32 // 0x588
	APP_INTRUSION_CTRL            volatile.Register32 // 0x58C
	APP_INTRUSION_STATUS          volatile.Register32 // 0x590
	FRONT_END_MEM_PD              volatile.Register32 // 0x594
	MMU_IA_INT_EN                 volatile.Register32 // 0x598
	MPU_IA_INT_EN                 volatile.Register32 // 0x59C
	CACHE_IA_INT_EN               volatile.Register32 // 0x5A0
	SECURE_BOOT_CTRL              volatile.Register32 // 0x5A4
	SPI_DMA_CHAN_SEL              volatile.Register32 // 0x5A8
	PRO_VECBASE_CTRL              volatile.Register32 // 0x5AC
	PRO_VECBASE_SET               volatile.Register32 // 0x5B0
	APP_VECBASE_CTRL              volatile.Register32 // 0x5B4
	APP_VECBASE_SET               volatile.Register32 // 0x5B8
	_                             [2624]byte
	DATE                          volatile.Register32 // 0xFFC
}

// DPORT.PRO_BOOT_REMAP_CTRL: DPORT_PRO_BOOT_REMAP_CTRL
func (o *DPORT_Type) SetPRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BOOT_REMAP_CTRL.Reg, volatile.LoadUint32(&o.PRO_BOOT_REMAP_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BOOT_REMAP_CTRL.Reg) & 0x1
}

// DPORT.APP_BOOT_REMAP_CTRL: DPORT_APP_BOOT_REMAP_CTRL
func (o *DPORT_Type) SetAPP_BOOT_REMAP_CTRL_APP_BOOT_REMAP(value uint32) {
	volatile.StoreUint32(&o.APP_BOOT_REMAP_CTRL.Reg, volatile.LoadUint32(&o.APP_BOOT_REMAP_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_BOOT_REMAP_CTRL_APP_BOOT_REMAP() uint32 {
	return volatile.LoadUint32(&o.APP_BOOT_REMAP_CTRL.Reg) & 0x1
}

// DPORT.ACCESS_CHECK: DPORT_ACCESS_CHECK
func (o *DPORT_Type) SetACCESS_CHECK_ACCESS_CHECK_APP(value uint32) {
	volatile.StoreUint32(&o.ACCESS_CHECK.Reg, volatile.LoadUint32(&o.ACCESS_CHECK.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetACCESS_CHECK_ACCESS_CHECK_APP() uint32 {
	return (volatile.LoadUint32(&o.ACCESS_CHECK.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetACCESS_CHECK_ACCESS_CHECK_PRO(value uint32) {
	volatile.StoreUint32(&o.ACCESS_CHECK.Reg, volatile.LoadUint32(&o.ACCESS_CHECK.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetACCESS_CHECK_ACCESS_CHECK_PRO() uint32 {
	return volatile.LoadUint32(&o.ACCESS_CHECK.Reg) & 0x1
}

// DPORT.PRO_DPORT_APB_MASK0: DPORT_PRO_DPORT_APB_MASK0
func (o *DPORT_Type) SetPRO_DPORT_APB_MASK0(value uint32) {
	volatile.StoreUint32(&o.PRO_DPORT_APB_MASK0.Reg, value)
}
func (o *DPORT_Type) GetPRO_DPORT_APB_MASK0() uint32 {
	return volatile.LoadUint32(&o.PRO_DPORT_APB_MASK0.Reg)
}

// DPORT.PRO_DPORT_APB_MASK1: DPORT_PRO_DPORT_APB_MASK1
func (o *DPORT_Type) SetPRO_DPORT_APB_MASK1(value uint32) {
	volatile.StoreUint32(&o.PRO_DPORT_APB_MASK1.Reg, value)
}
func (o *DPORT_Type) GetPRO_DPORT_APB_MASK1() uint32 {
	return volatile.LoadUint32(&o.PRO_DPORT_APB_MASK1.Reg)
}

// DPORT.APP_DPORT_APB_MASK0: DPORT_APP_DPORT_APB_MASK0
func (o *DPORT_Type) SetAPP_DPORT_APB_MASK0(value uint32) {
	volatile.StoreUint32(&o.APP_DPORT_APB_MASK0.Reg, value)
}
func (o *DPORT_Type) GetAPP_DPORT_APB_MASK0() uint32 {
	return volatile.LoadUint32(&o.APP_DPORT_APB_MASK0.Reg)
}

// DPORT.APP_DPORT_APB_MASK1: DPORT_APP_DPORT_APB_MASK1
func (o *DPORT_Type) SetAPP_DPORT_APB_MASK1(value uint32) {
	volatile.StoreUint32(&o.APP_DPORT_APB_MASK1.Reg, value)
}
func (o *DPORT_Type) GetAPP_DPORT_APB_MASK1() uint32 {
	return volatile.LoadUint32(&o.APP_DPORT_APB_MASK1.Reg)
}

// DPORT.PERI_CLK_EN: DPORT_PERI_CLK_EN
func (o *DPORT_Type) SetPERI_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERI_CLK_EN.Reg, value)
}
func (o *DPORT_Type) GetPERI_CLK_EN() uint32 {
	return volatile.LoadUint32(&o.PERI_CLK_EN.Reg)
}
func (o *DPORT_Type) SetPERI_CLK_EN_DIGITAL_SIGNATURE(value uint32) {
	volatile.StoreUint32(&o.PERI_CLK_EN.Reg, volatile.LoadUint32(&o.PERI_CLK_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPERI_CLK_EN_DIGITAL_SIGNATURE() uint32 {
	return (volatile.LoadUint32(&o.PERI_CLK_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPERI_CLK_EN_SECURE_BOOT(value uint32) {
	volatile.StoreUint32(&o.PERI_CLK_EN.Reg, volatile.LoadUint32(&o.PERI_CLK_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPERI_CLK_EN_SECURE_BOOT() uint32 {
	return (volatile.LoadUint32(&o.PERI_CLK_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPERI_CLK_EN_RSA_ACCELERATOR(value uint32) {
	volatile.StoreUint32(&o.PERI_CLK_EN.Reg, volatile.LoadUint32(&o.PERI_CLK_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPERI_CLK_EN_RSA_ACCELERATOR() uint32 {
	return (volatile.LoadUint32(&o.PERI_CLK_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPERI_CLK_EN_SHA_ACCELERATOR(value uint32) {
	volatile.StoreUint32(&o.PERI_CLK_EN.Reg, volatile.LoadUint32(&o.PERI_CLK_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPERI_CLK_EN_SHA_ACCELERATOR() uint32 {
	return (volatile.LoadUint32(&o.PERI_CLK_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPERI_CLK_EN_AES_ACCELERATOR(value uint32) {
	volatile.StoreUint32(&o.PERI_CLK_EN.Reg, volatile.LoadUint32(&o.PERI_CLK_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPERI_CLK_EN_AES_ACCELERATOR() uint32 {
	return volatile.LoadUint32(&o.PERI_CLK_EN.Reg) & 0x1
}

// DPORT.PERI_RST_EN: DPORT_PERI_RST_EN
func (o *DPORT_Type) SetPERI_RST_EN(value uint32) {
	volatile.StoreUint32(&o.PERI_RST_EN.Reg, value)
}
func (o *DPORT_Type) GetPERI_RST_EN() uint32 {
	return volatile.LoadUint32(&o.PERI_RST_EN.Reg)
}
func (o *DPORT_Type) SetPERI_RST_EN_DIGITAL_SIGNATURE(value uint32) {
	volatile.StoreUint32(&o.PERI_RST_EN.Reg, volatile.LoadUint32(&o.PERI_RST_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPERI_RST_EN_DIGITAL_SIGNATURE() uint32 {
	return (volatile.LoadUint32(&o.PERI_RST_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPERI_RST_EN_SECURE_BOOT(value uint32) {
	volatile.StoreUint32(&o.PERI_RST_EN.Reg, volatile.LoadUint32(&o.PERI_RST_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPERI_RST_EN_SECURE_BOOT() uint32 {
	return (volatile.LoadUint32(&o.PERI_RST_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPERI_RST_EN_RSA_ACCELERATOR(value uint32) {
	volatile.StoreUint32(&o.PERI_RST_EN.Reg, volatile.LoadUint32(&o.PERI_RST_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPERI_RST_EN_RSA_ACCELERATOR() uint32 {
	return (volatile.LoadUint32(&o.PERI_RST_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPERI_RST_EN_SHA_ACCELERATOR(value uint32) {
	volatile.StoreUint32(&o.PERI_RST_EN.Reg, volatile.LoadUint32(&o.PERI_RST_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPERI_RST_EN_SHA_ACCELERATOR() uint32 {
	return (volatile.LoadUint32(&o.PERI_RST_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPERI_RST_EN_AES_ACCELERATOR(value uint32) {
	volatile.StoreUint32(&o.PERI_RST_EN.Reg, volatile.LoadUint32(&o.PERI_RST_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPERI_RST_EN_AES_ACCELERATOR() uint32 {
	return volatile.LoadUint32(&o.PERI_RST_EN.Reg) & 0x1
}

// DPORT.WIFI_BB_CFG: DPORT_WIFI_BB_CFG
func (o *DPORT_Type) SetWIFI_BB_CFG(value uint32) {
	volatile.StoreUint32(&o.WIFI_BB_CFG.Reg, value)
}
func (o *DPORT_Type) GetWIFI_BB_CFG() uint32 {
	return volatile.LoadUint32(&o.WIFI_BB_CFG.Reg)
}

// DPORT.WIFI_BB_CFG_2: DPORT_WIFI_BB_CFG_2
func (o *DPORT_Type) SetWIFI_BB_CFG_2(value uint32) {
	volatile.StoreUint32(&o.WIFI_BB_CFG_2.Reg, value)
}
func (o *DPORT_Type) GetWIFI_BB_CFG_2() uint32 {
	return volatile.LoadUint32(&o.WIFI_BB_CFG_2.Reg)
}

// DPORT.APPCPU_CTRL_A: DPORT_APPCPU_CTRL_A
func (o *DPORT_Type) SetAPPCPU_CTRL_A_APPCPU_RESETTING(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_A.Reg, volatile.LoadUint32(&o.APPCPU_CTRL_A.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_A_APPCPU_RESETTING() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_A.Reg) & 0x1
}

// DPORT.APPCPU_CTRL_B: DPORT_APPCPU_CTRL_B
func (o *DPORT_Type) SetAPPCPU_CTRL_B_APPCPU_CLKGATE_EN(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_B.Reg, volatile.LoadUint32(&o.APPCPU_CTRL_B.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_B_APPCPU_CLKGATE_EN() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_B.Reg) & 0x1
}

// DPORT.APPCPU_CTRL_C: DPORT_APPCPU_CTRL_C
func (o *DPORT_Type) SetAPPCPU_CTRL_C_APPCPU_RUNSTALL(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_C.Reg, volatile.LoadUint32(&o.APPCPU_CTRL_C.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_C_APPCPU_RUNSTALL() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_C.Reg) & 0x1
}

// DPORT.APPCPU_CTRL_D: DPORT_APPCPU_CTRL_D
func (o *DPORT_Type) SetAPPCPU_CTRL_D(value uint32) {
	volatile.StoreUint32(&o.APPCPU_CTRL_D.Reg, value)
}
func (o *DPORT_Type) GetAPPCPU_CTRL_D() uint32 {
	return volatile.LoadUint32(&o.APPCPU_CTRL_D.Reg)
}

// DPORT.CPU_PER_CONF: DPORT_CPU_PER_CONF
func (o *DPORT_Type) SetCPU_PER_CONF_FAST_CLK_RTC_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PER_CONF.Reg, volatile.LoadUint32(&o.CPU_PER_CONF.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetCPU_PER_CONF_FAST_CLK_RTC_SEL() uint32 {
	return (volatile.LoadUint32(&o.CPU_PER_CONF.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetCPU_PER_CONF_LOWSPEED_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PER_CONF.Reg, volatile.LoadUint32(&o.CPU_PER_CONF.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetCPU_PER_CONF_LOWSPEED_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.CPU_PER_CONF.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetCPU_PER_CONF_CPUPERIOD_SEL(value uint32) {
	volatile.StoreUint32(&o.CPU_PER_CONF.Reg, volatile.LoadUint32(&o.CPU_PER_CONF.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetCPU_PER_CONF_CPUPERIOD_SEL() uint32 {
	return volatile.LoadUint32(&o.CPU_PER_CONF.Reg) & 0x3
}

// DPORT.PRO_CACHE_CTRL: DPORT_PRO_CACHE_CTRL
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_DRAM_HL(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_DRAM_HL() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_SLAVE_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_SLAVE_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_AHB_SPI_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_AHB_SPI_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_SLAVE_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_SLAVE_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_AHB_SPI_REQ(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_AHB_SPI_REQ() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_DRAM_SPLIT(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_DRAM_SPLIT() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL_PRO_CACHE_MODE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL_PRO_CACHE_MODE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL.Reg) & 0x4) >> 2
}

// DPORT.PRO_CACHE_CTRL1: DPORT_PRO_CACHE_CTRL1
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_PD(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_PD() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x600)|value<<9)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x600) >> 9
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x1c0)|value<<6)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x1c0) >> 6
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_CTRL1.Reg) & 0x1
}

// DPORT.PRO_CACHE_LOCK_0_ADDR: DPORT_PRO_CACHE_LOCK_0_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_0_ADDR.Reg) & 0x3fff
}

// DPORT.PRO_CACHE_LOCK_1_ADDR: DPORT_PRO_CACHE_LOCK_1_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_1_ADDR.Reg) & 0x3fff
}

// DPORT.PRO_CACHE_LOCK_2_ADDR: DPORT_PRO_CACHE_LOCK_2_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_2_ADDR.Reg) & 0x3fff
}

// DPORT.PRO_CACHE_LOCK_3_ADDR: DPORT_PRO_CACHE_LOCK_3_ADDR
func (o *DPORT_Type) SetPRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetPRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_LOCK_3_ADDR.Reg) & 0x3fff
}

// DPORT.APP_CACHE_CTRL: DPORT_APP_CACHE_CTRL
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_DRAM_HL(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_DRAM_HL() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_SLAVE_REQ(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_SLAVE_REQ() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_AHB_SPI_REQ(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_AHB_SPI_REQ() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_DRAM_SPLIT(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_DRAM_SPLIT() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_SINGLE_IRAM_ENA(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_SINGLE_IRAM_ENA() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_3_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_3_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_2_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_2_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_1_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_1_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_LOCK_0_EN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_LOCK_0_EN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_FLUSH_DONE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_FLUSH_DONE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_FLUSH_ENA(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_FLUSH_ENA() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_ENABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL_APP_CACHE_MODE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL_APP_CACHE_MODE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL.Reg) & 0x4) >> 2
}

// DPORT.APP_CACHE_CTRL1: DPORT_APP_CACHE_CTRL1
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_PD(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_PD() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x600)|value<<9)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x600) >> 9
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x1c0)|value<<6)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x1c0) >> 6
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_DROM0(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_DROM0() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_IROM0(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_IROM0() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_CTRL1.Reg, volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_CTRL1.Reg) & 0x1
}

// DPORT.APP_CACHE_LOCK_0_ADDR: DPORT_APP_CACHE_LOCK_0_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_0_ADDR.Reg) & 0x3fff
}

// DPORT.APP_CACHE_LOCK_1_ADDR: DPORT_APP_CACHE_LOCK_1_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_1_ADDR.Reg) & 0x3fff
}

// DPORT.APP_CACHE_LOCK_2_ADDR: DPORT_APP_CACHE_LOCK_2_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_2_ADDR.Reg) & 0x3fff
}

// DPORT.APP_CACHE_LOCK_3_ADDR: DPORT_APP_CACHE_LOCK_3_ADDR
func (o *DPORT_Type) SetAPP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MAX(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg)&^(0x3c0000)|value<<18)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MAX() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg) & 0x3c0000) >> 18
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MIN(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg)&^(0x3c000)|value<<14)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MIN() uint32 {
	return (volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg) & 0x3c000) >> 14
}
func (o *DPORT_Type) SetAPP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_PRE(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg, volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg)&^(0x3fff)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_PRE() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_LOCK_3_ADDR.Reg) & 0x3fff
}

// DPORT.TRACEMEM_MUX_MODE: DPORT_TRACEMEM_MUX_MODE
func (o *DPORT_Type) SetTRACEMEM_MUX_MODE(value uint32) {
	volatile.StoreUint32(&o.TRACEMEM_MUX_MODE.Reg, volatile.LoadUint32(&o.TRACEMEM_MUX_MODE.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetTRACEMEM_MUX_MODE() uint32 {
	return volatile.LoadUint32(&o.TRACEMEM_MUX_MODE.Reg) & 0x3
}

// DPORT.PRO_TRACEMEM_ENA: DPORT_PRO_TRACEMEM_ENA
func (o *DPORT_Type) SetPRO_TRACEMEM_ENA(value uint32) {
	volatile.StoreUint32(&o.PRO_TRACEMEM_ENA.Reg, volatile.LoadUint32(&o.PRO_TRACEMEM_ENA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_TRACEMEM_ENA() uint32 {
	return volatile.LoadUint32(&o.PRO_TRACEMEM_ENA.Reg) & 0x1
}

// DPORT.APP_TRACEMEM_ENA: DPORT_APP_TRACEMEM_ENA
func (o *DPORT_Type) SetAPP_TRACEMEM_ENA(value uint32) {
	volatile.StoreUint32(&o.APP_TRACEMEM_ENA.Reg, volatile.LoadUint32(&o.APP_TRACEMEM_ENA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_TRACEMEM_ENA() uint32 {
	return volatile.LoadUint32(&o.APP_TRACEMEM_ENA.Reg) & 0x1
}

// DPORT.CACHE_MUX_MODE: DPORT_CACHE_MUX_MODE
func (o *DPORT_Type) SetCACHE_MUX_MODE(value uint32) {
	volatile.StoreUint32(&o.CACHE_MUX_MODE.Reg, volatile.LoadUint32(&o.CACHE_MUX_MODE.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetCACHE_MUX_MODE() uint32 {
	return volatile.LoadUint32(&o.CACHE_MUX_MODE.Reg) & 0x3
}

// DPORT.IMMU_PAGE_MODE: DPORT_IMMU_PAGE_MODE
func (o *DPORT_Type) SetIMMU_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.IMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg)&^(0x6)|value<<1)
}
func (o *DPORT_Type) GetIMMU_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg) & 0x6) >> 1
}
func (o *DPORT_Type) SetIMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA(value uint32) {
	volatile.StoreUint32(&o.IMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetIMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA() uint32 {
	return volatile.LoadUint32(&o.IMMU_PAGE_MODE.Reg) & 0x1
}

// DPORT.DMMU_PAGE_MODE: DPORT_DMMU_PAGE_MODE
func (o *DPORT_Type) SetDMMU_PAGE_MODE(value uint32) {
	volatile.StoreUint32(&o.DMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg)&^(0x6)|value<<1)
}
func (o *DPORT_Type) GetDMMU_PAGE_MODE() uint32 {
	return (volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg) & 0x6) >> 1
}
func (o *DPORT_Type) SetDMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA(value uint32) {
	volatile.StoreUint32(&o.DMMU_PAGE_MODE.Reg, volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetDMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA() uint32 {
	return volatile.LoadUint32(&o.DMMU_PAGE_MODE.Reg) & 0x1
}

// DPORT.ROM_MPU_ENA: DPORT_ROM_MPU_ENA
func (o *DPORT_Type) SetROM_MPU_ENA_APP_ROM_MPU_ENA(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_ENA.Reg, volatile.LoadUint32(&o.ROM_MPU_ENA.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetROM_MPU_ENA_APP_ROM_MPU_ENA() uint32 {
	return (volatile.LoadUint32(&o.ROM_MPU_ENA.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetROM_MPU_ENA_PRO_ROM_MPU_ENA(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_ENA.Reg, volatile.LoadUint32(&o.ROM_MPU_ENA.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetROM_MPU_ENA_PRO_ROM_MPU_ENA() uint32 {
	return (volatile.LoadUint32(&o.ROM_MPU_ENA.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetROM_MPU_ENA_SHARE_ROM_MPU_ENA(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_ENA.Reg, volatile.LoadUint32(&o.ROM_MPU_ENA.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetROM_MPU_ENA_SHARE_ROM_MPU_ENA() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_ENA.Reg) & 0x1
}

// DPORT.MEM_PD_MASK: DPORT_MEM_PD_MASK
func (o *DPORT_Type) SetMEM_PD_MASK_LSLP_MEM_PD_MASK(value uint32) {
	volatile.StoreUint32(&o.MEM_PD_MASK.Reg, volatile.LoadUint32(&o.MEM_PD_MASK.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetMEM_PD_MASK_LSLP_MEM_PD_MASK() uint32 {
	return volatile.LoadUint32(&o.MEM_PD_MASK.Reg) & 0x1
}

// DPORT.ROM_PD_CTRL: DPORT_ROM_PD_CTRL
func (o *DPORT_Type) SetROM_PD_CTRL_SHARE_ROM_PD(value uint32) {
	volatile.StoreUint32(&o.ROM_PD_CTRL.Reg, volatile.LoadUint32(&o.ROM_PD_CTRL.Reg)&^(0xfc)|value<<2)
}
func (o *DPORT_Type) GetROM_PD_CTRL_SHARE_ROM_PD() uint32 {
	return (volatile.LoadUint32(&o.ROM_PD_CTRL.Reg) & 0xfc) >> 2
}
func (o *DPORT_Type) SetROM_PD_CTRL_APP_ROM_PD(value uint32) {
	volatile.StoreUint32(&o.ROM_PD_CTRL.Reg, volatile.LoadUint32(&o.ROM_PD_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetROM_PD_CTRL_APP_ROM_PD() uint32 {
	return (volatile.LoadUint32(&o.ROM_PD_CTRL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetROM_PD_CTRL_PRO_ROM_PD(value uint32) {
	volatile.StoreUint32(&o.ROM_PD_CTRL.Reg, volatile.LoadUint32(&o.ROM_PD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetROM_PD_CTRL_PRO_ROM_PD() uint32 {
	return volatile.LoadUint32(&o.ROM_PD_CTRL.Reg) & 0x1
}

// DPORT.ROM_FO_CTRL: DPORT_ROM_FO_CTRL
func (o *DPORT_Type) SetROM_FO_CTRL_SHARE_ROM_FO(value uint32) {
	volatile.StoreUint32(&o.ROM_FO_CTRL.Reg, volatile.LoadUint32(&o.ROM_FO_CTRL.Reg)&^(0xfc)|value<<2)
}
func (o *DPORT_Type) GetROM_FO_CTRL_SHARE_ROM_FO() uint32 {
	return (volatile.LoadUint32(&o.ROM_FO_CTRL.Reg) & 0xfc) >> 2
}
func (o *DPORT_Type) SetROM_FO_CTRL_APP_ROM_FO(value uint32) {
	volatile.StoreUint32(&o.ROM_FO_CTRL.Reg, volatile.LoadUint32(&o.ROM_FO_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetROM_FO_CTRL_APP_ROM_FO() uint32 {
	return (volatile.LoadUint32(&o.ROM_FO_CTRL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetROM_FO_CTRL_PRO_ROM_FO(value uint32) {
	volatile.StoreUint32(&o.ROM_FO_CTRL.Reg, volatile.LoadUint32(&o.ROM_FO_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetROM_FO_CTRL_PRO_ROM_FO() uint32 {
	return volatile.LoadUint32(&o.ROM_FO_CTRL.Reg) & 0x1
}

// DPORT.SRAM_PD_CTRL_0: DPORT_SRAM_PD_CTRL_0
func (o *DPORT_Type) SetSRAM_PD_CTRL_0(value uint32) {
	volatile.StoreUint32(&o.SRAM_PD_CTRL_0.Reg, value)
}
func (o *DPORT_Type) GetSRAM_PD_CTRL_0() uint32 {
	return volatile.LoadUint32(&o.SRAM_PD_CTRL_0.Reg)
}

// DPORT.SRAM_PD_CTRL_1: DPORT_SRAM_PD_CTRL_1
func (o *DPORT_Type) SetSRAM_PD_CTRL_1_SRAM_PD_1(value uint32) {
	volatile.StoreUint32(&o.SRAM_PD_CTRL_1.Reg, volatile.LoadUint32(&o.SRAM_PD_CTRL_1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetSRAM_PD_CTRL_1_SRAM_PD_1() uint32 {
	return volatile.LoadUint32(&o.SRAM_PD_CTRL_1.Reg) & 0x1
}

// DPORT.SRAM_FO_CTRL_0: DPORT_SRAM_FO_CTRL_0
func (o *DPORT_Type) SetSRAM_FO_CTRL_0(value uint32) {
	volatile.StoreUint32(&o.SRAM_FO_CTRL_0.Reg, value)
}
func (o *DPORT_Type) GetSRAM_FO_CTRL_0() uint32 {
	return volatile.LoadUint32(&o.SRAM_FO_CTRL_0.Reg)
}

// DPORT.SRAM_FO_CTRL_1: DPORT_SRAM_FO_CTRL_1
func (o *DPORT_Type) SetSRAM_FO_CTRL_1_SRAM_FO_1(value uint32) {
	volatile.StoreUint32(&o.SRAM_FO_CTRL_1.Reg, volatile.LoadUint32(&o.SRAM_FO_CTRL_1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetSRAM_FO_CTRL_1_SRAM_FO_1() uint32 {
	return volatile.LoadUint32(&o.SRAM_FO_CTRL_1.Reg) & 0x1
}

// DPORT.IRAM_DRAM_AHB_SEL: DPORT_IRAM_DRAM_AHB_SEL
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MAC_DUMP_MODE(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x60)|value<<5)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MAC_DUMP_MODE() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x60) >> 5
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_AHB(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_AHB() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_APP_DRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_APP_DRAM() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_PRO_DRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_PRO_DRAM() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_APP_IRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_APP_IRAM() uint32 {
	return (volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetIRAM_DRAM_AHB_SEL_MASK_PRO_IRAM(value uint32) {
	volatile.StoreUint32(&o.IRAM_DRAM_AHB_SEL.Reg, volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetIRAM_DRAM_AHB_SEL_MASK_PRO_IRAM() uint32 {
	return volatile.LoadUint32(&o.IRAM_DRAM_AHB_SEL.Reg) & 0x1
}

// DPORT.TAG_FO_CTRL: DPORT_TAG_FO_CTRL
func (o *DPORT_Type) SetTAG_FO_CTRL_APP_CACHE_TAG_PD(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_APP_CACHE_TAG_PD() uint32 {
	return (volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetTAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON() uint32 {
	return (volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetTAG_FO_CTRL_PRO_CACHE_TAG_PD(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_PRO_CACHE_TAG_PD() uint32 {
	return (volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetTAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON(value uint32) {
	volatile.StoreUint32(&o.TAG_FO_CTRL.Reg, volatile.LoadUint32(&o.TAG_FO_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetTAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON() uint32 {
	return volatile.LoadUint32(&o.TAG_FO_CTRL.Reg) & 0x1
}

// DPORT.AHB_LITE_MASK: DPORT_AHB_LITE_MASK
func (o *DPORT_Type) SetAHB_LITE_MASK_AHB_LITE_SDHOST_PID_REG(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x3800)|value<<11)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_AHB_LITE_SDHOST_PID_REG() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x3800) >> 11
}
func (o *DPORT_Type) SetAHB_LITE_MASK_AHB_LITE_MASK_APPDPORT(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_AHB_LITE_MASK_APPDPORT() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetAHB_LITE_MASK_AHB_LITE_MASK_PRODPORT(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_AHB_LITE_MASK_PRODPORT() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetAHB_LITE_MASK_AHB_LITE_MASK_SDIO(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_AHB_LITE_MASK_SDIO() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetAHB_LITE_MASK_AHB_LITE_MASK_APP(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_AHB_LITE_MASK_APP() uint32 {
	return (volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAHB_LITE_MASK_AHB_LITE_MASK_PRO(value uint32) {
	volatile.StoreUint32(&o.AHB_LITE_MASK.Reg, volatile.LoadUint32(&o.AHB_LITE_MASK.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAHB_LITE_MASK_AHB_LITE_MASK_PRO() uint32 {
	return volatile.LoadUint32(&o.AHB_LITE_MASK.Reg) & 0x1
}

// DPORT.AHB_MPU_TABLE_0: DPORT_AHB_MPU_TABLE_0
func (o *DPORT_Type) SetAHB_MPU_TABLE_0(value uint32) {
	volatile.StoreUint32(&o.AHB_MPU_TABLE_0.Reg, value)
}
func (o *DPORT_Type) GetAHB_MPU_TABLE_0() uint32 {
	return volatile.LoadUint32(&o.AHB_MPU_TABLE_0.Reg)
}

// DPORT.AHB_MPU_TABLE_1: DPORT_AHB_MPU_TABLE_1
func (o *DPORT_Type) SetAHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1(value uint32) {
	volatile.StoreUint32(&o.AHB_MPU_TABLE_1.Reg, volatile.LoadUint32(&o.AHB_MPU_TABLE_1.Reg)&^(0x1ff)|value)
}
func (o *DPORT_Type) GetAHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1() uint32 {
	return volatile.LoadUint32(&o.AHB_MPU_TABLE_1.Reg) & 0x1ff
}

// DPORT.HOST_INF_SEL: DPORT_HOST_INF_SEL
func (o *DPORT_Type) SetHOST_INF_SEL_LINK_DEVICE_SEL(value uint32) {
	volatile.StoreUint32(&o.HOST_INF_SEL.Reg, volatile.LoadUint32(&o.HOST_INF_SEL.Reg)&^(0xff00)|value<<8)
}
func (o *DPORT_Type) GetHOST_INF_SEL_LINK_DEVICE_SEL() uint32 {
	return (volatile.LoadUint32(&o.HOST_INF_SEL.Reg) & 0xff00) >> 8
}
func (o *DPORT_Type) SetHOST_INF_SEL_PERI_IO_SWAP(value uint32) {
	volatile.StoreUint32(&o.HOST_INF_SEL.Reg, volatile.LoadUint32(&o.HOST_INF_SEL.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetHOST_INF_SEL_PERI_IO_SWAP() uint32 {
	return volatile.LoadUint32(&o.HOST_INF_SEL.Reg) & 0xff
}

// DPORT.PERIP_CLK_EN: DPORT_PERIP_CLK_EN
func (o *DPORT_Type) SetPERIP_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, value)
}
func (o *DPORT_Type) GetPERIP_CLK_EN() uint32 {
	return volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM3(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x4000000)|value<<26)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM3() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x4000000) >> 26
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM2(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x2000000)|value<<25)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM2() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x2000000) >> 25
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART_MEM(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x1000000)|value<<24)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART_MEM() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x1000000) >> 24
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART2(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART2() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x800000) >> 23
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI_DMA(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI_DMA() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2S1(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2S1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM1(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetPERIP_CLK_EN_CAN(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_CAN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2C1(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x40000)|value<<18)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2C1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x40000) >> 18
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PWM0(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x20000)|value<<17)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PWM0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x20000) >> 17
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI3(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI3() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPERIP_CLK_EN_TIMER_GROUP1(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_TIMER_GROUP1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPERIP_CLK_EN_EFUSE(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_EFUSE() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPERIP_CLK_EN_TIMER_GROUP0(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_TIMER_GROUP0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UHCI1(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UHCI1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPERIP_CLK_EN_LED_PWM(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_LED_PWM() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPERIP_CLK_EN_PULSE_CNT(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_PULSE_CNT() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPERIP_CLK_EN_REMOTE_CONTROLLER(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_REMOTE_CONTROLLER() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UHCI0(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UHCI0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2C0(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2C0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI2(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI2() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART1(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPERIP_CLK_EN_I2S0(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_I2S0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPERIP_CLK_EN_WDG(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_WDG() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPERIP_CLK_EN_UART0(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_UART0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPERIP_CLK_EN_SPI0(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_SPI0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPERIP_CLK_EN_TIMERS(value uint32) {
	volatile.StoreUint32(&o.PERIP_CLK_EN.Reg, volatile.LoadUint32(&o.PERIP_CLK_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPERIP_CLK_EN_TIMERS() uint32 {
	return volatile.LoadUint32(&o.PERIP_CLK_EN.Reg) & 0x1
}

// DPORT.PERIP_RST_EN: DPORT_PERIP_RST_EN
func (o *DPORT_Type) SetPERIP_RST_EN(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, value)
}
func (o *DPORT_Type) GetPERIP_RST_EN() uint32 {
	return volatile.LoadUint32(&o.PERIP_RST_EN.Reg)
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI_DECRYPT_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI_DECRYPT_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI_ENCRYPT_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI_ENCRYPT_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPERIP_RST_EN_SLAVE_SPI_MASK_APP(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SLAVE_SPI_MASK_APP() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPERIP_RST_EN_SLAVE_SPI_MASK_PRO(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SLAVE_SPI_MASK_PRO() uint32 {
	return volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM3(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x4000000)|value<<26)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM3() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x4000000) >> 26
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM2(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x2000000)|value<<25)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM2() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x2000000) >> 25
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART_MEM(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1000000)|value<<24)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART_MEM() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1000000) >> 24
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART2(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART2() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x800000) >> 23
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI_DMA(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI_DMA() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2S1(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2S1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM1(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetPERIP_RST_EN_CAN(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetPERIP_RST_EN_CAN() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2C1(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x40000)|value<<18)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2C1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x40000) >> 18
}
func (o *DPORT_Type) SetPERIP_RST_EN_PWM0(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x20000)|value<<17)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PWM0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x20000) >> 17
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI3(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI3() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetPERIP_RST_EN_TIMER_GROUP1(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPERIP_RST_EN_TIMER_GROUP1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPERIP_RST_EN_EFUSE(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetPERIP_RST_EN_EFUSE() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetPERIP_RST_EN_TIMER_GROUP0(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x2000)|value<<13)
}
func (o *DPORT_Type) GetPERIP_RST_EN_TIMER_GROUP0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x2000) >> 13
}
func (o *DPORT_Type) SetPERIP_RST_EN_UHCI1(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UHCI1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetPERIP_RST_EN_LED_PWM(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x800)|value<<11)
}
func (o *DPORT_Type) GetPERIP_RST_EN_LED_PWM() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x800) >> 11
}
func (o *DPORT_Type) SetPERIP_RST_EN_PULSE_CNT(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetPERIP_RST_EN_PULSE_CNT() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetPERIP_RST_EN_REMOTE_CONTROLLER(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetPERIP_RST_EN_REMOTE_CONTROLLER() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetPERIP_RST_EN_UHCI0(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UHCI0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2C0(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x80)|value<<7)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2C0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x80) >> 7
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI2(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x40)|value<<6)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI2() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x40) >> 6
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART1(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART1() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetPERIP_RST_EN_I2S0(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPERIP_RST_EN_I2S0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPERIP_RST_EN_WDG(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetPERIP_RST_EN_WDG() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetPERIP_RST_EN_UART0(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetPERIP_RST_EN_UART0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetPERIP_RST_EN_SPI0(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetPERIP_RST_EN_SPI0() uint32 {
	return (volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetPERIP_RST_EN_TIMERS(value uint32) {
	volatile.StoreUint32(&o.PERIP_RST_EN.Reg, volatile.LoadUint32(&o.PERIP_RST_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPERIP_RST_EN_TIMERS() uint32 {
	return volatile.LoadUint32(&o.PERIP_RST_EN.Reg) & 0x1
}

// DPORT.WIFI_CLK_EN: DPORT_WIFI_CLK_EN
func (o *DPORT_Type) SetWIFI_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.WIFI_CLK_EN.Reg, value)
}
func (o *DPORT_Type) GetWIFI_CLK_EN() uint32 {
	return volatile.LoadUint32(&o.WIFI_CLK_EN.Reg)
}

// DPORT.CORE_RST_EN: DPORT_CORE_RST_EN
func (o *DPORT_Type) SetCORE_RST_EN(value uint32) {
	volatile.StoreUint32(&o.CORE_RST_EN.Reg, value)
}
func (o *DPORT_Type) GetCORE_RST_EN() uint32 {
	return volatile.LoadUint32(&o.CORE_RST_EN.Reg)
}

// DPORT.BT_LPCK_DIV_INT: DPORT_BT_LPCK_DIV_INT
func (o *DPORT_Type) SetBT_LPCK_DIV_INT_BTEXTWAKEUP_REQ(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_INT.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg)&^(0x1000)|value<<12)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_INT_BTEXTWAKEUP_REQ() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg) & 0x1000) >> 12
}
func (o *DPORT_Type) SetBT_LPCK_DIV_INT_BT_LPCK_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_INT.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg)&^(0xfff)|value)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_INT_BT_LPCK_DIV_NUM() uint32 {
	return volatile.LoadUint32(&o.BT_LPCK_DIV_INT.Reg) & 0xfff
}

// DPORT.BT_LPCK_DIV_FRAC: DPORT_BT_LPCK_DIV_FRAC
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x8000000)|value<<27)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x8000000) >> 27
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x4000000)|value<<26)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x4000000) >> 26
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_8M(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x2000000)|value<<25)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_8M() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x2000000) >> 25
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0x1000000)|value<<24)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0x1000000) >> 24
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_A(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0xfff000)|value<<12)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_A() uint32 {
	return (volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0xfff000) >> 12
}
func (o *DPORT_Type) SetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_B(value uint32) {
	volatile.StoreUint32(&o.BT_LPCK_DIV_FRAC.Reg, volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg)&^(0xfff)|value)
}
func (o *DPORT_Type) GetBT_LPCK_DIV_FRAC_BT_LPCK_DIV_B() uint32 {
	return volatile.LoadUint32(&o.BT_LPCK_DIV_FRAC.Reg) & 0xfff
}

// DPORT.CPU_INTR_FROM_CPU_0: DPORT_CPU_INTR_FROM_CPU_0
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_0(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_0.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_0() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_0.Reg) & 0x1
}

// DPORT.CPU_INTR_FROM_CPU_1: DPORT_CPU_INTR_FROM_CPU_1
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_1(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_1.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_1.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_1() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_1.Reg) & 0x1
}

// DPORT.CPU_INTR_FROM_CPU_2: DPORT_CPU_INTR_FROM_CPU_2
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_2(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_2.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_2.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_2() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_2.Reg) & 0x1
}

// DPORT.CPU_INTR_FROM_CPU_3: DPORT_CPU_INTR_FROM_CPU_3
func (o *DPORT_Type) SetCPU_INTR_FROM_CPU_3(value uint32) {
	volatile.StoreUint32(&o.CPU_INTR_FROM_CPU_3.Reg, volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_3.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCPU_INTR_FROM_CPU_3() uint32 {
	return volatile.LoadUint32(&o.CPU_INTR_FROM_CPU_3.Reg) & 0x1
}

// DPORT.PRO_INTR_STATUS_0: DPORT_PRO_INTR_STATUS_0
func (o *DPORT_Type) SetPRO_INTR_STATUS_0(value uint32) {
	volatile.StoreUint32(&o.PRO_INTR_STATUS_0.Reg, value)
}
func (o *DPORT_Type) GetPRO_INTR_STATUS_0() uint32 {
	return volatile.LoadUint32(&o.PRO_INTR_STATUS_0.Reg)
}

// DPORT.PRO_INTR_STATUS_1: DPORT_PRO_INTR_STATUS_1
func (o *DPORT_Type) SetPRO_INTR_STATUS_1(value uint32) {
	volatile.StoreUint32(&o.PRO_INTR_STATUS_1.Reg, value)
}
func (o *DPORT_Type) GetPRO_INTR_STATUS_1() uint32 {
	return volatile.LoadUint32(&o.PRO_INTR_STATUS_1.Reg)
}

// DPORT.PRO_INTR_STATUS_2: DPORT_PRO_INTR_STATUS_2
func (o *DPORT_Type) SetPRO_INTR_STATUS_2(value uint32) {
	volatile.StoreUint32(&o.PRO_INTR_STATUS_2.Reg, value)
}
func (o *DPORT_Type) GetPRO_INTR_STATUS_2() uint32 {
	return volatile.LoadUint32(&o.PRO_INTR_STATUS_2.Reg)
}

// DPORT.APP_INTR_STATUS_0: DPORT_APP_INTR_STATUS_0
func (o *DPORT_Type) SetAPP_INTR_STATUS_0(value uint32) {
	volatile.StoreUint32(&o.APP_INTR_STATUS_0.Reg, value)
}
func (o *DPORT_Type) GetAPP_INTR_STATUS_0() uint32 {
	return volatile.LoadUint32(&o.APP_INTR_STATUS_0.Reg)
}

// DPORT.APP_INTR_STATUS_1: DPORT_APP_INTR_STATUS_1
func (o *DPORT_Type) SetAPP_INTR_STATUS_1(value uint32) {
	volatile.StoreUint32(&o.APP_INTR_STATUS_1.Reg, value)
}
func (o *DPORT_Type) GetAPP_INTR_STATUS_1() uint32 {
	return volatile.LoadUint32(&o.APP_INTR_STATUS_1.Reg)
}

// DPORT.APP_INTR_STATUS_2: DPORT_APP_INTR_STATUS_2
func (o *DPORT_Type) SetAPP_INTR_STATUS_2(value uint32) {
	volatile.StoreUint32(&o.APP_INTR_STATUS_2.Reg, value)
}
func (o *DPORT_Type) GetAPP_INTR_STATUS_2() uint32 {
	return volatile.LoadUint32(&o.APP_INTR_STATUS_2.Reg)
}

// DPORT.PRO_MAC_INTR_MAP: DPORT_PRO_MAC_INTR_MAP
func (o *DPORT_Type) SetPRO_MAC_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MAC_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_MAC_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MAC_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MAC_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_MAC_NMI_MAP: DPORT_PRO_MAC_NMI_MAP
func (o *DPORT_Type) SetPRO_MAC_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MAC_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_MAC_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MAC_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MAC_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_BB_INT_MAP: DPORT_PRO_BB_INT_MAP
func (o *DPORT_Type) SetPRO_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BB_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_BT_MAC_INT_MAP: DPORT_PRO_BT_MAC_INT_MAP
func (o *DPORT_Type) SetPRO_BT_MAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BT_MAC_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_BT_MAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BT_MAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BT_MAC_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_BT_BB_INT_MAP: DPORT_PRO_BT_BB_INT_MAP
func (o *DPORT_Type) SetPRO_BT_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BT_BB_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_BT_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BT_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BT_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_BT_BB_NMI_MAP: DPORT_PRO_BT_BB_NMI_MAP
func (o *DPORT_Type) SetPRO_BT_BB_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_BT_BB_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_BT_BB_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_BT_BB_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_BT_BB_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBT_IRQ_MAP: DPORT_PRO_RWBT_IRQ_MAP
func (o *DPORT_Type) SetPRO_RWBT_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBT_IRQ_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBT_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBT_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBT_IRQ_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBLE_IRQ_MAP: DPORT_PRO_RWBLE_IRQ_MAP
func (o *DPORT_Type) SetPRO_RWBLE_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBLE_IRQ_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBLE_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBLE_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBLE_IRQ_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBT_NMI_MAP: DPORT_PRO_RWBT_NMI_MAP
func (o *DPORT_Type) SetPRO_RWBT_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBT_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBT_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBT_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_RWBLE_NMI_MAP: DPORT_PRO_RWBLE_NMI_MAP
func (o *DPORT_Type) SetPRO_RWBLE_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RWBLE_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_RWBLE_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RWBLE_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RWBLE_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_SLC0_INTR_MAP: DPORT_PRO_SLC0_INTR_MAP
func (o *DPORT_Type) SetPRO_SLC0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SLC0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_SLC0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SLC0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SLC0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_SLC1_INTR_MAP: DPORT_PRO_SLC1_INTR_MAP
func (o *DPORT_Type) SetPRO_SLC1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SLC1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_SLC1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SLC1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SLC1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UHCI0_INTR_MAP: DPORT_PRO_UHCI0_INTR_MAP
func (o *DPORT_Type) SetPRO_UHCI0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UHCI0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UHCI0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UHCI0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UHCI0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UHCI1_INTR_MAP: DPORT_PRO_UHCI1_INTR_MAP
func (o *DPORT_Type) SetPRO_UHCI1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UHCI1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UHCI1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UHCI1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UHCI1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T0_LEVEL_INT_MAP: DPORT_PRO_TG_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T1_LEVEL_INT_MAP: DPORT_PRO_TG_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_WDT_LEVEL_INT_MAP: DPORT_PRO_TG_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_LACT_LEVEL_INT_MAP: DPORT_PRO_TG_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T0_LEVEL_INT_MAP: DPORT_PRO_TG1_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T1_LEVEL_INT_MAP: DPORT_PRO_TG1_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_WDT_LEVEL_INT_MAP: DPORT_PRO_TG1_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_LACT_LEVEL_INT_MAP: DPORT_PRO_TG1_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_GPIO_INTERRUPT_MAP: DPORT_PRO_GPIO_INTERRUPT_MAP
func (o *DPORT_Type) SetPRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_GPIO_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.PRO_GPIO_INTERRUPT_NMI_MAP: DPORT_PRO_GPIO_INTERRUPT_NMI_MAP
func (o *DPORT_Type) SetPRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_GPIO_INTERRUPT_NMI_MAP.Reg, volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_GPIO_INTERRUPT_NMI_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_0_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_0_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_0_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_0_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_0_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_0_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_1_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_1_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_1_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_1_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_1_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_1_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_2_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_2_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_2_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_2_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_2_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_2_MAP.Reg) & 0x1f
}

// DPORT.PRO_CPU_INTR_FROM_CPU_3_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_3_MAP
func (o *DPORT_Type) SetPRO_CPU_INTR_FROM_CPU_3_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_INTR_FROM_CPU_3_MAP.Reg, volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CPU_INTR_FROM_CPU_3_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_INTR_FROM_CPU_3_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_0_MAP: DPORT_PRO_SPI_INTR_0_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_0_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_0_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_0_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_0_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_1_MAP: DPORT_PRO_SPI_INTR_1_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_1_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_1_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_1_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_1_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_2_MAP: DPORT_PRO_SPI_INTR_2_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_2_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_2_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_2_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_2_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI_INTR_3_MAP: DPORT_PRO_SPI_INTR_3_MAP
func (o *DPORT_Type) SetPRO_SPI_INTR_3_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI_INTR_3_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI_INTR_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI_INTR_3_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI_INTR_3_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2S0_INT_MAP: DPORT_PRO_I2S0_INT_MAP
func (o *DPORT_Type) SetPRO_I2S0_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2S0_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_I2S0_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2S0_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2S0_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2S1_INT_MAP: DPORT_PRO_I2S1_INT_MAP
func (o *DPORT_Type) SetPRO_I2S1_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2S1_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_I2S1_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2S1_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2S1_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_UART_INTR_MAP: DPORT_PRO_UART_INTR_MAP
func (o *DPORT_Type) SetPRO_UART_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UART_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UART_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UART_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UART_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UART1_INTR_MAP: DPORT_PRO_UART1_INTR_MAP
func (o *DPORT_Type) SetPRO_UART1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UART1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UART1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UART1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UART1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_UART2_INTR_MAP: DPORT_PRO_UART2_INTR_MAP
func (o *DPORT_Type) SetPRO_UART2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_UART2_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_UART2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_UART2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_UART2_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_SDIO_HOST_INTERRUPT_MAP: DPORT_PRO_SDIO_HOST_INTERRUPT_MAP
func (o *DPORT_Type) SetPRO_SDIO_HOST_INTERRUPT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SDIO_HOST_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.PRO_SDIO_HOST_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SDIO_HOST_INTERRUPT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SDIO_HOST_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.PRO_EMAC_INT_MAP: DPORT_PRO_EMAC_INT_MAP
func (o *DPORT_Type) SetPRO_EMAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_EMAC_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_EMAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_EMAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_EMAC_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM0_INTR_MAP: DPORT_PRO_PWM0_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM1_INTR_MAP: DPORT_PRO_PWM1_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM2_INTR_MAP: DPORT_PRO_PWM2_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM2_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM2_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PWM3_INTR_MAP: DPORT_PRO_PWM3_INTR_MAP
func (o *DPORT_Type) SetPRO_PWM3_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PWM3_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PWM3_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PWM3_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PWM3_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_LEDC_INT_MAP: DPORT_PRO_LEDC_INT_MAP
func (o *DPORT_Type) SetPRO_LEDC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_LEDC_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_LEDC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_LEDC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_LEDC_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_EFUSE_INT_MAP: DPORT_PRO_EFUSE_INT_MAP
func (o *DPORT_Type) SetPRO_EFUSE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_EFUSE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_EFUSE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_EFUSE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_EFUSE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_CAN_INT_MAP: DPORT_PRO_CAN_INT_MAP
func (o *DPORT_Type) SetPRO_CAN_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CAN_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_CAN_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CAN_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CAN_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_RTC_CORE_INTR_MAP: DPORT_PRO_RTC_CORE_INTR_MAP
func (o *DPORT_Type) SetPRO_RTC_CORE_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RTC_CORE_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_RTC_CORE_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RTC_CORE_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RTC_CORE_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_RMT_INTR_MAP: DPORT_PRO_RMT_INTR_MAP
func (o *DPORT_Type) SetPRO_RMT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RMT_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_RMT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RMT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RMT_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_PCNT_INTR_MAP: DPORT_PRO_PCNT_INTR_MAP
func (o *DPORT_Type) SetPRO_PCNT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_PCNT_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_PCNT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_PCNT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_PCNT_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2C_EXT0_INTR_MAP: DPORT_PRO_I2C_EXT0_INTR_MAP
func (o *DPORT_Type) SetPRO_I2C_EXT0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2C_EXT0_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_I2C_EXT0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2C_EXT0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2C_EXT0_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_I2C_EXT1_INTR_MAP: DPORT_PRO_I2C_EXT1_INTR_MAP
func (o *DPORT_Type) SetPRO_I2C_EXT1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_I2C_EXT1_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_I2C_EXT1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_I2C_EXT1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_I2C_EXT1_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_RSA_INTR_MAP: DPORT_PRO_RSA_INTR_MAP
func (o *DPORT_Type) SetPRO_RSA_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_RSA_INTR_MAP.Reg, volatile.LoadUint32(&o.PRO_RSA_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_RSA_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_RSA_INTR_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI1_DMA_INT_MAP: DPORT_PRO_SPI1_DMA_INT_MAP
func (o *DPORT_Type) SetPRO_SPI1_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI1_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI1_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI1_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI1_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI2_DMA_INT_MAP: DPORT_PRO_SPI2_DMA_INT_MAP
func (o *DPORT_Type) SetPRO_SPI2_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI2_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI2_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI2_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI2_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_SPI3_DMA_INT_MAP: DPORT_PRO_SPI3_DMA_INT_MAP
func (o *DPORT_Type) SetPRO_SPI3_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_SPI3_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_SPI3_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_SPI3_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_SPI3_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_WDG_INT_MAP: DPORT_PRO_WDG_INT_MAP
func (o *DPORT_Type) SetPRO_WDG_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_WDG_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_WDG_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_WDG_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_WDG_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TIMER_INT1_MAP: DPORT_PRO_TIMER_INT1_MAP
func (o *DPORT_Type) SetPRO_TIMER_INT1_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TIMER_INT1_MAP.Reg, volatile.LoadUint32(&o.PRO_TIMER_INT1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TIMER_INT1_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TIMER_INT1_MAP.Reg) & 0x1f
}

// DPORT.PRO_TIMER_INT2_MAP: DPORT_PRO_TIMER_INT2_MAP
func (o *DPORT_Type) SetPRO_TIMER_INT2_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TIMER_INT2_MAP.Reg, volatile.LoadUint32(&o.PRO_TIMER_INT2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TIMER_INT2_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TIMER_INT2_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T0_EDGE_INT_MAP: DPORT_PRO_TG_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_T1_EDGE_INT_MAP: DPORT_PRO_TG_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_WDT_EDGE_INT_MAP: DPORT_PRO_TG_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG_LACT_EDGE_INT_MAP: DPORT_PRO_TG_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T0_EDGE_INT_MAP: DPORT_PRO_TG1_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_T1_EDGE_INT_MAP: DPORT_PRO_TG1_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_WDT_EDGE_INT_MAP: DPORT_PRO_TG1_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_TG1_LACT_EDGE_INT_MAP: DPORT_PRO_TG1_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetPRO_TG1_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_TG1_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_TG1_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_TG1_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_TG1_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_MMU_IA_INT_MAP: DPORT_PRO_MMU_IA_INT_MAP
func (o *DPORT_Type) SetPRO_MMU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MMU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_MMU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MMU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MMU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_MPU_IA_INT_MAP: DPORT_PRO_MPU_IA_INT_MAP
func (o *DPORT_Type) SetPRO_MPU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_MPU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_MPU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_MPU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_MPU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.PRO_CACHE_IA_INT_MAP: DPORT_PRO_CACHE_IA_INT_MAP
func (o *DPORT_Type) SetPRO_CACHE_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.PRO_CACHE_IA_INT_MAP.Reg, volatile.LoadUint32(&o.PRO_CACHE_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetPRO_CACHE_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.PRO_CACHE_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_MAC_INTR_MAP: DPORT_APP_MAC_INTR_MAP
func (o *DPORT_Type) SetAPP_MAC_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MAC_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_MAC_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MAC_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MAC_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_MAC_NMI_MAP: DPORT_APP_MAC_NMI_MAP
func (o *DPORT_Type) SetAPP_MAC_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MAC_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_MAC_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MAC_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MAC_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_BB_INT_MAP: DPORT_APP_BB_INT_MAP
func (o *DPORT_Type) SetAPP_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BB_INT_MAP.Reg, volatile.LoadUint32(&o.APP_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_BT_MAC_INT_MAP: DPORT_APP_BT_MAC_INT_MAP
func (o *DPORT_Type) SetAPP_BT_MAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BT_MAC_INT_MAP.Reg, volatile.LoadUint32(&o.APP_BT_MAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BT_MAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BT_MAC_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_BT_BB_INT_MAP: DPORT_APP_BT_BB_INT_MAP
func (o *DPORT_Type) SetAPP_BT_BB_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BT_BB_INT_MAP.Reg, volatile.LoadUint32(&o.APP_BT_BB_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BT_BB_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BT_BB_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_BT_BB_NMI_MAP: DPORT_APP_BT_BB_NMI_MAP
func (o *DPORT_Type) SetAPP_BT_BB_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_BT_BB_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_BT_BB_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_BT_BB_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_BT_BB_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBT_IRQ_MAP: DPORT_APP_RWBT_IRQ_MAP
func (o *DPORT_Type) SetAPP_RWBT_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBT_IRQ_MAP.Reg, volatile.LoadUint32(&o.APP_RWBT_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBT_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBT_IRQ_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBLE_IRQ_MAP: DPORT_APP_RWBLE_IRQ_MAP
func (o *DPORT_Type) SetAPP_RWBLE_IRQ_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBLE_IRQ_MAP.Reg, volatile.LoadUint32(&o.APP_RWBLE_IRQ_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBLE_IRQ_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBLE_IRQ_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBT_NMI_MAP: DPORT_APP_RWBT_NMI_MAP
func (o *DPORT_Type) SetAPP_RWBT_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBT_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_RWBT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBT_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBT_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_RWBLE_NMI_MAP: DPORT_APP_RWBLE_NMI_MAP
func (o *DPORT_Type) SetAPP_RWBLE_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RWBLE_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_RWBLE_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RWBLE_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RWBLE_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_SLC0_INTR_MAP: DPORT_APP_SLC0_INTR_MAP
func (o *DPORT_Type) SetAPP_SLC0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SLC0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_SLC0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SLC0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SLC0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_SLC1_INTR_MAP: DPORT_APP_SLC1_INTR_MAP
func (o *DPORT_Type) SetAPP_SLC1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SLC1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_SLC1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SLC1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SLC1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UHCI0_INTR_MAP: DPORT_APP_UHCI0_INTR_MAP
func (o *DPORT_Type) SetAPP_UHCI0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UHCI0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UHCI0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UHCI0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UHCI0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UHCI1_INTR_MAP: DPORT_APP_UHCI1_INTR_MAP
func (o *DPORT_Type) SetAPP_UHCI1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UHCI1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UHCI1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UHCI1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UHCI1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T0_LEVEL_INT_MAP: DPORT_APP_TG_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T1_LEVEL_INT_MAP: DPORT_APP_TG_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_WDT_LEVEL_INT_MAP: DPORT_APP_TG_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_LACT_LEVEL_INT_MAP: DPORT_APP_TG_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T0_LEVEL_INT_MAP: DPORT_APP_TG1_T0_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T0_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T0_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T0_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T0_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T0_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T1_LEVEL_INT_MAP: DPORT_APP_TG1_T1_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T1_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T1_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T1_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T1_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T1_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_WDT_LEVEL_INT_MAP: DPORT_APP_TG1_WDT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_WDT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_WDT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_WDT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_WDT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_WDT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_LACT_LEVEL_INT_MAP: DPORT_APP_TG1_LACT_LEVEL_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_LACT_LEVEL_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_LACT_LEVEL_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_LACT_LEVEL_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_LACT_LEVEL_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_LACT_LEVEL_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_GPIO_INTERRUPT_MAP: DPORT_APP_GPIO_INTERRUPT_MAP
func (o *DPORT_Type) SetAPP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_GPIO_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.APP_GPIO_INTERRUPT_NMI_MAP: DPORT_APP_GPIO_INTERRUPT_NMI_MAP
func (o *DPORT_Type) SetAPP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_GPIO_INTERRUPT_NMI_MAP.Reg, volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_NMI_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_GPIO_INTERRUPT_NMI_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_0_MAP: DPORT_APP_CPU_INTR_FROM_CPU_0_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_0_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_0_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_0_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_0_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_1_MAP: DPORT_APP_CPU_INTR_FROM_CPU_1_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_1_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_1_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_1_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_1_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_2_MAP: DPORT_APP_CPU_INTR_FROM_CPU_2_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_2_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_2_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_2_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_2_MAP.Reg) & 0x1f
}

// DPORT.APP_CPU_INTR_FROM_CPU_3_MAP: DPORT_APP_CPU_INTR_FROM_CPU_3_MAP
func (o *DPORT_Type) SetAPP_CPU_INTR_FROM_CPU_3_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_INTR_FROM_CPU_3_MAP.Reg, volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CPU_INTR_FROM_CPU_3_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_INTR_FROM_CPU_3_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_0_MAP: DPORT_APP_SPI_INTR_0_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_0_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_0_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_0_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_0_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_0_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_1_MAP: DPORT_APP_SPI_INTR_1_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_1_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_1_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_1_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_1_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_2_MAP: DPORT_APP_SPI_INTR_2_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_2_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_2_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_2_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_2_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI_INTR_3_MAP: DPORT_APP_SPI_INTR_3_MAP
func (o *DPORT_Type) SetAPP_SPI_INTR_3_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI_INTR_3_MAP.Reg, volatile.LoadUint32(&o.APP_SPI_INTR_3_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI_INTR_3_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI_INTR_3_MAP.Reg) & 0x1f
}

// DPORT.APP_I2S0_INT_MAP: DPORT_APP_I2S0_INT_MAP
func (o *DPORT_Type) SetAPP_I2S0_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2S0_INT_MAP.Reg, volatile.LoadUint32(&o.APP_I2S0_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2S0_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2S0_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_I2S1_INT_MAP: DPORT_APP_I2S1_INT_MAP
func (o *DPORT_Type) SetAPP_I2S1_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2S1_INT_MAP.Reg, volatile.LoadUint32(&o.APP_I2S1_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2S1_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2S1_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_UART_INTR_MAP: DPORT_APP_UART_INTR_MAP
func (o *DPORT_Type) SetAPP_UART_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UART_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UART_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UART_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UART_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UART1_INTR_MAP: DPORT_APP_UART1_INTR_MAP
func (o *DPORT_Type) SetAPP_UART1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UART1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UART1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UART1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UART1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_UART2_INTR_MAP: DPORT_APP_UART2_INTR_MAP
func (o *DPORT_Type) SetAPP_UART2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_UART2_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_UART2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_UART2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_UART2_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_SDIO_HOST_INTERRUPT_MAP: DPORT_APP_SDIO_HOST_INTERRUPT_MAP
func (o *DPORT_Type) SetAPP_SDIO_HOST_INTERRUPT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SDIO_HOST_INTERRUPT_MAP.Reg, volatile.LoadUint32(&o.APP_SDIO_HOST_INTERRUPT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SDIO_HOST_INTERRUPT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SDIO_HOST_INTERRUPT_MAP.Reg) & 0x1f
}

// DPORT.APP_EMAC_INT_MAP: DPORT_APP_EMAC_INT_MAP
func (o *DPORT_Type) SetAPP_EMAC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_EMAC_INT_MAP.Reg, volatile.LoadUint32(&o.APP_EMAC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_EMAC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_EMAC_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM0_INTR_MAP: DPORT_APP_PWM0_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM1_INTR_MAP: DPORT_APP_PWM1_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM2_INTR_MAP: DPORT_APP_PWM2_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM2_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM2_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM2_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM2_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM2_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PWM3_INTR_MAP: DPORT_APP_PWM3_INTR_MAP
func (o *DPORT_Type) SetAPP_PWM3_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PWM3_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PWM3_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PWM3_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PWM3_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_LEDC_INT_MAP: DPORT_APP_LEDC_INT_MAP
func (o *DPORT_Type) SetAPP_LEDC_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_LEDC_INT_MAP.Reg, volatile.LoadUint32(&o.APP_LEDC_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_LEDC_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_LEDC_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_EFUSE_INT_MAP: DPORT_APP_EFUSE_INT_MAP
func (o *DPORT_Type) SetAPP_EFUSE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_EFUSE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_EFUSE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_EFUSE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_EFUSE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_CAN_INT_MAP: DPORT_APP_CAN_INT_MAP
func (o *DPORT_Type) SetAPP_CAN_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CAN_INT_MAP.Reg, volatile.LoadUint32(&o.APP_CAN_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CAN_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CAN_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_RTC_CORE_INTR_MAP: DPORT_APP_RTC_CORE_INTR_MAP
func (o *DPORT_Type) SetAPP_RTC_CORE_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RTC_CORE_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_RTC_CORE_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RTC_CORE_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RTC_CORE_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_RMT_INTR_MAP: DPORT_APP_RMT_INTR_MAP
func (o *DPORT_Type) SetAPP_RMT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RMT_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_RMT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RMT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RMT_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_PCNT_INTR_MAP: DPORT_APP_PCNT_INTR_MAP
func (o *DPORT_Type) SetAPP_PCNT_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_PCNT_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_PCNT_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_PCNT_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_PCNT_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_I2C_EXT0_INTR_MAP: DPORT_APP_I2C_EXT0_INTR_MAP
func (o *DPORT_Type) SetAPP_I2C_EXT0_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2C_EXT0_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_I2C_EXT0_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2C_EXT0_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2C_EXT0_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_I2C_EXT1_INTR_MAP: DPORT_APP_I2C_EXT1_INTR_MAP
func (o *DPORT_Type) SetAPP_I2C_EXT1_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_I2C_EXT1_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_I2C_EXT1_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_I2C_EXT1_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_I2C_EXT1_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_RSA_INTR_MAP: DPORT_APP_RSA_INTR_MAP
func (o *DPORT_Type) SetAPP_RSA_INTR_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_RSA_INTR_MAP.Reg, volatile.LoadUint32(&o.APP_RSA_INTR_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_RSA_INTR_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_RSA_INTR_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI1_DMA_INT_MAP: DPORT_APP_SPI1_DMA_INT_MAP
func (o *DPORT_Type) SetAPP_SPI1_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI1_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_SPI1_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI1_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI1_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI2_DMA_INT_MAP: DPORT_APP_SPI2_DMA_INT_MAP
func (o *DPORT_Type) SetAPP_SPI2_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI2_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_SPI2_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI2_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI2_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_SPI3_DMA_INT_MAP: DPORT_APP_SPI3_DMA_INT_MAP
func (o *DPORT_Type) SetAPP_SPI3_DMA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_SPI3_DMA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_SPI3_DMA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_SPI3_DMA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_SPI3_DMA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_WDG_INT_MAP: DPORT_APP_WDG_INT_MAP
func (o *DPORT_Type) SetAPP_WDG_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_WDG_INT_MAP.Reg, volatile.LoadUint32(&o.APP_WDG_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_WDG_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_WDG_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TIMER_INT1_MAP: DPORT_APP_TIMER_INT1_MAP
func (o *DPORT_Type) SetAPP_TIMER_INT1_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TIMER_INT1_MAP.Reg, volatile.LoadUint32(&o.APP_TIMER_INT1_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TIMER_INT1_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TIMER_INT1_MAP.Reg) & 0x1f
}

// DPORT.APP_TIMER_INT2_MAP: DPORT_APP_TIMER_INT2_MAP
func (o *DPORT_Type) SetAPP_TIMER_INT2_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TIMER_INT2_MAP.Reg, volatile.LoadUint32(&o.APP_TIMER_INT2_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TIMER_INT2_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TIMER_INT2_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T0_EDGE_INT_MAP: DPORT_APP_TG_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_T1_EDGE_INT_MAP: DPORT_APP_TG_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_WDT_EDGE_INT_MAP: DPORT_APP_TG_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG_LACT_EDGE_INT_MAP: DPORT_APP_TG_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T0_EDGE_INT_MAP: DPORT_APP_TG1_T0_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T0_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T0_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T0_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T0_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T0_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_T1_EDGE_INT_MAP: DPORT_APP_TG1_T1_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_T1_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_T1_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_T1_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_T1_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_T1_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_WDT_EDGE_INT_MAP: DPORT_APP_TG1_WDT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_WDT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_WDT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_WDT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_WDT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_WDT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_TG1_LACT_EDGE_INT_MAP: DPORT_APP_TG1_LACT_EDGE_INT_MAP
func (o *DPORT_Type) SetAPP_TG1_LACT_EDGE_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_TG1_LACT_EDGE_INT_MAP.Reg, volatile.LoadUint32(&o.APP_TG1_LACT_EDGE_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_TG1_LACT_EDGE_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_TG1_LACT_EDGE_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_MMU_IA_INT_MAP: DPORT_APP_MMU_IA_INT_MAP
func (o *DPORT_Type) SetAPP_MMU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MMU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_MMU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MMU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MMU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_MPU_IA_INT_MAP: DPORT_APP_MPU_IA_INT_MAP
func (o *DPORT_Type) SetAPP_MPU_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_MPU_IA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_MPU_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_MPU_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_MPU_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.APP_CACHE_IA_INT_MAP: DPORT_APP_CACHE_IA_INT_MAP
func (o *DPORT_Type) SetAPP_CACHE_IA_INT_MAP(value uint32) {
	volatile.StoreUint32(&o.APP_CACHE_IA_INT_MAP.Reg, volatile.LoadUint32(&o.APP_CACHE_IA_INT_MAP.Reg)&^(0x1f)|value)
}
func (o *DPORT_Type) GetAPP_CACHE_IA_INT_MAP() uint32 {
	return volatile.LoadUint32(&o.APP_CACHE_IA_INT_MAP.Reg) & 0x1f
}

// DPORT.AHBLITE_MPU_TABLE_UART: DPORT_AHBLITE_MPU_TABLE_UART
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UART.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI1: DPORT_AHBLITE_MPU_TABLE_SPI1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI0: DPORT_AHBLITE_MPU_TABLE_SPI0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_GPIO: DPORT_AHBLITE_MPU_TABLE_GPIO
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_GPIO.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_GPIO.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_GPIO.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_FE2: DPORT_AHBLITE_MPU_TABLE_FE2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_FE2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_FE: DPORT_AHBLITE_MPU_TABLE_FE
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_FE.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_FE.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_TIMER: DPORT_AHBLITE_MPU_TABLE_TIMER
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_TIMER.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMER.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMER.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_RTC: DPORT_AHBLITE_MPU_TABLE_RTC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_RTC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RTC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RTC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_IO_MUX: DPORT_AHBLITE_MPU_TABLE_IO_MUX
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_IO_MUX.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_IO_MUX.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_IO_MUX.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_WDG: DPORT_AHBLITE_MPU_TABLE_WDG
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_WDG.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WDG.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WDG.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_HINF: DPORT_AHBLITE_MPU_TABLE_HINF
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_HINF.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_HINF.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_HINF.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UHCI1: DPORT_AHBLITE_MPU_TABLE_UHCI1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UHCI1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_MISC: DPORT_AHBLITE_MPU_TABLE_MISC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_MISC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_MISC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_MISC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2C: DPORT_AHBLITE_MPU_TABLE_I2C
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2C.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2S0: DPORT_AHBLITE_MPU_TABLE_I2S0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2S0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UART1: DPORT_AHBLITE_MPU_TABLE_UART1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UART1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BT: DPORT_AHBLITE_MPU_TABLE_BT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BT_BUFFER: DPORT_AHBLITE_MPU_TABLE_BT_BUFFER
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BT_BUFFER.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT_BUFFER.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BT_BUFFER.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2C_EXT0: DPORT_AHBLITE_MPU_TABLE_I2C_EXT0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UHCI0: DPORT_AHBLITE_MPU_TABLE_UHCI0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UHCI0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UHCI0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SLCHOST: DPORT_AHBLITE_MPU_TABLE_SLCHOST
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SLCHOST.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLCHOST.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLCHOST.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_RMT: DPORT_AHBLITE_MPU_TABLE_RMT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_RMT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RMT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RMT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PCNT: DPORT_AHBLITE_MPU_TABLE_PCNT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PCNT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PCNT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PCNT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SLC: DPORT_AHBLITE_MPU_TABLE_SLC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SLC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SLC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_LEDC: DPORT_AHBLITE_MPU_TABLE_LEDC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_LEDC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_LEDC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_LEDC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_EFUSE: DPORT_AHBLITE_MPU_TABLE_EFUSE
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_EFUSE.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EFUSE.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EFUSE.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI_ENCRYPT: DPORT_AHBLITE_MPU_TABLE_SPI_ENCRYPT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI_ENCRYPT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI_ENCRYPT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI_ENCRYPT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BB: DPORT_AHBLITE_MPU_TABLE_BB
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BB.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BB.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BB.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM0: DPORT_AHBLITE_MPU_TABLE_PWM0
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM0.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM0.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM0.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_TIMERGROUP: DPORT_AHBLITE_MPU_TABLE_TIMERGROUP
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_TIMERGROUP1: DPORT_AHBLITE_MPU_TABLE_TIMERGROUP1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_TIMERGROUP1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI2: DPORT_AHBLITE_MPU_TABLE_SPI2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SPI3: DPORT_AHBLITE_MPU_TABLE_SPI3
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SPI3.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI3.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SPI3.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_APB_CTRL: DPORT_AHBLITE_MPU_TABLE_APB_CTRL
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_APB_CTRL.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_APB_CTRL.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_APB_CTRL.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2C_EXT1: DPORT_AHBLITE_MPU_TABLE_I2C_EXT1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2C_EXT1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_SDIO_HOST: DPORT_AHBLITE_MPU_TABLE_SDIO_HOST
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_SDIO_HOST.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SDIO_HOST.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_SDIO_HOST.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_EMAC: DPORT_AHBLITE_MPU_TABLE_EMAC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_EMAC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EMAC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_EMAC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_CAN: DPORT_AHBLITE_MPU_TABLE_CAN
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_CAN.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_CAN.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_CAN.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM1: DPORT_AHBLITE_MPU_TABLE_PWM1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_I2S1: DPORT_AHBLITE_MPU_TABLE_I2S1
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_I2S1.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S1.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_I2S1.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_UART2: DPORT_AHBLITE_MPU_TABLE_UART2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_UART2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_UART2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM2: DPORT_AHBLITE_MPU_TABLE_PWM2
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM2.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM2.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM2.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWM3: DPORT_AHBLITE_MPU_TABLE_PWM3
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWM3.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM3.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWM3.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_RWBT: DPORT_AHBLITE_MPU_TABLE_RWBT
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_RWBT.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RWBT.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_RWBT.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_BTMAC: DPORT_AHBLITE_MPU_TABLE_BTMAC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_BTMAC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BTMAC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_BTMAC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_WIFIMAC: DPORT_AHBLITE_MPU_TABLE_WIFIMAC
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_WIFIMAC.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WIFIMAC.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_WIFIMAC.Reg) & 0x3f
}

// DPORT.AHBLITE_MPU_TABLE_PWR: DPORT_AHBLITE_MPU_TABLE_PWR
func (o *DPORT_Type) SetAHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG(value uint32) {
	volatile.StoreUint32(&o.AHBLITE_MPU_TABLE_PWR.Reg, volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWR.Reg)&^(0x3f)|value)
}
func (o *DPORT_Type) GetAHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG() uint32 {
	return volatile.LoadUint32(&o.AHBLITE_MPU_TABLE_PWR.Reg) & 0x3f
}

// DPORT.MEM_ACCESS_DBUG0: DPORT_MEM_ACCESS_DBUG0
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3c000000)|value<<26)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3c000000) >> 26
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_INTERNAL_SRAM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3ffc000)|value<<14)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_INTERNAL_SRAM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3ffc000) >> 14
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3c00)|value<<10)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3c00) >> 10
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_SHARE_ROM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x3c0)|value<<6)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_SHARE_ROM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x3c0) >> 6
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x30)|value<<4)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x30) >> 4
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_APP_ROM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_APP_ROM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_APP_ROM_MPU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_APP_ROM_MPU_AD() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_PRO_ROM_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_PRO_ROM_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG0_PRO_ROM_MPU_AD(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG0.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG0_PRO_ROM_MPU_AD() uint32 {
	return volatile.LoadUint32(&o.MEM_ACCESS_DBUG0.Reg) & 0x1
}

// DPORT.MEM_ACCESS_DBUG1: DPORT_MEM_ACCESS_DBUG1
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_AHBLITE_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x400)|value<<10)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_AHBLITE_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x400) >> 10
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x200)|value<<9)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x200) >> 9
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_AHB_ACCESS_DENY(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_AHB_ACCESS_DENY() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_PIDGEN_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0xc0)|value<<6)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_PIDGEN_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0xc0) >> 6
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_ARB_IA(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0x30)|value<<4)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_ARB_IA() uint32 {
	return (volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0x30) >> 4
}
func (o *DPORT_Type) SetMEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS(value uint32) {
	volatile.StoreUint32(&o.MEM_ACCESS_DBUG1.Reg, volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg)&^(0xf)|value)
}
func (o *DPORT_Type) GetMEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS() uint32 {
	return volatile.LoadUint32(&o.MEM_ACCESS_DBUG1.Reg) & 0xf
}

// DPORT.PRO_DCACHE_DBUG0: DPORT_PRO_DCACHE_DBUG0
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_RX_END(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_RX_END() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x800000) >> 23
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_SLAVE_WR(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_SLAVE_WR() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_TX_END(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_TX_END() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_CACHE_STATE(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x7ff80)|value<<7)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_CACHE_STATE() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x7ff80) >> 7
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x7e)|value<<1)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x7e) >> 1
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG0.Reg) & 0x1
}

// DPORT.PRO_DCACHE_DBUG1: DPORT_PRO_DCACHE_DBUG1
func (o *DPORT_Type) SetPRO_DCACHE_DBUG1(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG1.Reg, value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG1() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG1.Reg)
}

// DPORT.PRO_DCACHE_DBUG2: DPORT_PRO_DCACHE_DBUG2
func (o *DPORT_Type) SetPRO_DCACHE_DBUG2_PRO_CACHE_VADDR(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG2.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG2.Reg)&^(0x7ffffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG2_PRO_CACHE_VADDR() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG2.Reg) & 0x7ffffff
}

// DPORT.PRO_DCACHE_DBUG3: DPORT_PRO_DCACHE_DBUG3
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg)&^(0x7e00)|value<<9)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.PRO_DCACHE_DBUG3.Reg) & 0x7e00) >> 9
}

// DPORT.PRO_DCACHE_DBUG4: DPORT_PRO_DCACHE_DBUG4
func (o *DPORT_Type) SetPRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG4.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG4.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG4.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG5: DPORT_PRO_DCACHE_DBUG5
func (o *DPORT_Type) SetPRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG5.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG5.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG5.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG6: DPORT_PRO_DCACHE_DBUG6
func (o *DPORT_Type) SetPRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG6.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG6.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG6.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG7: DPORT_PRO_DCACHE_DBUG7
func (o *DPORT_Type) SetPRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG7.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG7.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG7.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG8: DPORT_PRO_DCACHE_DBUG8
func (o *DPORT_Type) SetPRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG8.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG8.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG8.Reg) & 0xfffff
}

// DPORT.PRO_DCACHE_DBUG9: DPORT_PRO_DCACHE_DBUG9
func (o *DPORT_Type) SetPRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA(value uint32) {
	volatile.StoreUint32(&o.PRO_DCACHE_DBUG9.Reg, volatile.LoadUint32(&o.PRO_DCACHE_DBUG9.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetPRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA() uint32 {
	return volatile.LoadUint32(&o.PRO_DCACHE_DBUG9.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG0: DPORT_APP_DCACHE_DBUG0
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_RX_END(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x800000)|value<<23)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_RX_END() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x800000) >> 23
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_SLAVE_WDATA_V(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x400000)|value<<22)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_SLAVE_WDATA_V() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x400000) >> 22
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_SLAVE_WR(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x200000)|value<<21)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_SLAVE_WR() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x200000) >> 21
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_TX_END(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x100000)|value<<20)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_TX_END() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x100000) >> 20
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_WR_BAK_TO_READ(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_WR_BAK_TO_READ() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_CACHE_STATE(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x7ff80)|value<<7)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_CACHE_STATE() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x7ff80) >> 7
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x7e)|value<<1)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x7e) >> 1
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG0_APP_CACHE_MMU_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG0.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG0_APP_CACHE_MMU_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG0.Reg) & 0x1
}

// DPORT.APP_DCACHE_DBUG1: DPORT_APP_DCACHE_DBUG1
func (o *DPORT_Type) SetAPP_DCACHE_DBUG1(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG1.Reg, value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG1() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG1.Reg)
}

// DPORT.APP_DCACHE_DBUG2: DPORT_APP_DCACHE_DBUG2
func (o *DPORT_Type) SetAPP_DCACHE_DBUG2_APP_CACHE_VADDR(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG2.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG2.Reg)&^(0x7ffffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG2_APP_CACHE_VADDR() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG2.Reg) & 0x7ffffff
}

// DPORT.APP_DCACHE_DBUG3: DPORT_APP_DCACHE_DBUG3
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG3.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg)&^(0x7e00)|value<<9)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA() uint32 {
	return (volatile.LoadUint32(&o.APP_DCACHE_DBUG3.Reg) & 0x7e00) >> 9
}

// DPORT.APP_DCACHE_DBUG4: DPORT_APP_DCACHE_DBUG4
func (o *DPORT_Type) SetAPP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG4.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG4.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG4.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG5: DPORT_APP_DCACHE_DBUG5
func (o *DPORT_Type) SetAPP_DCACHE_DBUG5_APP_DROM0ADDR0_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG5.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG5.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG5_APP_DROM0ADDR0_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG5.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG6: DPORT_APP_DCACHE_DBUG6
func (o *DPORT_Type) SetAPP_DCACHE_DBUG6_APP_IRAM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG6.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG6.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG6_APP_IRAM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG6.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG7: DPORT_APP_DCACHE_DBUG7
func (o *DPORT_Type) SetAPP_DCACHE_DBUG7_APP_IRAM1ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG7.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG7.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG7_APP_IRAM1ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG7.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG8: DPORT_APP_DCACHE_DBUG8
func (o *DPORT_Type) SetAPP_DCACHE_DBUG8_APP_IROM0ADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG8.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG8.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG8_APP_IROM0ADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG8.Reg) & 0xfffff
}

// DPORT.APP_DCACHE_DBUG9: DPORT_APP_DCACHE_DBUG9
func (o *DPORT_Type) SetAPP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA(value uint32) {
	volatile.StoreUint32(&o.APP_DCACHE_DBUG9.Reg, volatile.LoadUint32(&o.APP_DCACHE_DBUG9.Reg)&^(0xfffff)|value)
}
func (o *DPORT_Type) GetAPP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA() uint32 {
	return volatile.LoadUint32(&o.APP_DCACHE_DBUG9.Reg) & 0xfffff
}

// DPORT.PRO_CPU_RECORD_CTRL: DPORT_PRO_CPU_RECORD_CTRL
func (o *DPORT_Type) SetPRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_CTRL.Reg) & 0x1
}

// DPORT.PRO_CPU_RECORD_STATUS: DPORT_PRO_CPU_RECORD_STATUS
func (o *DPORT_Type) SetPRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_STATUS.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_STATUS.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_STATUS.Reg) & 0x1
}

// DPORT.PRO_CPU_RECORD_PID: DPORT_PRO_CPU_RECORD_PID
func (o *DPORT_Type) SetPRO_CPU_RECORD_PID_RECORD_PRO_PID(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PID.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PID.Reg)&^(0x7)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PID_RECORD_PRO_PID() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PID.Reg) & 0x7
}

// DPORT.PRO_CPU_RECORD_PDEBUGINST: DPORT_PRO_CPU_RECORD_PDEBUGINST
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGINST(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGINST() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGINST.Reg)
}

// DPORT.PRO_CPU_RECORD_PDEBUGSTATUS: DPORT_PRO_CPU_RECORD_PDEBUGSTATUS
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg, volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGSTATUS.Reg) & 0xff
}

// DPORT.PRO_CPU_RECORD_PDEBUGDATA: DPORT_PRO_CPU_RECORD_PDEBUGDATA
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGDATA(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGDATA() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGDATA.Reg)
}

// DPORT.PRO_CPU_RECORD_PDEBUGPC: DPORT_PRO_CPU_RECORD_PDEBUGPC
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGPC(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGPC.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGPC() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGPC.Reg)
}

// DPORT.PRO_CPU_RECORD_PDEBUGLS0STAT: DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0STAT(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0STAT() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0STAT.Reg)
}

// DPORT.PRO_CPU_RECORD_PDEBUGLS0ADDR: DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0ADDR(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0ADDR.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0ADDR() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0ADDR.Reg)
}

// DPORT.PRO_CPU_RECORD_PDEBUGLS0DATA: DPORT_PRO_CPU_RECORD_PDEBUGLS0DATA
func (o *DPORT_Type) SetPRO_CPU_RECORD_PDEBUGLS0DATA(value uint32) {
	volatile.StoreUint32(&o.PRO_CPU_RECORD_PDEBUGLS0DATA.Reg, value)
}
func (o *DPORT_Type) GetPRO_CPU_RECORD_PDEBUGLS0DATA() uint32 {
	return volatile.LoadUint32(&o.PRO_CPU_RECORD_PDEBUGLS0DATA.Reg)
}

// DPORT.APP_CPU_RECORD_CTRL: DPORT_APP_CPU_RECORD_CTRL
func (o *DPORT_Type) SetAPP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg)&^(0x100)|value<<8)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg) & 0x100) >> 8
}
func (o *DPORT_Type) SetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg)&^(0x10)|value<<4)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE() uint32 {
	return (volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg) & 0x10) >> 4
}
func (o *DPORT_Type) SetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_CTRL.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_CTRL.Reg) & 0x1
}

// DPORT.APP_CPU_RECORD_STATUS: DPORT_APP_CPU_RECORD_STATUS
func (o *DPORT_Type) SetAPP_CPU_RECORD_STATUS_APP_CPU_RECORDING(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_STATUS.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_STATUS.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_STATUS_APP_CPU_RECORDING() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_STATUS.Reg) & 0x1
}

// DPORT.APP_CPU_RECORD_PID: DPORT_APP_CPU_RECORD_PID
func (o *DPORT_Type) SetAPP_CPU_RECORD_PID_RECORD_APP_PID(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PID.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_PID.Reg)&^(0x7)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PID_RECORD_APP_PID() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PID.Reg) & 0x7
}

// DPORT.APP_CPU_RECORD_PDEBUGINST: DPORT_APP_CPU_RECORD_PDEBUGINST
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGINST(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGINST.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGINST() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGINST.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGSTATUS: DPORT_APP_CPU_RECORD_PDEBUGSTATUS
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGSTATUS.Reg, volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGSTATUS.Reg)&^(0xff)|value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGSTATUS.Reg) & 0xff
}

// DPORT.APP_CPU_RECORD_PDEBUGDATA: DPORT_APP_CPU_RECORD_PDEBUGDATA
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGDATA(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGDATA.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGDATA() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGDATA.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGPC: DPORT_APP_CPU_RECORD_PDEBUGPC
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGPC(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGPC.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGPC() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGPC.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGLS0STAT: DPORT_APP_CPU_RECORD_PDEBUGLS0STAT
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGLS0STAT(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGLS0STAT.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGLS0STAT() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGLS0STAT.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGLS0ADDR: DPORT_APP_CPU_RECORD_PDEBUGLS0ADDR
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGLS0ADDR(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGLS0ADDR.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGLS0ADDR() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGLS0ADDR.Reg)
}

// DPORT.APP_CPU_RECORD_PDEBUGLS0DATA: DPORT_APP_CPU_RECORD_PDEBUGLS0DATA
func (o *DPORT_Type) SetAPP_CPU_RECORD_PDEBUGLS0DATA(value uint32) {
	volatile.StoreUint32(&o.APP_CPU_RECORD_PDEBUGLS0DATA.Reg, value)
}
func (o *DPORT_Type) GetAPP_CPU_RECORD_PDEBUGLS0DATA() uint32 {
	return volatile.LoadUint32(&o.APP_CPU_RECORD_PDEBUGLS0DATA.Reg)
}

// DPORT.RSA_PD_CTRL: DPORT_RSA_PD_CTRL
func (o *DPORT_Type) SetRSA_PD_CTRL_RSA_PD(value uint32) {
	volatile.StoreUint32(&o.RSA_PD_CTRL.Reg, volatile.LoadUint32(&o.RSA_PD_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetRSA_PD_CTRL_RSA_PD() uint32 {
	return volatile.LoadUint32(&o.RSA_PD_CTRL.Reg) & 0x1
}

// DPORT.ROM_MPU_TABLE0: DPORT_ROM_MPU_TABLE0
func (o *DPORT_Type) SetROM_MPU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE0.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE0.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE0.Reg) & 0x3
}

// DPORT.ROM_MPU_TABLE1: DPORT_ROM_MPU_TABLE1
func (o *DPORT_Type) SetROM_MPU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE1.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE1.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE1.Reg) & 0x3
}

// DPORT.ROM_MPU_TABLE2: DPORT_ROM_MPU_TABLE2
func (o *DPORT_Type) SetROM_MPU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE2.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE2.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE2.Reg) & 0x3
}

// DPORT.ROM_MPU_TABLE3: DPORT_ROM_MPU_TABLE3
func (o *DPORT_Type) SetROM_MPU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.ROM_MPU_TABLE3.Reg, volatile.LoadUint32(&o.ROM_MPU_TABLE3.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetROM_MPU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.ROM_MPU_TABLE3.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE0: DPORT_SHROM_MPU_TABLE0
func (o *DPORT_Type) SetSHROM_MPU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE0.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE0.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE0.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE1: DPORT_SHROM_MPU_TABLE1
func (o *DPORT_Type) SetSHROM_MPU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE1.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE1.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE1.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE2: DPORT_SHROM_MPU_TABLE2
func (o *DPORT_Type) SetSHROM_MPU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE2.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE2.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE2.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE3: DPORT_SHROM_MPU_TABLE3
func (o *DPORT_Type) SetSHROM_MPU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE3.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE3.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE3.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE4: DPORT_SHROM_MPU_TABLE4
func (o *DPORT_Type) SetSHROM_MPU_TABLE4(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE4.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE4.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE4() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE4.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE5: DPORT_SHROM_MPU_TABLE5
func (o *DPORT_Type) SetSHROM_MPU_TABLE5(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE5.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE5.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE5() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE5.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE6: DPORT_SHROM_MPU_TABLE6
func (o *DPORT_Type) SetSHROM_MPU_TABLE6(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE6.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE6.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE6() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE6.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE7: DPORT_SHROM_MPU_TABLE7
func (o *DPORT_Type) SetSHROM_MPU_TABLE7(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE7.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE7.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE7() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE7.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE8: DPORT_SHROM_MPU_TABLE8
func (o *DPORT_Type) SetSHROM_MPU_TABLE8(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE8.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE8.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE8() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE8.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE9: DPORT_SHROM_MPU_TABLE9
func (o *DPORT_Type) SetSHROM_MPU_TABLE9(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE9.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE9.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE9() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE9.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE10: DPORT_SHROM_MPU_TABLE10
func (o *DPORT_Type) SetSHROM_MPU_TABLE10(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE10.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE10.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE10() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE10.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE11: DPORT_SHROM_MPU_TABLE11
func (o *DPORT_Type) SetSHROM_MPU_TABLE11(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE11.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE11.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE11() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE11.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE12: DPORT_SHROM_MPU_TABLE12
func (o *DPORT_Type) SetSHROM_MPU_TABLE12(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE12.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE12.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE12() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE12.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE13: DPORT_SHROM_MPU_TABLE13
func (o *DPORT_Type) SetSHROM_MPU_TABLE13(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE13.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE13.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE13() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE13.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE14: DPORT_SHROM_MPU_TABLE14
func (o *DPORT_Type) SetSHROM_MPU_TABLE14(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE14.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE14.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE14() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE14.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE15: DPORT_SHROM_MPU_TABLE15
func (o *DPORT_Type) SetSHROM_MPU_TABLE15(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE15.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE15.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE15() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE15.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE16: DPORT_SHROM_MPU_TABLE16
func (o *DPORT_Type) SetSHROM_MPU_TABLE16(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE16.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE16.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE16() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE16.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE17: DPORT_SHROM_MPU_TABLE17
func (o *DPORT_Type) SetSHROM_MPU_TABLE17(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE17.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE17.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE17() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE17.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE18: DPORT_SHROM_MPU_TABLE18
func (o *DPORT_Type) SetSHROM_MPU_TABLE18(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE18.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE18.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE18() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE18.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE19: DPORT_SHROM_MPU_TABLE19
func (o *DPORT_Type) SetSHROM_MPU_TABLE19(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE19.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE19.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE19() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE19.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE20: DPORT_SHROM_MPU_TABLE20
func (o *DPORT_Type) SetSHROM_MPU_TABLE20(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE20.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE20.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE20() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE20.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE21: DPORT_SHROM_MPU_TABLE21
func (o *DPORT_Type) SetSHROM_MPU_TABLE21(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE21.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE21.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE21() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE21.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE22: DPORT_SHROM_MPU_TABLE22
func (o *DPORT_Type) SetSHROM_MPU_TABLE22(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE22.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE22.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE22() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE22.Reg) & 0x3
}

// DPORT.SHROM_MPU_TABLE23: DPORT_SHROM_MPU_TABLE23
func (o *DPORT_Type) SetSHROM_MPU_TABLE23(value uint32) {
	volatile.StoreUint32(&o.SHROM_MPU_TABLE23.Reg, volatile.LoadUint32(&o.SHROM_MPU_TABLE23.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSHROM_MPU_TABLE23() uint32 {
	return volatile.LoadUint32(&o.SHROM_MPU_TABLE23.Reg) & 0x3
}

// DPORT.IMMU_TABLE0: DPORT_IMMU_TABLE0
func (o *DPORT_Type) SetIMMU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE0.Reg, volatile.LoadUint32(&o.IMMU_TABLE0.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE0.Reg) & 0x7f
}

// DPORT.IMMU_TABLE1: DPORT_IMMU_TABLE1
func (o *DPORT_Type) SetIMMU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE1.Reg, volatile.LoadUint32(&o.IMMU_TABLE1.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE1.Reg) & 0x7f
}

// DPORT.IMMU_TABLE2: DPORT_IMMU_TABLE2
func (o *DPORT_Type) SetIMMU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE2.Reg, volatile.LoadUint32(&o.IMMU_TABLE2.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE2.Reg) & 0x7f
}

// DPORT.IMMU_TABLE3: DPORT_IMMU_TABLE3
func (o *DPORT_Type) SetIMMU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE3.Reg, volatile.LoadUint32(&o.IMMU_TABLE3.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE3.Reg) & 0x7f
}

// DPORT.IMMU_TABLE4: DPORT_IMMU_TABLE4
func (o *DPORT_Type) SetIMMU_TABLE4(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE4.Reg, volatile.LoadUint32(&o.IMMU_TABLE4.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE4() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE4.Reg) & 0x7f
}

// DPORT.IMMU_TABLE5: DPORT_IMMU_TABLE5
func (o *DPORT_Type) SetIMMU_TABLE5(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE5.Reg, volatile.LoadUint32(&o.IMMU_TABLE5.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE5() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE5.Reg) & 0x7f
}

// DPORT.IMMU_TABLE6: DPORT_IMMU_TABLE6
func (o *DPORT_Type) SetIMMU_TABLE6(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE6.Reg, volatile.LoadUint32(&o.IMMU_TABLE6.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE6() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE6.Reg) & 0x7f
}

// DPORT.IMMU_TABLE7: DPORT_IMMU_TABLE7
func (o *DPORT_Type) SetIMMU_TABLE7(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE7.Reg, volatile.LoadUint32(&o.IMMU_TABLE7.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE7() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE7.Reg) & 0x7f
}

// DPORT.IMMU_TABLE8: DPORT_IMMU_TABLE8
func (o *DPORT_Type) SetIMMU_TABLE8(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE8.Reg, volatile.LoadUint32(&o.IMMU_TABLE8.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE8() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE8.Reg) & 0x7f
}

// DPORT.IMMU_TABLE9: DPORT_IMMU_TABLE9
func (o *DPORT_Type) SetIMMU_TABLE9(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE9.Reg, volatile.LoadUint32(&o.IMMU_TABLE9.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE9() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE9.Reg) & 0x7f
}

// DPORT.IMMU_TABLE10: DPORT_IMMU_TABLE10
func (o *DPORT_Type) SetIMMU_TABLE10(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE10.Reg, volatile.LoadUint32(&o.IMMU_TABLE10.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE10() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE10.Reg) & 0x7f
}

// DPORT.IMMU_TABLE11: DPORT_IMMU_TABLE11
func (o *DPORT_Type) SetIMMU_TABLE11(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE11.Reg, volatile.LoadUint32(&o.IMMU_TABLE11.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE11() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE11.Reg) & 0x7f
}

// DPORT.IMMU_TABLE12: DPORT_IMMU_TABLE12
func (o *DPORT_Type) SetIMMU_TABLE12(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE12.Reg, volatile.LoadUint32(&o.IMMU_TABLE12.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE12() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE12.Reg) & 0x7f
}

// DPORT.IMMU_TABLE13: DPORT_IMMU_TABLE13
func (o *DPORT_Type) SetIMMU_TABLE13(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE13.Reg, volatile.LoadUint32(&o.IMMU_TABLE13.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE13() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE13.Reg) & 0x7f
}

// DPORT.IMMU_TABLE14: DPORT_IMMU_TABLE14
func (o *DPORT_Type) SetIMMU_TABLE14(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE14.Reg, volatile.LoadUint32(&o.IMMU_TABLE14.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE14() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE14.Reg) & 0x7f
}

// DPORT.IMMU_TABLE15: DPORT_IMMU_TABLE15
func (o *DPORT_Type) SetIMMU_TABLE15(value uint32) {
	volatile.StoreUint32(&o.IMMU_TABLE15.Reg, volatile.LoadUint32(&o.IMMU_TABLE15.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetIMMU_TABLE15() uint32 {
	return volatile.LoadUint32(&o.IMMU_TABLE15.Reg) & 0x7f
}

// DPORT.DMMU_TABLE0: DPORT_DMMU_TABLE0
func (o *DPORT_Type) SetDMMU_TABLE0(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE0.Reg, volatile.LoadUint32(&o.DMMU_TABLE0.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE0() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE0.Reg) & 0x7f
}

// DPORT.DMMU_TABLE1: DPORT_DMMU_TABLE1
func (o *DPORT_Type) SetDMMU_TABLE1(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE1.Reg, volatile.LoadUint32(&o.DMMU_TABLE1.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE1() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE1.Reg) & 0x7f
}

// DPORT.DMMU_TABLE2: DPORT_DMMU_TABLE2
func (o *DPORT_Type) SetDMMU_TABLE2(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE2.Reg, volatile.LoadUint32(&o.DMMU_TABLE2.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE2() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE2.Reg) & 0x7f
}

// DPORT.DMMU_TABLE3: DPORT_DMMU_TABLE3
func (o *DPORT_Type) SetDMMU_TABLE3(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE3.Reg, volatile.LoadUint32(&o.DMMU_TABLE3.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE3() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE3.Reg) & 0x7f
}

// DPORT.DMMU_TABLE4: DPORT_DMMU_TABLE4
func (o *DPORT_Type) SetDMMU_TABLE4(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE4.Reg, volatile.LoadUint32(&o.DMMU_TABLE4.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE4() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE4.Reg) & 0x7f
}

// DPORT.DMMU_TABLE5: DPORT_DMMU_TABLE5
func (o *DPORT_Type) SetDMMU_TABLE5(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE5.Reg, volatile.LoadUint32(&o.DMMU_TABLE5.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE5() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE5.Reg) & 0x7f
}

// DPORT.DMMU_TABLE6: DPORT_DMMU_TABLE6
func (o *DPORT_Type) SetDMMU_TABLE6(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE6.Reg, volatile.LoadUint32(&o.DMMU_TABLE6.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE6() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE6.Reg) & 0x7f
}

// DPORT.DMMU_TABLE7: DPORT_DMMU_TABLE7
func (o *DPORT_Type) SetDMMU_TABLE7(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE7.Reg, volatile.LoadUint32(&o.DMMU_TABLE7.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE7() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE7.Reg) & 0x7f
}

// DPORT.DMMU_TABLE8: DPORT_DMMU_TABLE8
func (o *DPORT_Type) SetDMMU_TABLE8(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE8.Reg, volatile.LoadUint32(&o.DMMU_TABLE8.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE8() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE8.Reg) & 0x7f
}

// DPORT.DMMU_TABLE9: DPORT_DMMU_TABLE9
func (o *DPORT_Type) SetDMMU_TABLE9(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE9.Reg, volatile.LoadUint32(&o.DMMU_TABLE9.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE9() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE9.Reg) & 0x7f
}

// DPORT.DMMU_TABLE10: DPORT_DMMU_TABLE10
func (o *DPORT_Type) SetDMMU_TABLE10(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE10.Reg, volatile.LoadUint32(&o.DMMU_TABLE10.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE10() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE10.Reg) & 0x7f
}

// DPORT.DMMU_TABLE11: DPORT_DMMU_TABLE11
func (o *DPORT_Type) SetDMMU_TABLE11(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE11.Reg, volatile.LoadUint32(&o.DMMU_TABLE11.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE11() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE11.Reg) & 0x7f
}

// DPORT.DMMU_TABLE12: DPORT_DMMU_TABLE12
func (o *DPORT_Type) SetDMMU_TABLE12(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE12.Reg, volatile.LoadUint32(&o.DMMU_TABLE12.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE12() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE12.Reg) & 0x7f
}

// DPORT.DMMU_TABLE13: DPORT_DMMU_TABLE13
func (o *DPORT_Type) SetDMMU_TABLE13(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE13.Reg, volatile.LoadUint32(&o.DMMU_TABLE13.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE13() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE13.Reg) & 0x7f
}

// DPORT.DMMU_TABLE14: DPORT_DMMU_TABLE14
func (o *DPORT_Type) SetDMMU_TABLE14(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE14.Reg, volatile.LoadUint32(&o.DMMU_TABLE14.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE14() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE14.Reg) & 0x7f
}

// DPORT.DMMU_TABLE15: DPORT_DMMU_TABLE15
func (o *DPORT_Type) SetDMMU_TABLE15(value uint32) {
	volatile.StoreUint32(&o.DMMU_TABLE15.Reg, volatile.LoadUint32(&o.DMMU_TABLE15.Reg)&^(0x7f)|value)
}
func (o *DPORT_Type) GetDMMU_TABLE15() uint32 {
	return volatile.LoadUint32(&o.DMMU_TABLE15.Reg) & 0x7f
}

// DPORT.PRO_INTRUSION_CTRL: DPORT_PRO_INTRUSION_CTRL
func (o *DPORT_Type) SetPRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N(value uint32) {
	volatile.StoreUint32(&o.PRO_INTRUSION_CTRL.Reg, volatile.LoadUint32(&o.PRO_INTRUSION_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetPRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N() uint32 {
	return volatile.LoadUint32(&o.PRO_INTRUSION_CTRL.Reg) & 0x1
}

// DPORT.PRO_INTRUSION_STATUS: DPORT_PRO_INTRUSION_STATUS
func (o *DPORT_Type) SetPRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD(value uint32) {
	volatile.StoreUint32(&o.PRO_INTRUSION_STATUS.Reg, volatile.LoadUint32(&o.PRO_INTRUSION_STATUS.Reg)&^(0xf)|value)
}
func (o *DPORT_Type) GetPRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD() uint32 {
	return volatile.LoadUint32(&o.PRO_INTRUSION_STATUS.Reg) & 0xf
}

// DPORT.APP_INTRUSION_CTRL: DPORT_APP_INTRUSION_CTRL
func (o *DPORT_Type) SetAPP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N(value uint32) {
	volatile.StoreUint32(&o.APP_INTRUSION_CTRL.Reg, volatile.LoadUint32(&o.APP_INTRUSION_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetAPP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N() uint32 {
	return volatile.LoadUint32(&o.APP_INTRUSION_CTRL.Reg) & 0x1
}

// DPORT.APP_INTRUSION_STATUS: DPORT_APP_INTRUSION_STATUS
func (o *DPORT_Type) SetAPP_INTRUSION_STATUS_APP_INTRUSION_RECORD(value uint32) {
	volatile.StoreUint32(&o.APP_INTRUSION_STATUS.Reg, volatile.LoadUint32(&o.APP_INTRUSION_STATUS.Reg)&^(0xf)|value)
}
func (o *DPORT_Type) GetAPP_INTRUSION_STATUS_APP_INTRUSION_RECORD() uint32 {
	return volatile.LoadUint32(&o.APP_INTRUSION_STATUS.Reg) & 0xf
}

// DPORT.FRONT_END_MEM_PD: DPORT_FRONT_END_MEM_PD
func (o *DPORT_Type) SetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_PBUS_MEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetFRONT_END_MEM_PD_AGC_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_AGC_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetFRONT_END_MEM_PD_AGC_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.FRONT_END_MEM_PD.Reg, volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetFRONT_END_MEM_PD_AGC_MEM_FORCE_PU() uint32 {
	return volatile.LoadUint32(&o.FRONT_END_MEM_PD.Reg) & 0x1
}

// DPORT.MMU_IA_INT_EN: DPORT_MMU_IA_INT_EN
func (o *DPORT_Type) SetMMU_IA_INT_EN(value uint32) {
	volatile.StoreUint32(&o.MMU_IA_INT_EN.Reg, volatile.LoadUint32(&o.MMU_IA_INT_EN.Reg)&^(0xffffff)|value)
}
func (o *DPORT_Type) GetMMU_IA_INT_EN() uint32 {
	return volatile.LoadUint32(&o.MMU_IA_INT_EN.Reg) & 0xffffff
}

// DPORT.MPU_IA_INT_EN: DPORT_MPU_IA_INT_EN
func (o *DPORT_Type) SetMPU_IA_INT_EN(value uint32) {
	volatile.StoreUint32(&o.MPU_IA_INT_EN.Reg, volatile.LoadUint32(&o.MPU_IA_INT_EN.Reg)&^(0x1ffff)|value)
}
func (o *DPORT_Type) GetMPU_IA_INT_EN() uint32 {
	return volatile.LoadUint32(&o.MPU_IA_INT_EN.Reg) & 0x1ffff
}

// DPORT.CACHE_IA_INT_EN: DPORT_CACHE_IA_INT_EN
func (o *DPORT_Type) SetCACHE_IA_INT_EN(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0xfffffff)|value)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN() uint32 {
	return volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0xfffffff
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x80000)|value<<19)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x80000) >> 19
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x40000)|value<<18)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x40000) >> 18
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x20000)|value<<17)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x20000) >> 17
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x10000)|value<<16)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x10000) >> 16
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x8000)|value<<15)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x8000) >> 15
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x4000)|value<<14)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x4000) >> 14
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x20)|value<<5)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x20) >> 5
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x8)|value<<3)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x8) >> 3
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x4)|value<<2)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x4) >> 2
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x2)|value<<1)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0() uint32 {
	return (volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x2) >> 1
}
func (o *DPORT_Type) SetCACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0(value uint32) {
	volatile.StoreUint32(&o.CACHE_IA_INT_EN.Reg, volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetCACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0() uint32 {
	return volatile.LoadUint32(&o.CACHE_IA_INT_EN.Reg) & 0x1
}

// DPORT.SECURE_BOOT_CTRL: DPORT_SECURE_BOOT_CTRL
func (o *DPORT_Type) SetSECURE_BOOT_CTRL_SW_BOOTLOADER_SEL(value uint32) {
	volatile.StoreUint32(&o.SECURE_BOOT_CTRL.Reg, volatile.LoadUint32(&o.SECURE_BOOT_CTRL.Reg)&^(0x1)|value)
}
func (o *DPORT_Type) GetSECURE_BOOT_CTRL_SW_BOOTLOADER_SEL() uint32 {
	return volatile.LoadUint32(&o.SECURE_BOOT_CTRL.Reg) & 0x1
}

// DPORT.SPI_DMA_CHAN_SEL: DPORT_SPI_DMA_CHAN_SEL
func (o *DPORT_Type) SetSPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL(value uint32) {
	volatile.StoreUint32(&o.SPI_DMA_CHAN_SEL.Reg, volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg)&^(0x30)|value<<4)
}
func (o *DPORT_Type) GetSPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg) & 0x30) >> 4
}
func (o *DPORT_Type) SetSPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL(value uint32) {
	volatile.StoreUint32(&o.SPI_DMA_CHAN_SEL.Reg, volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg)&^(0xc)|value<<2)
}
func (o *DPORT_Type) GetSPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL() uint32 {
	return (volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg) & 0xc) >> 2
}
func (o *DPORT_Type) SetSPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL(value uint32) {
	volatile.StoreUint32(&o.SPI_DMA_CHAN_SEL.Reg, volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetSPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL() uint32 {
	return volatile.LoadUint32(&o.SPI_DMA_CHAN_SEL.Reg) & 0x3
}

// DPORT.PRO_VECBASE_CTRL: DPORT_PRO_VECBASE_CTRL
func (o *DPORT_Type) SetPRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL(value uint32) {
	volatile.StoreUint32(&o.PRO_VECBASE_CTRL.Reg, volatile.LoadUint32(&o.PRO_VECBASE_CTRL.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetPRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL() uint32 {
	return volatile.LoadUint32(&o.PRO_VECBASE_CTRL.Reg) & 0x3
}

// DPORT.PRO_VECBASE_SET: DPORT_PRO_VECBASE_SET
func (o *DPORT_Type) SetPRO_VECBASE_SET_PRO_OUT_VECBASE_REG(value uint32) {
	volatile.StoreUint32(&o.PRO_VECBASE_SET.Reg, volatile.LoadUint32(&o.PRO_VECBASE_SET.Reg)&^(0x3fffff)|value)
}
func (o *DPORT_Type) GetPRO_VECBASE_SET_PRO_OUT_VECBASE_REG() uint32 {
	return volatile.LoadUint32(&o.PRO_VECBASE_SET.Reg) & 0x3fffff
}

// DPORT.APP_VECBASE_CTRL: DPORT_APP_VECBASE_CTRL
func (o *DPORT_Type) SetAPP_VECBASE_CTRL_APP_OUT_VECBASE_SEL(value uint32) {
	volatile.StoreUint32(&o.APP_VECBASE_CTRL.Reg, volatile.LoadUint32(&o.APP_VECBASE_CTRL.Reg)&^(0x3)|value)
}
func (o *DPORT_Type) GetAPP_VECBASE_CTRL_APP_OUT_VECBASE_SEL() uint32 {
	return volatile.LoadUint32(&o.APP_VECBASE_CTRL.Reg) & 0x3
}

// DPORT.APP_VECBASE_SET: DPORT_APP_VECBASE_SET
func (o *DPORT_Type) SetAPP_VECBASE_SET_APP_OUT_VECBASE_REG(value uint32) {
	volatile.StoreUint32(&o.APP_VECBASE_SET.Reg, volatile.LoadUint32(&o.APP_VECBASE_SET.Reg)&^(0x3fffff)|value)
}
func (o *DPORT_Type) GetAPP_VECBASE_SET_APP_OUT_VECBASE_REG() uint32 {
	return volatile.LoadUint32(&o.APP_VECBASE_SET.Reg) & 0x3fffff
}

// DPORT.DATE: DPORT_DATE
func (o *DPORT_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, volatile.LoadUint32(&o.DATE.Reg)&^(0xfffffff)|value)
}
func (o *DPORT_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg) & 0xfffffff
}

type TIMG_Type struct {
	T0CONFIG       volatile.Register32 // 0x0
	T0LO           volatile.Register32 // 0x4
	T0HI           volatile.Register32 // 0x8
	T0UPDATE       volatile.Register32 // 0xC
	T0ALARMLO      volatile.Register32 // 0x10
	T0ALARMHI      volatile.Register32 // 0x14
	T0LOADLO       volatile.Register32 // 0x18
	T0LOADHI       volatile.Register32 // 0x1C
	T0LOAD         volatile.Register32 // 0x20
	T1CONFIG       volatile.Register32 // 0x24
	T1LO           volatile.Register32 // 0x28
	T1HI           volatile.Register32 // 0x2C
	T1UPDATE       volatile.Register32 // 0x30
	T1ALARMLO      volatile.Register32 // 0x34
	T1ALARMHI      volatile.Register32 // 0x38
	T1LOADLO       volatile.Register32 // 0x3C
	T1LOADHI       volatile.Register32 // 0x40
	T1LOAD         volatile.Register32 // 0x44
	WDTCONFIG0     volatile.Register32 // 0x48
	WDTCONFIG1     volatile.Register32 // 0x4C
	WDTCONFIG2     volatile.Register32 // 0x50
	WDTCONFIG3     volatile.Register32 // 0x54
	WDTCONFIG4     volatile.Register32 // 0x58
	WDTCONFIG5     volatile.Register32 // 0x5C
	WDTFEED        volatile.Register32 // 0x60
	WDTWPROTECT    volatile.Register32 // 0x64
	RTCCALICFG     volatile.Register32 // 0x68
	RTCCALICFG1    volatile.Register32 // 0x6C
	LACTCONFIG     volatile.Register32 // 0x70
	LACTRTC        volatile.Register32 // 0x74
	LACTLO         volatile.Register32 // 0x78
	LACTHI         volatile.Register32 // 0x7C
	LACTUPDATE     volatile.Register32 // 0x80
	LACTALARMLO    volatile.Register32 // 0x84
	LACTALARMHI    volatile.Register32 // 0x88
	LACTLOADLO     volatile.Register32 // 0x8C
	LACTLOADHI     volatile.Register32 // 0x90
	LACTLOAD       volatile.Register32 // 0x94
	INT_ENA_TIMERS volatile.Register32 // 0x98
	INT_RAW_TIMERS volatile.Register32 // 0x9C
	INT_ST_TIMERS  volatile.Register32 // 0xA0
	INT_CLR_TIMERS volatile.Register32 // 0xA4
	_              [80]byte
	NTIMERS_DATE   volatile.Register32 // 0xF8
	TIMGCLK        volatile.Register32 // 0xFC
}

// TIMG.T0CONFIG: TIMG_T0CONFIG
func (o *TIMG_Type) SetT0CONFIG_T0_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetT0CONFIG_T0_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x80000000) >> 31
}
func (o *TIMG_Type) SetT0CONFIG_T0_INCREASE(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x40000000)|value<<30)
}
func (o *TIMG_Type) GetT0CONFIG_T0_INCREASE() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x40000000) >> 30
}
func (o *TIMG_Type) SetT0CONFIG_T0_AUTORELOAD(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x20000000)|value<<29)
}
func (o *TIMG_Type) GetT0CONFIG_T0_AUTORELOAD() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x20000000) >> 29
}
func (o *TIMG_Type) SetT0CONFIG_T0_DIVIDER(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x1fffe000)|value<<13)
}
func (o *TIMG_Type) GetT0CONFIG_T0_DIVIDER() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x1fffe000) >> 13
}
func (o *TIMG_Type) SetT0CONFIG_T0_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetT0CONFIG_T0_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x1000) >> 12
}
func (o *TIMG_Type) SetT0CONFIG_T0_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x800)|value<<11)
}
func (o *TIMG_Type) GetT0CONFIG_T0_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x800) >> 11
}
func (o *TIMG_Type) SetT0CONFIG_T0_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.T0CONFIG.Reg, volatile.LoadUint32(&o.T0CONFIG.Reg)&^(0x400)|value<<10)
}
func (o *TIMG_Type) GetT0CONFIG_T0_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.T0CONFIG.Reg) & 0x400) >> 10
}

// TIMG.T0LO: TIMG_T0LO
func (o *TIMG_Type) SetT0LO(value uint32) {
	volatile.StoreUint32(&o.T0LO.Reg, value)
}
func (o *TIMG_Type) GetT0LO() uint32 {
	return volatile.LoadUint32(&o.T0LO.Reg)
}

// TIMG.T0HI: TIMG_T0HI
func (o *TIMG_Type) SetT0HI(value uint32) {
	volatile.StoreUint32(&o.T0HI.Reg, value)
}
func (o *TIMG_Type) GetT0HI() uint32 {
	return volatile.LoadUint32(&o.T0HI.Reg)
}

// TIMG.T0UPDATE: TIMG_T0UPDATE
func (o *TIMG_Type) SetT0UPDATE(value uint32) {
	volatile.StoreUint32(&o.T0UPDATE.Reg, value)
}
func (o *TIMG_Type) GetT0UPDATE() uint32 {
	return volatile.LoadUint32(&o.T0UPDATE.Reg)
}

// TIMG.T0ALARMLO: TIMG_T0ALARMLO
func (o *TIMG_Type) SetT0ALARMLO(value uint32) {
	volatile.StoreUint32(&o.T0ALARMLO.Reg, value)
}
func (o *TIMG_Type) GetT0ALARMLO() uint32 {
	return volatile.LoadUint32(&o.T0ALARMLO.Reg)
}

// TIMG.T0ALARMHI: TIMG_T0ALARMHI
func (o *TIMG_Type) SetT0ALARMHI(value uint32) {
	volatile.StoreUint32(&o.T0ALARMHI.Reg, value)
}
func (o *TIMG_Type) GetT0ALARMHI() uint32 {
	return volatile.LoadUint32(&o.T0ALARMHI.Reg)
}

// TIMG.T0LOADLO: TIMG_T0LOADLO
func (o *TIMG_Type) SetT0LOADLO(value uint32) {
	volatile.StoreUint32(&o.T0LOADLO.Reg, value)
}
func (o *TIMG_Type) GetT0LOADLO() uint32 {
	return volatile.LoadUint32(&o.T0LOADLO.Reg)
}

// TIMG.T0LOADHI: TIMG_T0LOADHI
func (o *TIMG_Type) SetT0LOADHI(value uint32) {
	volatile.StoreUint32(&o.T0LOADHI.Reg, value)
}
func (o *TIMG_Type) GetT0LOADHI() uint32 {
	return volatile.LoadUint32(&o.T0LOADHI.Reg)
}

// TIMG.T0LOAD: TIMG_T0LOAD
func (o *TIMG_Type) SetT0LOAD(value uint32) {
	volatile.StoreUint32(&o.T0LOAD.Reg, value)
}
func (o *TIMG_Type) GetT0LOAD() uint32 {
	return volatile.LoadUint32(&o.T0LOAD.Reg)
}

// TIMG.T1CONFIG: TIMG_T1CONFIG
func (o *TIMG_Type) SetT1CONFIG_T1_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetT1CONFIG_T1_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x80000000) >> 31
}
func (o *TIMG_Type) SetT1CONFIG_T1_INCREASE(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x40000000)|value<<30)
}
func (o *TIMG_Type) GetT1CONFIG_T1_INCREASE() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x40000000) >> 30
}
func (o *TIMG_Type) SetT1CONFIG_T1_AUTORELOAD(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x20000000)|value<<29)
}
func (o *TIMG_Type) GetT1CONFIG_T1_AUTORELOAD() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x20000000) >> 29
}
func (o *TIMG_Type) SetT1CONFIG_T1_DIVIDER(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x1fffe000)|value<<13)
}
func (o *TIMG_Type) GetT1CONFIG_T1_DIVIDER() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x1fffe000) >> 13
}
func (o *TIMG_Type) SetT1CONFIG_T1_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetT1CONFIG_T1_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x1000) >> 12
}
func (o *TIMG_Type) SetT1CONFIG_T1_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x800)|value<<11)
}
func (o *TIMG_Type) GetT1CONFIG_T1_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x800) >> 11
}
func (o *TIMG_Type) SetT1CONFIG_T1_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.T1CONFIG.Reg, volatile.LoadUint32(&o.T1CONFIG.Reg)&^(0x400)|value<<10)
}
func (o *TIMG_Type) GetT1CONFIG_T1_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.T1CONFIG.Reg) & 0x400) >> 10
}

// TIMG.T1LO: TIMG_T1LO
func (o *TIMG_Type) SetT1LO(value uint32) {
	volatile.StoreUint32(&o.T1LO.Reg, value)
}
func (o *TIMG_Type) GetT1LO() uint32 {
	return volatile.LoadUint32(&o.T1LO.Reg)
}

// TIMG.T1HI: TIMG_T1HI
func (o *TIMG_Type) SetT1HI(value uint32) {
	volatile.StoreUint32(&o.T1HI.Reg, value)
}
func (o *TIMG_Type) GetT1HI() uint32 {
	return volatile.LoadUint32(&o.T1HI.Reg)
}

// TIMG.T1UPDATE: TIMG_T1UPDATE
func (o *TIMG_Type) SetT1UPDATE(value uint32) {
	volatile.StoreUint32(&o.T1UPDATE.Reg, value)
}
func (o *TIMG_Type) GetT1UPDATE() uint32 {
	return volatile.LoadUint32(&o.T1UPDATE.Reg)
}

// TIMG.T1ALARMLO: TIMG_T1ALARMLO
func (o *TIMG_Type) SetT1ALARMLO(value uint32) {
	volatile.StoreUint32(&o.T1ALARMLO.Reg, value)
}
func (o *TIMG_Type) GetT1ALARMLO() uint32 {
	return volatile.LoadUint32(&o.T1ALARMLO.Reg)
}

// TIMG.T1ALARMHI: TIMG_T1ALARMHI
func (o *TIMG_Type) SetT1ALARMHI(value uint32) {
	volatile.StoreUint32(&o.T1ALARMHI.Reg, value)
}
func (o *TIMG_Type) GetT1ALARMHI() uint32 {
	return volatile.LoadUint32(&o.T1ALARMHI.Reg)
}

// TIMG.T1LOADLO: TIMG_T1LOADLO
func (o *TIMG_Type) SetT1LOADLO(value uint32) {
	volatile.StoreUint32(&o.T1LOADLO.Reg, value)
}
func (o *TIMG_Type) GetT1LOADLO() uint32 {
	return volatile.LoadUint32(&o.T1LOADLO.Reg)
}

// TIMG.T1LOADHI: TIMG_T1LOADHI
func (o *TIMG_Type) SetT1LOADHI(value uint32) {
	volatile.StoreUint32(&o.T1LOADHI.Reg, value)
}
func (o *TIMG_Type) GetT1LOADHI() uint32 {
	return volatile.LoadUint32(&o.T1LOADHI.Reg)
}

// TIMG.T1LOAD: TIMG_T1LOAD
func (o *TIMG_Type) SetT1LOAD(value uint32) {
	volatile.StoreUint32(&o.T1LOAD.Reg, value)
}
func (o *TIMG_Type) GetT1LOAD() uint32 {
	return volatile.LoadUint32(&o.T1LOAD.Reg)
}

// TIMG.WDTCONFIG0: TIMG_WDTCONFIG0
func (o *TIMG_Type) SetWDTCONFIG0_WDT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x80000000) >> 31
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG0(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x60000000)|value<<29)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG0() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x60000000) >> 29
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG1(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x18000000)|value<<27)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG1() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x18000000) >> 27
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x6000000)|value<<25)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG2() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x6000000) >> 25
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_STG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1800000)|value<<23)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_STG3() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1800000) >> 23
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x400000)|value<<22)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x400000) >> 22
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x200000)|value<<21)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x200000) >> 21
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_CPU_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x1c0000)|value<<18)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_CPU_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x1c0000) >> 18
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_SYS_RESET_LENGTH(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x38000)|value<<15)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_SYS_RESET_LENGTH() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x38000) >> 15
}
func (o *TIMG_Type) SetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG0.Reg, volatile.LoadUint32(&o.WDTCONFIG0.Reg)&^(0x4000)|value<<14)
}
func (o *TIMG_Type) GetWDTCONFIG0_WDT_FLASHBOOT_MOD_EN() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG0.Reg) & 0x4000) >> 14
}

// TIMG.WDTCONFIG1: TIMG_WDTCONFIG1
func (o *TIMG_Type) SetWDTCONFIG1_WDT_CLK_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG1.Reg, volatile.LoadUint32(&o.WDTCONFIG1.Reg)&^(0xffff0000)|value<<16)
}
func (o *TIMG_Type) GetWDTCONFIG1_WDT_CLK_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.WDTCONFIG1.Reg) & 0xffff0000) >> 16
}

// TIMG.WDTCONFIG2: TIMG_WDTCONFIG2
func (o *TIMG_Type) SetWDTCONFIG2(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG2.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG2() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG2.Reg)
}

// TIMG.WDTCONFIG3: TIMG_WDTCONFIG3
func (o *TIMG_Type) SetWDTCONFIG3(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG3.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG3() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG3.Reg)
}

// TIMG.WDTCONFIG4: TIMG_WDTCONFIG4
func (o *TIMG_Type) SetWDTCONFIG4(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG4.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG4() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG4.Reg)
}

// TIMG.WDTCONFIG5: TIMG_WDTCONFIG5
func (o *TIMG_Type) SetWDTCONFIG5(value uint32) {
	volatile.StoreUint32(&o.WDTCONFIG5.Reg, value)
}
func (o *TIMG_Type) GetWDTCONFIG5() uint32 {
	return volatile.LoadUint32(&o.WDTCONFIG5.Reg)
}

// TIMG.WDTFEED: TIMG_WDTFEED
func (o *TIMG_Type) SetWDTFEED(value uint32) {
	volatile.StoreUint32(&o.WDTFEED.Reg, value)
}
func (o *TIMG_Type) GetWDTFEED() uint32 {
	return volatile.LoadUint32(&o.WDTFEED.Reg)
}

// TIMG.WDTWPROTECT: TIMG_WDTWPROTECT
func (o *TIMG_Type) SetWDTWPROTECT(value uint32) {
	volatile.StoreUint32(&o.WDTWPROTECT.Reg, value)
}
func (o *TIMG_Type) GetWDTWPROTECT() uint32 {
	return volatile.LoadUint32(&o.WDTWPROTECT.Reg)
}

// TIMG.RTCCALICFG: TIMG_RTCCALICFG
func (o *TIMG_Type) SetRTCCALICFG_START(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetRTCCALICFG_START() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x80000000) >> 31
}
func (o *TIMG_Type) SetRTCCALICFG_MAX(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x7fff0000)|value<<16)
}
func (o *TIMG_Type) GetRTCCALICFG_MAX() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x7fff0000) >> 16
}
func (o *TIMG_Type) SetRTCCALICFG_RDY(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x8000)|value<<15)
}
func (o *TIMG_Type) GetRTCCALICFG_RDY() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x8000) >> 15
}
func (o *TIMG_Type) SetRTCCALICFG_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x6000)|value<<13)
}
func (o *TIMG_Type) GetRTCCALICFG_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x6000) >> 13
}
func (o *TIMG_Type) SetRTCCALICFG_START_CYCLING(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG.Reg, volatile.LoadUint32(&o.RTCCALICFG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetRTCCALICFG_START_CYCLING() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG.Reg) & 0x1000) >> 12
}

// TIMG.RTCCALICFG1: TIMG_RTCCALICFG1
func (o *TIMG_Type) SetRTCCALICFG1_VALUE(value uint32) {
	volatile.StoreUint32(&o.RTCCALICFG1.Reg, volatile.LoadUint32(&o.RTCCALICFG1.Reg)&^(0xffffff80)|value<<7)
}
func (o *TIMG_Type) GetRTCCALICFG1_VALUE() uint32 {
	return (volatile.LoadUint32(&o.RTCCALICFG1.Reg) & 0xffffff80) >> 7
}

// TIMG.LACTCONFIG: TIMG_LACTCONFIG
func (o *TIMG_Type) SetLACTCONFIG_LACT_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x80000000) >> 31
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_INCREASE(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x40000000)|value<<30)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_INCREASE() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x40000000) >> 30
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_AUTORELOAD(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x20000000)|value<<29)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_AUTORELOAD() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x20000000) >> 29
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_DIVIDER(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x1fffe000)|value<<13)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_DIVIDER() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x1fffe000) >> 13
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_EDGE_INT_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x1000)|value<<12)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_EDGE_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x1000) >> 12
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_LEVEL_INT_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x800)|value<<11)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_LEVEL_INT_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x800) >> 11
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_ALARM_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x400)|value<<10)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_ALARM_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x400) >> 10
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_LAC_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x200)|value<<9)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_LAC_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x200) >> 9
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_CPST_EN(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x100)|value<<8)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_CPST_EN() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x100) >> 8
}
func (o *TIMG_Type) SetLACTCONFIG_LACT_RTC_ONLY(value uint32) {
	volatile.StoreUint32(&o.LACTCONFIG.Reg, volatile.LoadUint32(&o.LACTCONFIG.Reg)&^(0x80)|value<<7)
}
func (o *TIMG_Type) GetLACTCONFIG_LACT_RTC_ONLY() uint32 {
	return (volatile.LoadUint32(&o.LACTCONFIG.Reg) & 0x80) >> 7
}

// TIMG.LACTRTC: TIMG_LACTRTC
func (o *TIMG_Type) SetLACTRTC_LACT_RTC_STEP_LEN(value uint32) {
	volatile.StoreUint32(&o.LACTRTC.Reg, volatile.LoadUint32(&o.LACTRTC.Reg)&^(0xffffffc0)|value<<6)
}
func (o *TIMG_Type) GetLACTRTC_LACT_RTC_STEP_LEN() uint32 {
	return (volatile.LoadUint32(&o.LACTRTC.Reg) & 0xffffffc0) >> 6
}

// TIMG.LACTLO: TIMG_LACTLO
func (o *TIMG_Type) SetLACTLO(value uint32) {
	volatile.StoreUint32(&o.LACTLO.Reg, value)
}
func (o *TIMG_Type) GetLACTLO() uint32 {
	return volatile.LoadUint32(&o.LACTLO.Reg)
}

// TIMG.LACTHI: TIMG_LACTHI
func (o *TIMG_Type) SetLACTHI(value uint32) {
	volatile.StoreUint32(&o.LACTHI.Reg, value)
}
func (o *TIMG_Type) GetLACTHI() uint32 {
	return volatile.LoadUint32(&o.LACTHI.Reg)
}

// TIMG.LACTUPDATE: TIMG_LACTUPDATE
func (o *TIMG_Type) SetLACTUPDATE(value uint32) {
	volatile.StoreUint32(&o.LACTUPDATE.Reg, value)
}
func (o *TIMG_Type) GetLACTUPDATE() uint32 {
	return volatile.LoadUint32(&o.LACTUPDATE.Reg)
}

// TIMG.LACTALARMLO: TIMG_LACTALARMLO
func (o *TIMG_Type) SetLACTALARMLO(value uint32) {
	volatile.StoreUint32(&o.LACTALARMLO.Reg, value)
}
func (o *TIMG_Type) GetLACTALARMLO() uint32 {
	return volatile.LoadUint32(&o.LACTALARMLO.Reg)
}

// TIMG.LACTALARMHI: TIMG_LACTALARMHI
func (o *TIMG_Type) SetLACTALARMHI(value uint32) {
	volatile.StoreUint32(&o.LACTALARMHI.Reg, value)
}
func (o *TIMG_Type) GetLACTALARMHI() uint32 {
	return volatile.LoadUint32(&o.LACTALARMHI.Reg)
}

// TIMG.LACTLOADLO: TIMG_LACTLOADLO
func (o *TIMG_Type) SetLACTLOADLO(value uint32) {
	volatile.StoreUint32(&o.LACTLOADLO.Reg, value)
}
func (o *TIMG_Type) GetLACTLOADLO() uint32 {
	return volatile.LoadUint32(&o.LACTLOADLO.Reg)
}

// TIMG.LACTLOADHI: TIMG_LACTLOADHI
func (o *TIMG_Type) SetLACTLOADHI(value uint32) {
	volatile.StoreUint32(&o.LACTLOADHI.Reg, value)
}
func (o *TIMG_Type) GetLACTLOADHI() uint32 {
	return volatile.LoadUint32(&o.LACTLOADHI.Reg)
}

// TIMG.LACTLOAD: TIMG_LACTLOAD
func (o *TIMG_Type) SetLACTLOAD(value uint32) {
	volatile.StoreUint32(&o.LACTLOAD.Reg, value)
}
func (o *TIMG_Type) GetLACTLOAD() uint32 {
	return volatile.LoadUint32(&o.LACTLOAD.Reg)
}

// TIMG.INT_ENA_TIMERS: TIMG_INT_ENA_TIMERS
func (o *TIMG_Type) SetINT_ENA_TIMERS_LACT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_LACT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x8) >> 3
}
func (o *TIMG_Type) SetINT_ENA_TIMERS_WDT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_WDT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_ENA_TIMERS_T1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_T1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_ENA_TIMERS_T0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA_TIMERS.Reg, volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_ENA_TIMERS_T0_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA_TIMERS.Reg) & 0x1
}

// TIMG.INT_RAW_TIMERS: TIMG_INT_RAW_TIMERS
func (o *TIMG_Type) SetINT_RAW_TIMERS_LACT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_LACT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x8) >> 3
}
func (o *TIMG_Type) SetINT_RAW_TIMERS_WDT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_WDT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_RAW_TIMERS_T1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_T1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_RAW_TIMERS_T0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW_TIMERS.Reg, volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_RAW_TIMERS_T0_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW_TIMERS.Reg) & 0x1
}

// TIMG.INT_ST_TIMERS: TIMG_INT_ST_TIMERS
func (o *TIMG_Type) SetINT_ST_TIMERS_LACT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_LACT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x8) >> 3
}
func (o *TIMG_Type) SetINT_ST_TIMERS_WDT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_WDT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_ST_TIMERS_T1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_T1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_ST_TIMERS_T0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST_TIMERS.Reg, volatile.LoadUint32(&o.INT_ST_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_ST_TIMERS_T0_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST_TIMERS.Reg) & 0x1
}

// TIMG.INT_CLR_TIMERS: TIMG_INT_CLR_TIMERS
func (o *TIMG_Type) SetINT_CLR_TIMERS_LACT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x8)|value<<3)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_LACT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x8) >> 3
}
func (o *TIMG_Type) SetINT_CLR_TIMERS_WDT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x4)|value<<2)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_WDT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x4) >> 2
}
func (o *TIMG_Type) SetINT_CLR_TIMERS_T1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x2)|value<<1)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_T1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x2) >> 1
}
func (o *TIMG_Type) SetINT_CLR_TIMERS_T0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR_TIMERS.Reg, volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg)&^(0x1)|value)
}
func (o *TIMG_Type) GetINT_CLR_TIMERS_T0_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR_TIMERS.Reg) & 0x1
}

// TIMG.NTIMERS_DATE: TIMG_NTIMERS_DATE
func (o *TIMG_Type) SetNTIMERS_DATE(value uint32) {
	volatile.StoreUint32(&o.NTIMERS_DATE.Reg, volatile.LoadUint32(&o.NTIMERS_DATE.Reg)&^(0xfffffff)|value)
}
func (o *TIMG_Type) GetNTIMERS_DATE() uint32 {
	return volatile.LoadUint32(&o.NTIMERS_DATE.Reg) & 0xfffffff
}

// TIMG.TIMGCLK: TIMGCLK
func (o *TIMG_Type) SetTIMGCLK_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.TIMGCLK.Reg, volatile.LoadUint32(&o.TIMGCLK.Reg)&^(0x80000000)|value<<31)
}
func (o *TIMG_Type) GetTIMGCLK_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.TIMGCLK.Reg) & 0x80000000) >> 31
}

type SPI_ENCRYPT_Type struct {
}

type GPIO_SD_Type struct {
	SIGMADELTA0        volatile.Register32 // 0x0
	SIGMADELTA1        volatile.Register32 // 0x4
	SIGMADELTA2        volatile.Register32 // 0x8
	SIGMADELTA3        volatile.Register32 // 0xC
	SIGMADELTA4        volatile.Register32 // 0x10
	SIGMADELTA5        volatile.Register32 // 0x14
	SIGMADELTA6        volatile.Register32 // 0x18
	SIGMADELTA7        volatile.Register32 // 0x1C
	SIGMADELTA_CG      volatile.Register32 // 0x20
	SIGMADELTA_MISC    volatile.Register32 // 0x24
	SIGMADELTA_VERSION volatile.Register32 // 0x28
}

// GPIO_SD.SIGMADELTA0: GPIO_SIGMADELTA0
func (o *GPIO_SD_Type) SetSIGMADELTA0_SD0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA0.Reg, volatile.LoadUint32(&o.SIGMADELTA0.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA0_SD0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA0.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA0_SD0_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA0.Reg, volatile.LoadUint32(&o.SIGMADELTA0.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA0_SD0_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA0.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA1: GPIO_SIGMADELTA1
func (o *GPIO_SD_Type) SetSIGMADELTA1_SD1_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA1.Reg, volatile.LoadUint32(&o.SIGMADELTA1.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA1_SD1_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA1.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA1_SD1_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA1.Reg, volatile.LoadUint32(&o.SIGMADELTA1.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA1_SD1_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA1.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA2: GPIO_SIGMADELTA2
func (o *GPIO_SD_Type) SetSIGMADELTA2_SD2_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA2.Reg, volatile.LoadUint32(&o.SIGMADELTA2.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA2_SD2_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA2.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA2_SD2_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA2.Reg, volatile.LoadUint32(&o.SIGMADELTA2.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA2_SD2_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA2.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA3: GPIO_SIGMADELTA3
func (o *GPIO_SD_Type) SetSIGMADELTA3_SD3_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA3.Reg, volatile.LoadUint32(&o.SIGMADELTA3.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA3_SD3_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA3.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA3_SD3_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA3.Reg, volatile.LoadUint32(&o.SIGMADELTA3.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA3_SD3_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA3.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA4: GPIO_SIGMADELTA4
func (o *GPIO_SD_Type) SetSIGMADELTA4_SD4_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA4.Reg, volatile.LoadUint32(&o.SIGMADELTA4.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA4_SD4_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA4.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA4_SD4_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA4.Reg, volatile.LoadUint32(&o.SIGMADELTA4.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA4_SD4_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA4.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA5: GPIO_SIGMADELTA5
func (o *GPIO_SD_Type) SetSIGMADELTA5_SD5_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA5.Reg, volatile.LoadUint32(&o.SIGMADELTA5.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA5_SD5_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA5.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA5_SD5_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA5.Reg, volatile.LoadUint32(&o.SIGMADELTA5.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA5_SD5_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA5.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA6: GPIO_SIGMADELTA6
func (o *GPIO_SD_Type) SetSIGMADELTA6_SD6_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA6.Reg, volatile.LoadUint32(&o.SIGMADELTA6.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA6_SD6_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA6.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA6_SD6_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA6.Reg, volatile.LoadUint32(&o.SIGMADELTA6.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA6_SD6_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA6.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA7: GPIO_SIGMADELTA7
func (o *GPIO_SD_Type) SetSIGMADELTA7_SD7_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA7.Reg, volatile.LoadUint32(&o.SIGMADELTA7.Reg)&^(0xff00)|value<<8)
}
func (o *GPIO_SD_Type) GetSIGMADELTA7_SD7_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA7.Reg) & 0xff00) >> 8
}
func (o *GPIO_SD_Type) SetSIGMADELTA7_SD7_IN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA7.Reg, volatile.LoadUint32(&o.SIGMADELTA7.Reg)&^(0xff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA7_SD7_IN() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA7.Reg) & 0xff
}

// GPIO_SD.SIGMADELTA_CG: GPIO_SIGMADELTA_CG
func (o *GPIO_SD_Type) SetSIGMADELTA_CG_SD_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA_CG.Reg, volatile.LoadUint32(&o.SIGMADELTA_CG.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_SD_Type) GetSIGMADELTA_CG_SD_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA_CG.Reg) & 0x80000000) >> 31
}

// GPIO_SD.SIGMADELTA_MISC: GPIO_SIGMADELTA_MISC
func (o *GPIO_SD_Type) SetSIGMADELTA_MISC_SPI_SWAP(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA_MISC.Reg, volatile.LoadUint32(&o.SIGMADELTA_MISC.Reg)&^(0x80000000)|value<<31)
}
func (o *GPIO_SD_Type) GetSIGMADELTA_MISC_SPI_SWAP() uint32 {
	return (volatile.LoadUint32(&o.SIGMADELTA_MISC.Reg) & 0x80000000) >> 31
}

// GPIO_SD.SIGMADELTA_VERSION: GPIO_SIGMADELTA_VERSION
func (o *GPIO_SD_Type) SetSIGMADELTA_VERSION_SD_DATE(value uint32) {
	volatile.StoreUint32(&o.SIGMADELTA_VERSION.Reg, volatile.LoadUint32(&o.SIGMADELTA_VERSION.Reg)&^(0xfffffff)|value)
}
func (o *GPIO_SD_Type) GetSIGMADELTA_VERSION_SD_DATE() uint32 {
	return volatile.LoadUint32(&o.SIGMADELTA_VERSION.Reg) & 0xfffffff
}

type SDMMC_Type struct {
}

type IO_MUX_Type struct {
	PIN_CTRL volatile.Register32 // 0x0
	GPIO36   volatile.Register32 // 0x4
	GPIO37   volatile.Register32 // 0x8
	GPIO38   volatile.Register32 // 0xC
	GPIO39   volatile.Register32 // 0x10
	GPIO34   volatile.Register32 // 0x14
	GPIO35   volatile.Register32 // 0x18
	GPIO32   volatile.Register32 // 0x1C
	GPIO33   volatile.Register32 // 0x20
	GPIO25   volatile.Register32 // 0x24
	GPIO26   volatile.Register32 // 0x28
	GPIO27   volatile.Register32 // 0x2C
	MTMS     volatile.Register32 // 0x30
	MTDI     volatile.Register32 // 0x34
	MTCK     volatile.Register32 // 0x38
	MTDO     volatile.Register32 // 0x3C
	GPIO2    volatile.Register32 // 0x40
	GPIO0    volatile.Register32 // 0x44
	GPIO4    volatile.Register32 // 0x48
	GPIO16   volatile.Register32 // 0x4C
	GPIO17   volatile.Register32 // 0x50
	SD_DATA2 volatile.Register32 // 0x54
	SD_DATA3 volatile.Register32 // 0x58
	SD_CMD   volatile.Register32 // 0x5C
	SD_CLK   volatile.Register32 // 0x60
	SD_DATA0 volatile.Register32 // 0x64
	SD_DATA1 volatile.Register32 // 0x68
	GPIO5    volatile.Register32 // 0x6C
	GPIO18   volatile.Register32 // 0x70
	GPIO19   volatile.Register32 // 0x74
	GPIO20   volatile.Register32 // 0x78
	GPIO21   volatile.Register32 // 0x7C
	GPIO22   volatile.Register32 // 0x80
	U0RXD    volatile.Register32 // 0x84
	U0TXD    volatile.Register32 // 0x88
	GPIO23   volatile.Register32 // 0x8C
	GPIO24   volatile.Register32 // 0x90
}

// IO_MUX.PIN_CTRL: configures clock source and clock output pins
func (o *IO_MUX_Type) SetPIN_CTRL_PIN_CTRL_CLK3(value uint32) {
	volatile.StoreUint32(&o.PIN_CTRL.Reg, volatile.LoadUint32(&o.PIN_CTRL.Reg)&^(0x700)|value<<8)
}
func (o *IO_MUX_Type) GetPIN_CTRL_PIN_CTRL_CLK3() uint32 {
	return (volatile.LoadUint32(&o.PIN_CTRL.Reg) & 0x700) >> 8
}
func (o *IO_MUX_Type) SetPIN_CTRL_PIN_CTRL_CLK2(value uint32) {
	volatile.StoreUint32(&o.PIN_CTRL.Reg, volatile.LoadUint32(&o.PIN_CTRL.Reg)&^(0x70)|value<<4)
}
func (o *IO_MUX_Type) GetPIN_CTRL_PIN_CTRL_CLK2() uint32 {
	return (volatile.LoadUint32(&o.PIN_CTRL.Reg) & 0x70) >> 4
}
func (o *IO_MUX_Type) SetPIN_CTRL_PIN_CTRL_CLK1(value uint32) {
	volatile.StoreUint32(&o.PIN_CTRL.Reg, volatile.LoadUint32(&o.PIN_CTRL.Reg)&^(0x7)|value)
}
func (o *IO_MUX_Type) GetPIN_CTRL_PIN_CTRL_CLK1() uint32 {
	return volatile.LoadUint32(&o.PIN_CTRL.Reg) & 0x7
}

// IO_MUX.GPIO36: configures IO_MUX for GPIO36
func (o *IO_MUX_Type) SetGPIO36_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO36_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO36_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO36_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO36_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO36_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO36_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO36_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO36_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO36_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO36_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO36_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO36.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO36_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO36.Reg, volatile.LoadUint32(&o.GPIO36.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO36_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO36.Reg) & 0x1
}

// IO_MUX.GPIO37: configures IO_MUX for GPIO37
func (o *IO_MUX_Type) SetGPIO37_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO37_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO37_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO37_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO37_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO37_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO37_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO37_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO37_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO37_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO37_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO37_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO37.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO37_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO37.Reg, volatile.LoadUint32(&o.GPIO37.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO37_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO37.Reg) & 0x1
}

// IO_MUX.GPIO38: configures IO_MUX for GPIO38
func (o *IO_MUX_Type) SetGPIO38_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO38_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO38_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO38_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO38_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO38_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO38_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO38_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO38_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO38_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO38_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO38_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO38.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO38_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO38.Reg, volatile.LoadUint32(&o.GPIO38.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO38_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO38.Reg) & 0x1
}

// IO_MUX.GPIO39: configures IO_MUX for GPIO39
func (o *IO_MUX_Type) SetGPIO39_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO39_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO39_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO39_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO39_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO39_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO39_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO39_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO39_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO39_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO39_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO39_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO39.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO39_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO39.Reg, volatile.LoadUint32(&o.GPIO39.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO39_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO39.Reg) & 0x1
}

// IO_MUX.GPIO34: configures IO_MUX for GPIO34
func (o *IO_MUX_Type) SetGPIO34_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO34_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO34_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO34_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO34_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO34_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO34_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO34_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO34_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO34_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO34_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO34_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO34.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO34_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO34.Reg, volatile.LoadUint32(&o.GPIO34.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO34_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO34.Reg) & 0x1
}

// IO_MUX.GPIO35: configures IO_MUX for GPIO35
func (o *IO_MUX_Type) SetGPIO35_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO35_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO35_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO35_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO35_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO35_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO35_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO35_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO35_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO35_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO35_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO35_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO35.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO35_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO35.Reg, volatile.LoadUint32(&o.GPIO35.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO35_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO35.Reg) & 0x1
}

// IO_MUX.GPIO32: configures IO_MUX for GPIO32
func (o *IO_MUX_Type) SetGPIO32_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO32_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO32_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO32_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO32_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO32_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO32_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO32_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO32_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO32_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO32_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO32_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO32.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO32_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO32.Reg, volatile.LoadUint32(&o.GPIO32.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO32_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO32.Reg) & 0x1
}

// IO_MUX.GPIO33: configures IO_MUX for GPIO33
func (o *IO_MUX_Type) SetGPIO33_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO33_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO33_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO33_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO33_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO33_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO33_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO33_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO33_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO33_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO33_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO33_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO33.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO33_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO33.Reg, volatile.LoadUint32(&o.GPIO33.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO33_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO33.Reg) & 0x1
}

// IO_MUX.GPIO25: configures IO_MUX for GPIO25
func (o *IO_MUX_Type) SetGPIO25_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO25_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO25_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO25_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO25_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO25_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO25_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO25_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO25_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO25_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO25_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO25_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO25.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO25_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO25.Reg, volatile.LoadUint32(&o.GPIO25.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO25_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO25.Reg) & 0x1
}

// IO_MUX.GPIO26: configures IO_MUX for GPIO26
func (o *IO_MUX_Type) SetGPIO26_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO26_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO26_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO26_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO26_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO26_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO26_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO26_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO26_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO26_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO26_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO26_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO26.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO26_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO26.Reg, volatile.LoadUint32(&o.GPIO26.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO26_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO26.Reg) & 0x1
}

// IO_MUX.GPIO27: configures IO_MUX for GPIO27
func (o *IO_MUX_Type) SetGPIO27_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO27_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO27_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO27_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO27_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO27_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO27_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO27_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO27_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO27_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO27_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO27_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO27.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO27_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO27.Reg, volatile.LoadUint32(&o.GPIO27.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO27_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO27.Reg) & 0x1
}

// IO_MUX.MTMS: configures IO_MUX for MTMS
func (o *IO_MUX_Type) SetMTMS_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetMTMS_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetMTMS_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetMTMS_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetMTMS_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetMTMS_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetMTMS_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetMTMS_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetMTMS_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetMTMS_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetMTMS_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetMTMS_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetMTMS_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetMTMS_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetMTMS_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetMTMS_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetMTMS_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetMTMS_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetMTMS_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetMTMS_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTMS.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetMTMS_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.MTMS.Reg, volatile.LoadUint32(&o.MTMS.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetMTMS_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.MTMS.Reg) & 0x1
}

// IO_MUX.MTDI: configures IO_MUX for MTDI
func (o *IO_MUX_Type) SetMTDI_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetMTDI_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetMTDI_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetMTDI_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetMTDI_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetMTDI_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetMTDI_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetMTDI_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetMTDI_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetMTDI_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetMTDI_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetMTDI_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetMTDI_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetMTDI_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetMTDI_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetMTDI_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetMTDI_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetMTDI_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetMTDI_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetMTDI_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTDI.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetMTDI_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.MTDI.Reg, volatile.LoadUint32(&o.MTDI.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetMTDI_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.MTDI.Reg) & 0x1
}

// IO_MUX.MTCK: configures IO_MUX for MTCK
func (o *IO_MUX_Type) SetMTCK_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetMTCK_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetMTCK_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetMTCK_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetMTCK_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetMTCK_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetMTCK_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetMTCK_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetMTCK_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetMTCK_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetMTCK_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetMTCK_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetMTCK_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetMTCK_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetMTCK_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetMTCK_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetMTCK_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetMTCK_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetMTCK_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetMTCK_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTCK.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetMTCK_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.MTCK.Reg, volatile.LoadUint32(&o.MTCK.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetMTCK_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.MTCK.Reg) & 0x1
}

// IO_MUX.MTDO: configures IO_MUX for MTDO
func (o *IO_MUX_Type) SetMTDO_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetMTDO_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetMTDO_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetMTDO_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetMTDO_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetMTDO_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetMTDO_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetMTDO_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetMTDO_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetMTDO_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetMTDO_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetMTDO_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetMTDO_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetMTDO_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetMTDO_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetMTDO_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetMTDO_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetMTDO_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetMTDO_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetMTDO_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.MTDO.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetMTDO_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.MTDO.Reg, volatile.LoadUint32(&o.MTDO.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetMTDO_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.MTDO.Reg) & 0x1
}

// IO_MUX.GPIO2: configures IO_MUX for GPIO2
func (o *IO_MUX_Type) SetGPIO2_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO2_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO2_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO2_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO2_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO2_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO2_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO2_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO2_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO2.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO2_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO2.Reg, volatile.LoadUint32(&o.GPIO2.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO2_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO2.Reg) & 0x1
}

// IO_MUX.GPIO0: configures IO_MUX for GPIO0
func (o *IO_MUX_Type) SetGPIO0_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO0_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO0_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO0_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO0_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO0_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO0_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO0_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO0_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO0_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO0_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO0_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO0.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO0_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO0.Reg, volatile.LoadUint32(&o.GPIO0.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO0_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO0.Reg) & 0x1
}

// IO_MUX.GPIO4: configures IO_MUX for GPIO4
func (o *IO_MUX_Type) SetGPIO4_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO4_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO4_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO4_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO4_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO4_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO4_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO4_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO4_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO4_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO4_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO4_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO4.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO4_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO4.Reg, volatile.LoadUint32(&o.GPIO4.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO4_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO4.Reg) & 0x1
}

// IO_MUX.GPIO16: configures IO_MUX for GPIO16
func (o *IO_MUX_Type) SetGPIO16_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO16_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO16_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO16_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO16_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO16_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO16_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO16_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO16_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO16_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO16_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO16_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO16.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO16_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO16.Reg, volatile.LoadUint32(&o.GPIO16.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO16_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO16.Reg) & 0x1
}

// IO_MUX.GPIO17: configures IO_MUX for GPIO17
func (o *IO_MUX_Type) SetGPIO17_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO17_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO17_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO17_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO17_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO17_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO17_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO17_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO17_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO17_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO17_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO17_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO17.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO17_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO17.Reg, volatile.LoadUint32(&o.GPIO17.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO17_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO17.Reg) & 0x1
}

// IO_MUX.SD_DATA2: configures IO_MUX for SD_DATA2
func (o *IO_MUX_Type) SetSD_DATA2_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetSD_DATA2_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetSD_DATA2_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetSD_DATA2_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetSD_DATA2_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetSD_DATA2_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetSD_DATA2_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetSD_DATA2_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetSD_DATA2_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetSD_DATA2_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetSD_DATA2_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetSD_DATA2_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetSD_DATA2_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetSD_DATA2_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetSD_DATA2_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetSD_DATA2_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetSD_DATA2_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetSD_DATA2_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetSD_DATA2_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetSD_DATA2_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetSD_DATA2_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA2.Reg, volatile.LoadUint32(&o.SD_DATA2.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetSD_DATA2_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.SD_DATA2.Reg) & 0x1
}

// IO_MUX.SD_DATA3: configures IO_MUX for SD_DATA3
func (o *IO_MUX_Type) SetSD_DATA3_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetSD_DATA3_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetSD_DATA3_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetSD_DATA3_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetSD_DATA3_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetSD_DATA3_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetSD_DATA3_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetSD_DATA3_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetSD_DATA3_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetSD_DATA3_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetSD_DATA3_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetSD_DATA3_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetSD_DATA3_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetSD_DATA3_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetSD_DATA3_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetSD_DATA3_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetSD_DATA3_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetSD_DATA3_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetSD_DATA3_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetSD_DATA3_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetSD_DATA3_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA3.Reg, volatile.LoadUint32(&o.SD_DATA3.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetSD_DATA3_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.SD_DATA3.Reg) & 0x1
}

// IO_MUX.SD_CMD: configures IO_MUX for SD_CMD
func (o *IO_MUX_Type) SetSD_CMD_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetSD_CMD_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetSD_CMD_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetSD_CMD_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetSD_CMD_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetSD_CMD_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetSD_CMD_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetSD_CMD_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetSD_CMD_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetSD_CMD_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetSD_CMD_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetSD_CMD_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetSD_CMD_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetSD_CMD_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetSD_CMD_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetSD_CMD_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetSD_CMD_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetSD_CMD_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetSD_CMD_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetSD_CMD_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_CMD.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetSD_CMD_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.SD_CMD.Reg, volatile.LoadUint32(&o.SD_CMD.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetSD_CMD_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.SD_CMD.Reg) & 0x1
}

// IO_MUX.SD_CLK: configures IO_MUX for SD_CLK
func (o *IO_MUX_Type) SetSD_CLK_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetSD_CLK_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetSD_CLK_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetSD_CLK_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetSD_CLK_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetSD_CLK_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetSD_CLK_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetSD_CLK_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetSD_CLK_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetSD_CLK_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetSD_CLK_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetSD_CLK_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetSD_CLK_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetSD_CLK_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetSD_CLK_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetSD_CLK_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetSD_CLK_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetSD_CLK_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetSD_CLK_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetSD_CLK_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_CLK.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetSD_CLK_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.SD_CLK.Reg, volatile.LoadUint32(&o.SD_CLK.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetSD_CLK_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.SD_CLK.Reg) & 0x1
}

// IO_MUX.SD_DATA0: configures IO_MUX for SD_DATA0
func (o *IO_MUX_Type) SetSD_DATA0_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetSD_DATA0_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetSD_DATA0_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetSD_DATA0_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetSD_DATA0_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetSD_DATA0_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetSD_DATA0_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetSD_DATA0_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetSD_DATA0_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetSD_DATA0_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetSD_DATA0_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetSD_DATA0_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetSD_DATA0_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetSD_DATA0_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetSD_DATA0_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetSD_DATA0_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetSD_DATA0_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetSD_DATA0_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetSD_DATA0_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetSD_DATA0_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetSD_DATA0_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA0.Reg, volatile.LoadUint32(&o.SD_DATA0.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetSD_DATA0_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.SD_DATA0.Reg) & 0x1
}

// IO_MUX.SD_DATA1: configures IO_MUX for SD_DATA1
func (o *IO_MUX_Type) SetSD_DATA1_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetSD_DATA1_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetSD_DATA1_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetSD_DATA1_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetSD_DATA1_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetSD_DATA1_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetSD_DATA1_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetSD_DATA1_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetSD_DATA1_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetSD_DATA1_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetSD_DATA1_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetSD_DATA1_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetSD_DATA1_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetSD_DATA1_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetSD_DATA1_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetSD_DATA1_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetSD_DATA1_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetSD_DATA1_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetSD_DATA1_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetSD_DATA1_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetSD_DATA1_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.SD_DATA1.Reg, volatile.LoadUint32(&o.SD_DATA1.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetSD_DATA1_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.SD_DATA1.Reg) & 0x1
}

// IO_MUX.GPIO5: configures IO_MUX for GPIO5
func (o *IO_MUX_Type) SetGPIO5_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO5_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO5_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO5_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO5_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO5_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO5_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO5_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO5_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO5_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO5_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO5_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO5.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO5_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO5.Reg, volatile.LoadUint32(&o.GPIO5.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO5_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO5.Reg) & 0x1
}

// IO_MUX.GPIO18: configures IO_MUX for GPIO18
func (o *IO_MUX_Type) SetGPIO18_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO18_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO18_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO18_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO18_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO18_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO18_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO18_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO18_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO18_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO18_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO18_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO18.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO18_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO18.Reg, volatile.LoadUint32(&o.GPIO18.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO18_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO18.Reg) & 0x1
}

// IO_MUX.GPIO19: configures IO_MUX for GPIO19
func (o *IO_MUX_Type) SetGPIO19_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO19_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO19_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO19_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO19_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO19_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO19_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO19_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO19_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO19_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO19_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO19_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO19.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO19_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO19.Reg, volatile.LoadUint32(&o.GPIO19.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO19_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO19.Reg) & 0x1
}

// IO_MUX.GPIO20: configures IO_MUX for GPIO20
func (o *IO_MUX_Type) SetGPIO20_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO20_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO20_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO20_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO20_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO20_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO20_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO20_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO20_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO20_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO20_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO20_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO20.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO20_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO20.Reg, volatile.LoadUint32(&o.GPIO20.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO20_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO20.Reg) & 0x1
}

// IO_MUX.GPIO21: configures IO_MUX for GPIO21
func (o *IO_MUX_Type) SetGPIO21_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO21_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO21_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO21_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO21_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO21_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO21_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO21_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO21_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO21_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO21_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO21_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO21.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO21_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO21.Reg, volatile.LoadUint32(&o.GPIO21.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO21_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO21.Reg) & 0x1
}

// IO_MUX.GPIO22: configures IO_MUX for GPIO22
func (o *IO_MUX_Type) SetGPIO22_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO22_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO22_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO22_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO22_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO22_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO22_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO22_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO22_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO22_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO22_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO22_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO22.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO22_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO22.Reg, volatile.LoadUint32(&o.GPIO22.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO22_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO22.Reg) & 0x1
}

// IO_MUX.U0RXD: configures IO_MUX for U0RXD
func (o *IO_MUX_Type) SetU0RXD_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetU0RXD_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetU0RXD_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetU0RXD_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetU0RXD_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetU0RXD_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetU0RXD_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetU0RXD_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetU0RXD_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetU0RXD_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetU0RXD_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetU0RXD_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetU0RXD_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetU0RXD_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetU0RXD_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetU0RXD_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetU0RXD_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetU0RXD_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetU0RXD_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetU0RXD_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.U0RXD.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetU0RXD_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.U0RXD.Reg, volatile.LoadUint32(&o.U0RXD.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetU0RXD_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.U0RXD.Reg) & 0x1
}

// IO_MUX.U0TXD: configures IO_MUX for U0TXD
func (o *IO_MUX_Type) SetU0TXD_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetU0TXD_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetU0TXD_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetU0TXD_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetU0TXD_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetU0TXD_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetU0TXD_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetU0TXD_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetU0TXD_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetU0TXD_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetU0TXD_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetU0TXD_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetU0TXD_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetU0TXD_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetU0TXD_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetU0TXD_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetU0TXD_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetU0TXD_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetU0TXD_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetU0TXD_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.U0TXD.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetU0TXD_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.U0TXD.Reg, volatile.LoadUint32(&o.U0TXD.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetU0TXD_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.U0TXD.Reg) & 0x1
}

// IO_MUX.GPIO23: configures IO_MUX for GPIO23
func (o *IO_MUX_Type) SetGPIO23_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO23_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO23_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO23_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO23_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO23_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO23_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO23_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO23_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO23_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO23_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO23_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO23.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO23_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO23.Reg, volatile.LoadUint32(&o.GPIO23.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO23_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO23.Reg) & 0x1
}

// IO_MUX.GPIO24: configures IO_MUX for GPIO24
func (o *IO_MUX_Type) SetGPIO24_MCU_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x3000)|value<<12)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x3000) >> 12
}
func (o *IO_MUX_Type) SetGPIO24_FUN_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0xc00)|value<<10)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0xc00) >> 10
}
func (o *IO_MUX_Type) SetGPIO24_FUN_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x200)|value<<9)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x200) >> 9
}
func (o *IO_MUX_Type) SetGPIO24_FUN_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x100)|value<<8)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x100) >> 8
}
func (o *IO_MUX_Type) SetGPIO24_FUN_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x80)|value<<7)
}
func (o *IO_MUX_Type) GetGPIO24_FUN_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x80) >> 7
}
func (o *IO_MUX_Type) SetGPIO24_MCU_DRV(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x60)|value<<5)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_DRV() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x60) >> 5
}
func (o *IO_MUX_Type) SetGPIO24_MCU_IE(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x10)|value<<4)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_IE() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x10) >> 4
}
func (o *IO_MUX_Type) SetGPIO24_MCU_WPU(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x8)|value<<3)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_WPU() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x8) >> 3
}
func (o *IO_MUX_Type) SetGPIO24_MCU_WPD(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x4)|value<<2)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_WPD() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x4) >> 2
}
func (o *IO_MUX_Type) SetGPIO24_SLP_SEL(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x2)|value<<1)
}
func (o *IO_MUX_Type) GetGPIO24_SLP_SEL() uint32 {
	return (volatile.LoadUint32(&o.GPIO24.Reg) & 0x2) >> 1
}
func (o *IO_MUX_Type) SetGPIO24_MCU_OE(value uint32) {
	volatile.StoreUint32(&o.GPIO24.Reg, volatile.LoadUint32(&o.GPIO24.Reg)&^(0x1)|value)
}
func (o *IO_MUX_Type) GetGPIO24_MCU_OE() uint32 {
	return volatile.LoadUint32(&o.GPIO24.Reg) & 0x1
}

type CAN_Type struct {
}

type I2S_Type struct {
	_                    [8]byte
	CONF                 volatile.Register32 // 0x8
	INT_RAW              volatile.Register32 // 0xC
	INT_ST               volatile.Register32 // 0x10
	INT_ENA              volatile.Register32 // 0x14
	INT_CLR              volatile.Register32 // 0x18
	TIMING               volatile.Register32 // 0x1C
	FIFO_CONF            volatile.Register32 // 0x20
	RXEOF_NUM            volatile.Register32 // 0x24
	CONF_SIGLE_DATA      volatile.Register32 // 0x28
	CONF_CHAN            volatile.Register32 // 0x2C
	OUT_LINK             volatile.Register32 // 0x30
	IN_LINK              volatile.Register32 // 0x34
	OUT_EOF_DES_ADDR     volatile.Register32 // 0x38
	IN_EOF_DES_ADDR      volatile.Register32 // 0x3C
	OUT_EOF_BFR_DES_ADDR volatile.Register32 // 0x40
	AHB_TEST             volatile.Register32 // 0x44
	INLINK_DSCR          volatile.Register32 // 0x48
	INLINK_DSCR_BF0      volatile.Register32 // 0x4C
	INLINK_DSCR_BF1      volatile.Register32 // 0x50
	OUTLINK_DSCR         volatile.Register32 // 0x54
	OUTLINK_DSCR_BF0     volatile.Register32 // 0x58
	OUTLINK_DSCR_BF1     volatile.Register32 // 0x5C
	LC_CONF              volatile.Register32 // 0x60
	OUTFIFO_PUSH         volatile.Register32 // 0x64
	INFIFO_POP           volatile.Register32 // 0x68
	LC_STATE0            volatile.Register32 // 0x6C
	LC_STATE1            volatile.Register32 // 0x70
	LC_HUNG_CONF         volatile.Register32 // 0x74
	_                    [8]byte
	CVSD_CONF0           volatile.Register32 // 0x80
	CVSD_CONF1           volatile.Register32 // 0x84
	CVSD_CONF2           volatile.Register32 // 0x88
	PLC_CONF0            volatile.Register32 // 0x8C
	PLC_CONF1            volatile.Register32 // 0x90
	PLC_CONF2            volatile.Register32 // 0x94
	ESCO_CONF0           volatile.Register32 // 0x98
	SCO_CONF0            volatile.Register32 // 0x9C
	CONF1                volatile.Register32 // 0xA0
	PD_CONF              volatile.Register32 // 0xA4
	CONF2                volatile.Register32 // 0xA8
	CLKM_CONF            volatile.Register32 // 0xAC
	SAMPLE_RATE_CONF     volatile.Register32 // 0xB0
	PDM_CONF             volatile.Register32 // 0xB4
	PDM_FREQ_CONF        volatile.Register32 // 0xB8
	STATE                volatile.Register32 // 0xBC
	_                    [60]byte
	DATE                 volatile.Register32 // 0xFC
}

// I2S.CONF: I2S_CONF
func (o *I2S_Type) SetCONF_SIG_LOOPBACK(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x40000)|value<<18)
}
func (o *I2S_Type) GetCONF_SIG_LOOPBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x40000) >> 18
}
func (o *I2S_Type) SetCONF_RX_MSB_RIGHT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x20000)|value<<17)
}
func (o *I2S_Type) GetCONF_RX_MSB_RIGHT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x20000) >> 17
}
func (o *I2S_Type) SetCONF_TX_MSB_RIGHT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetCONF_TX_MSB_RIGHT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetCONF_RX_MONO(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetCONF_RX_MONO() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetCONF_TX_MONO(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetCONF_TX_MONO() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetCONF_RX_SHORT_SYNC(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetCONF_RX_SHORT_SYNC() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetCONF_TX_SHORT_SYNC(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetCONF_TX_SHORT_SYNC() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetCONF_RX_MSB_SHIFT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetCONF_RX_MSB_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetCONF_TX_MSB_SHIFT(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetCONF_TX_MSB_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetCONF_RX_RIGHT_FIRST(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetCONF_RX_RIGHT_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetCONF_TX_RIGHT_FIRST(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetCONF_TX_RIGHT_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetCONF_RX_SLAVE_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetCONF_RX_SLAVE_MOD() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetCONF_TX_SLAVE_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetCONF_TX_SLAVE_MOD() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetCONF_RX_START(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetCONF_RX_START() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetCONF_TX_START(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetCONF_TX_START() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetCONF_RX_FIFO_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetCONF_RX_FIFO_RESET() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetCONF_TX_FIFO_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetCONF_TX_FIFO_RESET() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetCONF_RX_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetCONF_RX_RESET() uint32 {
	return (volatile.LoadUint32(&o.CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetCONF_TX_RESET(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetCONF_TX_RESET() uint32 {
	return volatile.LoadUint32(&o.CONF.Reg) & 0x1
}

// I2S.INT_RAW: I2S_INT_RAW
func (o *I2S_Type) SetINT_RAW_OUT_TOTAL_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_RAW_OUT_TOTAL_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetINT_RAW_IN_DSCR_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_RAW_IN_DSCR_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_RAW_OUT_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_RAW_OUT_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_RAW_IN_DSCR_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_RAW_IN_DSCR_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_RAW_OUT_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_RAW_OUT_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_RAW_OUT_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_RAW_OUT_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_RAW_IN_ERR_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_RAW_IN_ERR_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_RAW_IN_SUC_EOF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_RAW_IN_SUC_EOF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_RAW_IN_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_RAW_IN_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_RAW_TX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_RAW_TX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_RAW_RX_HUNG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_RAW_RX_HUNG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_RAW_TX_REMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_RAW_TX_REMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_RAW_TX_WFULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_RAW_TX_WFULL_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_RAW_RX_REMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_RAW_RX_REMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_RAW_RX_WFULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_RAW_RX_WFULL_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_RAW_TX_PUT_DATA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_RAW_TX_PUT_DATA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_RAW_RX_TAKE_DATA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_RAW_RX_TAKE_DATA_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// I2S.INT_ST: I2S_INT_ST
func (o *I2S_Type) SetINT_ST_OUT_TOTAL_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_ST_OUT_TOTAL_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetINT_ST_IN_DSCR_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_ST_IN_DSCR_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_ST_OUT_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_ST_OUT_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_ST_IN_DSCR_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_ST_IN_DSCR_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_ST_OUT_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_ST_OUT_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_ST_OUT_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_ST_OUT_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_ST_IN_ERR_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_ST_IN_ERR_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_ST_IN_SUC_EOF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_ST_IN_SUC_EOF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_ST_IN_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_ST_IN_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_ST_TX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_ST_TX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_ST_RX_HUNG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_ST_RX_HUNG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_ST_TX_REMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_ST_TX_REMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_ST_TX_WFULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_ST_TX_WFULL_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_ST_RX_REMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_ST_RX_REMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_ST_RX_WFULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_ST_RX_WFULL_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_ST_TX_PUT_DATA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_ST_TX_PUT_DATA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_ST_RX_TAKE_DATA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_ST_RX_TAKE_DATA_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// I2S.INT_ENA: I2S_INT_ENA
func (o *I2S_Type) SetINT_ENA_OUT_TOTAL_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_ENA_OUT_TOTAL_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetINT_ENA_IN_DSCR_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_ENA_IN_DSCR_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_ENA_OUT_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_ENA_OUT_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_ENA_IN_DSCR_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_ENA_IN_DSCR_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_ENA_OUT_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_ENA_OUT_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_ENA_OUT_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_ENA_OUT_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_ENA_IN_ERR_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_ENA_IN_ERR_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_ENA_IN_SUC_EOF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_ENA_IN_SUC_EOF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_ENA_IN_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_ENA_IN_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_ENA_TX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_ENA_TX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_ENA_RX_HUNG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_ENA_RX_HUNG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_ENA_TX_REMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_ENA_TX_REMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_ENA_TX_WFULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_ENA_TX_WFULL_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_ENA_RX_REMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_ENA_RX_REMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_ENA_RX_WFULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_ENA_RX_WFULL_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_ENA_TX_PUT_DATA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_ENA_TX_PUT_DATA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_ENA_RX_TAKE_DATA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_ENA_RX_TAKE_DATA_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// I2S.INT_CLR: I2S_INT_CLR
func (o *I2S_Type) SetINT_CLR_OUT_TOTAL_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINT_CLR_OUT_TOTAL_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetINT_CLR_IN_DSCR_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *I2S_Type) GetINT_CLR_IN_DSCR_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *I2S_Type) SetINT_CLR_OUT_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *I2S_Type) GetINT_CLR_OUT_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *I2S_Type) SetINT_CLR_IN_DSCR_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetINT_CLR_IN_DSCR_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetINT_CLR_OUT_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetINT_CLR_OUT_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetINT_CLR_OUT_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetINT_CLR_OUT_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetINT_CLR_IN_ERR_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetINT_CLR_IN_ERR_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetINT_CLR_IN_SUC_EOF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetINT_CLR_IN_SUC_EOF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetINT_CLR_IN_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetINT_CLR_IN_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetINT_CLR_TX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetINT_CLR_TX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetINT_CLR_RX_HUNG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetINT_CLR_RX_HUNG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetINT_CLR_TX_REMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetINT_CLR_TX_REMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetINT_CLR_TX_WFULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetINT_CLR_TX_WFULL_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetINT_CLR_RX_REMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetINT_CLR_RX_REMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetINT_CLR_RX_WFULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetINT_CLR_RX_WFULL_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetINT_CLR_PUT_DATA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetINT_CLR_PUT_DATA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetINT_CLR_TAKE_DATA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetINT_CLR_TAKE_DATA_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// I2S.TIMING: I2S_TIMING
func (o *I2S_Type) SetTIMING_TX_BCK_IN_INV(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x1000000)|value<<24)
}
func (o *I2S_Type) GetTIMING_TX_BCK_IN_INV() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x1000000) >> 24
}
func (o *I2S_Type) SetTIMING_DATA_ENABLE_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc00000)|value<<22)
}
func (o *I2S_Type) GetTIMING_DATA_ENABLE_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc00000) >> 22
}
func (o *I2S_Type) SetTIMING_RX_DSYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x200000)|value<<21)
}
func (o *I2S_Type) GetTIMING_RX_DSYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x200000) >> 21
}
func (o *I2S_Type) SetTIMING_TX_DSYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x100000)|value<<20)
}
func (o *I2S_Type) GetTIMING_TX_DSYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x100000) >> 20
}
func (o *I2S_Type) SetTIMING_RX_BCK_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc0000)|value<<18)
}
func (o *I2S_Type) GetTIMING_RX_BCK_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc0000) >> 18
}
func (o *I2S_Type) SetTIMING_RX_WS_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x30000)|value<<16)
}
func (o *I2S_Type) GetTIMING_RX_WS_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x30000) >> 16
}
func (o *I2S_Type) SetTIMING_TX_SD_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc000)|value<<14)
}
func (o *I2S_Type) GetTIMING_TX_SD_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc000) >> 14
}
func (o *I2S_Type) SetTIMING_TX_WS_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x3000)|value<<12)
}
func (o *I2S_Type) GetTIMING_TX_WS_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x3000) >> 12
}
func (o *I2S_Type) SetTIMING_TX_BCK_OUT_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc00)|value<<10)
}
func (o *I2S_Type) GetTIMING_TX_BCK_OUT_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc00) >> 10
}
func (o *I2S_Type) SetTIMING_RX_SD_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x300)|value<<8)
}
func (o *I2S_Type) GetTIMING_RX_SD_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x300) >> 8
}
func (o *I2S_Type) SetTIMING_RX_WS_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc0)|value<<6)
}
func (o *I2S_Type) GetTIMING_RX_WS_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc0) >> 6
}
func (o *I2S_Type) SetTIMING_RX_BCK_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x30)|value<<4)
}
func (o *I2S_Type) GetTIMING_RX_BCK_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0x30) >> 4
}
func (o *I2S_Type) SetTIMING_TX_WS_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0xc)|value<<2)
}
func (o *I2S_Type) GetTIMING_TX_WS_IN_DELAY() uint32 {
	return (volatile.LoadUint32(&o.TIMING.Reg) & 0xc) >> 2
}
func (o *I2S_Type) SetTIMING_TX_BCK_IN_DELAY(value uint32) {
	volatile.StoreUint32(&o.TIMING.Reg, volatile.LoadUint32(&o.TIMING.Reg)&^(0x3)|value)
}
func (o *I2S_Type) GetTIMING_TX_BCK_IN_DELAY() uint32 {
	return volatile.LoadUint32(&o.TIMING.Reg) & 0x3
}

// I2S.FIFO_CONF: I2S_FIFO_CONF
func (o *I2S_Type) SetFIFO_CONF_RX_FIFO_MOD_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *I2S_Type) GetFIFO_CONF_RX_FIFO_MOD_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x100000) >> 20
}
func (o *I2S_Type) SetFIFO_CONF_TX_FIFO_MOD_FORCE_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x80000)|value<<19)
}
func (o *I2S_Type) GetFIFO_CONF_TX_FIFO_MOD_FORCE_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x80000) >> 19
}
func (o *I2S_Type) SetFIFO_CONF_RX_FIFO_MOD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x70000)|value<<16)
}
func (o *I2S_Type) GetFIFO_CONF_RX_FIFO_MOD() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x70000) >> 16
}
func (o *I2S_Type) SetFIFO_CONF_TX_FIFO_MOD(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0xe000)|value<<13)
}
func (o *I2S_Type) GetFIFO_CONF_TX_FIFO_MOD() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0xe000) >> 13
}
func (o *I2S_Type) SetFIFO_CONF_DSCR_EN(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetFIFO_CONF_DSCR_EN() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetFIFO_CONF_TX_DATA_NUM(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0xfc0)|value<<6)
}
func (o *I2S_Type) GetFIFO_CONF_TX_DATA_NUM() uint32 {
	return (volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0xfc0) >> 6
}
func (o *I2S_Type) SetFIFO_CONF_RX_DATA_NUM(value uint32) {
	volatile.StoreUint32(&o.FIFO_CONF.Reg, volatile.LoadUint32(&o.FIFO_CONF.Reg)&^(0x3f)|value)
}
func (o *I2S_Type) GetFIFO_CONF_RX_DATA_NUM() uint32 {
	return volatile.LoadUint32(&o.FIFO_CONF.Reg) & 0x3f
}

// I2S.RXEOF_NUM: I2S_RXEOF_NUM
func (o *I2S_Type) SetRXEOF_NUM(value uint32) {
	volatile.StoreUint32(&o.RXEOF_NUM.Reg, value)
}
func (o *I2S_Type) GetRXEOF_NUM() uint32 {
	return volatile.LoadUint32(&o.RXEOF_NUM.Reg)
}

// I2S.CONF_SIGLE_DATA: I2S_CONF_SIGLE_DATA
func (o *I2S_Type) SetCONF_SIGLE_DATA(value uint32) {
	volatile.StoreUint32(&o.CONF_SIGLE_DATA.Reg, value)
}
func (o *I2S_Type) GetCONF_SIGLE_DATA() uint32 {
	return volatile.LoadUint32(&o.CONF_SIGLE_DATA.Reg)
}

// I2S.CONF_CHAN: I2S_CONF_CHAN
func (o *I2S_Type) SetCONF_CHAN_RX_CHAN_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF_CHAN.Reg, volatile.LoadUint32(&o.CONF_CHAN.Reg)&^(0x18)|value<<3)
}
func (o *I2S_Type) GetCONF_CHAN_RX_CHAN_MOD() uint32 {
	return (volatile.LoadUint32(&o.CONF_CHAN.Reg) & 0x18) >> 3
}
func (o *I2S_Type) SetCONF_CHAN_TX_CHAN_MOD(value uint32) {
	volatile.StoreUint32(&o.CONF_CHAN.Reg, volatile.LoadUint32(&o.CONF_CHAN.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetCONF_CHAN_TX_CHAN_MOD() uint32 {
	return volatile.LoadUint32(&o.CONF_CHAN.Reg) & 0x7
}

// I2S.OUT_LINK: I2S_OUT_LINK
func (o *I2S_Type) SetOUT_LINK_OUTLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x80000000) >> 31
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x40000000) >> 30
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_START(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_START() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x20000000) >> 29
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.OUT_LINK.Reg) & 0x10000000) >> 28
}
func (o *I2S_Type) SetOUT_LINK_OUTLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_LINK.Reg, volatile.LoadUint32(&o.OUT_LINK.Reg)&^(0xfffff)|value)
}
func (o *I2S_Type) GetOUT_LINK_OUTLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_LINK.Reg) & 0xfffff
}

// I2S.IN_LINK: I2S_IN_LINK
func (o *I2S_Type) SetIN_LINK_INLINK_PARK(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x80000000)|value<<31)
}
func (o *I2S_Type) GetIN_LINK_INLINK_PARK() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x80000000) >> 31
}
func (o *I2S_Type) SetIN_LINK_INLINK_RESTART(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x40000000)|value<<30)
}
func (o *I2S_Type) GetIN_LINK_INLINK_RESTART() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x40000000) >> 30
}
func (o *I2S_Type) SetIN_LINK_INLINK_START(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x20000000)|value<<29)
}
func (o *I2S_Type) GetIN_LINK_INLINK_START() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x20000000) >> 29
}
func (o *I2S_Type) SetIN_LINK_INLINK_STOP(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0x10000000)|value<<28)
}
func (o *I2S_Type) GetIN_LINK_INLINK_STOP() uint32 {
	return (volatile.LoadUint32(&o.IN_LINK.Reg) & 0x10000000) >> 28
}
func (o *I2S_Type) SetIN_LINK_INLINK_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_LINK.Reg, volatile.LoadUint32(&o.IN_LINK.Reg)&^(0xfffff)|value)
}
func (o *I2S_Type) GetIN_LINK_INLINK_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_LINK.Reg) & 0xfffff
}

// I2S.OUT_EOF_DES_ADDR: I2S_OUT_EOF_DES_ADDR
func (o *I2S_Type) SetOUT_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_DES_ADDR.Reg, value)
}
func (o *I2S_Type) GetOUT_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_DES_ADDR.Reg)
}

// I2S.IN_EOF_DES_ADDR: I2S_IN_EOF_DES_ADDR
func (o *I2S_Type) SetIN_EOF_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.IN_EOF_DES_ADDR.Reg, value)
}
func (o *I2S_Type) GetIN_EOF_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.IN_EOF_DES_ADDR.Reg)
}

// I2S.OUT_EOF_BFR_DES_ADDR: I2S_OUT_EOF_BFR_DES_ADDR
func (o *I2S_Type) SetOUT_EOF_BFR_DES_ADDR(value uint32) {
	volatile.StoreUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg, value)
}
func (o *I2S_Type) GetOUT_EOF_BFR_DES_ADDR() uint32 {
	return volatile.LoadUint32(&o.OUT_EOF_BFR_DES_ADDR.Reg)
}

// I2S.AHB_TEST: I2S_AHB_TEST
func (o *I2S_Type) SetAHB_TEST_AHB_TESTADDR(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x30)|value<<4)
}
func (o *I2S_Type) GetAHB_TEST_AHB_TESTADDR() uint32 {
	return (volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x30) >> 4
}
func (o *I2S_Type) SetAHB_TEST_AHB_TESTMODE(value uint32) {
	volatile.StoreUint32(&o.AHB_TEST.Reg, volatile.LoadUint32(&o.AHB_TEST.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetAHB_TEST_AHB_TESTMODE() uint32 {
	return volatile.LoadUint32(&o.AHB_TEST.Reg) & 0x7
}

// I2S.INLINK_DSCR: I2S_INLINK_DSCR
func (o *I2S_Type) SetINLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR.Reg, value)
}
func (o *I2S_Type) GetINLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR.Reg)
}

// I2S.INLINK_DSCR_BF0: I2S_INLINK_DSCR_BF0
func (o *I2S_Type) SetINLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF0.Reg, value)
}
func (o *I2S_Type) GetINLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF0.Reg)
}

// I2S.INLINK_DSCR_BF1: I2S_INLINK_DSCR_BF1
func (o *I2S_Type) SetINLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.INLINK_DSCR_BF1.Reg, value)
}
func (o *I2S_Type) GetINLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.INLINK_DSCR_BF1.Reg)
}

// I2S.OUTLINK_DSCR: I2S_OUTLINK_DSCR
func (o *I2S_Type) SetOUTLINK_DSCR(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR.Reg, value)
}
func (o *I2S_Type) GetOUTLINK_DSCR() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR.Reg)
}

// I2S.OUTLINK_DSCR_BF0: I2S_OUTLINK_DSCR_BF0
func (o *I2S_Type) SetOUTLINK_DSCR_BF0(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF0.Reg, value)
}
func (o *I2S_Type) GetOUTLINK_DSCR_BF0() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF0.Reg)
}

// I2S.OUTLINK_DSCR_BF1: I2S_OUTLINK_DSCR_BF1
func (o *I2S_Type) SetOUTLINK_DSCR_BF1(value uint32) {
	volatile.StoreUint32(&o.OUTLINK_DSCR_BF1.Reg, value)
}
func (o *I2S_Type) GetOUTLINK_DSCR_BF1() uint32 {
	return volatile.LoadUint32(&o.OUTLINK_DSCR_BF1.Reg)
}

// I2S.LC_CONF: I2S_LC_CONF
func (o *I2S_Type) SetLC_CONF_MEM_TRANS_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *I2S_Type) GetLC_CONF_MEM_TRANS_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x2000) >> 13
}
func (o *I2S_Type) SetLC_CONF_CHECK_OWNER(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetLC_CONF_CHECK_OWNER() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetLC_CONF_OUT_DATA_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetLC_CONF_OUT_DATA_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetLC_CONF_INDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetLC_CONF_INDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetLC_CONF_OUTDSCR_BURST_EN(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetLC_CONF_OUTDSCR_BURST_EN() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetLC_CONF_OUT_EOF_MODE(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetLC_CONF_OUT_EOF_MODE() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetLC_CONF_OUT_NO_RESTART_CLR(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetLC_CONF_OUT_NO_RESTART_CLR() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetLC_CONF_OUT_AUTO_WRBACK(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetLC_CONF_OUT_AUTO_WRBACK() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetLC_CONF_IN_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetLC_CONF_IN_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetLC_CONF_OUT_LOOP_TEST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetLC_CONF_OUT_LOOP_TEST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetLC_CONF_AHBM_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetLC_CONF_AHBM_RST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetLC_CONF_AHBM_FIFO_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetLC_CONF_AHBM_FIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetLC_CONF_OUT_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetLC_CONF_OUT_RST() uint32 {
	return (volatile.LoadUint32(&o.LC_CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetLC_CONF_IN_RST(value uint32) {
	volatile.StoreUint32(&o.LC_CONF.Reg, volatile.LoadUint32(&o.LC_CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetLC_CONF_IN_RST() uint32 {
	return volatile.LoadUint32(&o.LC_CONF.Reg) & 0x1
}

// I2S.OUTFIFO_PUSH: I2S_OUTFIFO_PUSH
func (o *I2S_Type) SetOUTFIFO_PUSH(value uint32) {
	volatile.StoreUint32(&o.OUTFIFO_PUSH.Reg, volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetOUTFIFO_PUSH() uint32 {
	return (volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetOUTFIFO_PUSH_OUTFIFO_WDATA(value uint32) {
	volatile.StoreUint32(&o.OUTFIFO_PUSH.Reg, volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg)&^(0x1ff)|value)
}
func (o *I2S_Type) GetOUTFIFO_PUSH_OUTFIFO_WDATA() uint32 {
	return volatile.LoadUint32(&o.OUTFIFO_PUSH.Reg) & 0x1ff
}

// I2S.INFIFO_POP: I2S_INFIFO_POP
func (o *I2S_Type) SetINFIFO_POP(value uint32) {
	volatile.StoreUint32(&o.INFIFO_POP.Reg, volatile.LoadUint32(&o.INFIFO_POP.Reg)&^(0x10000)|value<<16)
}
func (o *I2S_Type) GetINFIFO_POP() uint32 {
	return (volatile.LoadUint32(&o.INFIFO_POP.Reg) & 0x10000) >> 16
}
func (o *I2S_Type) SetINFIFO_POP_INFIFO_RDATA(value uint32) {
	volatile.StoreUint32(&o.INFIFO_POP.Reg, volatile.LoadUint32(&o.INFIFO_POP.Reg)&^(0xfff)|value)
}
func (o *I2S_Type) GetINFIFO_POP_INFIFO_RDATA() uint32 {
	return volatile.LoadUint32(&o.INFIFO_POP.Reg) & 0xfff
}

// I2S.LC_STATE0: I2S_LC_STATE0
func (o *I2S_Type) SetLC_STATE0(value uint32) {
	volatile.StoreUint32(&o.LC_STATE0.Reg, value)
}
func (o *I2S_Type) GetLC_STATE0() uint32 {
	return volatile.LoadUint32(&o.LC_STATE0.Reg)
}

// I2S.LC_STATE1: I2S_LC_STATE1
func (o *I2S_Type) SetLC_STATE1(value uint32) {
	volatile.StoreUint32(&o.LC_STATE1.Reg, value)
}
func (o *I2S_Type) GetLC_STATE1() uint32 {
	return volatile.LoadUint32(&o.LC_STATE1.Reg)
}

// I2S.LC_HUNG_CONF: I2S_LC_HUNG_CONF
func (o *I2S_Type) SetLC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA(value uint32) {
	volatile.StoreUint32(&o.LC_HUNG_CONF.Reg, volatile.LoadUint32(&o.LC_HUNG_CONF.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetLC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA() uint32 {
	return (volatile.LoadUint32(&o.LC_HUNG_CONF.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetLC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT(value uint32) {
	volatile.StoreUint32(&o.LC_HUNG_CONF.Reg, volatile.LoadUint32(&o.LC_HUNG_CONF.Reg)&^(0x700)|value<<8)
}
func (o *I2S_Type) GetLC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.LC_HUNG_CONF.Reg) & 0x700) >> 8
}
func (o *I2S_Type) SetLC_HUNG_CONF_LC_FIFO_TIMEOUT(value uint32) {
	volatile.StoreUint32(&o.LC_HUNG_CONF.Reg, volatile.LoadUint32(&o.LC_HUNG_CONF.Reg)&^(0xff)|value)
}
func (o *I2S_Type) GetLC_HUNG_CONF_LC_FIFO_TIMEOUT() uint32 {
	return volatile.LoadUint32(&o.LC_HUNG_CONF.Reg) & 0xff
}

// I2S.CVSD_CONF0: I2S_CVSD_CONF0
func (o *I2S_Type) SetCVSD_CONF0_CVSD_Y_MIN(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF0.Reg, volatile.LoadUint32(&o.CVSD_CONF0.Reg)&^(0xffff0000)|value<<16)
}
func (o *I2S_Type) GetCVSD_CONF0_CVSD_Y_MIN() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF0.Reg) & 0xffff0000) >> 16
}
func (o *I2S_Type) SetCVSD_CONF0_CVSD_Y_MAX(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF0.Reg, volatile.LoadUint32(&o.CVSD_CONF0.Reg)&^(0xffff)|value)
}
func (o *I2S_Type) GetCVSD_CONF0_CVSD_Y_MAX() uint32 {
	return volatile.LoadUint32(&o.CVSD_CONF0.Reg) & 0xffff
}

// I2S.CVSD_CONF1: I2S_CVSD_CONF1
func (o *I2S_Type) SetCVSD_CONF1_CVSD_SIGMA_MIN(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF1.Reg, volatile.LoadUint32(&o.CVSD_CONF1.Reg)&^(0xffff0000)|value<<16)
}
func (o *I2S_Type) GetCVSD_CONF1_CVSD_SIGMA_MIN() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF1.Reg) & 0xffff0000) >> 16
}
func (o *I2S_Type) SetCVSD_CONF1_CVSD_SIGMA_MAX(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF1.Reg, volatile.LoadUint32(&o.CVSD_CONF1.Reg)&^(0xffff)|value)
}
func (o *I2S_Type) GetCVSD_CONF1_CVSD_SIGMA_MAX() uint32 {
	return volatile.LoadUint32(&o.CVSD_CONF1.Reg) & 0xffff
}

// I2S.CVSD_CONF2: I2S_CVSD_CONF2
func (o *I2S_Type) SetCVSD_CONF2_CVSD_H(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0x70000)|value<<16)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_H() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0x70000) >> 16
}
func (o *I2S_Type) SetCVSD_CONF2_CVSD_BETA(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0xffc0)|value<<6)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_BETA() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0xffc0) >> 6
}
func (o *I2S_Type) SetCVSD_CONF2_CVSD_J(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0x38)|value<<3)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_J() uint32 {
	return (volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0x38) >> 3
}
func (o *I2S_Type) SetCVSD_CONF2_CVSD_K(value uint32) {
	volatile.StoreUint32(&o.CVSD_CONF2.Reg, volatile.LoadUint32(&o.CVSD_CONF2.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetCVSD_CONF2_CVSD_K() uint32 {
	return volatile.LoadUint32(&o.CVSD_CONF2.Reg) & 0x7
}

// I2S.PLC_CONF0: I2S_PLC_CONF0
func (o *I2S_Type) SetPLC_CONF0_N_MIN_ERR(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0xe000000)|value<<25)
}
func (o *I2S_Type) GetPLC_CONF0_N_MIN_ERR() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0xe000000) >> 25
}
func (o *I2S_Type) SetPLC_CONF0_PACK_LEN_8K(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0x1f00000)|value<<20)
}
func (o *I2S_Type) GetPLC_CONF0_PACK_LEN_8K() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0x1f00000) >> 20
}
func (o *I2S_Type) SetPLC_CONF0_MAX_SLIDE_SAMPLE(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0xff000)|value<<12)
}
func (o *I2S_Type) GetPLC_CONF0_MAX_SLIDE_SAMPLE() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0xff000) >> 12
}
func (o *I2S_Type) SetPLC_CONF0_SHIFT_RATE(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0xe00)|value<<9)
}
func (o *I2S_Type) GetPLC_CONF0_SHIFT_RATE() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0xe00) >> 9
}
func (o *I2S_Type) SetPLC_CONF0_N_ERR_SEG(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0x1c0)|value<<6)
}
func (o *I2S_Type) GetPLC_CONF0_N_ERR_SEG() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0x1c0) >> 6
}
func (o *I2S_Type) SetPLC_CONF0_GOOD_PACK_MAX(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF0.Reg, volatile.LoadUint32(&o.PLC_CONF0.Reg)&^(0x3f)|value)
}
func (o *I2S_Type) GetPLC_CONF0_GOOD_PACK_MAX() uint32 {
	return volatile.LoadUint32(&o.PLC_CONF0.Reg) & 0x3f
}

// I2S.PLC_CONF1: I2S_PLC_CONF1
func (o *I2S_Type) SetPLC_CONF1_SLIDE_WIN_LEN(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xff000000)|value<<24)
}
func (o *I2S_Type) GetPLC_CONF1_SLIDE_WIN_LEN() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xff000000) >> 24
}
func (o *I2S_Type) SetPLC_CONF1_BAD_OLA_WIN2_PARA(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xff0000)|value<<16)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_OLA_WIN2_PARA() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xff0000) >> 16
}
func (o *I2S_Type) SetPLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xf000)|value<<12)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xf000) >> 12
}
func (o *I2S_Type) SetPLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xf00)|value<<8)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xf00) >> 8
}
func (o *I2S_Type) SetPLC_CONF1_BAD_CEF_ATTEN_PARA(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF1.Reg, volatile.LoadUint32(&o.PLC_CONF1.Reg)&^(0xff)|value)
}
func (o *I2S_Type) GetPLC_CONF1_BAD_CEF_ATTEN_PARA() uint32 {
	return volatile.LoadUint32(&o.PLC_CONF1.Reg) & 0xff
}

// I2S.PLC_CONF2: I2S_PLC_CONF2
func (o *I2S_Type) SetPLC_CONF2_MIN_PERIOD(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF2.Reg, volatile.LoadUint32(&o.PLC_CONF2.Reg)&^(0x7c)|value<<2)
}
func (o *I2S_Type) GetPLC_CONF2_MIN_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.PLC_CONF2.Reg) & 0x7c) >> 2
}
func (o *I2S_Type) SetPLC_CONF2_CVSD_SEG_MOD(value uint32) {
	volatile.StoreUint32(&o.PLC_CONF2.Reg, volatile.LoadUint32(&o.PLC_CONF2.Reg)&^(0x3)|value)
}
func (o *I2S_Type) GetPLC_CONF2_CVSD_SEG_MOD() uint32 {
	return volatile.LoadUint32(&o.PLC_CONF2.Reg) & 0x3
}

// I2S.ESCO_CONF0: I2S_ESCO_CONF0
func (o *I2S_Type) SetESCO_CONF0_PLC2DMA_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *I2S_Type) GetESCO_CONF0_PLC2DMA_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x1000) >> 12
}
func (o *I2S_Type) SetESCO_CONF0_PLC_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x800)|value<<11)
}
func (o *I2S_Type) GetESCO_CONF0_PLC_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x800) >> 11
}
func (o *I2S_Type) SetESCO_CONF0_CVSD_DEC_RESET(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x400)|value<<10)
}
func (o *I2S_Type) GetESCO_CONF0_CVSD_DEC_RESET() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x400) >> 10
}
func (o *I2S_Type) SetESCO_CONF0_CVSD_DEC_START(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetESCO_CONF0_CVSD_DEC_START() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CVSD_INF_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CVSD_INF_EN() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CVSD_PACK_LEN_8K(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0xf8)|value<<3)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CVSD_PACK_LEN_8K() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0xf8) >> 3
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_CHAN_MOD(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_CHAN_MOD() uint32 {
	return (volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetESCO_CONF0_ESCO_EN(value uint32) {
	volatile.StoreUint32(&o.ESCO_CONF0.Reg, volatile.LoadUint32(&o.ESCO_CONF0.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetESCO_CONF0_ESCO_EN() uint32 {
	return volatile.LoadUint32(&o.ESCO_CONF0.Reg) & 0x1
}

// I2S.SCO_CONF0: I2S_SCO_CONF0
func (o *I2S_Type) SetSCO_CONF0_CVSD_ENC_RESET(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetSCO_CONF0_CVSD_ENC_RESET() uint32 {
	return (volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetSCO_CONF0_CVSD_ENC_START(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetSCO_CONF0_CVSD_ENC_START() uint32 {
	return (volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetSCO_CONF0_SCO_NO_I2S_EN(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetSCO_CONF0_SCO_NO_I2S_EN() uint32 {
	return (volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetSCO_CONF0_SCO_WITH_I2S_EN(value uint32) {
	volatile.StoreUint32(&o.SCO_CONF0.Reg, volatile.LoadUint32(&o.SCO_CONF0.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetSCO_CONF0_SCO_WITH_I2S_EN() uint32 {
	return volatile.LoadUint32(&o.SCO_CONF0.Reg) & 0x1
}

// I2S.CONF1: I2S_CONF1
func (o *I2S_Type) SetCONF1_TX_ZEROS_RM_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x200)|value<<9)
}
func (o *I2S_Type) GetCONF1_TX_ZEROS_RM_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x200) >> 9
}
func (o *I2S_Type) SetCONF1_TX_STOP_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x100)|value<<8)
}
func (o *I2S_Type) GetCONF1_TX_STOP_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x100) >> 8
}
func (o *I2S_Type) SetCONF1_RX_PCM_BYPASS(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetCONF1_RX_PCM_BYPASS() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetCONF1_RX_PCM_CONF(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x70)|value<<4)
}
func (o *I2S_Type) GetCONF1_RX_PCM_CONF() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x70) >> 4
}
func (o *I2S_Type) SetCONF1_TX_PCM_BYPASS(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetCONF1_TX_PCM_BYPASS() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetCONF1_TX_PCM_CONF(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7)|value)
}
func (o *I2S_Type) GetCONF1_TX_PCM_CONF() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x7
}

// I2S.PD_CONF: I2S_PD_CONF
func (o *I2S_Type) SetPD_CONF_PLC_MEM_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetPD_CONF_PLC_MEM_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PD_CONF.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetPD_CONF_PLC_MEM_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetPD_CONF_PLC_MEM_FORCE_PD() uint32 {
	return (volatile.LoadUint32(&o.PD_CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetPD_CONF_FIFO_FORCE_PU(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetPD_CONF_FIFO_FORCE_PU() uint32 {
	return (volatile.LoadUint32(&o.PD_CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetPD_CONF_FIFO_FORCE_PD(value uint32) {
	volatile.StoreUint32(&o.PD_CONF.Reg, volatile.LoadUint32(&o.PD_CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetPD_CONF_FIFO_FORCE_PD() uint32 {
	return volatile.LoadUint32(&o.PD_CONF.Reg) & 0x1
}

// I2S.CONF2: I2S_CONF2
func (o *I2S_Type) SetCONF2_INTER_VALID_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x80)|value<<7)
}
func (o *I2S_Type) GetCONF2_INTER_VALID_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x80) >> 7
}
func (o *I2S_Type) SetCONF2_EXT_ADC_START_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x40)|value<<6)
}
func (o *I2S_Type) GetCONF2_EXT_ADC_START_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x40) >> 6
}
func (o *I2S_Type) SetCONF2_LCD_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x20)|value<<5)
}
func (o *I2S_Type) GetCONF2_LCD_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x20) >> 5
}
func (o *I2S_Type) SetCONF2_DATA_ENABLE(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x10)|value<<4)
}
func (o *I2S_Type) GetCONF2_DATA_ENABLE() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x10) >> 4
}
func (o *I2S_Type) SetCONF2_DATA_ENABLE_TEST_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetCONF2_DATA_ENABLE_TEST_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetCONF2_LCD_TX_SDX2_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetCONF2_LCD_TX_SDX2_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetCONF2_LCD_TX_WRX2_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetCONF2_LCD_TX_WRX2_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF2.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetCONF2_CAMERA_EN(value uint32) {
	volatile.StoreUint32(&o.CONF2.Reg, volatile.LoadUint32(&o.CONF2.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetCONF2_CAMERA_EN() uint32 {
	return volatile.LoadUint32(&o.CONF2.Reg) & 0x1
}

// I2S.CLKM_CONF: I2S_CLKM_CONF
func (o *I2S_Type) SetCLKM_CONF_CLKA_ENA(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0x200000)|value<<21)
}
func (o *I2S_Type) GetCLKM_CONF_CLKA_ENA() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0x200000) >> 21
}
func (o *I2S_Type) SetCLKM_CONF_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0x100000)|value<<20)
}
func (o *I2S_Type) GetCLKM_CONF_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0x100000) >> 20
}
func (o *I2S_Type) SetCLKM_CONF_CLKM_DIV_A(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0xfc000)|value<<14)
}
func (o *I2S_Type) GetCLKM_CONF_CLKM_DIV_A() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0xfc000) >> 14
}
func (o *I2S_Type) SetCLKM_CONF_CLKM_DIV_B(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0x3f00)|value<<8)
}
func (o *I2S_Type) GetCLKM_CONF_CLKM_DIV_B() uint32 {
	return (volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0x3f00) >> 8
}
func (o *I2S_Type) SetCLKM_CONF_CLKM_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.CLKM_CONF.Reg, volatile.LoadUint32(&o.CLKM_CONF.Reg)&^(0xff)|value)
}
func (o *I2S_Type) GetCLKM_CONF_CLKM_DIV_NUM() uint32 {
	return volatile.LoadUint32(&o.CLKM_CONF.Reg) & 0xff
}

// I2S.SAMPLE_RATE_CONF: I2S_SAMPLE_RATE_CONF
func (o *I2S_Type) SetSAMPLE_RATE_CONF_RX_BITS_MOD(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0xfc0000)|value<<18)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_RX_BITS_MOD() uint32 {
	return (volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0xfc0000) >> 18
}
func (o *I2S_Type) SetSAMPLE_RATE_CONF_TX_BITS_MOD(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0x3f000)|value<<12)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_TX_BITS_MOD() uint32 {
	return (volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0x3f000) >> 12
}
func (o *I2S_Type) SetSAMPLE_RATE_CONF_RX_BCK_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0xfc0)|value<<6)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_RX_BCK_DIV_NUM() uint32 {
	return (volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0xfc0) >> 6
}
func (o *I2S_Type) SetSAMPLE_RATE_CONF_TX_BCK_DIV_NUM(value uint32) {
	volatile.StoreUint32(&o.SAMPLE_RATE_CONF.Reg, volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg)&^(0x3f)|value)
}
func (o *I2S_Type) GetSAMPLE_RATE_CONF_TX_BCK_DIV_NUM() uint32 {
	return volatile.LoadUint32(&o.SAMPLE_RATE_CONF.Reg) & 0x3f
}

// I2S.PDM_CONF: I2S_PDM_CONF
func (o *I2S_Type) SetPDM_CONF_TX_PDM_HP_BYPASS(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_HP_BYPASS() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x2000000) >> 25
}
func (o *I2S_Type) SetPDM_CONF_RX_PDM_SINC_DSR_16_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *I2S_Type) GetPDM_CONF_RX_PDM_SINC_DSR_16_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x1000000) >> 24
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xc00000)|value<<22)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xc00000) >> 22
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_SINC_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x300000)|value<<20)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_SINC_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x300000) >> 20
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_LP_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xc0000)|value<<18)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_LP_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xc0000) >> 18
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_HP_IN_SHIFT(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x30000)|value<<16)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_HP_IN_SHIFT() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x30000) >> 16
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xff00)|value<<8)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xff00) >> 8
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_SINC_OSR2(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0xf0)|value<<4)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_SINC_OSR2() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0xf0) >> 4
}
func (o *I2S_Type) SetPDM_CONF_PDM2PCM_CONV_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x8)|value<<3)
}
func (o *I2S_Type) GetPDM_CONF_PDM2PCM_CONV_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x8) >> 3
}
func (o *I2S_Type) SetPDM_CONF_PCM2PDM_CONV_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetPDM_CONF_PCM2PDM_CONV_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetPDM_CONF_RX_PDM_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetPDM_CONF_RX_PDM_EN() uint32 {
	return (volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetPDM_CONF_TX_PDM_EN(value uint32) {
	volatile.StoreUint32(&o.PDM_CONF.Reg, volatile.LoadUint32(&o.PDM_CONF.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetPDM_CONF_TX_PDM_EN() uint32 {
	return volatile.LoadUint32(&o.PDM_CONF.Reg) & 0x1
}

// I2S.PDM_FREQ_CONF: I2S_PDM_FREQ_CONF
func (o *I2S_Type) SetPDM_FREQ_CONF_TX_PDM_FP(value uint32) {
	volatile.StoreUint32(&o.PDM_FREQ_CONF.Reg, volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg)&^(0xffc00)|value<<10)
}
func (o *I2S_Type) GetPDM_FREQ_CONF_TX_PDM_FP() uint32 {
	return (volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg) & 0xffc00) >> 10
}
func (o *I2S_Type) SetPDM_FREQ_CONF_TX_PDM_FS(value uint32) {
	volatile.StoreUint32(&o.PDM_FREQ_CONF.Reg, volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg)&^(0x3ff)|value)
}
func (o *I2S_Type) GetPDM_FREQ_CONF_TX_PDM_FS() uint32 {
	return volatile.LoadUint32(&o.PDM_FREQ_CONF.Reg) & 0x3ff
}

// I2S.STATE: I2S_STATE
func (o *I2S_Type) SetSTATE_RX_FIFO_RESET_BACK(value uint32) {
	volatile.StoreUint32(&o.STATE.Reg, volatile.LoadUint32(&o.STATE.Reg)&^(0x4)|value<<2)
}
func (o *I2S_Type) GetSTATE_RX_FIFO_RESET_BACK() uint32 {
	return (volatile.LoadUint32(&o.STATE.Reg) & 0x4) >> 2
}
func (o *I2S_Type) SetSTATE_TX_FIFO_RESET_BACK(value uint32) {
	volatile.StoreUint32(&o.STATE.Reg, volatile.LoadUint32(&o.STATE.Reg)&^(0x2)|value<<1)
}
func (o *I2S_Type) GetSTATE_TX_FIFO_RESET_BACK() uint32 {
	return (volatile.LoadUint32(&o.STATE.Reg) & 0x2) >> 1
}
func (o *I2S_Type) SetSTATE_TX_IDLE(value uint32) {
	volatile.StoreUint32(&o.STATE.Reg, volatile.LoadUint32(&o.STATE.Reg)&^(0x1)|value)
}
func (o *I2S_Type) GetSTATE_TX_IDLE() uint32 {
	return volatile.LoadUint32(&o.STATE.Reg) & 0x1
}

// I2S.DATE: I2S_DATE
func (o *I2S_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *I2S_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type APB_CTRL_Type struct {
	SYSCLK_CONF               volatile.Register32 // 0x0
	XTAL_TICK_CONF            volatile.Register32 // 0x4
	PLL_TICK_CONF             volatile.Register32 // 0x8
	CK8M_TICK_CONF            volatile.Register32 // 0xC
	APB_SARADC_CTRL           volatile.Register32 // 0x10
	APB_SARADC_CTRL2          volatile.Register32 // 0x14
	APB_SARADC_FSM            volatile.Register32 // 0x18
	APB_SARADC_SAR1_PATT_TAB1 volatile.Register32 // 0x1C
	APB_SARADC_SAR1_PATT_TAB2 volatile.Register32 // 0x20
	APB_SARADC_SAR1_PATT_TAB3 volatile.Register32 // 0x24
	APB_SARADC_SAR1_PATT_TAB4 volatile.Register32 // 0x28
	APB_SARADC_SAR2_PATT_TAB1 volatile.Register32 // 0x2C
	APB_SARADC_SAR2_PATT_TAB2 volatile.Register32 // 0x30
	APB_SARADC_SAR2_PATT_TAB3 volatile.Register32 // 0x34
	APB_SARADC_SAR2_PATT_TAB4 volatile.Register32 // 0x38
	APLL_TICK_CONF            volatile.Register32 // 0x3C
	_                         [60]byte
	DATE                      volatile.Register32 // 0x7C
}

// APB_CTRL.SYSCLK_CONF: APB_CTRL_SYSCLK_CONF
func (o *APB_CTRL_Type) SetSYSCLK_CONF_QUICK_CLK_CHNG(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_QUICK_CLK_CHNG() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x2000) >> 13
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_RST_TICK_CNT(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_RST_TICK_CNT() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x1000) >> 12
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x800)|value<<11)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x800) >> 11
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_CLK_320M_EN(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x400)|value<<10)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_CLK_320M_EN() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x400) >> 10
}
func (o *APB_CTRL_Type) SetSYSCLK_CONF_PRE_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x3ff)|value)
}
func (o *APB_CTRL_Type) GetSYSCLK_CONF_PRE_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x3ff
}

// APB_CTRL.XTAL_TICK_CONF: APB_CTRL_XTAL_TICK_CONF
func (o *APB_CTRL_Type) SetXTAL_TICK_CONF_XTAL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.XTAL_TICK_CONF.Reg, volatile.LoadUint32(&o.XTAL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetXTAL_TICK_CONF_XTAL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.XTAL_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.PLL_TICK_CONF: APB_CTRL_PLL_TICK_CONF
func (o *APB_CTRL_Type) SetPLL_TICK_CONF_PLL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.PLL_TICK_CONF.Reg, volatile.LoadUint32(&o.PLL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetPLL_TICK_CONF_PLL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.PLL_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.CK8M_TICK_CONF: APB_CTRL_CK8M_TICK_CONF
func (o *APB_CTRL_Type) SetCK8M_TICK_CONF_CK8M_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.CK8M_TICK_CONF.Reg, volatile.LoadUint32(&o.CK8M_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetCK8M_TICK_CONF_CK8M_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.CK8M_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.APB_SARADC_CTRL: APB_CTRL_APB_SARADC_CTRL
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_DATA_TO_I2S(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x4000000)|value<<26)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_DATA_TO_I2S() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x4000000) >> 26
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_DATA_SAR_SEL(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x2000000)|value<<25)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_DATA_SAR_SEL() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x2000000) >> 25
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x1000000)|value<<24)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x1000000) >> 24
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x800000)|value<<23)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x800000) >> 23
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR2_PATT_LEN(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x780000)|value<<19)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR2_PATT_LEN() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x780000) >> 19
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR1_PATT_LEN(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x78000)|value<<15)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR1_PATT_LEN() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x78000) >> 15
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x7f80)|value<<7)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR_CLK_DIV() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x7f80) >> 7
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x40) >> 6
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR_SEL(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR_SEL() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x20) >> 5
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_WORK_MODE(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x18)|value<<3)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_WORK_MODE() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x18) >> 3
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_SAR2_MUX(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_SAR2_MUX() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x4) >> 2
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_START(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_START() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x2) >> 1
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL_SARADC_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg)&^(0x1)|value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL_SARADC_START_FORCE() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_CTRL.Reg) & 0x1
}

// APB_CTRL.APB_SARADC_CTRL2: APB_CTRL_APB_SARADC_CTRL2
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_SAR2_INV(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x400)|value<<10)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_SAR2_INV() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x400) >> 10
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_SAR1_INV(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x200)|value<<9)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_SAR1_INV() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x200) >> 9
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x1fe)|value<<1)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x1fe) >> 1
}
func (o *APB_CTRL_Type) SetAPB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_CTRL2.Reg, volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg)&^(0x1)|value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_CTRL2.Reg) & 0x1
}

// APB_CTRL.APB_SARADC_FSM: APB_CTRL_APB_SARADC_FSM
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_SAMPLE_CYCLE(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff000000)|value<<24)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_SAMPLE_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff000000) >> 24
}
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_START_WAIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff0000)|value<<16)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_START_WAIT() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff0000) >> 16
}
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_STANDBY_WAIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff00)|value<<8)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_STANDBY_WAIT() uint32 {
	return (volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff00) >> 8
}
func (o *APB_CTRL_Type) SetAPB_SARADC_FSM_SARADC_RSTB_WAIT(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_FSM.Reg, volatile.LoadUint32(&o.APB_SARADC_FSM.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_FSM_SARADC_RSTB_WAIT() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_FSM.Reg) & 0xff
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB1: APB_CTRL_APB_SARADC_SAR1_PATT_TAB1
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB1(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB1.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB1() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB1.Reg)
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB2: APB_CTRL_APB_SARADC_SAR1_PATT_TAB2
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB2(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB2.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB2() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB2.Reg)
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB3: APB_CTRL_APB_SARADC_SAR1_PATT_TAB3
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB3(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB3.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB3() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB3.Reg)
}

// APB_CTRL.APB_SARADC_SAR1_PATT_TAB4: APB_CTRL_APB_SARADC_SAR1_PATT_TAB4
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR1_PATT_TAB4(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR1_PATT_TAB4.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR1_PATT_TAB4() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR1_PATT_TAB4.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB1: APB_CTRL_APB_SARADC_SAR2_PATT_TAB1
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB1(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB1.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB1() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB1.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB2: APB_CTRL_APB_SARADC_SAR2_PATT_TAB2
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB2(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB2.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB2() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB2.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB3: APB_CTRL_APB_SARADC_SAR2_PATT_TAB3
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB3(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB3.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB3() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB3.Reg)
}

// APB_CTRL.APB_SARADC_SAR2_PATT_TAB4: APB_CTRL_APB_SARADC_SAR2_PATT_TAB4
func (o *APB_CTRL_Type) SetAPB_SARADC_SAR2_PATT_TAB4(value uint32) {
	volatile.StoreUint32(&o.APB_SARADC_SAR2_PATT_TAB4.Reg, value)
}
func (o *APB_CTRL_Type) GetAPB_SARADC_SAR2_PATT_TAB4() uint32 {
	return volatile.LoadUint32(&o.APB_SARADC_SAR2_PATT_TAB4.Reg)
}

// APB_CTRL.APLL_TICK_CONF: APB_CTRL_APLL_TICK_CONF
func (o *APB_CTRL_Type) SetAPLL_TICK_CONF_APLL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.APLL_TICK_CONF.Reg, volatile.LoadUint32(&o.APLL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *APB_CTRL_Type) GetAPLL_TICK_CONF_APLL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.APLL_TICK_CONF.Reg) & 0xff
}

// APB_CTRL.DATE: APB_CTRL_DATE
func (o *APB_CTRL_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *APB_CTRL_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type SYSCON_Type struct {
	SYSCLK_CONF           volatile.Register32 // 0x0
	XTAL_TICK_CONF        volatile.Register32 // 0x4
	PLL_TICK_CONF         volatile.Register32 // 0x8
	CK8M_TICK_CONF        volatile.Register32 // 0xC
	SARADC_CTRL           volatile.Register32 // 0x10
	SARADC_CTRL2          volatile.Register32 // 0x14
	SARADC_FSM            volatile.Register32 // 0x18
	SARADC_SAR1_PATT_TAB1 volatile.Register32 // 0x1C
	SARADC_SAR1_PATT_TAB2 volatile.Register32 // 0x20
	SARADC_SAR1_PATT_TAB3 volatile.Register32 // 0x24
	SARADC_SAR1_PATT_TAB4 volatile.Register32 // 0x28
	SARADC_SAR2_PATT_TAB1 volatile.Register32 // 0x2C
	SARADC_SAR2_PATT_TAB2 volatile.Register32 // 0x30
	SARADC_SAR2_PATT_TAB3 volatile.Register32 // 0x34
	SARADC_SAR2_PATT_TAB4 volatile.Register32 // 0x38
	APLL_TICK_CONF        volatile.Register32 // 0x3C
	_                     [60]byte
	DATE                  volatile.Register32 // 0x7C
}

// SYSCON.SYSCLK_CONF: SYSCON_SYSCLK_CONF
func (o *SYSCON_Type) SetSYSCLK_CONF_QUICK_CLK_CHNG(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x2000)|value<<13)
}
func (o *SYSCON_Type) GetSYSCLK_CONF_QUICK_CLK_CHNG() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x2000) >> 13
}
func (o *SYSCON_Type) SetSYSCLK_CONF_RST_TICK_CNT(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x1000)|value<<12)
}
func (o *SYSCON_Type) GetSYSCLK_CONF_RST_TICK_CNT() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x1000) >> 12
}
func (o *SYSCON_Type) SetSYSCLK_CONF_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x800)|value<<11)
}
func (o *SYSCON_Type) GetSYSCLK_CONF_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x800) >> 11
}
func (o *SYSCON_Type) SetSYSCLK_CONF_CLK_320M_EN(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x400)|value<<10)
}
func (o *SYSCON_Type) GetSYSCLK_CONF_CLK_320M_EN() uint32 {
	return (volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x400) >> 10
}
func (o *SYSCON_Type) SetSYSCLK_CONF_PRE_DIV_CNT(value uint32) {
	volatile.StoreUint32(&o.SYSCLK_CONF.Reg, volatile.LoadUint32(&o.SYSCLK_CONF.Reg)&^(0x3ff)|value)
}
func (o *SYSCON_Type) GetSYSCLK_CONF_PRE_DIV_CNT() uint32 {
	return volatile.LoadUint32(&o.SYSCLK_CONF.Reg) & 0x3ff
}

// SYSCON.XTAL_TICK_CONF: SYSCON_XTAL_TICK_CONF
func (o *SYSCON_Type) SetXTAL_TICK_CONF_XTAL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.XTAL_TICK_CONF.Reg, volatile.LoadUint32(&o.XTAL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *SYSCON_Type) GetXTAL_TICK_CONF_XTAL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.XTAL_TICK_CONF.Reg) & 0xff
}

// SYSCON.PLL_TICK_CONF: SYSCON_PLL_TICK_CONF
func (o *SYSCON_Type) SetPLL_TICK_CONF_PLL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.PLL_TICK_CONF.Reg, volatile.LoadUint32(&o.PLL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *SYSCON_Type) GetPLL_TICK_CONF_PLL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.PLL_TICK_CONF.Reg) & 0xff
}

// SYSCON.CK8M_TICK_CONF: SYSCON_CK8M_TICK_CONF
func (o *SYSCON_Type) SetCK8M_TICK_CONF_CK8M_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.CK8M_TICK_CONF.Reg, volatile.LoadUint32(&o.CK8M_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *SYSCON_Type) GetCK8M_TICK_CONF_CK8M_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.CK8M_TICK_CONF.Reg) & 0xff
}

// SYSCON.SARADC_CTRL: SYSCON_SARADC_CTRL
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_DATA_TO_I2S(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x4000000)|value<<26)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_DATA_TO_I2S() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x4000000) >> 26
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_DATA_SAR_SEL(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x2000000)|value<<25)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_DATA_SAR_SEL() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x2000000) >> 25
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x1000000)|value<<24)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x1000000) >> 24
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x800000)|value<<23)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x800000) >> 23
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR2_PATT_LEN(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x780000)|value<<19)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR2_PATT_LEN() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x780000) >> 19
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR1_PATT_LEN(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x78000)|value<<15)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR1_PATT_LEN() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x78000) >> 15
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR_CLK_DIV(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x7f80)|value<<7)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR_CLK_DIV() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x7f80) >> 7
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR_CLK_GATED(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x40)|value<<6)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR_CLK_GATED() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x40) >> 6
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR_SEL(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x20)|value<<5)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR_SEL() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x20) >> 5
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_WORK_MODE(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x18)|value<<3)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_WORK_MODE() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x18) >> 3
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_SAR2_MUX(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x4)|value<<2)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_SAR2_MUX() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x4) >> 2
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_START(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x2)|value<<1)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_START() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x2) >> 1
}
func (o *SYSCON_Type) SetSARADC_CTRL_SARADC_START_FORCE(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL.Reg, volatile.LoadUint32(&o.SARADC_CTRL.Reg)&^(0x1)|value)
}
func (o *SYSCON_Type) GetSARADC_CTRL_SARADC_START_FORCE() uint32 {
	return volatile.LoadUint32(&o.SARADC_CTRL.Reg) & 0x1
}

// SYSCON.SARADC_CTRL2: SYSCON_SARADC_CTRL2
func (o *SYSCON_Type) SetSARADC_CTRL2_SARADC_SAR2_INV(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL2.Reg, volatile.LoadUint32(&o.SARADC_CTRL2.Reg)&^(0x400)|value<<10)
}
func (o *SYSCON_Type) GetSARADC_CTRL2_SARADC_SAR2_INV() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL2.Reg) & 0x400) >> 10
}
func (o *SYSCON_Type) SetSARADC_CTRL2_SARADC_SAR1_INV(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL2.Reg, volatile.LoadUint32(&o.SARADC_CTRL2.Reg)&^(0x200)|value<<9)
}
func (o *SYSCON_Type) GetSARADC_CTRL2_SARADC_SAR1_INV() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL2.Reg) & 0x200) >> 9
}
func (o *SYSCON_Type) SetSARADC_CTRL2_SARADC_MAX_MEAS_NUM(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL2.Reg, volatile.LoadUint32(&o.SARADC_CTRL2.Reg)&^(0x1fe)|value<<1)
}
func (o *SYSCON_Type) GetSARADC_CTRL2_SARADC_MAX_MEAS_NUM() uint32 {
	return (volatile.LoadUint32(&o.SARADC_CTRL2.Reg) & 0x1fe) >> 1
}
func (o *SYSCON_Type) SetSARADC_CTRL2_SARADC_MEAS_NUM_LIMIT(value uint32) {
	volatile.StoreUint32(&o.SARADC_CTRL2.Reg, volatile.LoadUint32(&o.SARADC_CTRL2.Reg)&^(0x1)|value)
}
func (o *SYSCON_Type) GetSARADC_CTRL2_SARADC_MEAS_NUM_LIMIT() uint32 {
	return volatile.LoadUint32(&o.SARADC_CTRL2.Reg) & 0x1
}

// SYSCON.SARADC_FSM: SYSCON_SARADC_FSM
func (o *SYSCON_Type) SetSARADC_FSM_SARADC_SAMPLE_CYCLE(value uint32) {
	volatile.StoreUint32(&o.SARADC_FSM.Reg, volatile.LoadUint32(&o.SARADC_FSM.Reg)&^(0xff000000)|value<<24)
}
func (o *SYSCON_Type) GetSARADC_FSM_SARADC_SAMPLE_CYCLE() uint32 {
	return (volatile.LoadUint32(&o.SARADC_FSM.Reg) & 0xff000000) >> 24
}
func (o *SYSCON_Type) SetSARADC_FSM_SARADC_START_WAIT(value uint32) {
	volatile.StoreUint32(&o.SARADC_FSM.Reg, volatile.LoadUint32(&o.SARADC_FSM.Reg)&^(0xff0000)|value<<16)
}
func (o *SYSCON_Type) GetSARADC_FSM_SARADC_START_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SARADC_FSM.Reg) & 0xff0000) >> 16
}
func (o *SYSCON_Type) SetSARADC_FSM_SARADC_STANDBY_WAIT(value uint32) {
	volatile.StoreUint32(&o.SARADC_FSM.Reg, volatile.LoadUint32(&o.SARADC_FSM.Reg)&^(0xff00)|value<<8)
}
func (o *SYSCON_Type) GetSARADC_FSM_SARADC_STANDBY_WAIT() uint32 {
	return (volatile.LoadUint32(&o.SARADC_FSM.Reg) & 0xff00) >> 8
}
func (o *SYSCON_Type) SetSARADC_FSM_SARADC_RSTB_WAIT(value uint32) {
	volatile.StoreUint32(&o.SARADC_FSM.Reg, volatile.LoadUint32(&o.SARADC_FSM.Reg)&^(0xff)|value)
}
func (o *SYSCON_Type) GetSARADC_FSM_SARADC_RSTB_WAIT() uint32 {
	return volatile.LoadUint32(&o.SARADC_FSM.Reg) & 0xff
}

// SYSCON.SARADC_SAR1_PATT_TAB1: SYSCON_SARADC_SAR1_PATT_TAB1
func (o *SYSCON_Type) SetSARADC_SAR1_PATT_TAB1(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR1_PATT_TAB1.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR1_PATT_TAB1() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR1_PATT_TAB1.Reg)
}

// SYSCON.SARADC_SAR1_PATT_TAB2: SYSCON_SARADC_SAR1_PATT_TAB2
func (o *SYSCON_Type) SetSARADC_SAR1_PATT_TAB2(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR1_PATT_TAB2.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR1_PATT_TAB2() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR1_PATT_TAB2.Reg)
}

// SYSCON.SARADC_SAR1_PATT_TAB3: SYSCON_SARADC_SAR1_PATT_TAB3
func (o *SYSCON_Type) SetSARADC_SAR1_PATT_TAB3(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR1_PATT_TAB3.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR1_PATT_TAB3() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR1_PATT_TAB3.Reg)
}

// SYSCON.SARADC_SAR1_PATT_TAB4: SYSCON_SARADC_SAR1_PATT_TAB4
func (o *SYSCON_Type) SetSARADC_SAR1_PATT_TAB4(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR1_PATT_TAB4.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR1_PATT_TAB4() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR1_PATT_TAB4.Reg)
}

// SYSCON.SARADC_SAR2_PATT_TAB1: SYSCON_SARADC_SAR2_PATT_TAB1
func (o *SYSCON_Type) SetSARADC_SAR2_PATT_TAB1(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR2_PATT_TAB1.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR2_PATT_TAB1() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR2_PATT_TAB1.Reg)
}

// SYSCON.SARADC_SAR2_PATT_TAB2: SYSCON_SARADC_SAR2_PATT_TAB2
func (o *SYSCON_Type) SetSARADC_SAR2_PATT_TAB2(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR2_PATT_TAB2.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR2_PATT_TAB2() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR2_PATT_TAB2.Reg)
}

// SYSCON.SARADC_SAR2_PATT_TAB3: SYSCON_SARADC_SAR2_PATT_TAB3
func (o *SYSCON_Type) SetSARADC_SAR2_PATT_TAB3(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR2_PATT_TAB3.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR2_PATT_TAB3() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR2_PATT_TAB3.Reg)
}

// SYSCON.SARADC_SAR2_PATT_TAB4: SYSCON_SARADC_SAR2_PATT_TAB4
func (o *SYSCON_Type) SetSARADC_SAR2_PATT_TAB4(value uint32) {
	volatile.StoreUint32(&o.SARADC_SAR2_PATT_TAB4.Reg, value)
}
func (o *SYSCON_Type) GetSARADC_SAR2_PATT_TAB4() uint32 {
	return volatile.LoadUint32(&o.SARADC_SAR2_PATT_TAB4.Reg)
}

// SYSCON.APLL_TICK_CONF: SYSCON_APLL_TICK_CONF
func (o *SYSCON_Type) SetAPLL_TICK_CONF_APLL_TICK_NUM(value uint32) {
	volatile.StoreUint32(&o.APLL_TICK_CONF.Reg, volatile.LoadUint32(&o.APLL_TICK_CONF.Reg)&^(0xff)|value)
}
func (o *SYSCON_Type) GetAPLL_TICK_CONF_APLL_TICK_NUM() uint32 {
	return volatile.LoadUint32(&o.APLL_TICK_CONF.Reg) & 0xff
}

// SYSCON.DATE: SYSCON_DATE
func (o *SYSCON_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *SYSCON_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type FE2_Type struct {
}

type RTC_I2C_Type struct {
	SCL_LOW_PERIOD   volatile.Register32 // 0x0
	CTRL             volatile.Register32 // 0x4
	DEBUG_STATUS     volatile.Register32 // 0x8
	TIMEOUT          volatile.Register32 // 0xC
	SLAVE_ADDR       volatile.Register32 // 0x10
	_                [12]byte
	INT_RAW          volatile.Register32 // 0x20
	INT_CLR          volatile.Register32 // 0x24
	_                [8]byte
	SDA_DUTY         volatile.Register32 // 0x30
	_                [4]byte
	SCL_HIGH_PERIOD  volatile.Register32 // 0x38
	_                [4]byte
	SCL_START_PERIOD volatile.Register32 // 0x40
	SCL_STOP_PERIOD  volatile.Register32 // 0x44
}

// RTC_I2C.SCL_LOW_PERIOD: RTC_I2C_SCL_LOW_PERIOD
func (o *RTC_I2C_Type) SetSCL_LOW_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_LOW_PERIOD.Reg, volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg)&^(0x7ffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_LOW_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_LOW_PERIOD.Reg) & 0x7ffff
}

// RTC_I2C.CTRL: RTC_I2C_CTRL
func (o *RTC_I2C_Type) SetCTRL_RX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x80)|value<<7)
}
func (o *RTC_I2C_Type) GetCTRL_RX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x80) >> 7
}
func (o *RTC_I2C_Type) SetCTRL_TX_LSB_FIRST(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetCTRL_TX_LSB_FIRST() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetCTRL_TRANS_START(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetCTRL_TRANS_START() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetCTRL_MS_MODE(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetCTRL_MS_MODE() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x10) >> 4
}
func (o *RTC_I2C_Type) SetCTRL_SCL_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x2)|value<<1)
}
func (o *RTC_I2C_Type) GetCTRL_SCL_FORCE_OUT() uint32 {
	return (volatile.LoadUint32(&o.CTRL.Reg) & 0x2) >> 1
}
func (o *RTC_I2C_Type) SetCTRL_SDA_FORCE_OUT(value uint32) {
	volatile.StoreUint32(&o.CTRL.Reg, volatile.LoadUint32(&o.CTRL.Reg)&^(0x1)|value)
}
func (o *RTC_I2C_Type) GetCTRL_SDA_FORCE_OUT() uint32 {
	return volatile.LoadUint32(&o.CTRL.Reg) & 0x1
}

// RTC_I2C.DEBUG_STATUS: RTC_I2C_DEBUG_STATUS
func (o *RTC_I2C_Type) SetDEBUG_STATUS_SCL_STATE(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x70000000)|value<<28)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_SCL_STATE() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x70000000) >> 28
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_MAIN_STATE(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0xe000000)|value<<25)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_MAIN_STATE() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0xe000000) >> 25
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_BYTE_TRANS(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_BYTE_TRANS() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_SLAVE_ADDR_MATCH(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_SLAVE_ADDR_MATCH() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_BUS_BUSY(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_BUS_BUSY() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x10) >> 4
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_ARB_LOST(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x8)|value<<3)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_ARB_LOST() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x8) >> 3
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_TIMED_OUT(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_TIMED_OUT() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x4) >> 2
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_SLAVE_RW(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_SLAVE_RW() uint32 {
	return (volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x2) >> 1
}
func (o *RTC_I2C_Type) SetDEBUG_STATUS_ACK_VAL(value uint32) {
	volatile.StoreUint32(&o.DEBUG_STATUS.Reg, volatile.LoadUint32(&o.DEBUG_STATUS.Reg)&^(0x1)|value)
}
func (o *RTC_I2C_Type) GetDEBUG_STATUS_ACK_VAL() uint32 {
	return volatile.LoadUint32(&o.DEBUG_STATUS.Reg) & 0x1
}

// RTC_I2C.TIMEOUT: RTC_I2C_TIMEOUT
func (o *RTC_I2C_Type) SetTIMEOUT(value uint32) {
	volatile.StoreUint32(&o.TIMEOUT.Reg, volatile.LoadUint32(&o.TIMEOUT.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetTIMEOUT() uint32 {
	return volatile.LoadUint32(&o.TIMEOUT.Reg) & 0xfffff
}

// RTC_I2C.SLAVE_ADDR: RTC_I2C_SLAVE_ADDR
func (o *RTC_I2C_Type) SetSLAVE_ADDR_SLAVE_ADDR_10BIT(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x80000000)|value<<31)
}
func (o *RTC_I2C_Type) GetSLAVE_ADDR_SLAVE_ADDR_10BIT() uint32 {
	return (volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x80000000) >> 31
}
func (o *RTC_I2C_Type) SetSLAVE_ADDR(value uint32) {
	volatile.StoreUint32(&o.SLAVE_ADDR.Reg, volatile.LoadUint32(&o.SLAVE_ADDR.Reg)&^(0x7fff)|value)
}
func (o *RTC_I2C_Type) GetSLAVE_ADDR() uint32 {
	return volatile.LoadUint32(&o.SLAVE_ADDR.Reg) & 0x7fff
}

// RTC_I2C.INT_RAW: RTC_I2C_INT_RAW
func (o *RTC_I2C_Type) SetINT_RAW_TIME_OUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *RTC_I2C_Type) GetINT_RAW_TIME_OUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *RTC_I2C_Type) SetINT_RAW_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetINT_RAW_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetINT_RAW_MASTER_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetINT_RAW_MASTER_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetINT_RAW_ARBITRATION_LOST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetINT_RAW_ARBITRATION_LOST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *RTC_I2C_Type) SetINT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *RTC_I2C_Type) GetINT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}

// RTC_I2C.INT_CLR: RTC_I2C_INT_CLR
func (o *RTC_I2C_Type) SetINT_CLR_TIME_OUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *RTC_I2C_Type) GetINT_CLR_TIME_OUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *RTC_I2C_Type) SetINT_CLR_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *RTC_I2C_Type) GetINT_CLR_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *RTC_I2C_Type) SetINT_CLR_MASTER_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *RTC_I2C_Type) GetINT_CLR_MASTER_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *RTC_I2C_Type) SetINT_CLR_ARBITRATION_LOST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *RTC_I2C_Type) GetINT_CLR_ARBITRATION_LOST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *RTC_I2C_Type) SetINT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *RTC_I2C_Type) GetINT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}

// RTC_I2C.SDA_DUTY: RTC_I2C_SDA_DUTY
func (o *RTC_I2C_Type) SetSDA_DUTY(value uint32) {
	volatile.StoreUint32(&o.SDA_DUTY.Reg, volatile.LoadUint32(&o.SDA_DUTY.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSDA_DUTY() uint32 {
	return volatile.LoadUint32(&o.SDA_DUTY.Reg) & 0xfffff
}

// RTC_I2C.SCL_HIGH_PERIOD: RTC_I2C_SCL_HIGH_PERIOD
func (o *RTC_I2C_Type) SetSCL_HIGH_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_HIGH_PERIOD.Reg, volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_HIGH_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_HIGH_PERIOD.Reg) & 0xfffff
}

// RTC_I2C.SCL_START_PERIOD: RTC_I2C_SCL_START_PERIOD
func (o *RTC_I2C_Type) SetSCL_START_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_START_PERIOD.Reg, volatile.LoadUint32(&o.SCL_START_PERIOD.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_START_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_START_PERIOD.Reg) & 0xfffff
}

// RTC_I2C.SCL_STOP_PERIOD: RTC_I2C_SCL_STOP_PERIOD
func (o *RTC_I2C_Type) SetSCL_STOP_PERIOD(value uint32) {
	volatile.StoreUint32(&o.SCL_STOP_PERIOD.Reg, volatile.LoadUint32(&o.SCL_STOP_PERIOD.Reg)&^(0xfffff)|value)
}
func (o *RTC_I2C_Type) GetSCL_STOP_PERIOD() uint32 {
	return volatile.LoadUint32(&o.SCL_STOP_PERIOD.Reg) & 0xfffff
}

type BT_Type struct {
}

type UART_Type struct {
	RX_FIFO        volatile.Register8 // 0x0
	_              [3]byte
	INT_RAW        volatile.Register32 // 0x4
	INT_ST         volatile.Register32 // 0x8
	INT_ENA        volatile.Register32 // 0xC
	INT_CLR        volatile.Register32 // 0x10
	CLKDIV         volatile.Register32 // 0x14
	AUTOBAUD       volatile.Register32 // 0x18
	STATUS         volatile.Register32 // 0x1C
	CONF0          volatile.Register32 // 0x20
	CONF1          volatile.Register32 // 0x24
	LOWPULSE       volatile.Register32 // 0x28
	HIGHPULSE      volatile.Register32 // 0x2C
	RXD_CNT        volatile.Register32 // 0x30
	FLOW_CONF      volatile.Register32 // 0x34
	SLEEP_CONF     volatile.Register32 // 0x38
	SWFC_CONF      volatile.Register32 // 0x3C
	IDLE_CONF      volatile.Register32 // 0x40
	RS485_CONF     volatile.Register32 // 0x44
	AT_CMD_PRECNT  volatile.Register32 // 0x48
	AT_CMD_POSTCNT volatile.Register32 // 0x4C
	AT_CMD_GAPTOUT volatile.Register32 // 0x50
	AT_CMD_CHAR    volatile.Register32 // 0x54
	MEM_CONF       volatile.Register32 // 0x58
	MEM_TX_STATUS  volatile.Register32 // 0x5C
	MEM_RX_STATUS  volatile.Register32 // 0x60
	MEM_CNT_STATUS volatile.Register32 // 0x64
	POSPULSE       volatile.Register32 // 0x68
	NEGPULSE       volatile.Register32 // 0x6C
	_              [8]byte
	DATE           volatile.Register32 // 0x78
	ID             volatile.Register32 // 0x7C
	_              [537657216]byte
	TX_FIFO        volatile.Register8 // 0x200C0000
}

// UART.RX_FIFO: UART_RX_FIFO
func (o *UART_Type) SetRX_FIFO(value uint8) {
	volatile.StoreUint8(&o.RX_FIFO.Reg, value)
}
func (o *UART_Type) GetRX_FIFO() uint8 {
	return volatile.LoadUint8(&o.RX_FIFO.Reg)
}

// UART.INT_RAW: UART_INT_RAW
func (o *UART_Type) SetINT_RAW_AT_CMD_CHAR_DET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_RAW_AT_CMD_CHAR_DET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40000) >> 18
}
func (o *UART_Type) SetINT_RAW_RS485_CLASH_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_RAW_RS485_CLASH_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_RAW_RS485_FRM_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_RAW_RS485_FRM_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_RAW_RS485_PARITY_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_RAW_RS485_PARITY_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_RAW_TX_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_RAW_TX_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_RAW_TX_BRK_IDLE_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_RAW_TX_BRK_IDLE_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_RAW_TX_BRK_DONE_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_RAW_TX_BRK_DONE_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_RAW_GLITCH_DET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_RAW_GLITCH_DET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_RAW_SW_XOFF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_RAW_SW_XOFF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_RAW_SW_XON_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_RAW_SW_XON_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_RAW_RXFIFO_TOUT_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_RAW_RXFIFO_TOUT_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_RAW_BRK_DET_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_RAW_BRK_DET_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_RAW_CTS_CHG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_RAW_CTS_CHG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_RAW_DSR_CHG_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_RAW_DSR_CHG_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_RAW_RXFIFO_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_RAW_RXFIFO_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_RAW_FRM_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_RAW_FRM_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_RAW_PARITY_ERR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_RAW_PARITY_ERR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_RAW_TXFIFO_EMPTY_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_RAW_TXFIFO_EMPTY_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_RAW_RXFIFO_FULL_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_RAW_RXFIFO_FULL_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// UART.INT_ST: UART_INT_ST
func (o *UART_Type) SetINT_ST_AT_CMD_CHAR_DET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_ST_AT_CMD_CHAR_DET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40000) >> 18
}
func (o *UART_Type) SetINT_ST_RS485_CLASH_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_ST_RS485_CLASH_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_ST_RS485_FRM_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_ST_RS485_FRM_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_ST_RS485_PARITY_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_ST_RS485_PARITY_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_ST_TX_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_ST_TX_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_ST_TX_BRK_IDLE_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_ST_TX_BRK_IDLE_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_ST_TX_BRK_DONE_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_ST_TX_BRK_DONE_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_ST_GLITCH_DET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_ST_GLITCH_DET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_ST_SW_XOFF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_ST_SW_XOFF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_ST_SW_XON_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_ST_SW_XON_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_ST_RXFIFO_TOUT_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_ST_RXFIFO_TOUT_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_ST_BRK_DET_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_ST_BRK_DET_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_ST_CTS_CHG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_ST_CTS_CHG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_ST_DSR_CHG_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_ST_DSR_CHG_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_ST_RXFIFO_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_ST_RXFIFO_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_ST_FRM_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_ST_FRM_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_ST_PARITY_ERR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_ST_PARITY_ERR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_ST_TXFIFO_EMPTY_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_ST_TXFIFO_EMPTY_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_ST_RXFIFO_FULL_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_ST_RXFIFO_FULL_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// UART.INT_ENA: UART_INT_ENA
func (o *UART_Type) SetINT_ENA_AT_CMD_CHAR_DET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_ENA_AT_CMD_CHAR_DET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40000) >> 18
}
func (o *UART_Type) SetINT_ENA_RS485_CLASH_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_ENA_RS485_CLASH_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_ENA_RS485_FRM_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_ENA_RS485_FRM_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_ENA_RS485_PARITY_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_ENA_RS485_PARITY_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_ENA_TX_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_ENA_TX_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_ENA_TX_BRK_IDLE_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_ENA_TX_BRK_IDLE_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_ENA_TX_BRK_DONE_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_ENA_TX_BRK_DONE_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_ENA_GLITCH_DET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_ENA_GLITCH_DET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_ENA_SW_XOFF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_ENA_SW_XOFF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_ENA_SW_XON_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_ENA_SW_XON_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_ENA_RXFIFO_TOUT_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_ENA_RXFIFO_TOUT_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_ENA_BRK_DET_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_ENA_BRK_DET_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_ENA_CTS_CHG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_ENA_CTS_CHG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_ENA_DSR_CHG_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_ENA_DSR_CHG_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_ENA_RXFIFO_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_ENA_RXFIFO_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_ENA_FRM_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_ENA_FRM_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_ENA_PARITY_ERR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_ENA_PARITY_ERR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_ENA_TXFIFO_EMPTY_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_ENA_TXFIFO_EMPTY_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_ENA_RXFIFO_FULL_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_ENA_RXFIFO_FULL_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// UART.INT_CLR: UART_INT_CLR
func (o *UART_Type) SetINT_CLR_AT_CMD_CHAR_DET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetINT_CLR_AT_CMD_CHAR_DET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40000) >> 18
}
func (o *UART_Type) SetINT_CLR_RS485_CLASH_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetINT_CLR_RS485_CLASH_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetINT_CLR_RS485_FRM_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetINT_CLR_RS485_FRM_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetINT_CLR_RS485_PARITY_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetINT_CLR_RS485_PARITY_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetINT_CLR_TX_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetINT_CLR_TX_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetINT_CLR_TX_BRK_IDLE_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetINT_CLR_TX_BRK_IDLE_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetINT_CLR_TX_BRK_DONE_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetINT_CLR_TX_BRK_DONE_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetINT_CLR_GLITCH_DET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetINT_CLR_GLITCH_DET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetINT_CLR_SW_XOFF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetINT_CLR_SW_XOFF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetINT_CLR_SW_XON_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetINT_CLR_SW_XON_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetINT_CLR_RXFIFO_TOUT_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetINT_CLR_RXFIFO_TOUT_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetINT_CLR_BRK_DET_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetINT_CLR_BRK_DET_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetINT_CLR_CTS_CHG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetINT_CLR_CTS_CHG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetINT_CLR_DSR_CHG_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetINT_CLR_DSR_CHG_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetINT_CLR_RXFIFO_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetINT_CLR_RXFIFO_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetINT_CLR_FRM_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetINT_CLR_FRM_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetINT_CLR_PARITY_ERR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetINT_CLR_PARITY_ERR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetINT_CLR_TXFIFO_EMPTY_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetINT_CLR_TXFIFO_EMPTY_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetINT_CLR_RXFIFO_FULL_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetINT_CLR_RXFIFO_FULL_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// UART.CLKDIV: UART_CLKDIV
func (o *UART_Type) SetCLKDIV_CLKDIV_FRAG(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xf00000)|value<<20)
}
func (o *UART_Type) GetCLKDIV_CLKDIV_FRAG() uint32 {
	return (volatile.LoadUint32(&o.CLKDIV.Reg) & 0xf00000) >> 20
}
func (o *UART_Type) SetCLKDIV(value uint32) {
	volatile.StoreUint32(&o.CLKDIV.Reg, volatile.LoadUint32(&o.CLKDIV.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetCLKDIV() uint32 {
	return volatile.LoadUint32(&o.CLKDIV.Reg) & 0xfffff
}

// UART.AUTOBAUD: UART_AUTOBAUD
func (o *UART_Type) SetAUTOBAUD_GLITCH_FILT(value uint32) {
	volatile.StoreUint32(&o.AUTOBAUD.Reg, volatile.LoadUint32(&o.AUTOBAUD.Reg)&^(0xff00)|value<<8)
}
func (o *UART_Type) GetAUTOBAUD_GLITCH_FILT() uint32 {
	return (volatile.LoadUint32(&o.AUTOBAUD.Reg) & 0xff00) >> 8
}
func (o *UART_Type) SetAUTOBAUD_AUTOBAUD_EN(value uint32) {
	volatile.StoreUint32(&o.AUTOBAUD.Reg, volatile.LoadUint32(&o.AUTOBAUD.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetAUTOBAUD_AUTOBAUD_EN() uint32 {
	return volatile.LoadUint32(&o.AUTOBAUD.Reg) & 0x1
}

// UART.STATUS: UART_STATUS
func (o *UART_Type) SetSTATUS_TXD(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x80000000)|value<<31)
}
func (o *UART_Type) GetSTATUS_TXD() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x80000000) >> 31
}
func (o *UART_Type) SetSTATUS_RTSN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x40000000)|value<<30)
}
func (o *UART_Type) GetSTATUS_RTSN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x40000000) >> 30
}
func (o *UART_Type) SetSTATUS_DTRN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x20000000)|value<<29)
}
func (o *UART_Type) GetSTATUS_DTRN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x20000000) >> 29
}
func (o *UART_Type) SetSTATUS_ST_UTX_OUT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xf000000)|value<<24)
}
func (o *UART_Type) GetSTATUS_ST_UTX_OUT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xf000000) >> 24
}
func (o *UART_Type) SetSTATUS_TXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xff0000)|value<<16)
}
func (o *UART_Type) GetSTATUS_TXFIFO_CNT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xff0000) >> 16
}
func (o *UART_Type) SetSTATUS_RXD(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetSTATUS_RXD() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetSTATUS_CTSN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetSTATUS_CTSN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetSTATUS_DSRN(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetSTATUS_DSRN() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetSTATUS_ST_URX_OUT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xf00)|value<<8)
}
func (o *UART_Type) GetSTATUS_ST_URX_OUT() uint32 {
	return (volatile.LoadUint32(&o.STATUS.Reg) & 0xf00) >> 8
}
func (o *UART_Type) SetSTATUS_RXFIFO_CNT(value uint32) {
	volatile.StoreUint32(&o.STATUS.Reg, volatile.LoadUint32(&o.STATUS.Reg)&^(0xff)|value)
}
func (o *UART_Type) GetSTATUS_RXFIFO_CNT() uint32 {
	return volatile.LoadUint32(&o.STATUS.Reg) & 0xff
}

// UART.CONF0: UART_CONF0
func (o *UART_Type) SetCONF0_TICK_REF_ALWAYS_ON(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000000)|value<<27)
}
func (o *UART_Type) GetCONF0_TICK_REF_ALWAYS_ON() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000000) >> 27
}
func (o *UART_Type) SetCONF0_ERR_WR_MASK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000000)|value<<26)
}
func (o *UART_Type) GetCONF0_ERR_WR_MASK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000000) >> 26
}
func (o *UART_Type) SetCONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000000)|value<<25)
}
func (o *UART_Type) GetCONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000000) >> 25
}
func (o *UART_Type) SetCONF0_DTR_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000000)|value<<24)
}
func (o *UART_Type) GetCONF0_DTR_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000000) >> 24
}
func (o *UART_Type) SetCONF0_RTS_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800000)|value<<23)
}
func (o *UART_Type) GetCONF0_RTS_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800000) >> 23
}
func (o *UART_Type) SetCONF0_TXD_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400000)|value<<22)
}
func (o *UART_Type) GetCONF0_TXD_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400000) >> 22
}
func (o *UART_Type) SetCONF0_DSR_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200000)|value<<21)
}
func (o *UART_Type) GetCONF0_DSR_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200000) >> 21
}
func (o *UART_Type) SetCONF0_CTS_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100000)|value<<20)
}
func (o *UART_Type) GetCONF0_CTS_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100000) >> 20
}
func (o *UART_Type) SetCONF0_RXD_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80000)|value<<19)
}
func (o *UART_Type) GetCONF0_RXD_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80000) >> 19
}
func (o *UART_Type) SetCONF0_TXFIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40000)|value<<18)
}
func (o *UART_Type) GetCONF0_TXFIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40000) >> 18
}
func (o *UART_Type) SetCONF0_RXFIFO_RST(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x20000)|value<<17)
}
func (o *UART_Type) GetCONF0_RXFIFO_RST() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x20000) >> 17
}
func (o *UART_Type) SetCONF0_IRDA_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x10000)|value<<16)
}
func (o *UART_Type) GetCONF0_IRDA_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x10000) >> 16
}
func (o *UART_Type) SetCONF0_TX_FLOW_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x8000)|value<<15)
}
func (o *UART_Type) GetCONF0_TX_FLOW_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x8000) >> 15
}
func (o *UART_Type) SetCONF0_LOOPBACK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x4000)|value<<14)
}
func (o *UART_Type) GetCONF0_LOOPBACK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x4000) >> 14
}
func (o *UART_Type) SetCONF0_IRDA_RX_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2000)|value<<13)
}
func (o *UART_Type) GetCONF0_IRDA_RX_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2000) >> 13
}
func (o *UART_Type) SetCONF0_IRDA_TX_INV(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1000)|value<<12)
}
func (o *UART_Type) GetCONF0_IRDA_TX_INV() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x1000) >> 12
}
func (o *UART_Type) SetCONF0_IRDA_WCTL(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x800)|value<<11)
}
func (o *UART_Type) GetCONF0_IRDA_WCTL() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x800) >> 11
}
func (o *UART_Type) SetCONF0_IRDA_TX_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x400)|value<<10)
}
func (o *UART_Type) GetCONF0_IRDA_TX_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x400) >> 10
}
func (o *UART_Type) SetCONF0_IRDA_DPLX(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x200)|value<<9)
}
func (o *UART_Type) GetCONF0_IRDA_DPLX() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x200) >> 9
}
func (o *UART_Type) SetCONF0_TXD_BRK(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x100)|value<<8)
}
func (o *UART_Type) GetCONF0_TXD_BRK() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x100) >> 8
}
func (o *UART_Type) SetCONF0_SW_DTR(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x80)|value<<7)
}
func (o *UART_Type) GetCONF0_SW_DTR() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x80) >> 7
}
func (o *UART_Type) SetCONF0_SW_RTS(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x40)|value<<6)
}
func (o *UART_Type) GetCONF0_SW_RTS() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x40) >> 6
}
func (o *UART_Type) SetCONF0_STOP_BIT_NUM(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x30)|value<<4)
}
func (o *UART_Type) GetCONF0_STOP_BIT_NUM() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x30) >> 4
}
func (o *UART_Type) SetCONF0_BIT_NUM(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0xc)|value<<2)
}
func (o *UART_Type) GetCONF0_BIT_NUM() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0xc) >> 2
}
func (o *UART_Type) SetCONF0_PARITY_EN(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetCONF0_PARITY_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF0.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetCONF0_PARITY(value uint32) {
	volatile.StoreUint32(&o.CONF0.Reg, volatile.LoadUint32(&o.CONF0.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetCONF0_PARITY() uint32 {
	return volatile.LoadUint32(&o.CONF0.Reg) & 0x1
}

// UART.CONF1: UART_CONF1
func (o *UART_Type) SetCONF1_RX_TOUT_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *UART_Type) GetCONF1_RX_TOUT_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x80000000) >> 31
}
func (o *UART_Type) SetCONF1_RX_TOUT_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f000000)|value<<24)
}
func (o *UART_Type) GetCONF1_RX_TOUT_THRHD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x7f000000) >> 24
}
func (o *UART_Type) SetCONF1_RX_FLOW_EN(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x800000)|value<<23)
}
func (o *UART_Type) GetCONF1_RX_FLOW_EN() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x800000) >> 23
}
func (o *UART_Type) SetCONF1_RX_FLOW_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f0000)|value<<16)
}
func (o *UART_Type) GetCONF1_RX_FLOW_THRHD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x7f0000) >> 16
}
func (o *UART_Type) SetCONF1_TXFIFO_EMPTY_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f00)|value<<8)
}
func (o *UART_Type) GetCONF1_TXFIFO_EMPTY_THRHD() uint32 {
	return (volatile.LoadUint32(&o.CONF1.Reg) & 0x7f00) >> 8
}
func (o *UART_Type) SetCONF1_RXFIFO_FULL_THRHD(value uint32) {
	volatile.StoreUint32(&o.CONF1.Reg, volatile.LoadUint32(&o.CONF1.Reg)&^(0x7f)|value)
}
func (o *UART_Type) GetCONF1_RXFIFO_FULL_THRHD() uint32 {
	return volatile.LoadUint32(&o.CONF1.Reg) & 0x7f
}

// UART.LOWPULSE: UART_LOWPULSE
func (o *UART_Type) SetLOWPULSE_LOWPULSE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.LOWPULSE.Reg, volatile.LoadUint32(&o.LOWPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetLOWPULSE_LOWPULSE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.LOWPULSE.Reg) & 0xfffff
}

// UART.HIGHPULSE: UART_HIGHPULSE
func (o *UART_Type) SetHIGHPULSE_HIGHPULSE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.HIGHPULSE.Reg, volatile.LoadUint32(&o.HIGHPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetHIGHPULSE_HIGHPULSE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.HIGHPULSE.Reg) & 0xfffff
}

// UART.RXD_CNT: UART_RXD_CNT
func (o *UART_Type) SetRXD_CNT_RXD_EDGE_CNT(value uint32) {
	volatile.StoreUint32(&o.RXD_CNT.Reg, volatile.LoadUint32(&o.RXD_CNT.Reg)&^(0x3ff)|value)
}
func (o *UART_Type) GetRXD_CNT_RXD_EDGE_CNT() uint32 {
	return volatile.LoadUint32(&o.RXD_CNT.Reg) & 0x3ff
}

// UART.FLOW_CONF: UART_FLOW_CONF
func (o *UART_Type) SetFLOW_CONF_SEND_XOFF(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetFLOW_CONF_SEND_XOFF() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetFLOW_CONF_SEND_XON(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetFLOW_CONF_SEND_XON() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetFLOW_CONF_FORCE_XOFF(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetFLOW_CONF_FORCE_XOFF() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetFLOW_CONF_FORCE_XON(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetFLOW_CONF_FORCE_XON() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetFLOW_CONF_XONOFF_DEL(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetFLOW_CONF_XONOFF_DEL() uint32 {
	return (volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetFLOW_CONF_SW_FLOW_CON_EN(value uint32) {
	volatile.StoreUint32(&o.FLOW_CONF.Reg, volatile.LoadUint32(&o.FLOW_CONF.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetFLOW_CONF_SW_FLOW_CON_EN() uint32 {
	return volatile.LoadUint32(&o.FLOW_CONF.Reg) & 0x1
}

// UART.SLEEP_CONF: UART_SLEEP_CONF
func (o *UART_Type) SetSLEEP_CONF_ACTIVE_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.SLEEP_CONF.Reg, volatile.LoadUint32(&o.SLEEP_CONF.Reg)&^(0x3ff)|value)
}
func (o *UART_Type) GetSLEEP_CONF_ACTIVE_THRESHOLD() uint32 {
	return volatile.LoadUint32(&o.SLEEP_CONF.Reg) & 0x3ff
}

// UART.SWFC_CONF: UART_SWFC_CONF
func (o *UART_Type) SetSWFC_CONF_XOFF_CHAR(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff000000)|value<<24)
}
func (o *UART_Type) GetSWFC_CONF_XOFF_CHAR() uint32 {
	return (volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff000000) >> 24
}
func (o *UART_Type) SetSWFC_CONF_XON_CHAR(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff0000)|value<<16)
}
func (o *UART_Type) GetSWFC_CONF_XON_CHAR() uint32 {
	return (volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff0000) >> 16
}
func (o *UART_Type) SetSWFC_CONF_XOFF_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff00)|value<<8)
}
func (o *UART_Type) GetSWFC_CONF_XOFF_THRESHOLD() uint32 {
	return (volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff00) >> 8
}
func (o *UART_Type) SetSWFC_CONF_XON_THRESHOLD(value uint32) {
	volatile.StoreUint32(&o.SWFC_CONF.Reg, volatile.LoadUint32(&o.SWFC_CONF.Reg)&^(0xff)|value)
}
func (o *UART_Type) GetSWFC_CONF_XON_THRESHOLD() uint32 {
	return volatile.LoadUint32(&o.SWFC_CONF.Reg) & 0xff
}

// UART.IDLE_CONF: UART_IDLE_CONF
func (o *UART_Type) SetIDLE_CONF_TX_BRK_NUM(value uint32) {
	volatile.StoreUint32(&o.IDLE_CONF.Reg, volatile.LoadUint32(&o.IDLE_CONF.Reg)&^(0xff00000)|value<<20)
}
func (o *UART_Type) GetIDLE_CONF_TX_BRK_NUM() uint32 {
	return (volatile.LoadUint32(&o.IDLE_CONF.Reg) & 0xff00000) >> 20
}
func (o *UART_Type) SetIDLE_CONF_TX_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.IDLE_CONF.Reg, volatile.LoadUint32(&o.IDLE_CONF.Reg)&^(0xffc00)|value<<10)
}
func (o *UART_Type) GetIDLE_CONF_TX_IDLE_NUM() uint32 {
	return (volatile.LoadUint32(&o.IDLE_CONF.Reg) & 0xffc00) >> 10
}
func (o *UART_Type) SetIDLE_CONF_RX_IDLE_THRHD(value uint32) {
	volatile.StoreUint32(&o.IDLE_CONF.Reg, volatile.LoadUint32(&o.IDLE_CONF.Reg)&^(0x3ff)|value)
}
func (o *UART_Type) GetIDLE_CONF_RX_IDLE_THRHD() uint32 {
	return volatile.LoadUint32(&o.IDLE_CONF.Reg) & 0x3ff
}

// UART.RS485_CONF: UART_RS485_CONF
func (o *UART_Type) SetRS485_CONF_RS485_TX_DLY_NUM(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x3c0)|value<<6)
}
func (o *UART_Type) GetRS485_CONF_RS485_TX_DLY_NUM() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x3c0) >> 6
}
func (o *UART_Type) SetRS485_CONF_RS485_RX_DLY_NUM(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x20)|value<<5)
}
func (o *UART_Type) GetRS485_CONF_RS485_RX_DLY_NUM() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x20) >> 5
}
func (o *UART_Type) SetRS485_CONF_RS485RXBY_TX_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x10)|value<<4)
}
func (o *UART_Type) GetRS485_CONF_RS485RXBY_TX_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x10) >> 4
}
func (o *UART_Type) SetRS485_CONF_RS485TX_RX_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x8)|value<<3)
}
func (o *UART_Type) GetRS485_CONF_RS485TX_RX_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x8) >> 3
}
func (o *UART_Type) SetRS485_CONF_DL1_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x4)|value<<2)
}
func (o *UART_Type) GetRS485_CONF_DL1_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x4) >> 2
}
func (o *UART_Type) SetRS485_CONF_DL0_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x2)|value<<1)
}
func (o *UART_Type) GetRS485_CONF_DL0_EN() uint32 {
	return (volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x2) >> 1
}
func (o *UART_Type) SetRS485_CONF_RS485_EN(value uint32) {
	volatile.StoreUint32(&o.RS485_CONF.Reg, volatile.LoadUint32(&o.RS485_CONF.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetRS485_CONF_RS485_EN() uint32 {
	return volatile.LoadUint32(&o.RS485_CONF.Reg) & 0x1
}

// UART.AT_CMD_PRECNT: UART_AT_CMD_PRECNT
func (o *UART_Type) SetAT_CMD_PRECNT_PRE_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_PRECNT.Reg, volatile.LoadUint32(&o.AT_CMD_PRECNT.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetAT_CMD_PRECNT_PRE_IDLE_NUM() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_PRECNT.Reg) & 0xffffff
}

// UART.AT_CMD_POSTCNT: UART_AT_CMD_POSTCNT
func (o *UART_Type) SetAT_CMD_POSTCNT_POST_IDLE_NUM(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_POSTCNT.Reg, volatile.LoadUint32(&o.AT_CMD_POSTCNT.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetAT_CMD_POSTCNT_POST_IDLE_NUM() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_POSTCNT.Reg) & 0xffffff
}

// UART.AT_CMD_GAPTOUT: UART_AT_CMD_GAPTOUT
func (o *UART_Type) SetAT_CMD_GAPTOUT_RX_GAP_TOUT(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_GAPTOUT.Reg, volatile.LoadUint32(&o.AT_CMD_GAPTOUT.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetAT_CMD_GAPTOUT_RX_GAP_TOUT() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_GAPTOUT.Reg) & 0xffffff
}

// UART.AT_CMD_CHAR: UART_AT_CMD_CHAR
func (o *UART_Type) SetAT_CMD_CHAR_CHAR_NUM(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_CHAR.Reg, volatile.LoadUint32(&o.AT_CMD_CHAR.Reg)&^(0xff00)|value<<8)
}
func (o *UART_Type) GetAT_CMD_CHAR_CHAR_NUM() uint32 {
	return (volatile.LoadUint32(&o.AT_CMD_CHAR.Reg) & 0xff00) >> 8
}
func (o *UART_Type) SetAT_CMD_CHAR(value uint32) {
	volatile.StoreUint32(&o.AT_CMD_CHAR.Reg, volatile.LoadUint32(&o.AT_CMD_CHAR.Reg)&^(0xff)|value)
}
func (o *UART_Type) GetAT_CMD_CHAR() uint32 {
	return volatile.LoadUint32(&o.AT_CMD_CHAR.Reg) & 0xff
}

// UART.MEM_CONF: UART_MEM_CONF
func (o *UART_Type) SetMEM_CONF_TX_MEM_EMPTY_THRHD(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x70000000)|value<<28)
}
func (o *UART_Type) GetMEM_CONF_TX_MEM_EMPTY_THRHD() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x70000000) >> 28
}
func (o *UART_Type) SetMEM_CONF_RX_MEM_FULL_THRHD(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0xe000000)|value<<25)
}
func (o *UART_Type) GetMEM_CONF_RX_MEM_FULL_THRHD() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0xe000000) >> 25
}
func (o *UART_Type) SetMEM_CONF_XOFF_THRESHOLD_H2(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x1800000)|value<<23)
}
func (o *UART_Type) GetMEM_CONF_XOFF_THRESHOLD_H2() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x1800000) >> 23
}
func (o *UART_Type) SetMEM_CONF_XON_THRESHOLD_H2(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x600000)|value<<21)
}
func (o *UART_Type) GetMEM_CONF_XON_THRESHOLD_H2() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x600000) >> 21
}
func (o *UART_Type) SetMEM_CONF_RX_TOUT_THRHD_H3(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x1c0000)|value<<18)
}
func (o *UART_Type) GetMEM_CONF_RX_TOUT_THRHD_H3() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x1c0000) >> 18
}
func (o *UART_Type) SetMEM_CONF_RX_FLOW_THRHD_H3(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x38000)|value<<15)
}
func (o *UART_Type) GetMEM_CONF_RX_FLOW_THRHD_H3() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x38000) >> 15
}
func (o *UART_Type) SetMEM_CONF_TX_SIZE(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x780)|value<<7)
}
func (o *UART_Type) GetMEM_CONF_TX_SIZE() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x780) >> 7
}
func (o *UART_Type) SetMEM_CONF_RX_SIZE(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x78)|value<<3)
}
func (o *UART_Type) GetMEM_CONF_RX_SIZE() uint32 {
	return (volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x78) >> 3
}
func (o *UART_Type) SetMEM_CONF_MEM_PD(value uint32) {
	volatile.StoreUint32(&o.MEM_CONF.Reg, volatile.LoadUint32(&o.MEM_CONF.Reg)&^(0x1)|value)
}
func (o *UART_Type) GetMEM_CONF_MEM_PD() uint32 {
	return volatile.LoadUint32(&o.MEM_CONF.Reg) & 0x1
}

// UART.MEM_TX_STATUS: UART_MEM_TX_STATUS
func (o *UART_Type) SetMEM_TX_STATUS(value uint32) {
	volatile.StoreUint32(&o.MEM_TX_STATUS.Reg, volatile.LoadUint32(&o.MEM_TX_STATUS.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetMEM_TX_STATUS() uint32 {
	return volatile.LoadUint32(&o.MEM_TX_STATUS.Reg) & 0xffffff
}

// UART.MEM_RX_STATUS: UART_MEM_RX_STATUS
func (o *UART_Type) SetMEM_RX_STATUS(value uint32) {
	volatile.StoreUint32(&o.MEM_RX_STATUS.Reg, volatile.LoadUint32(&o.MEM_RX_STATUS.Reg)&^(0xffffff)|value)
}
func (o *UART_Type) GetMEM_RX_STATUS() uint32 {
	return volatile.LoadUint32(&o.MEM_RX_STATUS.Reg) & 0xffffff
}
func (o *UART_Type) SetMEM_RX_STATUS_MEM_RX_RD_ADDR(value uint32) {
	volatile.StoreUint32(&o.MEM_RX_STATUS.Reg, volatile.LoadUint32(&o.MEM_RX_STATUS.Reg)&^(0x1ffc)|value<<2)
}
func (o *UART_Type) GetMEM_RX_STATUS_MEM_RX_RD_ADDR() uint32 {
	return (volatile.LoadUint32(&o.MEM_RX_STATUS.Reg) & 0x1ffc) >> 2
}
func (o *UART_Type) SetMEM_RX_STATUS_MEM_RX_WR_ADDR(value uint32) {
	volatile.StoreUint32(&o.MEM_RX_STATUS.Reg, volatile.LoadUint32(&o.MEM_RX_STATUS.Reg)&^(0xffe000)|value<<13)
}
func (o *UART_Type) GetMEM_RX_STATUS_MEM_RX_WR_ADDR() uint32 {
	return (volatile.LoadUint32(&o.MEM_RX_STATUS.Reg) & 0xffe000) >> 13
}

// UART.MEM_CNT_STATUS: UART_MEM_CNT_STATUS
func (o *UART_Type) SetMEM_CNT_STATUS_TX_MEM_CNT(value uint32) {
	volatile.StoreUint32(&o.MEM_CNT_STATUS.Reg, volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg)&^(0x38)|value<<3)
}
func (o *UART_Type) GetMEM_CNT_STATUS_TX_MEM_CNT() uint32 {
	return (volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg) & 0x38) >> 3
}
func (o *UART_Type) SetMEM_CNT_STATUS_RX_MEM_CNT(value uint32) {
	volatile.StoreUint32(&o.MEM_CNT_STATUS.Reg, volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg)&^(0x7)|value)
}
func (o *UART_Type) GetMEM_CNT_STATUS_RX_MEM_CNT() uint32 {
	return volatile.LoadUint32(&o.MEM_CNT_STATUS.Reg) & 0x7
}

// UART.POSPULSE: UART_POSPULSE
func (o *UART_Type) SetPOSPULSE_POSEDGE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.POSPULSE.Reg, volatile.LoadUint32(&o.POSPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetPOSPULSE_POSEDGE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.POSPULSE.Reg) & 0xfffff
}

// UART.NEGPULSE: UART_NEGPULSE
func (o *UART_Type) SetNEGPULSE_NEGEDGE_MIN_CNT(value uint32) {
	volatile.StoreUint32(&o.NEGPULSE.Reg, volatile.LoadUint32(&o.NEGPULSE.Reg)&^(0xfffff)|value)
}
func (o *UART_Type) GetNEGPULSE_NEGEDGE_MIN_CNT() uint32 {
	return volatile.LoadUint32(&o.NEGPULSE.Reg) & 0xfffff
}

// UART.DATE: UART_DATE
func (o *UART_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *UART_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

// UART.ID: UART_ID
func (o *UART_Type) SetID(value uint32) {
	volatile.StoreUint32(&o.ID.Reg, value)
}
func (o *UART_Type) GetID() uint32 {
	return volatile.LoadUint32(&o.ID.Reg)
}

// UART.TX_FIFO: UART_TX_FIFO
func (o *UART_Type) SetTX_FIFO(value uint8) {
	volatile.StoreUint8(&o.TX_FIFO.Reg, value)
}
func (o *UART_Type) GetTX_FIFO() uint8 {
	return volatile.LoadUint8(&o.TX_FIFO.Reg)
}

type LEDC_Type struct {
	HSCH0_CONF0    volatile.Register32 // 0x0
	HSCH0_HPOINT   volatile.Register32 // 0x4
	HSCH0_DUTY     volatile.Register32 // 0x8
	HSCH0_CONF1    volatile.Register32 // 0xC
	HSCH0_DUTY_R   volatile.Register32 // 0x10
	HSCH1_CONF0    volatile.Register32 // 0x14
	HSCH1_HPOINT   volatile.Register32 // 0x18
	HSCH1_DUTY     volatile.Register32 // 0x1C
	HSCH1_CONF1    volatile.Register32 // 0x20
	HSCH1_DUTY_R   volatile.Register32 // 0x24
	HSCH2_CONF0    volatile.Register32 // 0x28
	HSCH2_HPOINT   volatile.Register32 // 0x2C
	HSCH2_DUTY     volatile.Register32 // 0x30
	HSCH2_CONF1    volatile.Register32 // 0x34
	HSCH2_DUTY_R   volatile.Register32 // 0x38
	HSCH3_CONF0    volatile.Register32 // 0x3C
	HSCH3_HPOINT   volatile.Register32 // 0x40
	HSCH3_DUTY     volatile.Register32 // 0x44
	HSCH3_CONF1    volatile.Register32 // 0x48
	HSCH3_DUTY_R   volatile.Register32 // 0x4C
	HSCH4_CONF0    volatile.Register32 // 0x50
	HSCH4_HPOINT   volatile.Register32 // 0x54
	HSCH4_DUTY     volatile.Register32 // 0x58
	HSCH4_CONF1    volatile.Register32 // 0x5C
	HSCH4_DUTY_R   volatile.Register32 // 0x60
	HSCH5_CONF0    volatile.Register32 // 0x64
	HSCH5_HPOINT   volatile.Register32 // 0x68
	HSCH5_DUTY     volatile.Register32 // 0x6C
	HSCH5_CONF1    volatile.Register32 // 0x70
	HSCH5_DUTY_R   volatile.Register32 // 0x74
	HSCH6_CONF0    volatile.Register32 // 0x78
	HSCH6_HPOINT   volatile.Register32 // 0x7C
	HSCH6_DUTY     volatile.Register32 // 0x80
	HSCH6_CONF1    volatile.Register32 // 0x84
	HSCH6_DUTY_R   volatile.Register32 // 0x88
	HSCH7_CONF0    volatile.Register32 // 0x8C
	HSCH7_HPOINT   volatile.Register32 // 0x90
	HSCH7_DUTY     volatile.Register32 // 0x94
	HSCH7_CONF1    volatile.Register32 // 0x98
	HSCH7_DUTY_R   volatile.Register32 // 0x9C
	LSCH0_CONF0    volatile.Register32 // 0xA0
	LSCH0_HPOINT   volatile.Register32 // 0xA4
	LSCH0_DUTY     volatile.Register32 // 0xA8
	LSCH0_CONF1    volatile.Register32 // 0xAC
	LSCH0_DUTY_R   volatile.Register32 // 0xB0
	LSCH1_CONF0    volatile.Register32 // 0xB4
	LSCH1_HPOINT   volatile.Register32 // 0xB8
	LSCH1_DUTY     volatile.Register32 // 0xBC
	LSCH1_CONF1    volatile.Register32 // 0xC0
	LSCH1_DUTY_R   volatile.Register32 // 0xC4
	LSCH2_CONF0    volatile.Register32 // 0xC8
	LSCH2_HPOINT   volatile.Register32 // 0xCC
	LSCH2_DUTY     volatile.Register32 // 0xD0
	LSCH2_CONF1    volatile.Register32 // 0xD4
	LSCH2_DUTY_R   volatile.Register32 // 0xD8
	LSCH3_CONF0    volatile.Register32 // 0xDC
	LSCH3_HPOINT   volatile.Register32 // 0xE0
	LSCH3_DUTY     volatile.Register32 // 0xE4
	LSCH3_CONF1    volatile.Register32 // 0xE8
	LSCH3_DUTY_R   volatile.Register32 // 0xEC
	LSCH4_CONF0    volatile.Register32 // 0xF0
	LSCH4_HPOINT   volatile.Register32 // 0xF4
	LSCH4_DUTY     volatile.Register32 // 0xF8
	LSCH4_CONF1    volatile.Register32 // 0xFC
	LSCH4_DUTY_R   volatile.Register32 // 0x100
	LSCH5_CONF0    volatile.Register32 // 0x104
	LSCH5_HPOINT   volatile.Register32 // 0x108
	LSCH5_DUTY     volatile.Register32 // 0x10C
	LSCH5_CONF1    volatile.Register32 // 0x110
	LSCH5_DUTY_R   volatile.Register32 // 0x114
	LSCH6_CONF0    volatile.Register32 // 0x118
	LSCH6_HPOINT   volatile.Register32 // 0x11C
	LSCH6_DUTY     volatile.Register32 // 0x120
	LSCH6_CONF1    volatile.Register32 // 0x124
	LSCH6_DUTY_R   volatile.Register32 // 0x128
	LSCH7_CONF0    volatile.Register32 // 0x12C
	LSCH7_HPOINT   volatile.Register32 // 0x130
	LSCH7_DUTY     volatile.Register32 // 0x134
	LSCH7_CONF1    volatile.Register32 // 0x138
	LSCH7_DUTY_R   volatile.Register32 // 0x13C
	HSTIMER0_CONF  volatile.Register32 // 0x140
	HSTIMER0_VALUE volatile.Register32 // 0x144
	HSTIMER1_CONF  volatile.Register32 // 0x148
	HSTIMER1_VALUE volatile.Register32 // 0x14C
	HSTIMER2_CONF  volatile.Register32 // 0x150
	HSTIMER2_VALUE volatile.Register32 // 0x154
	HSTIMER3_CONF  volatile.Register32 // 0x158
	HSTIMER3_VALUE volatile.Register32 // 0x15C
	LSTIMER0_CONF  volatile.Register32 // 0x160
	LSTIMER0_VALUE volatile.Register32 // 0x164
	LSTIMER1_CONF  volatile.Register32 // 0x168
	LSTIMER1_VALUE volatile.Register32 // 0x16C
	LSTIMER2_CONF  volatile.Register32 // 0x170
	LSTIMER2_VALUE volatile.Register32 // 0x174
	LSTIMER3_CONF  volatile.Register32 // 0x178
	LSTIMER3_VALUE volatile.Register32 // 0x17C
	INT_RAW        volatile.Register32 // 0x180
	INT_ST         volatile.Register32 // 0x184
	INT_ENA        volatile.Register32 // 0x188
	INT_CLR        volatile.Register32 // 0x18C
	CONF           volatile.Register32 // 0x190
	_              [104]byte
	DATE           volatile.Register32 // 0x1FC
}

// LEDC.HSCH0_CONF0: LEDC_HSCH0_CONF0
func (o *LEDC_Type) SetHSCH0_CONF0_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF0.Reg, volatile.LoadUint32(&o.HSCH0_CONF0.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH0_CONF0_CLK_EN() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF0.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH0_CONF0_IDLE_LV_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF0.Reg, volatile.LoadUint32(&o.HSCH0_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH0_CONF0_IDLE_LV_HSCH0() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH0_CONF0_SIG_OUT_EN_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF0.Reg, volatile.LoadUint32(&o.HSCH0_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH0_CONF0_SIG_OUT_EN_HSCH0() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH0_CONF0_TIMER_SEL_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF0.Reg, volatile.LoadUint32(&o.HSCH0_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH0_CONF0_TIMER_SEL_HSCH0() uint32 {
	return volatile.LoadUint32(&o.HSCH0_CONF0.Reg) & 0x3
}

// LEDC.HSCH0_HPOINT: LEDC_HSCH0_HPOINT
func (o *LEDC_Type) SetHSCH0_HPOINT_HPOINT_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_HPOINT.Reg, volatile.LoadUint32(&o.HSCH0_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH0_HPOINT_HPOINT_HSCH0() uint32 {
	return volatile.LoadUint32(&o.HSCH0_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH0_DUTY: LEDC_HSCH0_DUTY
func (o *LEDC_Type) SetHSCH0_DUTY_DUTY_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_DUTY.Reg, volatile.LoadUint32(&o.HSCH0_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH0_DUTY_DUTY_HSCH0() uint32 {
	return volatile.LoadUint32(&o.HSCH0_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH0_CONF1: LEDC_HSCH0_CONF1
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_START_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_START_HSCH0() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_INC_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_INC_HSCH0() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_NUM_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_NUM_HSCH0() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_CYCLE_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_CYCLE_HSCH0() uint32 {
	return (volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH0_CONF1_DUTY_SCALE_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_CONF1.Reg, volatile.LoadUint32(&o.HSCH0_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH0_CONF1_DUTY_SCALE_HSCH0() uint32 {
	return volatile.LoadUint32(&o.HSCH0_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH0_DUTY_R: LEDC_HSCH0_DUTY_R
func (o *LEDC_Type) SetHSCH0_DUTY_R_DUTY_HSCH0(value uint32) {
	volatile.StoreUint32(&o.HSCH0_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH0_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH0_DUTY_R_DUTY_HSCH0() uint32 {
	return volatile.LoadUint32(&o.HSCH0_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH1_CONF0: LEDC_HSCH1_CONF0
func (o *LEDC_Type) SetHSCH1_CONF0_IDLE_LV_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF0.Reg, volatile.LoadUint32(&o.HSCH1_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH1_CONF0_IDLE_LV_HSCH1() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH1_CONF0_SIG_OUT_EN_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF0.Reg, volatile.LoadUint32(&o.HSCH1_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH1_CONF0_SIG_OUT_EN_HSCH1() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH1_CONF0_TIMER_SEL_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF0.Reg, volatile.LoadUint32(&o.HSCH1_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH1_CONF0_TIMER_SEL_HSCH1() uint32 {
	return volatile.LoadUint32(&o.HSCH1_CONF0.Reg) & 0x3
}

// LEDC.HSCH1_HPOINT: LEDC_HSCH1_HPOINT
func (o *LEDC_Type) SetHSCH1_HPOINT_HPOINT_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_HPOINT.Reg, volatile.LoadUint32(&o.HSCH1_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH1_HPOINT_HPOINT_HSCH1() uint32 {
	return volatile.LoadUint32(&o.HSCH1_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH1_DUTY: LEDC_HSCH1_DUTY
func (o *LEDC_Type) SetHSCH1_DUTY_DUTY_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_DUTY.Reg, volatile.LoadUint32(&o.HSCH1_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH1_DUTY_DUTY_HSCH1() uint32 {
	return volatile.LoadUint32(&o.HSCH1_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH1_CONF1: LEDC_HSCH1_CONF1
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_START_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_START_HSCH1() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_INC_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_INC_HSCH1() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_NUM_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_NUM_HSCH1() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_CYCLE_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_CYCLE_HSCH1() uint32 {
	return (volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH1_CONF1_DUTY_SCALE_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_CONF1.Reg, volatile.LoadUint32(&o.HSCH1_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH1_CONF1_DUTY_SCALE_HSCH1() uint32 {
	return volatile.LoadUint32(&o.HSCH1_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH1_DUTY_R: LEDC_HSCH1_DUTY_R
func (o *LEDC_Type) SetHSCH1_DUTY_R_DUTY_HSCH1(value uint32) {
	volatile.StoreUint32(&o.HSCH1_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH1_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH1_DUTY_R_DUTY_HSCH1() uint32 {
	return volatile.LoadUint32(&o.HSCH1_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH2_CONF0: LEDC_HSCH2_CONF0
func (o *LEDC_Type) SetHSCH2_CONF0_IDLE_LV_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF0.Reg, volatile.LoadUint32(&o.HSCH2_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH2_CONF0_IDLE_LV_HSCH2() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH2_CONF0_SIG_OUT_EN_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF0.Reg, volatile.LoadUint32(&o.HSCH2_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH2_CONF0_SIG_OUT_EN_HSCH2() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH2_CONF0_TIMER_SEL_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF0.Reg, volatile.LoadUint32(&o.HSCH2_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH2_CONF0_TIMER_SEL_HSCH2() uint32 {
	return volatile.LoadUint32(&o.HSCH2_CONF0.Reg) & 0x3
}

// LEDC.HSCH2_HPOINT: LEDC_HSCH2_HPOINT
func (o *LEDC_Type) SetHSCH2_HPOINT_HPOINT_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_HPOINT.Reg, volatile.LoadUint32(&o.HSCH2_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH2_HPOINT_HPOINT_HSCH2() uint32 {
	return volatile.LoadUint32(&o.HSCH2_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH2_DUTY: LEDC_HSCH2_DUTY
func (o *LEDC_Type) SetHSCH2_DUTY_DUTY_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_DUTY.Reg, volatile.LoadUint32(&o.HSCH2_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH2_DUTY_DUTY_HSCH2() uint32 {
	return volatile.LoadUint32(&o.HSCH2_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH2_CONF1: LEDC_HSCH2_CONF1
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_START_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_START_HSCH2() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_INC_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_INC_HSCH2() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_NUM_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_NUM_HSCH2() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_CYCLE_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_CYCLE_HSCH2() uint32 {
	return (volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH2_CONF1_DUTY_SCALE_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_CONF1.Reg, volatile.LoadUint32(&o.HSCH2_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH2_CONF1_DUTY_SCALE_HSCH2() uint32 {
	return volatile.LoadUint32(&o.HSCH2_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH2_DUTY_R: LEDC_HSCH2_DUTY_R
func (o *LEDC_Type) SetHSCH2_DUTY_R_DUTY_HSCH2(value uint32) {
	volatile.StoreUint32(&o.HSCH2_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH2_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH2_DUTY_R_DUTY_HSCH2() uint32 {
	return volatile.LoadUint32(&o.HSCH2_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH3_CONF0: LEDC_HSCH3_CONF0
func (o *LEDC_Type) SetHSCH3_CONF0_IDLE_LV_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF0.Reg, volatile.LoadUint32(&o.HSCH3_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH3_CONF0_IDLE_LV_HSCH3() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH3_CONF0_SIG_OUT_EN_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF0.Reg, volatile.LoadUint32(&o.HSCH3_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH3_CONF0_SIG_OUT_EN_HSCH3() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH3_CONF0_TIMER_SEL_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF0.Reg, volatile.LoadUint32(&o.HSCH3_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH3_CONF0_TIMER_SEL_HSCH3() uint32 {
	return volatile.LoadUint32(&o.HSCH3_CONF0.Reg) & 0x3
}

// LEDC.HSCH3_HPOINT: LEDC_HSCH3_HPOINT
func (o *LEDC_Type) SetHSCH3_HPOINT_HPOINT_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_HPOINT.Reg, volatile.LoadUint32(&o.HSCH3_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH3_HPOINT_HPOINT_HSCH3() uint32 {
	return volatile.LoadUint32(&o.HSCH3_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH3_DUTY: LEDC_HSCH3_DUTY
func (o *LEDC_Type) SetHSCH3_DUTY_DUTY_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_DUTY.Reg, volatile.LoadUint32(&o.HSCH3_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH3_DUTY_DUTY_HSCH3() uint32 {
	return volatile.LoadUint32(&o.HSCH3_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH3_CONF1: LEDC_HSCH3_CONF1
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_START_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_START_HSCH3() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_INC_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_INC_HSCH3() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_NUM_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_NUM_HSCH3() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_CYCLE_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_CYCLE_HSCH3() uint32 {
	return (volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH3_CONF1_DUTY_SCALE_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_CONF1.Reg, volatile.LoadUint32(&o.HSCH3_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH3_CONF1_DUTY_SCALE_HSCH3() uint32 {
	return volatile.LoadUint32(&o.HSCH3_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH3_DUTY_R: LEDC_HSCH3_DUTY_R
func (o *LEDC_Type) SetHSCH3_DUTY_R_DUTY_HSCH3(value uint32) {
	volatile.StoreUint32(&o.HSCH3_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH3_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH3_DUTY_R_DUTY_HSCH3() uint32 {
	return volatile.LoadUint32(&o.HSCH3_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH4_CONF0: LEDC_HSCH4_CONF0
func (o *LEDC_Type) SetHSCH4_CONF0_IDLE_LV_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF0.Reg, volatile.LoadUint32(&o.HSCH4_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH4_CONF0_IDLE_LV_HSCH4() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH4_CONF0_SIG_OUT_EN_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF0.Reg, volatile.LoadUint32(&o.HSCH4_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH4_CONF0_SIG_OUT_EN_HSCH4() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH4_CONF0_TIMER_SEL_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF0.Reg, volatile.LoadUint32(&o.HSCH4_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH4_CONF0_TIMER_SEL_HSCH4() uint32 {
	return volatile.LoadUint32(&o.HSCH4_CONF0.Reg) & 0x3
}

// LEDC.HSCH4_HPOINT: LEDC_HSCH4_HPOINT
func (o *LEDC_Type) SetHSCH4_HPOINT_HPOINT_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_HPOINT.Reg, volatile.LoadUint32(&o.HSCH4_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH4_HPOINT_HPOINT_HSCH4() uint32 {
	return volatile.LoadUint32(&o.HSCH4_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH4_DUTY: LEDC_HSCH4_DUTY
func (o *LEDC_Type) SetHSCH4_DUTY_DUTY_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_DUTY.Reg, volatile.LoadUint32(&o.HSCH4_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH4_DUTY_DUTY_HSCH4() uint32 {
	return volatile.LoadUint32(&o.HSCH4_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH4_CONF1: LEDC_HSCH4_CONF1
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_START_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_START_HSCH4() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_INC_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_INC_HSCH4() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_NUM_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_NUM_HSCH4() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_CYCLE_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_CYCLE_HSCH4() uint32 {
	return (volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH4_CONF1_DUTY_SCALE_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_CONF1.Reg, volatile.LoadUint32(&o.HSCH4_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH4_CONF1_DUTY_SCALE_HSCH4() uint32 {
	return volatile.LoadUint32(&o.HSCH4_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH4_DUTY_R: LEDC_HSCH4_DUTY_R
func (o *LEDC_Type) SetHSCH4_DUTY_R_DUTY_HSCH4(value uint32) {
	volatile.StoreUint32(&o.HSCH4_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH4_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH4_DUTY_R_DUTY_HSCH4() uint32 {
	return volatile.LoadUint32(&o.HSCH4_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH5_CONF0: LEDC_HSCH5_CONF0
func (o *LEDC_Type) SetHSCH5_CONF0_IDLE_LV_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF0.Reg, volatile.LoadUint32(&o.HSCH5_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH5_CONF0_IDLE_LV_HSCH5() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH5_CONF0_SIG_OUT_EN_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF0.Reg, volatile.LoadUint32(&o.HSCH5_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH5_CONF0_SIG_OUT_EN_HSCH5() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH5_CONF0_TIMER_SEL_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF0.Reg, volatile.LoadUint32(&o.HSCH5_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH5_CONF0_TIMER_SEL_HSCH5() uint32 {
	return volatile.LoadUint32(&o.HSCH5_CONF0.Reg) & 0x3
}

// LEDC.HSCH5_HPOINT: LEDC_HSCH5_HPOINT
func (o *LEDC_Type) SetHSCH5_HPOINT_HPOINT_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_HPOINT.Reg, volatile.LoadUint32(&o.HSCH5_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH5_HPOINT_HPOINT_HSCH5() uint32 {
	return volatile.LoadUint32(&o.HSCH5_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH5_DUTY: LEDC_HSCH5_DUTY
func (o *LEDC_Type) SetHSCH5_DUTY_DUTY_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_DUTY.Reg, volatile.LoadUint32(&o.HSCH5_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH5_DUTY_DUTY_HSCH5() uint32 {
	return volatile.LoadUint32(&o.HSCH5_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH5_CONF1: LEDC_HSCH5_CONF1
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_START_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_START_HSCH5() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_INC_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_INC_HSCH5() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_NUM_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_NUM_HSCH5() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_CYCLE_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_CYCLE_HSCH5() uint32 {
	return (volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH5_CONF1_DUTY_SCALE_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_CONF1.Reg, volatile.LoadUint32(&o.HSCH5_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH5_CONF1_DUTY_SCALE_HSCH5() uint32 {
	return volatile.LoadUint32(&o.HSCH5_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH5_DUTY_R: LEDC_HSCH5_DUTY_R
func (o *LEDC_Type) SetHSCH5_DUTY_R_DUTY_HSCH5(value uint32) {
	volatile.StoreUint32(&o.HSCH5_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH5_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH5_DUTY_R_DUTY_HSCH5() uint32 {
	return volatile.LoadUint32(&o.HSCH5_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH6_CONF0: LEDC_HSCH6_CONF0
func (o *LEDC_Type) SetHSCH6_CONF0_IDLE_LV_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF0.Reg, volatile.LoadUint32(&o.HSCH6_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH6_CONF0_IDLE_LV_HSCH6() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH6_CONF0_SIG_OUT_EN_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF0.Reg, volatile.LoadUint32(&o.HSCH6_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH6_CONF0_SIG_OUT_EN_HSCH6() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH6_CONF0_TIMER_SEL_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF0.Reg, volatile.LoadUint32(&o.HSCH6_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH6_CONF0_TIMER_SEL_HSCH6() uint32 {
	return volatile.LoadUint32(&o.HSCH6_CONF0.Reg) & 0x3
}

// LEDC.HSCH6_HPOINT: LEDC_HSCH6_HPOINT
func (o *LEDC_Type) SetHSCH6_HPOINT_HPOINT_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_HPOINT.Reg, volatile.LoadUint32(&o.HSCH6_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH6_HPOINT_HPOINT_HSCH6() uint32 {
	return volatile.LoadUint32(&o.HSCH6_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH6_DUTY: LEDC_HSCH6_DUTY
func (o *LEDC_Type) SetHSCH6_DUTY_DUTY_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_DUTY.Reg, volatile.LoadUint32(&o.HSCH6_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH6_DUTY_DUTY_HSCH6() uint32 {
	return volatile.LoadUint32(&o.HSCH6_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH6_CONF1: LEDC_HSCH6_CONF1
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_START_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_START_HSCH6() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_INC_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_INC_HSCH6() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_NUM_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_NUM_HSCH6() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_CYCLE_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_CYCLE_HSCH6() uint32 {
	return (volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH6_CONF1_DUTY_SCALE_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_CONF1.Reg, volatile.LoadUint32(&o.HSCH6_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH6_CONF1_DUTY_SCALE_HSCH6() uint32 {
	return volatile.LoadUint32(&o.HSCH6_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH6_DUTY_R: LEDC_HSCH6_DUTY_R
func (o *LEDC_Type) SetHSCH6_DUTY_R_DUTY_HSCH6(value uint32) {
	volatile.StoreUint32(&o.HSCH6_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH6_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH6_DUTY_R_DUTY_HSCH6() uint32 {
	return volatile.LoadUint32(&o.HSCH6_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSCH7_CONF0: LEDC_HSCH7_CONF0
func (o *LEDC_Type) SetHSCH7_CONF0_IDLE_LV_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF0.Reg, volatile.LoadUint32(&o.HSCH7_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetHSCH7_CONF0_IDLE_LV_HSCH7() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetHSCH7_CONF0_SIG_OUT_EN_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF0.Reg, volatile.LoadUint32(&o.HSCH7_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetHSCH7_CONF0_SIG_OUT_EN_HSCH7() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetHSCH7_CONF0_TIMER_SEL_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF0.Reg, volatile.LoadUint32(&o.HSCH7_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetHSCH7_CONF0_TIMER_SEL_HSCH7() uint32 {
	return volatile.LoadUint32(&o.HSCH7_CONF0.Reg) & 0x3
}

// LEDC.HSCH7_HPOINT: LEDC_HSCH7_HPOINT
func (o *LEDC_Type) SetHSCH7_HPOINT_HPOINT_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_HPOINT.Reg, volatile.LoadUint32(&o.HSCH7_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSCH7_HPOINT_HPOINT_HSCH7() uint32 {
	return volatile.LoadUint32(&o.HSCH7_HPOINT.Reg) & 0xfffff
}

// LEDC.HSCH7_DUTY: LEDC_HSCH7_DUTY
func (o *LEDC_Type) SetHSCH7_DUTY_DUTY_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_DUTY.Reg, volatile.LoadUint32(&o.HSCH7_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH7_DUTY_DUTY_HSCH7() uint32 {
	return volatile.LoadUint32(&o.HSCH7_DUTY.Reg) & 0x1ffffff
}

// LEDC.HSCH7_CONF1: LEDC_HSCH7_CONF1
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_START_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_START_HSCH7() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_INC_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_INC_HSCH7() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_NUM_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_NUM_HSCH7() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_CYCLE_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_CYCLE_HSCH7() uint32 {
	return (volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetHSCH7_CONF1_DUTY_SCALE_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_CONF1.Reg, volatile.LoadUint32(&o.HSCH7_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetHSCH7_CONF1_DUTY_SCALE_HSCH7() uint32 {
	return volatile.LoadUint32(&o.HSCH7_CONF1.Reg) & 0x3ff
}

// LEDC.HSCH7_DUTY_R: LEDC_HSCH7_DUTY_R
func (o *LEDC_Type) SetHSCH7_DUTY_R_DUTY_HSCH7(value uint32) {
	volatile.StoreUint32(&o.HSCH7_DUTY_R.Reg, volatile.LoadUint32(&o.HSCH7_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetHSCH7_DUTY_R_DUTY_HSCH7() uint32 {
	return volatile.LoadUint32(&o.HSCH7_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH0_CONF0: LEDC_LSCH0_CONF0
func (o *LEDC_Type) SetLSCH0_CONF0_PARA_UP_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH0_CONF0_PARA_UP_LSCH0() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH0_CONF0_IDLE_LV_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH0_CONF0_IDLE_LV_LSCH0() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH0_CONF0_SIG_OUT_EN_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH0_CONF0_SIG_OUT_EN_LSCH0() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH0_CONF0_TIMER_SEL_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF0.Reg, volatile.LoadUint32(&o.LSCH0_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH0_CONF0_TIMER_SEL_LSCH0() uint32 {
	return volatile.LoadUint32(&o.LSCH0_CONF0.Reg) & 0x3
}

// LEDC.LSCH0_HPOINT: LEDC_LSCH0_HPOINT
func (o *LEDC_Type) SetLSCH0_HPOINT_HPOINT_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_HPOINT.Reg, volatile.LoadUint32(&o.LSCH0_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH0_HPOINT_HPOINT_LSCH0() uint32 {
	return volatile.LoadUint32(&o.LSCH0_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH0_DUTY: LEDC_LSCH0_DUTY
func (o *LEDC_Type) SetLSCH0_DUTY_DUTY_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_DUTY.Reg, volatile.LoadUint32(&o.LSCH0_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH0_DUTY_DUTY_LSCH0() uint32 {
	return volatile.LoadUint32(&o.LSCH0_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH0_CONF1: LEDC_LSCH0_CONF1
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_START_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_START_LSCH0() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_INC_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_INC_LSCH0() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_NUM_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_NUM_LSCH0() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_CYCLE_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_CYCLE_LSCH0() uint32 {
	return (volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH0_CONF1_DUTY_SCALE_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_CONF1.Reg, volatile.LoadUint32(&o.LSCH0_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH0_CONF1_DUTY_SCALE_LSCH0() uint32 {
	return volatile.LoadUint32(&o.LSCH0_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH0_DUTY_R: LEDC_LSCH0_DUTY_R
func (o *LEDC_Type) SetLSCH0_DUTY_R_DUTY_LSCH0(value uint32) {
	volatile.StoreUint32(&o.LSCH0_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH0_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH0_DUTY_R_DUTY_LSCH0() uint32 {
	return volatile.LoadUint32(&o.LSCH0_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH1_CONF0: LEDC_LSCH1_CONF0
func (o *LEDC_Type) SetLSCH1_CONF0_PARA_UP_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH1_CONF0_PARA_UP_LSCH1() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH1_CONF0_IDLE_LV_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH1_CONF0_IDLE_LV_LSCH1() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH1_CONF0_SIG_OUT_EN_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH1_CONF0_SIG_OUT_EN_LSCH1() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH1_CONF0_TIMER_SEL_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF0.Reg, volatile.LoadUint32(&o.LSCH1_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH1_CONF0_TIMER_SEL_LSCH1() uint32 {
	return volatile.LoadUint32(&o.LSCH1_CONF0.Reg) & 0x3
}

// LEDC.LSCH1_HPOINT: LEDC_LSCH1_HPOINT
func (o *LEDC_Type) SetLSCH1_HPOINT_HPOINT_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_HPOINT.Reg, volatile.LoadUint32(&o.LSCH1_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH1_HPOINT_HPOINT_LSCH1() uint32 {
	return volatile.LoadUint32(&o.LSCH1_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH1_DUTY: LEDC_LSCH1_DUTY
func (o *LEDC_Type) SetLSCH1_DUTY_DUTY_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_DUTY.Reg, volatile.LoadUint32(&o.LSCH1_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH1_DUTY_DUTY_LSCH1() uint32 {
	return volatile.LoadUint32(&o.LSCH1_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH1_CONF1: LEDC_LSCH1_CONF1
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_START_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_START_LSCH1() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_INC_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_INC_LSCH1() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_NUM_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_NUM_LSCH1() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_CYCLE_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_CYCLE_LSCH1() uint32 {
	return (volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH1_CONF1_DUTY_SCALE_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_CONF1.Reg, volatile.LoadUint32(&o.LSCH1_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH1_CONF1_DUTY_SCALE_LSCH1() uint32 {
	return volatile.LoadUint32(&o.LSCH1_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH1_DUTY_R: LEDC_LSCH1_DUTY_R
func (o *LEDC_Type) SetLSCH1_DUTY_R_DUTY_LSCH1(value uint32) {
	volatile.StoreUint32(&o.LSCH1_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH1_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH1_DUTY_R_DUTY_LSCH1() uint32 {
	return volatile.LoadUint32(&o.LSCH1_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH2_CONF0: LEDC_LSCH2_CONF0
func (o *LEDC_Type) SetLSCH2_CONF0_PARA_UP_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH2_CONF0_PARA_UP_LSCH2() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH2_CONF0_IDLE_LV_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH2_CONF0_IDLE_LV_LSCH2() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH2_CONF0_SIG_OUT_EN_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH2_CONF0_SIG_OUT_EN_LSCH2() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH2_CONF0_TIMER_SEL_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF0.Reg, volatile.LoadUint32(&o.LSCH2_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH2_CONF0_TIMER_SEL_LSCH2() uint32 {
	return volatile.LoadUint32(&o.LSCH2_CONF0.Reg) & 0x3
}

// LEDC.LSCH2_HPOINT: LEDC_LSCH2_HPOINT
func (o *LEDC_Type) SetLSCH2_HPOINT_HPOINT_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_HPOINT.Reg, volatile.LoadUint32(&o.LSCH2_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH2_HPOINT_HPOINT_LSCH2() uint32 {
	return volatile.LoadUint32(&o.LSCH2_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH2_DUTY: LEDC_LSCH2_DUTY
func (o *LEDC_Type) SetLSCH2_DUTY_DUTY_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_DUTY.Reg, volatile.LoadUint32(&o.LSCH2_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH2_DUTY_DUTY_LSCH2() uint32 {
	return volatile.LoadUint32(&o.LSCH2_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH2_CONF1: LEDC_LSCH2_CONF1
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_START_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_START_LSCH2() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_INC_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_INC_LSCH2() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_NUM_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_NUM_LSCH2() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_CYCLE_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_CYCLE_LSCH2() uint32 {
	return (volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH2_CONF1_DUTY_SCALE_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_CONF1.Reg, volatile.LoadUint32(&o.LSCH2_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH2_CONF1_DUTY_SCALE_LSCH2() uint32 {
	return volatile.LoadUint32(&o.LSCH2_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH2_DUTY_R: LEDC_LSCH2_DUTY_R
func (o *LEDC_Type) SetLSCH2_DUTY_R_DUTY_LSCH2(value uint32) {
	volatile.StoreUint32(&o.LSCH2_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH2_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH2_DUTY_R_DUTY_LSCH2() uint32 {
	return volatile.LoadUint32(&o.LSCH2_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH3_CONF0: LEDC_LSCH3_CONF0
func (o *LEDC_Type) SetLSCH3_CONF0_PARA_UP_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH3_CONF0_PARA_UP_LSCH3() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH3_CONF0_IDLE_LV_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH3_CONF0_IDLE_LV_LSCH3() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH3_CONF0_SIG_OUT_EN_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH3_CONF0_SIG_OUT_EN_LSCH3() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH3_CONF0_TIMER_SEL_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF0.Reg, volatile.LoadUint32(&o.LSCH3_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH3_CONF0_TIMER_SEL_LSCH3() uint32 {
	return volatile.LoadUint32(&o.LSCH3_CONF0.Reg) & 0x3
}

// LEDC.LSCH3_HPOINT: LEDC_LSCH3_HPOINT
func (o *LEDC_Type) SetLSCH3_HPOINT_HPOINT_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_HPOINT.Reg, volatile.LoadUint32(&o.LSCH3_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH3_HPOINT_HPOINT_LSCH3() uint32 {
	return volatile.LoadUint32(&o.LSCH3_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH3_DUTY: LEDC_LSCH3_DUTY
func (o *LEDC_Type) SetLSCH3_DUTY_DUTY_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_DUTY.Reg, volatile.LoadUint32(&o.LSCH3_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH3_DUTY_DUTY_LSCH3() uint32 {
	return volatile.LoadUint32(&o.LSCH3_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH3_CONF1: LEDC_LSCH3_CONF1
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_START_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_START_LSCH3() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_INC_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_INC_LSCH3() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_NUM_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_NUM_LSCH3() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_CYCLE_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_CYCLE_LSCH3() uint32 {
	return (volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH3_CONF1_DUTY_SCALE_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_CONF1.Reg, volatile.LoadUint32(&o.LSCH3_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH3_CONF1_DUTY_SCALE_LSCH3() uint32 {
	return volatile.LoadUint32(&o.LSCH3_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH3_DUTY_R: LEDC_LSCH3_DUTY_R
func (o *LEDC_Type) SetLSCH3_DUTY_R_DUTY_LSCH3(value uint32) {
	volatile.StoreUint32(&o.LSCH3_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH3_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH3_DUTY_R_DUTY_LSCH3() uint32 {
	return volatile.LoadUint32(&o.LSCH3_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH4_CONF0: LEDC_LSCH4_CONF0
func (o *LEDC_Type) SetLSCH4_CONF0_PARA_UP_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH4_CONF0_PARA_UP_LSCH4() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH4_CONF0_IDLE_LV_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH4_CONF0_IDLE_LV_LSCH4() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH4_CONF0_SIG_OUT_EN_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH4_CONF0_SIG_OUT_EN_LSCH4() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH4_CONF0_TIMER_SEL_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF0.Reg, volatile.LoadUint32(&o.LSCH4_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH4_CONF0_TIMER_SEL_LSCH4() uint32 {
	return volatile.LoadUint32(&o.LSCH4_CONF0.Reg) & 0x3
}

// LEDC.LSCH4_HPOINT: LEDC_LSCH4_HPOINT
func (o *LEDC_Type) SetLSCH4_HPOINT_HPOINT_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_HPOINT.Reg, volatile.LoadUint32(&o.LSCH4_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH4_HPOINT_HPOINT_LSCH4() uint32 {
	return volatile.LoadUint32(&o.LSCH4_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH4_DUTY: LEDC_LSCH4_DUTY
func (o *LEDC_Type) SetLSCH4_DUTY_DUTY_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_DUTY.Reg, volatile.LoadUint32(&o.LSCH4_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH4_DUTY_DUTY_LSCH4() uint32 {
	return volatile.LoadUint32(&o.LSCH4_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH4_CONF1: LEDC_LSCH4_CONF1
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_START_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_START_LSCH4() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_INC_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_INC_LSCH4() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_NUM_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_NUM_LSCH4() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_CYCLE_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_CYCLE_LSCH4() uint32 {
	return (volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH4_CONF1_DUTY_SCALE_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_CONF1.Reg, volatile.LoadUint32(&o.LSCH4_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH4_CONF1_DUTY_SCALE_LSCH4() uint32 {
	return volatile.LoadUint32(&o.LSCH4_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH4_DUTY_R: LEDC_LSCH4_DUTY_R
func (o *LEDC_Type) SetLSCH4_DUTY_R_DUTY_LSCH4(value uint32) {
	volatile.StoreUint32(&o.LSCH4_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH4_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH4_DUTY_R_DUTY_LSCH4() uint32 {
	return volatile.LoadUint32(&o.LSCH4_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH5_CONF0: LEDC_LSCH5_CONF0
func (o *LEDC_Type) SetLSCH5_CONF0_PARA_UP_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH5_CONF0_PARA_UP_LSCH5() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH5_CONF0_IDLE_LV_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH5_CONF0_IDLE_LV_LSCH5() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH5_CONF0_SIG_OUT_EN_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH5_CONF0_SIG_OUT_EN_LSCH5() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH5_CONF0_TIMER_SEL_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF0.Reg, volatile.LoadUint32(&o.LSCH5_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH5_CONF0_TIMER_SEL_LSCH5() uint32 {
	return volatile.LoadUint32(&o.LSCH5_CONF0.Reg) & 0x3
}

// LEDC.LSCH5_HPOINT: LEDC_LSCH5_HPOINT
func (o *LEDC_Type) SetLSCH5_HPOINT_HPOINT_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_HPOINT.Reg, volatile.LoadUint32(&o.LSCH5_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH5_HPOINT_HPOINT_LSCH5() uint32 {
	return volatile.LoadUint32(&o.LSCH5_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH5_DUTY: LEDC_LSCH5_DUTY
func (o *LEDC_Type) SetLSCH5_DUTY_DUTY_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_DUTY.Reg, volatile.LoadUint32(&o.LSCH5_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH5_DUTY_DUTY_LSCH5() uint32 {
	return volatile.LoadUint32(&o.LSCH5_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH5_CONF1: LEDC_LSCH5_CONF1
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_START_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_START_LSCH5() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_INC_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_INC_LSCH5() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_NUM_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_NUM_LSCH5() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_CYCLE_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_CYCLE_LSCH5() uint32 {
	return (volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH5_CONF1_DUTY_SCALE_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_CONF1.Reg, volatile.LoadUint32(&o.LSCH5_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH5_CONF1_DUTY_SCALE_LSCH5() uint32 {
	return volatile.LoadUint32(&o.LSCH5_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH5_DUTY_R: LEDC_LSCH5_DUTY_R
func (o *LEDC_Type) SetLSCH5_DUTY_R_DUTY_LSCH5(value uint32) {
	volatile.StoreUint32(&o.LSCH5_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH5_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH5_DUTY_R_DUTY_LSCH5() uint32 {
	return volatile.LoadUint32(&o.LSCH5_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH6_CONF0: LEDC_LSCH6_CONF0
func (o *LEDC_Type) SetLSCH6_CONF0_PARA_UP_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH6_CONF0_PARA_UP_LSCH6() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH6_CONF0_IDLE_LV_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH6_CONF0_IDLE_LV_LSCH6() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH6_CONF0_SIG_OUT_EN_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH6_CONF0_SIG_OUT_EN_LSCH6() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH6_CONF0_TIMER_SEL_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF0.Reg, volatile.LoadUint32(&o.LSCH6_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH6_CONF0_TIMER_SEL_LSCH6() uint32 {
	return volatile.LoadUint32(&o.LSCH6_CONF0.Reg) & 0x3
}

// LEDC.LSCH6_HPOINT: LEDC_LSCH6_HPOINT
func (o *LEDC_Type) SetLSCH6_HPOINT_HPOINT_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_HPOINT.Reg, volatile.LoadUint32(&o.LSCH6_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH6_HPOINT_HPOINT_LSCH6() uint32 {
	return volatile.LoadUint32(&o.LSCH6_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH6_DUTY: LEDC_LSCH6_DUTY
func (o *LEDC_Type) SetLSCH6_DUTY_DUTY_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_DUTY.Reg, volatile.LoadUint32(&o.LSCH6_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH6_DUTY_DUTY_LSCH6() uint32 {
	return volatile.LoadUint32(&o.LSCH6_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH6_CONF1: LEDC_LSCH6_CONF1
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_START_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_START_LSCH6() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_INC_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_INC_LSCH6() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_NUM_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_NUM_LSCH6() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_CYCLE_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_CYCLE_LSCH6() uint32 {
	return (volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH6_CONF1_DUTY_SCALE_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_CONF1.Reg, volatile.LoadUint32(&o.LSCH6_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH6_CONF1_DUTY_SCALE_LSCH6() uint32 {
	return volatile.LoadUint32(&o.LSCH6_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH6_DUTY_R: LEDC_LSCH6_DUTY_R
func (o *LEDC_Type) SetLSCH6_DUTY_R_DUTY_LSCH6(value uint32) {
	volatile.StoreUint32(&o.LSCH6_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH6_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH6_DUTY_R_DUTY_LSCH6() uint32 {
	return volatile.LoadUint32(&o.LSCH6_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.LSCH7_CONF0: LEDC_LSCH7_CONF0
func (o *LEDC_Type) SetLSCH7_CONF0_PARA_UP_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetLSCH7_CONF0_PARA_UP_LSCH7() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetLSCH7_CONF0_IDLE_LV_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetLSCH7_CONF0_IDLE_LV_LSCH7() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetLSCH7_CONF0_SIG_OUT_EN_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetLSCH7_CONF0_SIG_OUT_EN_LSCH7() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetLSCH7_CONF0_TIMER_SEL_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF0.Reg, volatile.LoadUint32(&o.LSCH7_CONF0.Reg)&^(0x3)|value)
}
func (o *LEDC_Type) GetLSCH7_CONF0_TIMER_SEL_LSCH7() uint32 {
	return volatile.LoadUint32(&o.LSCH7_CONF0.Reg) & 0x3
}

// LEDC.LSCH7_HPOINT: LEDC_LSCH7_HPOINT
func (o *LEDC_Type) SetLSCH7_HPOINT_HPOINT_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_HPOINT.Reg, volatile.LoadUint32(&o.LSCH7_HPOINT.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSCH7_HPOINT_HPOINT_LSCH7() uint32 {
	return volatile.LoadUint32(&o.LSCH7_HPOINT.Reg) & 0xfffff
}

// LEDC.LSCH7_DUTY: LEDC_LSCH7_DUTY
func (o *LEDC_Type) SetLSCH7_DUTY_DUTY_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_DUTY.Reg, volatile.LoadUint32(&o.LSCH7_DUTY.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH7_DUTY_DUTY_LSCH7() uint32 {
	return volatile.LoadUint32(&o.LSCH7_DUTY.Reg) & 0x1ffffff
}

// LEDC.LSCH7_CONF1: LEDC_LSCH7_CONF1
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_START_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x80000000)|value<<31)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_START_LSCH7() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x80000000) >> 31
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_INC_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x40000000)|value<<30)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_INC_LSCH7() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x40000000) >> 30
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_NUM_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x3ff00000)|value<<20)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_NUM_LSCH7() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x3ff00000) >> 20
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_CYCLE_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0xffc00)|value<<10)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_CYCLE_LSCH7() uint32 {
	return (volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0xffc00) >> 10
}
func (o *LEDC_Type) SetLSCH7_CONF1_DUTY_SCALE_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_CONF1.Reg, volatile.LoadUint32(&o.LSCH7_CONF1.Reg)&^(0x3ff)|value)
}
func (o *LEDC_Type) GetLSCH7_CONF1_DUTY_SCALE_LSCH7() uint32 {
	return volatile.LoadUint32(&o.LSCH7_CONF1.Reg) & 0x3ff
}

// LEDC.LSCH7_DUTY_R: LEDC_LSCH7_DUTY_R
func (o *LEDC_Type) SetLSCH7_DUTY_R_DUTY_LSCH7(value uint32) {
	volatile.StoreUint32(&o.LSCH7_DUTY_R.Reg, volatile.LoadUint32(&o.LSCH7_DUTY_R.Reg)&^(0x1ffffff)|value)
}
func (o *LEDC_Type) GetLSCH7_DUTY_R_DUTY_LSCH7() uint32 {
	return volatile.LoadUint32(&o.LSCH7_DUTY_R.Reg) & 0x1ffffff
}

// LEDC.HSTIMER0_CONF: LEDC_HSTIMER0_CONF
func (o *LEDC_Type) SetHSTIMER0_CONF_TICK_SEL_HSTIMER0(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_TICK_SEL_HSTIMER0() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetHSTIMER0_CONF_HSTIMER0_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_HSTIMER0_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER0_CONF_HSTIMER0_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_HSTIMER0_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER0_CONF_DIV_NUM_HSTIMER0(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_DIV_NUM_HSTIMER0() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER0_CONF_HSTIMER0_LIM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_CONF.Reg, volatile.LoadUint32(&o.HSTIMER0_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER0_CONF_HSTIMER0_LIM() uint32 {
	return volatile.LoadUint32(&o.HSTIMER0_CONF.Reg) & 0x1f
}

// LEDC.HSTIMER0_VALUE: LEDC_HSTIMER0_VALUE
func (o *LEDC_Type) SetHSTIMER0_VALUE_HSTIMER0_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER0_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER0_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER0_VALUE_HSTIMER0_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER0_VALUE.Reg) & 0xfffff
}

// LEDC.HSTIMER1_CONF: LEDC_HSTIMER1_CONF
func (o *LEDC_Type) SetHSTIMER1_CONF_TICK_SEL_HSTIMER1(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_TICK_SEL_HSTIMER1() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetHSTIMER1_CONF_HSTIMER1_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_HSTIMER1_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER1_CONF_HSTIMER1_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_HSTIMER1_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER1_CONF_DIV_NUM_HSTIMER1(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_DIV_NUM_HSTIMER1() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER1_CONF_HSTIMER1_LIM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_CONF.Reg, volatile.LoadUint32(&o.HSTIMER1_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER1_CONF_HSTIMER1_LIM() uint32 {
	return volatile.LoadUint32(&o.HSTIMER1_CONF.Reg) & 0x1f
}

// LEDC.HSTIMER1_VALUE: LEDC_HSTIMER1_VALUE
func (o *LEDC_Type) SetHSTIMER1_VALUE_HSTIMER1_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER1_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER1_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER1_VALUE_HSTIMER1_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER1_VALUE.Reg) & 0xfffff
}

// LEDC.HSTIMER2_CONF: LEDC_HSTIMER2_CONF
func (o *LEDC_Type) SetHSTIMER2_CONF_TICK_SEL_HSTIMER2(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_TICK_SEL_HSTIMER2() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetHSTIMER2_CONF_HSTIMER2_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_HSTIMER2_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER2_CONF_HSTIMER2_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_HSTIMER2_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER2_CONF_DIV_NUM_HSTIMER2(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_DIV_NUM_HSTIMER2() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER2_CONF_HSTIMER2_LIM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_CONF.Reg, volatile.LoadUint32(&o.HSTIMER2_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER2_CONF_HSTIMER2_LIM() uint32 {
	return volatile.LoadUint32(&o.HSTIMER2_CONF.Reg) & 0x1f
}

// LEDC.HSTIMER2_VALUE: LEDC_HSTIMER2_VALUE
func (o *LEDC_Type) SetHSTIMER2_VALUE_HSTIMER2_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER2_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER2_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER2_VALUE_HSTIMER2_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER2_VALUE.Reg) & 0xfffff
}

// LEDC.HSTIMER3_CONF: LEDC_HSTIMER3_CONF
func (o *LEDC_Type) SetHSTIMER3_CONF_TICK_SEL_HSTIMER3(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_TICK_SEL_HSTIMER3() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetHSTIMER3_CONF_HSTIMER3_RST(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_HSTIMER3_RST() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetHSTIMER3_CONF_HSTIMER3_PAUSE(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_HSTIMER3_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetHSTIMER3_CONF_DIV_NUM_HSTIMER3(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_DIV_NUM_HSTIMER3() uint32 {
	return (volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetHSTIMER3_CONF_HSTIMER3_LIM(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_CONF.Reg, volatile.LoadUint32(&o.HSTIMER3_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetHSTIMER3_CONF_HSTIMER3_LIM() uint32 {
	return volatile.LoadUint32(&o.HSTIMER3_CONF.Reg) & 0x1f
}

// LEDC.HSTIMER3_VALUE: LEDC_HSTIMER3_VALUE
func (o *LEDC_Type) SetHSTIMER3_VALUE_HSTIMER3_CNT(value uint32) {
	volatile.StoreUint32(&o.HSTIMER3_VALUE.Reg, volatile.LoadUint32(&o.HSTIMER3_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetHSTIMER3_VALUE_HSTIMER3_CNT() uint32 {
	return volatile.LoadUint32(&o.HSTIMER3_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER0_CONF: LEDC_LSTIMER0_CONF
func (o *LEDC_Type) SetLSTIMER0_CONF_LSTIMER0_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_LSTIMER0_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x4000000) >> 26
}
func (o *LEDC_Type) SetLSTIMER0_CONF_TICK_SEL_LSTIMER0(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_TICK_SEL_LSTIMER0() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER0_CONF_LSTIMER0_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_LSTIMER0_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER0_CONF_LSTIMER0_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_LSTIMER0_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER0_CONF_DIV_NUM_LSTIMER0(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_DIV_NUM_LSTIMER0() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER0_CONF_LSTIMER0_LIM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_CONF.Reg, volatile.LoadUint32(&o.LSTIMER0_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER0_CONF_LSTIMER0_LIM() uint32 {
	return volatile.LoadUint32(&o.LSTIMER0_CONF.Reg) & 0x1f
}

// LEDC.LSTIMER0_VALUE: LEDC_LSTIMER0_VALUE
func (o *LEDC_Type) SetLSTIMER0_VALUE_LSTIMER0_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER0_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER0_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER0_VALUE_LSTIMER0_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER0_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER1_CONF: LEDC_LSTIMER1_CONF
func (o *LEDC_Type) SetLSTIMER1_CONF_LSTIMER1_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_LSTIMER1_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x4000000) >> 26
}
func (o *LEDC_Type) SetLSTIMER1_CONF_TICK_SEL_LSTIMER1(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_TICK_SEL_LSTIMER1() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER1_CONF_LSTIMER1_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_LSTIMER1_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER1_CONF_LSTIMER1_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_LSTIMER1_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER1_CONF_DIV_NUM_LSTIMER1(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_DIV_NUM_LSTIMER1() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER1_CONF_LSTIMER1_LIM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_CONF.Reg, volatile.LoadUint32(&o.LSTIMER1_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER1_CONF_LSTIMER1_LIM() uint32 {
	return volatile.LoadUint32(&o.LSTIMER1_CONF.Reg) & 0x1f
}

// LEDC.LSTIMER1_VALUE: LEDC_LSTIMER1_VALUE
func (o *LEDC_Type) SetLSTIMER1_VALUE_LSTIMER1_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER1_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER1_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER1_VALUE_LSTIMER1_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER1_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER2_CONF: LEDC_LSTIMER2_CONF
func (o *LEDC_Type) SetLSTIMER2_CONF_LSTIMER2_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_LSTIMER2_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x4000000) >> 26
}
func (o *LEDC_Type) SetLSTIMER2_CONF_TICK_SEL_LSTIMER2(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_TICK_SEL_LSTIMER2() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER2_CONF_LSTIMER2_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_LSTIMER2_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER2_CONF_LSTIMER2_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_LSTIMER2_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER2_CONF_DIV_NUM_LSTIMER2(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_DIV_NUM_LSTIMER2() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER2_CONF_LSTIMER2_LIM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_CONF.Reg, volatile.LoadUint32(&o.LSTIMER2_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER2_CONF_LSTIMER2_LIM() uint32 {
	return volatile.LoadUint32(&o.LSTIMER2_CONF.Reg) & 0x1f
}

// LEDC.LSTIMER2_VALUE: LEDC_LSTIMER2_VALUE
func (o *LEDC_Type) SetLSTIMER2_VALUE_LSTIMER2_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER2_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER2_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER2_VALUE_LSTIMER2_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER2_VALUE.Reg) & 0xfffff
}

// LEDC.LSTIMER3_CONF: LEDC_LSTIMER3_CONF
func (o *LEDC_Type) SetLSTIMER3_CONF_LSTIMER3_PARA_UP(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x4000000)|value<<26)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_LSTIMER3_PARA_UP() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x4000000) >> 26
}
func (o *LEDC_Type) SetLSTIMER3_CONF_TICK_SEL_LSTIMER3(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x2000000)|value<<25)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_TICK_SEL_LSTIMER3() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x2000000) >> 25
}
func (o *LEDC_Type) SetLSTIMER3_CONF_LSTIMER3_RST(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x1000000)|value<<24)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_LSTIMER3_RST() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x1000000) >> 24
}
func (o *LEDC_Type) SetLSTIMER3_CONF_LSTIMER3_PAUSE(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_LSTIMER3_PAUSE() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetLSTIMER3_CONF_DIV_NUM_LSTIMER3(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x7fffe0)|value<<5)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_DIV_NUM_LSTIMER3() uint32 {
	return (volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x7fffe0) >> 5
}
func (o *LEDC_Type) SetLSTIMER3_CONF_LSTIMER3_LIM(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_CONF.Reg, volatile.LoadUint32(&o.LSTIMER3_CONF.Reg)&^(0x1f)|value)
}
func (o *LEDC_Type) GetLSTIMER3_CONF_LSTIMER3_LIM() uint32 {
	return volatile.LoadUint32(&o.LSTIMER3_CONF.Reg) & 0x1f
}

// LEDC.LSTIMER3_VALUE: LEDC_LSTIMER3_VALUE
func (o *LEDC_Type) SetLSTIMER3_VALUE_LSTIMER3_CNT(value uint32) {
	volatile.StoreUint32(&o.LSTIMER3_VALUE.Reg, volatile.LoadUint32(&o.LSTIMER3_VALUE.Reg)&^(0xfffff)|value)
}
func (o *LEDC_Type) GetLSTIMER3_VALUE_LSTIMER3_CNT() uint32 {
	return volatile.LoadUint32(&o.LSTIMER3_VALUE.Reg) & 0xfffff
}

// LEDC.INT_RAW: LEDC_INT_RAW
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER3_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER3_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER2_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER2_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER1_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER1_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_RAW_LSTIMER0_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_RAW_LSTIMER0_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_RAW_HSTIMER3_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER3_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_RAW_HSTIMER2_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER2_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_RAW_HSTIMER1_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER1_OVF_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.INT_RAW.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_RAW_HSTIMER0_OVF_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.INT_RAW.Reg, volatile.LoadUint32(&o.INT_RAW.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_RAW_HSTIMER0_OVF_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.INT_RAW.Reg) & 0x1
}

// LEDC.INT_ST: LEDC_INT_ST
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_LSCH0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_LSCH0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH7_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH7_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH6_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH6_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH5_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH5_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH4_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH4_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH3_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH3_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_ST_DUTY_CHNG_END_HSCH0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_ST_DUTY_CHNG_END_HSCH0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_ST_LSTIMER3_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER3_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_ST_LSTIMER2_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER2_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_ST_LSTIMER1_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER1_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_ST_LSTIMER0_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_ST_LSTIMER0_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_ST_HSTIMER3_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER3_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_ST_HSTIMER2_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER2_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_ST_HSTIMER1_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER1_OVF_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.INT_ST.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_ST_HSTIMER0_OVF_INT_ST(value uint32) {
	volatile.StoreUint32(&o.INT_ST.Reg, volatile.LoadUint32(&o.INT_ST.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_ST_HSTIMER0_OVF_INT_ST() uint32 {
	return volatile.LoadUint32(&o.INT_ST.Reg) & 0x1
}

// LEDC.INT_ENA: LEDC_INT_ENA
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER3_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER3_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER2_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER2_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER1_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER1_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_ENA_LSTIMER0_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_ENA_LSTIMER0_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_ENA_HSTIMER3_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER3_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_ENA_HSTIMER2_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER2_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_ENA_HSTIMER1_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER1_OVF_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.INT_ENA.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_ENA_HSTIMER0_OVF_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.INT_ENA.Reg, volatile.LoadUint32(&o.INT_ENA.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_ENA_HSTIMER0_OVF_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.INT_ENA.Reg) & 0x1
}

// LEDC.INT_CLR: LEDC_INT_CLR
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800000)|value<<23)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800000) >> 23
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400000)|value<<22)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400000) >> 22
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200000)|value<<21)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200000) >> 21
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100000)|value<<20)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100000) >> 20
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80000)|value<<19)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80000) >> 19
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40000)|value<<18)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40000) >> 18
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20000)|value<<17)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20000) >> 17
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10000)|value<<16)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10000) >> 16
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8000)|value<<15)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8000) >> 15
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4000)|value<<14)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4000) >> 14
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2000)|value<<13)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2000) >> 13
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1000)|value<<12)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1000) >> 12
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x800)|value<<11)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x800) >> 11
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x400)|value<<10)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x400) >> 10
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x200)|value<<9)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x200) >> 9
}
func (o *LEDC_Type) SetINT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x100)|value<<8)
}
func (o *LEDC_Type) GetINT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x100) >> 8
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER3_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x80)|value<<7)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER3_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x80) >> 7
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER2_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x40)|value<<6)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER2_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x40) >> 6
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER1_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x20)|value<<5)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER1_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x20) >> 5
}
func (o *LEDC_Type) SetINT_CLR_LSTIMER0_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x10)|value<<4)
}
func (o *LEDC_Type) GetINT_CLR_LSTIMER0_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x10) >> 4
}
func (o *LEDC_Type) SetINT_CLR_HSTIMER3_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x8)|value<<3)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER3_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x8) >> 3
}
func (o *LEDC_Type) SetINT_CLR_HSTIMER2_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x4)|value<<2)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER2_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x4) >> 2
}
func (o *LEDC_Type) SetINT_CLR_HSTIMER1_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x2)|value<<1)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER1_OVF_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.INT_CLR.Reg) & 0x2) >> 1
}
func (o *LEDC_Type) SetINT_CLR_HSTIMER0_OVF_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.INT_CLR.Reg, volatile.LoadUint32(&o.INT_CLR.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetINT_CLR_HSTIMER0_OVF_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.INT_CLR.Reg) & 0x1
}

// LEDC.CONF: LEDC_CONF
func (o *LEDC_Type) SetCONF_APB_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.CONF.Reg, volatile.LoadUint32(&o.CONF.Reg)&^(0x1)|value)
}
func (o *LEDC_Type) GetCONF_APB_CLK_SEL() uint32 {
	return volatile.LoadUint32(&o.CONF.Reg) & 0x1
}

// LEDC.DATE: LEDC_DATE
func (o *LEDC_Type) SetDATE(value uint32) {
	volatile.StoreUint32(&o.DATE.Reg, value)
}
func (o *LEDC_Type) GetDATE() uint32 {
	return volatile.LoadUint32(&o.DATE.Reg)
}

type MCPWM_Type struct {
	CLK_CFG               volatile.Register32 // 0x0
	TIMER0_CFG0           volatile.Register32 // 0x4
	TIMER0_CFG1           volatile.Register32 // 0x8
	TIMER0_SYNC           volatile.Register32 // 0xC
	TIMER0_STATUS         volatile.Register32 // 0x10
	TIMER1_CFG0           volatile.Register32 // 0x14
	TIMER1_CFG1           volatile.Register32 // 0x18
	TIMER1_SYNC           volatile.Register32 // 0x1C
	TIMER1_STATUS         volatile.Register32 // 0x20
	TIMER2_CFG0           volatile.Register32 // 0x24
	TIMER2_CFG1           volatile.Register32 // 0x28
	TIMER2_SYNC           volatile.Register32 // 0x2C
	TIMER2_STATUS         volatile.Register32 // 0x30
	TIMER_SYNCI_CFG       volatile.Register32 // 0x34
	OPERATOR_TIMERSEL     volatile.Register32 // 0x38
	GEN0_STMP_CFG         volatile.Register32 // 0x3C
	GEN0_TSTMP_A          volatile.Register32 // 0x40
	GEN0_TSTMP_B          volatile.Register32 // 0x44
	GEN0_CFG0             volatile.Register32 // 0x48
	GEN0_FORCE            volatile.Register32 // 0x4C
	GEN0_A                volatile.Register32 // 0x50
	GEN0_B                volatile.Register32 // 0x54
	DT0_CFG               volatile.Register32 // 0x58
	DT0_FED_CFG           volatile.Register32 // 0x5C
	DT0_RED_CFG           volatile.Register32 // 0x60
	CARRIER0_CFG          volatile.Register32 // 0x64
	FH0_CFG0              volatile.Register32 // 0x68
	FH0_CFG1              volatile.Register32 // 0x6C
	FH0_STATUS            volatile.Register32 // 0x70
	GEN1_STMP_CFG         volatile.Register32 // 0x74
	GEN1_TSTMP_A          volatile.Register32 // 0x78
	GEN1_TSTMP_B          volatile.Register32 // 0x7C
	GEN1_CFG0             volatile.Register32 // 0x80
	GEN1_FORCE            volatile.Register32 // 0x84
	GEN1_A                volatile.Register32 // 0x88
	GEN1_B                volatile.Register32 // 0x8C
	DT1_CFG               volatile.Register32 // 0x90
	DT1_FED_CFG           volatile.Register32 // 0x94
	DT1_RED_CFG           volatile.Register32 // 0x98
	CARRIER1_CFG          volatile.Register32 // 0x9C
	FH1_CFG0              volatile.Register32 // 0xA0
	FH1_CFG1              volatile.Register32 // 0xA4
	FH1_STATUS            volatile.Register32 // 0xA8
	GEN2_STMP_CFG         volatile.Register32 // 0xAC
	GEN2_TSTMP_A          volatile.Register32 // 0xB0
	GEN2_TSTMP_B          volatile.Register32 // 0xB4
	GEN2_CFG0             volatile.Register32 // 0xB8
	GEN2_FORCE            volatile.Register32 // 0xBC
	GEN2_A                volatile.Register32 // 0xC0
	GEN2_B                volatile.Register32 // 0xC4
	DT2_CFG               volatile.Register32 // 0xC8
	DT2_FED_CFG           volatile.Register32 // 0xCC
	DT2_RED_CFG           volatile.Register32 // 0xD0
	CARRIER2_CFG          volatile.Register32 // 0xD4
	FH2_CFG0              volatile.Register32 // 0xD8
	FH2_CFG1              volatile.Register32 // 0xDC
	FH2_STATUS            volatile.Register32 // 0xE0
	FAULT_DETECT          volatile.Register32 // 0xE4
	CAP_TIMER_CFG         volatile.Register32 // 0xE8
	CAP_TIMER_PHASE       volatile.Register32 // 0xEC
	CAP_CH0_CFG           volatile.Register32 // 0xF0
	CAP_CH1_CFG           volatile.Register32 // 0xF4
	CAP_CH2_CFG           volatile.Register32 // 0xF8
	CAP_CH0               volatile.Register32 // 0xFC
	CAP_CH1               volatile.Register32 // 0x100
	CAP_CH2               volatile.Register32 // 0x104
	CAP_STATUS            volatile.Register32 // 0x108
	UPDATE_CFG            volatile.Register32 // 0x10C
	MCMCPWM_INT_ENA_MCPWM volatile.Register32 // 0x110
	MCMCPWM_INT_RAW_MCPWM volatile.Register32 // 0x114
	MCMCPWM_INT_ST_MCPWM  volatile.Register32 // 0x118
	MCMCPWM_INT_CLR_MCPWM volatile.Register32 // 0x11C
	CLK                   volatile.Register32 // 0x120
	VERSION               volatile.Register32 // 0x124
}

// MCPWM.CLK_CFG: MCPWM_CLK_CFG
func (o *MCPWM_Type) SetCLK_CFG_CLK_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CLK_CFG.Reg, volatile.LoadUint32(&o.CLK_CFG.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetCLK_CFG_CLK_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.CLK_CFG.Reg) & 0xff
}

// MCPWM.TIMER0_CFG0: MCPWM_TIMER0_CFG0
func (o *MCPWM_Type) SetTIMER0_CFG0_TIMER0_PERIOD_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG0.Reg, volatile.LoadUint32(&o.TIMER0_CFG0.Reg)&^(0x3000000)|value<<24)
}
func (o *MCPWM_Type) GetTIMER0_CFG0_TIMER0_PERIOD_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_CFG0.Reg) & 0x3000000) >> 24
}
func (o *MCPWM_Type) SetTIMER0_CFG0_TIMER0_PERIOD(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG0.Reg, volatile.LoadUint32(&o.TIMER0_CFG0.Reg)&^(0xffff00)|value<<8)
}
func (o *MCPWM_Type) GetTIMER0_CFG0_TIMER0_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_CFG0.Reg) & 0xffff00) >> 8
}
func (o *MCPWM_Type) SetTIMER0_CFG0_TIMER0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG0.Reg, volatile.LoadUint32(&o.TIMER0_CFG0.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetTIMER0_CFG0_TIMER0_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.TIMER0_CFG0.Reg) & 0xff
}

// MCPWM.TIMER0_CFG1: MCPWM_TIMER0_CFG1
func (o *MCPWM_Type) SetTIMER0_CFG1_TIMER0_MOD(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG1.Reg, volatile.LoadUint32(&o.TIMER0_CFG1.Reg)&^(0x18)|value<<3)
}
func (o *MCPWM_Type) GetTIMER0_CFG1_TIMER0_MOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_CFG1.Reg) & 0x18) >> 3
}
func (o *MCPWM_Type) SetTIMER0_CFG1_TIMER0_START(value uint32) {
	volatile.StoreUint32(&o.TIMER0_CFG1.Reg, volatile.LoadUint32(&o.TIMER0_CFG1.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER0_CFG1_TIMER0_START() uint32 {
	return volatile.LoadUint32(&o.TIMER0_CFG1.Reg) & 0x7
}

// MCPWM.TIMER0_SYNC: MCPWM_TIMER0_SYNC
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_PHASE(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0x1ffff0)|value<<4)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_PHASE() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0x1ffff0) >> 4
}
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_SYNCO_SEL(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_SYNCO_SEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetTIMER0_SYNC_TIMER0_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER0_SYNC.Reg, volatile.LoadUint32(&o.TIMER0_SYNC.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetTIMER0_SYNC_TIMER0_SYNCI_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER0_SYNC.Reg) & 0x1
}

// MCPWM.TIMER0_STATUS: MCPWM_TIMER0_STATUS
func (o *MCPWM_Type) SetTIMER0_STATUS_TIMER0_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER0_STATUS.Reg, volatile.LoadUint32(&o.TIMER0_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetTIMER0_STATUS_TIMER0_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER0_STATUS.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetTIMER0_STATUS_TIMER0_VALUE(value uint32) {
	volatile.StoreUint32(&o.TIMER0_STATUS.Reg, volatile.LoadUint32(&o.TIMER0_STATUS.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetTIMER0_STATUS_TIMER0_VALUE() uint32 {
	return volatile.LoadUint32(&o.TIMER0_STATUS.Reg) & 0xffff
}

// MCPWM.TIMER1_CFG0: MCPWM_TIMER1_CFG0
func (o *MCPWM_Type) SetTIMER1_CFG0_TIMER1_PERIOD_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG0.Reg, volatile.LoadUint32(&o.TIMER1_CFG0.Reg)&^(0x3000000)|value<<24)
}
func (o *MCPWM_Type) GetTIMER1_CFG0_TIMER1_PERIOD_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_CFG0.Reg) & 0x3000000) >> 24
}
func (o *MCPWM_Type) SetTIMER1_CFG0_TIMER1_PERIOD(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG0.Reg, volatile.LoadUint32(&o.TIMER1_CFG0.Reg)&^(0xffff00)|value<<8)
}
func (o *MCPWM_Type) GetTIMER1_CFG0_TIMER1_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_CFG0.Reg) & 0xffff00) >> 8
}
func (o *MCPWM_Type) SetTIMER1_CFG0_TIMER1_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG0.Reg, volatile.LoadUint32(&o.TIMER1_CFG0.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetTIMER1_CFG0_TIMER1_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.TIMER1_CFG0.Reg) & 0xff
}

// MCPWM.TIMER1_CFG1: MCPWM_TIMER1_CFG1
func (o *MCPWM_Type) SetTIMER1_CFG1_TIMER1_MOD(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG1.Reg, volatile.LoadUint32(&o.TIMER1_CFG1.Reg)&^(0x18)|value<<3)
}
func (o *MCPWM_Type) GetTIMER1_CFG1_TIMER1_MOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_CFG1.Reg) & 0x18) >> 3
}
func (o *MCPWM_Type) SetTIMER1_CFG1_TIMER1_START(value uint32) {
	volatile.StoreUint32(&o.TIMER1_CFG1.Reg, volatile.LoadUint32(&o.TIMER1_CFG1.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER1_CFG1_TIMER1_START() uint32 {
	return volatile.LoadUint32(&o.TIMER1_CFG1.Reg) & 0x7
}

// MCPWM.TIMER1_SYNC: MCPWM_TIMER1_SYNC
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_PHASE(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0x1ffff0)|value<<4)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_PHASE() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0x1ffff0) >> 4
}
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_SYNCO_SEL(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_SYNCO_SEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetTIMER1_SYNC_TIMER1_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER1_SYNC.Reg, volatile.LoadUint32(&o.TIMER1_SYNC.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetTIMER1_SYNC_TIMER1_SYNCI_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER1_SYNC.Reg) & 0x1
}

// MCPWM.TIMER1_STATUS: MCPWM_TIMER1_STATUS
func (o *MCPWM_Type) SetTIMER1_STATUS_TIMER1_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER1_STATUS.Reg, volatile.LoadUint32(&o.TIMER1_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetTIMER1_STATUS_TIMER1_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER1_STATUS.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetTIMER1_STATUS_TIMER1_VALUE(value uint32) {
	volatile.StoreUint32(&o.TIMER1_STATUS.Reg, volatile.LoadUint32(&o.TIMER1_STATUS.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetTIMER1_STATUS_TIMER1_VALUE() uint32 {
	return volatile.LoadUint32(&o.TIMER1_STATUS.Reg) & 0xffff
}

// MCPWM.TIMER2_CFG0: MCPWM_TIMER2_CFG0
func (o *MCPWM_Type) SetTIMER2_CFG0_TIMER2_PERIOD_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG0.Reg, volatile.LoadUint32(&o.TIMER2_CFG0.Reg)&^(0x3000000)|value<<24)
}
func (o *MCPWM_Type) GetTIMER2_CFG0_TIMER2_PERIOD_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_CFG0.Reg) & 0x3000000) >> 24
}
func (o *MCPWM_Type) SetTIMER2_CFG0_TIMER2_PERIOD(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG0.Reg, volatile.LoadUint32(&o.TIMER2_CFG0.Reg)&^(0xffff00)|value<<8)
}
func (o *MCPWM_Type) GetTIMER2_CFG0_TIMER2_PERIOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_CFG0.Reg) & 0xffff00) >> 8
}
func (o *MCPWM_Type) SetTIMER2_CFG0_TIMER2_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG0.Reg, volatile.LoadUint32(&o.TIMER2_CFG0.Reg)&^(0xff)|value)
}
func (o *MCPWM_Type) GetTIMER2_CFG0_TIMER2_PRESCALE() uint32 {
	return volatile.LoadUint32(&o.TIMER2_CFG0.Reg) & 0xff
}

// MCPWM.TIMER2_CFG1: MCPWM_TIMER2_CFG1
func (o *MCPWM_Type) SetTIMER2_CFG1_TIMER2_MOD(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG1.Reg, volatile.LoadUint32(&o.TIMER2_CFG1.Reg)&^(0x18)|value<<3)
}
func (o *MCPWM_Type) GetTIMER2_CFG1_TIMER2_MOD() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_CFG1.Reg) & 0x18) >> 3
}
func (o *MCPWM_Type) SetTIMER2_CFG1_TIMER2_START(value uint32) {
	volatile.StoreUint32(&o.TIMER2_CFG1.Reg, volatile.LoadUint32(&o.TIMER2_CFG1.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER2_CFG1_TIMER2_START() uint32 {
	return volatile.LoadUint32(&o.TIMER2_CFG1.Reg) & 0x7
}

// MCPWM.TIMER2_SYNC: MCPWM_TIMER2_SYNC
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_PHASE(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0x1ffff0)|value<<4)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_PHASE() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0x1ffff0) >> 4
}
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_SYNCO_SEL(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_SYNCO_SEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetTIMER2_SYNC_TIMER2_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.TIMER2_SYNC.Reg, volatile.LoadUint32(&o.TIMER2_SYNC.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetTIMER2_SYNC_TIMER2_SYNCI_EN() uint32 {
	return volatile.LoadUint32(&o.TIMER2_SYNC.Reg) & 0x1
}

// MCPWM.TIMER2_STATUS: MCPWM_TIMER2_STATUS
func (o *MCPWM_Type) SetTIMER2_STATUS_TIMER2_DIRECTION(value uint32) {
	volatile.StoreUint32(&o.TIMER2_STATUS.Reg, volatile.LoadUint32(&o.TIMER2_STATUS.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetTIMER2_STATUS_TIMER2_DIRECTION() uint32 {
	return (volatile.LoadUint32(&o.TIMER2_STATUS.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetTIMER2_STATUS_TIMER2_VALUE(value uint32) {
	volatile.StoreUint32(&o.TIMER2_STATUS.Reg, volatile.LoadUint32(&o.TIMER2_STATUS.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetTIMER2_STATUS_TIMER2_VALUE() uint32 {
	return volatile.LoadUint32(&o.TIMER2_STATUS.Reg) & 0xffff
}

// MCPWM.TIMER_SYNCI_CFG: MCPWM_TIMER_SYNCI_CFG
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_TIMER2_SYNCISEL(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x1c0)|value<<6)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_TIMER2_SYNCISEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x1c0) >> 6
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_TIMER1_SYNCISEL(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x38)|value<<3)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_TIMER1_SYNCISEL() uint32 {
	return (volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x38) >> 3
}
func (o *MCPWM_Type) SetTIMER_SYNCI_CFG_TIMER0_SYNCISEL(value uint32) {
	volatile.StoreUint32(&o.TIMER_SYNCI_CFG.Reg, volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg)&^(0x7)|value)
}
func (o *MCPWM_Type) GetTIMER_SYNCI_CFG_TIMER0_SYNCISEL() uint32 {
	return volatile.LoadUint32(&o.TIMER_SYNCI_CFG.Reg) & 0x7
}

// MCPWM.OPERATOR_TIMERSEL: MCPWM_OPERATOR_TIMERSEL
func (o *MCPWM_Type) SetOPERATOR_TIMERSEL_OPERATOR2_TIMERSEL(value uint32) {
	volatile.StoreUint32(&o.OPERATOR_TIMERSEL.Reg, volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetOPERATOR_TIMERSEL_OPERATOR2_TIMERSEL() uint32 {
	return (volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetOPERATOR_TIMERSEL_OPERATOR1_TIMERSEL(value uint32) {
	volatile.StoreUint32(&o.OPERATOR_TIMERSEL.Reg, volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetOPERATOR_TIMERSEL_OPERATOR1_TIMERSEL() uint32 {
	return (volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetOPERATOR_TIMERSEL_OPERATOR0_TIMERSEL(value uint32) {
	volatile.StoreUint32(&o.OPERATOR_TIMERSEL.Reg, volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetOPERATOR_TIMERSEL_OPERATOR0_TIMERSEL() uint32 {
	return volatile.LoadUint32(&o.OPERATOR_TIMERSEL.Reg) & 0x3
}

// MCPWM.GEN0_STMP_CFG: MCPWM_GEN0_STMP_CFG
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_B_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_B_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_A_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_A_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_B_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_B_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetGEN0_STMP_CFG_GEN0_A_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN0_STMP_CFG_GEN0_A_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN0_STMP_CFG.Reg) & 0xf
}

// MCPWM.GEN0_TSTMP_A: MCPWM_GEN0_TSTMP_A
func (o *MCPWM_Type) SetGEN0_TSTMP_A_GEN0_A(value uint32) {
	volatile.StoreUint32(&o.GEN0_TSTMP_A.Reg, volatile.LoadUint32(&o.GEN0_TSTMP_A.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN0_TSTMP_A_GEN0_A() uint32 {
	return volatile.LoadUint32(&o.GEN0_TSTMP_A.Reg) & 0xffff
}

// MCPWM.GEN0_TSTMP_B: MCPWM_GEN0_TSTMP_B
func (o *MCPWM_Type) SetGEN0_TSTMP_B_GEN0_B(value uint32) {
	volatile.StoreUint32(&o.GEN0_TSTMP_B.Reg, volatile.LoadUint32(&o.GEN0_TSTMP_B.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN0_TSTMP_B_GEN0_B() uint32 {
	return volatile.LoadUint32(&o.GEN0_TSTMP_B.Reg) & 0xffff
}

// MCPWM.GEN0_CFG0: MCPWM_GEN0_CFG0
func (o *MCPWM_Type) SetGEN0_CFG0_GEN0_T1_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN0_CFG0.Reg, volatile.LoadUint32(&o.GEN0_CFG0.Reg)&^(0x380)|value<<7)
}
func (o *MCPWM_Type) GetGEN0_CFG0_GEN0_T1_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_CFG0.Reg) & 0x380) >> 7
}
func (o *MCPWM_Type) SetGEN0_CFG0_GEN0_T0_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN0_CFG0.Reg, volatile.LoadUint32(&o.GEN0_CFG0.Reg)&^(0x70)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_CFG0_GEN0_T0_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN0_CFG0.Reg) & 0x70) >> 4
}
func (o *MCPWM_Type) SetGEN0_CFG0_GEN0_CFG_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_CFG0.Reg, volatile.LoadUint32(&o.GEN0_CFG0.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN0_CFG0_GEN0_CFG_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN0_CFG0.Reg) & 0xf
}

// MCPWM.GEN0_FORCE: MCPWM_GEN0_FORCE
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_B_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_B_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_B_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_B_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_A_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x1800)|value<<11)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_A_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x1800) >> 11
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_A_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_A_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_B_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_B_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_A_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_A_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN0_FORCE.Reg, volatile.LoadUint32(&o.GEN0_FORCE.Reg)&^(0x3f)|value)
}
func (o *MCPWM_Type) GetGEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN0_FORCE.Reg) & 0x3f
}

// MCPWM.GEN0_A: MCPWM_GEN0_A
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_A.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN0_A_GEN0_A_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_A.Reg, volatile.LoadUint32(&o.GEN0_A.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN0_A_GEN0_A_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN0_A.Reg) & 0x3
}

// MCPWM.GEN0_B: MCPWM_GEN0_B
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN0_B.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN0_B_GEN0_B_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN0_B.Reg, volatile.LoadUint32(&o.GEN0_B.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN0_B_GEN0_B_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN0_B.Reg) & 0x3
}

// MCPWM.DT0_CFG: MCPWM_DT0_CFG
func (o *MCPWM_Type) SetDT0_CFG_DT0_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_B_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_B_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_A_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_A_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_FED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_FED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_RED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_RED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_FED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_FED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_RED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_RED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_B_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_B_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_A_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_A_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_DEB_MODE(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_DEB_MODE() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_RED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_RED_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.DT0_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetDT0_CFG_DT0_FED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT0_CFG.Reg, volatile.LoadUint32(&o.DT0_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetDT0_CFG_DT0_FED_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.DT0_CFG.Reg) & 0xf
}

// MCPWM.DT0_FED_CFG: MCPWM_DT0_FED_CFG
func (o *MCPWM_Type) SetDT0_FED_CFG_DT0_FED(value uint32) {
	volatile.StoreUint32(&o.DT0_FED_CFG.Reg, volatile.LoadUint32(&o.DT0_FED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT0_FED_CFG_DT0_FED() uint32 {
	return volatile.LoadUint32(&o.DT0_FED_CFG.Reg) & 0xffff
}

// MCPWM.DT0_RED_CFG: MCPWM_DT0_RED_CFG
func (o *MCPWM_Type) SetDT0_RED_CFG_DT0_RED(value uint32) {
	volatile.StoreUint32(&o.DT0_RED_CFG.Reg, volatile.LoadUint32(&o.DT0_RED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT0_RED_CFG_DT0_RED() uint32 {
	return volatile.LoadUint32(&o.DT0_RED_CFG.Reg) & 0xffff
}

// MCPWM.CARRIER0_CFG: MCPWM_CARRIER0_CFG
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_OUT_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_OUT_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_OSHWTH(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0xf00)|value<<8)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_OSHWTH() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0xf00) >> 8
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_DUTY(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0xe0)|value<<5)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_DUTY() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0xe0) >> 5
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x1e)|value<<1)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x1e) >> 1
}
func (o *MCPWM_Type) SetCARRIER0_CFG_CARRIER0_EN(value uint32) {
	volatile.StoreUint32(&o.CARRIER0_CFG.Reg, volatile.LoadUint32(&o.CARRIER0_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCARRIER0_CFG_CARRIER0_EN() uint32 {
	return volatile.LoadUint32(&o.CARRIER0_CFG.Reg) & 0x1
}

// MCPWM.FH0_CFG0: MCPWM_FH0_CFG0
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_B_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_B_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_A_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_A_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F0_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F0_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F1_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F1_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F2_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F2_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_SW_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_SW_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F0_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F0_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F1_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F1_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_F2_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_F2_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH0_CFG0_FH0_SW_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG0.Reg, volatile.LoadUint32(&o.FH0_CFG0.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH0_CFG0_FH0_SW_CBC() uint32 {
	return volatile.LoadUint32(&o.FH0_CFG0.Reg) & 0x1
}

// MCPWM.FH0_CFG1: MCPWM_FH0_CFG1
func (o *MCPWM_Type) SetFH0_CFG1_FH0_FORCE_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_FORCE_OST() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH0_CFG1_FH0_FORCE_CBC(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_FORCE_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH0_CFG1_FH0_CBCPULSE(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_CBCPULSE() uint32 {
	return (volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetFH0_CFG1_FH0_CLR_OST(value uint32) {
	volatile.StoreUint32(&o.FH0_CFG1.Reg, volatile.LoadUint32(&o.FH0_CFG1.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH0_CFG1_FH0_CLR_OST() uint32 {
	return volatile.LoadUint32(&o.FH0_CFG1.Reg) & 0x1
}

// MCPWM.FH0_STATUS: MCPWM_FH0_STATUS
func (o *MCPWM_Type) SetFH0_STATUS_FH0_OST_ON(value uint32) {
	volatile.StoreUint32(&o.FH0_STATUS.Reg, volatile.LoadUint32(&o.FH0_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH0_STATUS_FH0_OST_ON() uint32 {
	return (volatile.LoadUint32(&o.FH0_STATUS.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH0_STATUS_FH0_CBC_ON(value uint32) {
	volatile.StoreUint32(&o.FH0_STATUS.Reg, volatile.LoadUint32(&o.FH0_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH0_STATUS_FH0_CBC_ON() uint32 {
	return volatile.LoadUint32(&o.FH0_STATUS.Reg) & 0x1
}

// MCPWM.GEN1_STMP_CFG: MCPWM_GEN1_STMP_CFG
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_B_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_B_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_A_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_A_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_B_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_B_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetGEN1_STMP_CFG_GEN1_A_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN1_STMP_CFG_GEN1_A_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN1_STMP_CFG.Reg) & 0xf
}

// MCPWM.GEN1_TSTMP_A: MCPWM_GEN1_TSTMP_A
func (o *MCPWM_Type) SetGEN1_TSTMP_A_GEN1_A(value uint32) {
	volatile.StoreUint32(&o.GEN1_TSTMP_A.Reg, volatile.LoadUint32(&o.GEN1_TSTMP_A.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN1_TSTMP_A_GEN1_A() uint32 {
	return volatile.LoadUint32(&o.GEN1_TSTMP_A.Reg) & 0xffff
}

// MCPWM.GEN1_TSTMP_B: MCPWM_GEN1_TSTMP_B
func (o *MCPWM_Type) SetGEN1_TSTMP_B_GEN1_B(value uint32) {
	volatile.StoreUint32(&o.GEN1_TSTMP_B.Reg, volatile.LoadUint32(&o.GEN1_TSTMP_B.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN1_TSTMP_B_GEN1_B() uint32 {
	return volatile.LoadUint32(&o.GEN1_TSTMP_B.Reg) & 0xffff
}

// MCPWM.GEN1_CFG0: MCPWM_GEN1_CFG0
func (o *MCPWM_Type) SetGEN1_CFG0_GEN1_T1_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN1_CFG0.Reg, volatile.LoadUint32(&o.GEN1_CFG0.Reg)&^(0x380)|value<<7)
}
func (o *MCPWM_Type) GetGEN1_CFG0_GEN1_T1_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_CFG0.Reg) & 0x380) >> 7
}
func (o *MCPWM_Type) SetGEN1_CFG0_GEN1_T0_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN1_CFG0.Reg, volatile.LoadUint32(&o.GEN1_CFG0.Reg)&^(0x70)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_CFG0_GEN1_T0_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN1_CFG0.Reg) & 0x70) >> 4
}
func (o *MCPWM_Type) SetGEN1_CFG0_GEN1_CFG_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_CFG0.Reg, volatile.LoadUint32(&o.GEN1_CFG0.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN1_CFG0_GEN1_CFG_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN1_CFG0.Reg) & 0xf
}

// MCPWM.GEN1_FORCE: MCPWM_GEN1_FORCE
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_B_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_B_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_B_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_B_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_A_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x1800)|value<<11)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_A_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x1800) >> 11
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_A_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_A_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_B_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_B_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_A_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_A_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN1_FORCE.Reg, volatile.LoadUint32(&o.GEN1_FORCE.Reg)&^(0x3f)|value)
}
func (o *MCPWM_Type) GetGEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN1_FORCE.Reg) & 0x3f
}

// MCPWM.GEN1_A: MCPWM_GEN1_A
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_A.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN1_A_GEN1_A_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_A.Reg, volatile.LoadUint32(&o.GEN1_A.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN1_A_GEN1_A_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN1_A.Reg) & 0x3
}

// MCPWM.GEN1_B: MCPWM_GEN1_B
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN1_B.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN1_B_GEN1_B_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN1_B.Reg, volatile.LoadUint32(&o.GEN1_B.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN1_B_GEN1_B_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN1_B.Reg) & 0x3
}

// MCPWM.DT1_CFG: MCPWM_DT1_CFG
func (o *MCPWM_Type) SetDT1_CFG_DT1_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_B_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_B_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_A_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_A_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_FED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_FED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_RED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_RED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_FED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_FED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_RED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_RED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_B_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_B_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_A_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_A_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_DEB_MODE(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_DEB_MODE() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_RED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_RED_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.DT1_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetDT1_CFG_DT1_FED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT1_CFG.Reg, volatile.LoadUint32(&o.DT1_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetDT1_CFG_DT1_FED_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.DT1_CFG.Reg) & 0xf
}

// MCPWM.DT1_FED_CFG: MCPWM_DT1_FED_CFG
func (o *MCPWM_Type) SetDT1_FED_CFG_DT1_FED(value uint32) {
	volatile.StoreUint32(&o.DT1_FED_CFG.Reg, volatile.LoadUint32(&o.DT1_FED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT1_FED_CFG_DT1_FED() uint32 {
	return volatile.LoadUint32(&o.DT1_FED_CFG.Reg) & 0xffff
}

// MCPWM.DT1_RED_CFG: MCPWM_DT1_RED_CFG
func (o *MCPWM_Type) SetDT1_RED_CFG_DT1_RED(value uint32) {
	volatile.StoreUint32(&o.DT1_RED_CFG.Reg, volatile.LoadUint32(&o.DT1_RED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT1_RED_CFG_DT1_RED() uint32 {
	return volatile.LoadUint32(&o.DT1_RED_CFG.Reg) & 0xffff
}

// MCPWM.CARRIER1_CFG: MCPWM_CARRIER1_CFG
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_OUT_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_OUT_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_OSHWTH(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0xf00)|value<<8)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_OSHWTH() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0xf00) >> 8
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_DUTY(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0xe0)|value<<5)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_DUTY() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0xe0) >> 5
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x1e)|value<<1)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x1e) >> 1
}
func (o *MCPWM_Type) SetCARRIER1_CFG_CARRIER1_EN(value uint32) {
	volatile.StoreUint32(&o.CARRIER1_CFG.Reg, volatile.LoadUint32(&o.CARRIER1_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCARRIER1_CFG_CARRIER1_EN() uint32 {
	return volatile.LoadUint32(&o.CARRIER1_CFG.Reg) & 0x1
}

// MCPWM.FH1_CFG0: MCPWM_FH1_CFG0
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_B_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_B_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_A_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_A_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F0_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F0_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F1_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F1_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F2_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F2_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_SW_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_SW_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F0_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F0_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F1_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F1_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_F2_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_F2_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH1_CFG0_FH1_SW_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG0.Reg, volatile.LoadUint32(&o.FH1_CFG0.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH1_CFG0_FH1_SW_CBC() uint32 {
	return volatile.LoadUint32(&o.FH1_CFG0.Reg) & 0x1
}

// MCPWM.FH1_CFG1: MCPWM_FH1_CFG1
func (o *MCPWM_Type) SetFH1_CFG1_FH1_FORCE_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_FORCE_OST() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH1_CFG1_FH1_FORCE_CBC(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_FORCE_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH1_CFG1_FH1_CBCPULSE(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_CBCPULSE() uint32 {
	return (volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetFH1_CFG1_FH1_CLR_OST(value uint32) {
	volatile.StoreUint32(&o.FH1_CFG1.Reg, volatile.LoadUint32(&o.FH1_CFG1.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH1_CFG1_FH1_CLR_OST() uint32 {
	return volatile.LoadUint32(&o.FH1_CFG1.Reg) & 0x1
}

// MCPWM.FH1_STATUS: MCPWM_FH1_STATUS
func (o *MCPWM_Type) SetFH1_STATUS_FH1_OST_ON(value uint32) {
	volatile.StoreUint32(&o.FH1_STATUS.Reg, volatile.LoadUint32(&o.FH1_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH1_STATUS_FH1_OST_ON() uint32 {
	return (volatile.LoadUint32(&o.FH1_STATUS.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH1_STATUS_FH1_CBC_ON(value uint32) {
	volatile.StoreUint32(&o.FH1_STATUS.Reg, volatile.LoadUint32(&o.FH1_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH1_STATUS_FH1_CBC_ON() uint32 {
	return volatile.LoadUint32(&o.FH1_STATUS.Reg) & 0x1
}

// MCPWM.GEN2_STMP_CFG: MCPWM_GEN2_STMP_CFG
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_B_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_B_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_A_SHDW_FULL(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_A_SHDW_FULL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_B_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_B_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetGEN2_STMP_CFG_GEN2_A_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_STMP_CFG.Reg, volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN2_STMP_CFG_GEN2_A_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN2_STMP_CFG.Reg) & 0xf
}

// MCPWM.GEN2_TSTMP_A: MCPWM_GEN2_TSTMP_A
func (o *MCPWM_Type) SetGEN2_TSTMP_A_GEN2_A(value uint32) {
	volatile.StoreUint32(&o.GEN2_TSTMP_A.Reg, volatile.LoadUint32(&o.GEN2_TSTMP_A.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN2_TSTMP_A_GEN2_A() uint32 {
	return volatile.LoadUint32(&o.GEN2_TSTMP_A.Reg) & 0xffff
}

// MCPWM.GEN2_TSTMP_B: MCPWM_GEN2_TSTMP_B
func (o *MCPWM_Type) SetGEN2_TSTMP_B_GEN2_B(value uint32) {
	volatile.StoreUint32(&o.GEN2_TSTMP_B.Reg, volatile.LoadUint32(&o.GEN2_TSTMP_B.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetGEN2_TSTMP_B_GEN2_B() uint32 {
	return volatile.LoadUint32(&o.GEN2_TSTMP_B.Reg) & 0xffff
}

// MCPWM.GEN2_CFG0: MCPWM_GEN2_CFG0
func (o *MCPWM_Type) SetGEN2_CFG0_GEN2_T1_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN2_CFG0.Reg, volatile.LoadUint32(&o.GEN2_CFG0.Reg)&^(0x380)|value<<7)
}
func (o *MCPWM_Type) GetGEN2_CFG0_GEN2_T1_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_CFG0.Reg) & 0x380) >> 7
}
func (o *MCPWM_Type) SetGEN2_CFG0_GEN2_T0_SEL(value uint32) {
	volatile.StoreUint32(&o.GEN2_CFG0.Reg, volatile.LoadUint32(&o.GEN2_CFG0.Reg)&^(0x70)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_CFG0_GEN2_T0_SEL() uint32 {
	return (volatile.LoadUint32(&o.GEN2_CFG0.Reg) & 0x70) >> 4
}
func (o *MCPWM_Type) SetGEN2_CFG0_GEN2_CFG_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_CFG0.Reg, volatile.LoadUint32(&o.GEN2_CFG0.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetGEN2_CFG0_GEN2_CFG_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN2_CFG0.Reg) & 0xf
}

// MCPWM.GEN2_FORCE: MCPWM_GEN2_FORCE
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_B_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_B_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_B_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_B_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_A_NCIFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x1800)|value<<11)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_A_NCIFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x1800) >> 11
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_A_NCIFORCE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_A_NCIFORCE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_B_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_B_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_A_CNTUFORCE_MODE(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_A_CNTUFORCE_MODE() uint32 {
	return (volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.GEN2_FORCE.Reg, volatile.LoadUint32(&o.GEN2_FORCE.Reg)&^(0x3f)|value)
}
func (o *MCPWM_Type) GetGEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.GEN2_FORCE.Reg) & 0x3f
}

// MCPWM.GEN2_A: MCPWM_GEN2_A
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_A.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN2_A_GEN2_A_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_A.Reg, volatile.LoadUint32(&o.GEN2_A.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN2_A_GEN2_A_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN2_A.Reg) & 0x3
}

// MCPWM.GEN2_B: MCPWM_GEN2_B
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_DT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_DT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_DT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_DT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_DTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_DTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_DTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_DTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_DTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_DTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_DTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_DTEZ() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_UT1(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_UT1() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_UT0(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_UT0() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_UTEB(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc0)|value<<6)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_UTEB() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc0) >> 6
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_UTEA(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x30)|value<<4)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_UTEA() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0x30) >> 4
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_UTEP(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0xc)|value<<2)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_UTEP() uint32 {
	return (volatile.LoadUint32(&o.GEN2_B.Reg) & 0xc) >> 2
}
func (o *MCPWM_Type) SetGEN2_B_GEN2_B_UTEZ(value uint32) {
	volatile.StoreUint32(&o.GEN2_B.Reg, volatile.LoadUint32(&o.GEN2_B.Reg)&^(0x3)|value)
}
func (o *MCPWM_Type) GetGEN2_B_GEN2_B_UTEZ() uint32 {
	return volatile.LoadUint32(&o.GEN2_B.Reg) & 0x3
}

// MCPWM.DT2_CFG: MCPWM_DT2_CFG
func (o *MCPWM_Type) SetDT2_CFG_DT2_CLK_SEL(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_CLK_SEL() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_B_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_B_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_A_OUTBYPASS(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_A_OUTBYPASS() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_FED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_FED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_RED_OUTINVERT(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_RED_OUTINVERT() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_FED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_FED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_RED_INSEL(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_RED_INSEL() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_B_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_B_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_A_OUTSWAP(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_A_OUTSWAP() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_DEB_MODE(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_DEB_MODE() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_RED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0xf0)|value<<4)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_RED_UPMETHOD() uint32 {
	return (volatile.LoadUint32(&o.DT2_CFG.Reg) & 0xf0) >> 4
}
func (o *MCPWM_Type) SetDT2_CFG_DT2_FED_UPMETHOD(value uint32) {
	volatile.StoreUint32(&o.DT2_CFG.Reg, volatile.LoadUint32(&o.DT2_CFG.Reg)&^(0xf)|value)
}
func (o *MCPWM_Type) GetDT2_CFG_DT2_FED_UPMETHOD() uint32 {
	return volatile.LoadUint32(&o.DT2_CFG.Reg) & 0xf
}

// MCPWM.DT2_FED_CFG: MCPWM_DT2_FED_CFG
func (o *MCPWM_Type) SetDT2_FED_CFG_DT2_FED(value uint32) {
	volatile.StoreUint32(&o.DT2_FED_CFG.Reg, volatile.LoadUint32(&o.DT2_FED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT2_FED_CFG_DT2_FED() uint32 {
	return volatile.LoadUint32(&o.DT2_FED_CFG.Reg) & 0xffff
}

// MCPWM.DT2_RED_CFG: MCPWM_DT2_RED_CFG
func (o *MCPWM_Type) SetDT2_RED_CFG_DT2_RED(value uint32) {
	volatile.StoreUint32(&o.DT2_RED_CFG.Reg, volatile.LoadUint32(&o.DT2_RED_CFG.Reg)&^(0xffff)|value)
}
func (o *MCPWM_Type) GetDT2_RED_CFG_DT2_RED() uint32 {
	return volatile.LoadUint32(&o.DT2_RED_CFG.Reg) & 0xffff
}

// MCPWM.CARRIER2_CFG: MCPWM_CARRIER2_CFG
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_OUT_INVERT(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_OUT_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_OSHWTH(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0xf00)|value<<8)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_OSHWTH() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0xf00) >> 8
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_DUTY(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0xe0)|value<<5)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_DUTY() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0xe0) >> 5
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x1e)|value<<1)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x1e) >> 1
}
func (o *MCPWM_Type) SetCARRIER2_CFG_CARRIER2_EN(value uint32) {
	volatile.StoreUint32(&o.CARRIER2_CFG.Reg, volatile.LoadUint32(&o.CARRIER2_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCARRIER2_CFG_CARRIER2_EN() uint32 {
	return volatile.LoadUint32(&o.CARRIER2_CFG.Reg) & 0x1
}

// MCPWM.FH2_CFG0: MCPWM_FH2_CFG0
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc00000)|value<<22)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc00000) >> 22
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x300000)|value<<20)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x300000) >> 20
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc0000)|value<<18)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc0000) >> 18
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_B_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x30000)|value<<16)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_B_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x30000) >> 16
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_OST_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc000)|value<<14)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_OST_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc000) >> 14
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_OST_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x3000)|value<<12)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_OST_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x3000) >> 12
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_CBC_U(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0xc00)|value<<10)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_CBC_U() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0xc00) >> 10
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_A_CBC_D(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x300)|value<<8)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_A_CBC_D() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x300) >> 8
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F0_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F0_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F1_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F1_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F2_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F2_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_SW_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_SW_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F0_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F0_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F1_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F1_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_F2_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_F2_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH2_CFG0_FH2_SW_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG0.Reg, volatile.LoadUint32(&o.FH2_CFG0.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH2_CFG0_FH2_SW_CBC() uint32 {
	return volatile.LoadUint32(&o.FH2_CFG0.Reg) & 0x1
}

// MCPWM.FH2_CFG1: MCPWM_FH2_CFG1
func (o *MCPWM_Type) SetFH2_CFG1_FH2_FORCE_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_FORCE_OST() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFH2_CFG1_FH2_FORCE_CBC(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_FORCE_CBC() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFH2_CFG1_FH2_CBCPULSE(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_CBCPULSE() uint32 {
	return (volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetFH2_CFG1_FH2_CLR_OST(value uint32) {
	volatile.StoreUint32(&o.FH2_CFG1.Reg, volatile.LoadUint32(&o.FH2_CFG1.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH2_CFG1_FH2_CLR_OST() uint32 {
	return volatile.LoadUint32(&o.FH2_CFG1.Reg) & 0x1
}

// MCPWM.FH2_STATUS: MCPWM_FH2_STATUS
func (o *MCPWM_Type) SetFH2_STATUS_FH2_OST_ON(value uint32) {
	volatile.StoreUint32(&o.FH2_STATUS.Reg, volatile.LoadUint32(&o.FH2_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFH2_STATUS_FH2_OST_ON() uint32 {
	return (volatile.LoadUint32(&o.FH2_STATUS.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFH2_STATUS_FH2_CBC_ON(value uint32) {
	volatile.StoreUint32(&o.FH2_STATUS.Reg, volatile.LoadUint32(&o.FH2_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFH2_STATUS_FH2_CBC_ON() uint32 {
	return volatile.LoadUint32(&o.FH2_STATUS.Reg) & 0x1
}

// MCPWM.FAULT_DETECT: MCPWM_FAULT_DETECT
func (o *MCPWM_Type) SetFAULT_DETECT_EVENT_F2(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetFAULT_DETECT_EVENT_F2() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetFAULT_DETECT_EVENT_F1(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetFAULT_DETECT_EVENT_F1() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetFAULT_DETECT_EVENT_F0(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetFAULT_DETECT_EVENT_F0() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetFAULT_DETECT_F2_POLE(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F2_POLE() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetFAULT_DETECT_F1_POLE(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F1_POLE() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetFAULT_DETECT_F0_POLE(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F0_POLE() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetFAULT_DETECT_F2_EN(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F2_EN() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetFAULT_DETECT_F1_EN(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F1_EN() uint32 {
	return (volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetFAULT_DETECT_F0_EN(value uint32) {
	volatile.StoreUint32(&o.FAULT_DETECT.Reg, volatile.LoadUint32(&o.FAULT_DETECT.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetFAULT_DETECT_F0_EN() uint32 {
	return volatile.LoadUint32(&o.FAULT_DETECT.Reg) & 0x1
}

// MCPWM.CAP_TIMER_CFG: MCPWM_CAP_TIMER_CFG
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_SYNC_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_SYNC_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_SYNCI_SEL(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x1c)|value<<2)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_SYNCI_SEL() uint32 {
	return (volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x1c) >> 2
}
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_SYNCI_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_SYNCI_EN() uint32 {
	return (volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetCAP_TIMER_CFG_CAP_TIMER_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_CFG.Reg, volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_TIMER_CFG_CAP_TIMER_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_TIMER_CFG.Reg) & 0x1
}

// MCPWM.CAP_TIMER_PHASE: MCPWM_CAP_TIMER_PHASE
func (o *MCPWM_Type) SetCAP_TIMER_PHASE(value uint32) {
	volatile.StoreUint32(&o.CAP_TIMER_PHASE.Reg, value)
}
func (o *MCPWM_Type) GetCAP_TIMER_PHASE() uint32 {
	return volatile.LoadUint32(&o.CAP_TIMER_PHASE.Reg)
}

// MCPWM.CAP_CH0_CFG: MCPWM_CAP_CH0_CFG
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x7f8)|value<<3)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x7f8) >> 3
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_MODE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_MODE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetCAP_CH0_CFG_CAP0_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0_CFG.Reg, volatile.LoadUint32(&o.CAP_CH0_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_CH0_CFG_CAP0_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_CH0_CFG.Reg) & 0x1
}

// MCPWM.CAP_CH1_CFG: MCPWM_CAP_CH1_CFG
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x7f8)|value<<3)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x7f8) >> 3
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_MODE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_MODE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetCAP_CH1_CFG_CAP1_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1_CFG.Reg, volatile.LoadUint32(&o.CAP_CH1_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_CH1_CFG_CAP1_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_CH1_CFG.Reg) & 0x1
}

// MCPWM.CAP_CH2_CFG: MCPWM_CAP_CH2_CFG
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_SW(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_SW() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_IN_INVERT(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_IN_INVERT() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_PRESCALE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x7f8)|value<<3)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_PRESCALE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x7f8) >> 3
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_MODE(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x6)|value<<1)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_MODE() uint32 {
	return (volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x6) >> 1
}
func (o *MCPWM_Type) SetCAP_CH2_CFG_CAP2_EN(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2_CFG.Reg, volatile.LoadUint32(&o.CAP_CH2_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_CH2_CFG_CAP2_EN() uint32 {
	return volatile.LoadUint32(&o.CAP_CH2_CFG.Reg) & 0x1
}

// MCPWM.CAP_CH0: MCPWM_CAP_CH0
func (o *MCPWM_Type) SetCAP_CH0(value uint32) {
	volatile.StoreUint32(&o.CAP_CH0.Reg, value)
}
func (o *MCPWM_Type) GetCAP_CH0() uint32 {
	return volatile.LoadUint32(&o.CAP_CH0.Reg)
}

// MCPWM.CAP_CH1: MCPWM_CAP_CH1
func (o *MCPWM_Type) SetCAP_CH1(value uint32) {
	volatile.StoreUint32(&o.CAP_CH1.Reg, value)
}
func (o *MCPWM_Type) GetCAP_CH1() uint32 {
	return volatile.LoadUint32(&o.CAP_CH1.Reg)
}

// MCPWM.CAP_CH2: MCPWM_CAP_CH2
func (o *MCPWM_Type) SetCAP_CH2(value uint32) {
	volatile.StoreUint32(&o.CAP_CH2.Reg, value)
}
func (o *MCPWM_Type) GetCAP_CH2() uint32 {
	return volatile.LoadUint32(&o.CAP_CH2.Reg)
}

// MCPWM.CAP_STATUS: MCPWM_CAP_STATUS
func (o *MCPWM_Type) SetCAP_STATUS_CAP2_EDGE(value uint32) {
	volatile.StoreUint32(&o.CAP_STATUS.Reg, volatile.LoadUint32(&o.CAP_STATUS.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetCAP_STATUS_CAP2_EDGE() uint32 {
	return (volatile.LoadUint32(&o.CAP_STATUS.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetCAP_STATUS_CAP1_EDGE(value uint32) {
	volatile.StoreUint32(&o.CAP_STATUS.Reg, volatile.LoadUint32(&o.CAP_STATUS.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetCAP_STATUS_CAP1_EDGE() uint32 {
	return (volatile.LoadUint32(&o.CAP_STATUS.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetCAP_STATUS_CAP0_EDGE(value uint32) {
	volatile.StoreUint32(&o.CAP_STATUS.Reg, volatile.LoadUint32(&o.CAP_STATUS.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCAP_STATUS_CAP0_EDGE() uint32 {
	return volatile.LoadUint32(&o.CAP_STATUS.Reg) & 0x1
}

// MCPWM.UPDATE_CFG: MCPWM_UPDATE_CFG
func (o *MCPWM_Type) SetUPDATE_CFG_OP2_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP2_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP2_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP2_UP_EN() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP1_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP1_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP1_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP1_UP_EN() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP0_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP0_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetUPDATE_CFG_OP0_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetUPDATE_CFG_OP0_UP_EN() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetUPDATE_CFG_GLOBAL_FORCE_UP(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetUPDATE_CFG_GLOBAL_FORCE_UP() uint32 {
	return (volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetUPDATE_CFG_GLOBAL_UP_EN(value uint32) {
	volatile.StoreUint32(&o.UPDATE_CFG.Reg, volatile.LoadUint32(&o.UPDATE_CFG.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetUPDATE_CFG_GLOBAL_UP_EN() uint32 {
	return volatile.LoadUint32(&o.UPDATE_CFG.Reg) & 0x1
}

// MCPWM.MCMCPWM_INT_ENA_MCPWM: MCMCPWM_INT_ENA_MCPWM
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_CAP2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_CAP2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x20000000) >> 29
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_CAP1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_CAP1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_CAP0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_CAP0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FH2_OST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FH2_OST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FH1_OST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FH1_OST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FH0_OST_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FH0_OST_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FH2_CBC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FH2_CBC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FH1_CBC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FH1_CBC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FH0_CBC_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FH0_CBC_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_OP2_TEB_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_OP2_TEB_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_OP1_TEB_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_OP1_TEB_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_OP0_TEB_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_OP0_TEB_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_OP2_TEA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_OP2_TEA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_OP1_TEA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_OP1_TEA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_OP0_TEA_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_OP0_TEA_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FAULT2_CLR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FAULT2_CLR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FAULT1_CLR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FAULT1_CLR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FAULT0_CLR_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FAULT0_CLR_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FAULT2_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FAULT2_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FAULT1_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FAULT1_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_FAULT0_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_FAULT0_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER2_TEP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER2_TEP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER1_TEP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER1_TEP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER0_TEP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER0_TEP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER2_TEZ_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER2_TEZ_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER1_TEZ_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER1_TEZ_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER0_TEZ_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER0_TEZ_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER2_STOP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER2_STOP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER1_STOP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER1_STOP_INT_ENA() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ENA_MCPWM_TIMER0_STOP_INT_ENA(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ENA_MCPWM_TIMER0_STOP_INT_ENA() uint32 {
	return volatile.LoadUint32(&o.MCMCPWM_INT_ENA_MCPWM.Reg) & 0x1
}

// MCPWM.MCMCPWM_INT_RAW_MCPWM: MCMCPWM_INT_RAW_MCPWM
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_CAP2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_CAP2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x20000000) >> 29
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_CAP1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_CAP1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_CAP0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_CAP0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FH2_OST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FH2_OST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FH1_OST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FH1_OST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FH0_OST_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FH0_OST_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FH2_CBC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FH2_CBC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FH1_CBC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FH1_CBC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FH0_CBC_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FH0_CBC_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_OP2_TEB_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_OP2_TEB_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_OP1_TEB_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_OP1_TEB_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_OP0_TEB_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_OP0_TEB_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_OP2_TEA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_OP2_TEA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_OP1_TEA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_OP1_TEA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_OP0_TEA_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_OP0_TEA_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FAULT2_CLR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FAULT2_CLR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FAULT1_CLR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FAULT1_CLR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FAULT0_CLR_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FAULT0_CLR_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FAULT2_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FAULT2_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FAULT1_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FAULT1_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_FAULT0_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_FAULT0_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER2_TEP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER2_TEP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER1_TEP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER1_TEP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER0_TEP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER0_TEP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER2_TEZ_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER2_TEZ_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER1_TEZ_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER1_TEZ_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER0_TEZ_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER0_TEZ_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER2_STOP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER2_STOP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER1_STOP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER1_STOP_INT_RAW() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetMCMCPWM_INT_RAW_MCPWM_TIMER0_STOP_INT_RAW(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_RAW_MCPWM_TIMER0_STOP_INT_RAW() uint32 {
	return volatile.LoadUint32(&o.MCMCPWM_INT_RAW_MCPWM.Reg) & 0x1
}

// MCPWM.MCMCPWM_INT_ST_MCPWM: MCMCPWM_INT_ST_MCPWM
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_CAP2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_CAP2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x20000000) >> 29
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_CAP1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_CAP1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_CAP0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_CAP0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FH2_OST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FH2_OST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FH1_OST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FH1_OST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FH0_OST_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FH0_OST_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FH2_CBC_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FH2_CBC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FH1_CBC_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FH1_CBC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FH0_CBC_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FH0_CBC_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_OP2_TEB_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_OP2_TEB_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_OP1_TEB_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_OP1_TEB_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_OP0_TEB_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_OP0_TEB_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_OP2_TEA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_OP2_TEA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_OP1_TEA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_OP1_TEA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_OP0_TEA_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_OP0_TEA_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FAULT2_CLR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FAULT2_CLR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FAULT1_CLR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FAULT1_CLR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FAULT0_CLR_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FAULT0_CLR_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FAULT2_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FAULT2_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FAULT1_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FAULT1_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_FAULT0_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_FAULT0_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER2_TEP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER2_TEP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER1_TEP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER1_TEP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER0_TEP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER0_TEP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER2_TEZ_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER2_TEZ_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER1_TEZ_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER1_TEZ_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER0_TEZ_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER0_TEZ_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER2_STOP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER2_STOP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER1_STOP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER1_STOP_INT_ST() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetMCMCPWM_INT_ST_MCPWM_TIMER0_STOP_INT_ST(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_ST_MCPWM_TIMER0_STOP_INT_ST() uint32 {
	return volatile.LoadUint32(&o.MCMCPWM_INT_ST_MCPWM.Reg) & 0x1
}

// MCPWM.MCMCPWM_INT_CLR_MCPWM: MCMCPWM_INT_CLR_MCPWM
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_CAP2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x20000000)|value<<29)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_CAP2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x20000000) >> 29
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_CAP1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x10000000)|value<<28)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_CAP1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x10000000) >> 28
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_CAP0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x8000000)|value<<27)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_CAP0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x8000000) >> 27
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FH2_OST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x4000000)|value<<26)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FH2_OST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x4000000) >> 26
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FH1_OST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x2000000)|value<<25)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FH1_OST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x2000000) >> 25
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FH0_OST_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x1000000)|value<<24)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FH0_OST_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x1000000) >> 24
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FH2_CBC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x800000)|value<<23)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FH2_CBC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x800000) >> 23
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FH1_CBC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x400000)|value<<22)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FH1_CBC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x400000) >> 22
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FH0_CBC_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x200000)|value<<21)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FH0_CBC_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x200000) >> 21
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_OP2_TEB_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x100000)|value<<20)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_OP2_TEB_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x100000) >> 20
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_OP1_TEB_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x80000)|value<<19)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_OP1_TEB_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x80000) >> 19
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_OP0_TEB_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x40000)|value<<18)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_OP0_TEB_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x40000) >> 18
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_OP2_TEA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x20000)|value<<17)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_OP2_TEA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x20000) >> 17
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_OP1_TEA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x10000)|value<<16)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_OP1_TEA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x10000) >> 16
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_OP0_TEA_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x8000)|value<<15)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_OP0_TEA_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x8000) >> 15
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FAULT2_CLR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x4000)|value<<14)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FAULT2_CLR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x4000) >> 14
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FAULT1_CLR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x2000)|value<<13)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FAULT1_CLR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x2000) >> 13
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FAULT0_CLR_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x1000)|value<<12)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FAULT0_CLR_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x1000) >> 12
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FAULT2_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x800)|value<<11)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FAULT2_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x800) >> 11
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FAULT1_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x400)|value<<10)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FAULT1_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x400) >> 10
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_FAULT0_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x200)|value<<9)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_FAULT0_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x200) >> 9
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER2_TEP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x100)|value<<8)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER2_TEP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x100) >> 8
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER1_TEP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x80)|value<<7)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER1_TEP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x80) >> 7
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER0_TEP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x40)|value<<6)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER0_TEP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x40) >> 6
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER2_TEZ_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x20)|value<<5)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER2_TEZ_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x20) >> 5
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER1_TEZ_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x10)|value<<4)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER1_TEZ_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x10) >> 4
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER0_TEZ_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x8)|value<<3)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER0_TEZ_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x8) >> 3
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER2_STOP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x4)|value<<2)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER2_STOP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x4) >> 2
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER1_STOP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x2)|value<<1)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER1_STOP_INT_CLR() uint32 {
	return (volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x2) >> 1
}
func (o *MCPWM_Type) SetMCMCPWM_INT_CLR_MCPWM_TIMER0_STOP_INT_CLR(value uint32) {
	volatile.StoreUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg, volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetMCMCPWM_INT_CLR_MCPWM_TIMER0_STOP_INT_CLR() uint32 {
	return volatile.LoadUint32(&o.MCMCPWM_INT_CLR_MCPWM.Reg) & 0x1
}

// MCPWM.CLK: MCPWM_CLK
func (o *MCPWM_Type) SetCLK_CLK_EN(value uint32) {
	volatile.StoreUint32(&o.CLK.Reg, volatile.LoadUint32(&o.CLK.Reg)&^(0x1)|value)
}
func (o *MCPWM_Type) GetCLK_CLK_EN() uint32 {
	return volatile.LoadUint32(&o.CLK.Reg) & 0x1
}

// MCPWM.VERSION: MCPWM_VERSION
func (o *MCPWM_Type) SetVERSION_DATE(value uint32) {
	volatile.StoreUint32(&o.VERSION.Reg, volatile.LoadUint32(&o.VERSION.Reg)&^(0xfffffff)|value)
}
func (o *MCPWM_Type) GetVERSION_DATE() uint32 {
	return volatile.LoadUint32(&o.VERSION.Reg) & 0xfffffff
}

type I2S1_Type struct {
}

type XTENSA_INTERNAL_Type struct {
}

type XTENSA_Type struct {
}

type WIFI_MAC_Type struct {
}

type WIFI_BB_Type struct {
}

type BT_MAC_Type struct {
}

type BT_BB_Type struct {
}

type RW_BT_Type struct {
}

type RW_BLE_Type struct {
}

type ETH_MAC_Type struct {
}

type SDIO_Type struct {
}

type ETH_Type struct {
}

type WDT_Type struct {
}

// Constants for AES
const (
	// START: AES Start
	// Position of START field.
	AES_START_START_Pos = 0x0
	// Bit mask of START field.
	AES_START_START_Msk = 0x1
	// Bit START.
	AES_START_START = 0x1

	// IDLE: AES Idle
	// Position of IDLE field.
	AES_IDLE_IDLE_Pos = 0x0
	// Bit mask of IDLE field.
	AES_IDLE_IDLE_Msk = 0x1
	// Bit IDLE.
	AES_IDLE_IDLE = 0x1

	// MODE: AES Mode
	// Position of MODE field.
	AES_MODE_MODE_Pos = 0x0
	// Bit mask of MODE field.
	AES_MODE_MODE_Msk = 0x7
	// AES-128 Encryption
	AES_MODE_MODE_AES128_ENCRYPT = 0x0
	// AES-192 Encryption
	AES_MODE_MODE_AES192_ENCRYPT = 0x1
	// AES-256 Encryption
	AES_MODE_MODE_AES256_ENCRYPT = 0x2
	// AES-128 Decryption
	AES_MODE_MODE_AES128_DECRYPT = 0x4
	// AES-192 Decryption
	AES_MODE_MODE_AES192_DECRYPT = 0x5
	// AES-256 Decryption
	AES_MODE_MODE_AES256_DECRYPT = 0x6

	// ENDIAN: AES Endian selection
	// Position of MODE field.
	AES_ENDIAN_MODE_Pos = 0x0
	// Bit mask of MODE field.
	AES_ENDIAN_MODE_Msk = 0x3f
)

// Constants for HINF
const (
	// CFG_DATA0: HINF_CFG_DATA0
	// Position of DEVICE_ID_FN1 field.
	HINF_CFG_DATA0_DEVICE_ID_FN1_Pos = 0x10
	// Bit mask of DEVICE_ID_FN1 field.
	HINF_CFG_DATA0_DEVICE_ID_FN1_Msk = 0xffff0000
	// Position of USER_ID_FN1 field.
	HINF_CFG_DATA0_USER_ID_FN1_Pos = 0x0
	// Bit mask of USER_ID_FN1 field.
	HINF_CFG_DATA0_USER_ID_FN1_Msk = 0xffff

	// CFG_DATA1: HINF_CFG_DATA1
	// Position of SDIO20_CONF1 field.
	HINF_CFG_DATA1_SDIO20_CONF1_Pos = 0x1d
	// Bit mask of SDIO20_CONF1 field.
	HINF_CFG_DATA1_SDIO20_CONF1_Msk = 0xe0000000
	// Position of FUNC2_EPS field.
	HINF_CFG_DATA1_FUNC2_EPS_Pos = 0x1c
	// Bit mask of FUNC2_EPS field.
	HINF_CFG_DATA1_FUNC2_EPS_Msk = 0x10000000
	// Bit FUNC2_EPS.
	HINF_CFG_DATA1_FUNC2_EPS = 0x10000000
	// Position of SDIO_VER field.
	HINF_CFG_DATA1_SDIO_VER_Pos = 0x10
	// Bit mask of SDIO_VER field.
	HINF_CFG_DATA1_SDIO_VER_Msk = 0xfff0000
	// Position of SDIO20_CONF0 field.
	HINF_CFG_DATA1_SDIO20_CONF0_Pos = 0xc
	// Bit mask of SDIO20_CONF0 field.
	HINF_CFG_DATA1_SDIO20_CONF0_Msk = 0xf000
	// Position of IOENABLE1 field.
	HINF_CFG_DATA1_IOENABLE1_Pos = 0xb
	// Bit mask of IOENABLE1 field.
	HINF_CFG_DATA1_IOENABLE1_Msk = 0x800
	// Bit IOENABLE1.
	HINF_CFG_DATA1_IOENABLE1 = 0x800
	// Position of EMP field.
	HINF_CFG_DATA1_EMP_Pos = 0xa
	// Bit mask of EMP field.
	HINF_CFG_DATA1_EMP_Msk = 0x400
	// Bit EMP.
	HINF_CFG_DATA1_EMP = 0x400
	// Position of FUNC1_EPS field.
	HINF_CFG_DATA1_FUNC1_EPS_Pos = 0x9
	// Bit mask of FUNC1_EPS field.
	HINF_CFG_DATA1_FUNC1_EPS_Msk = 0x200
	// Bit FUNC1_EPS.
	HINF_CFG_DATA1_FUNC1_EPS = 0x200
	// Position of CD_DISABLE field.
	HINF_CFG_DATA1_CD_DISABLE_Pos = 0x8
	// Bit mask of CD_DISABLE field.
	HINF_CFG_DATA1_CD_DISABLE_Msk = 0x100
	// Bit CD_DISABLE.
	HINF_CFG_DATA1_CD_DISABLE = 0x100
	// Position of IOENABLE2 field.
	HINF_CFG_DATA1_IOENABLE2_Pos = 0x7
	// Bit mask of IOENABLE2 field.
	HINF_CFG_DATA1_IOENABLE2_Msk = 0x80
	// Bit IOENABLE2.
	HINF_CFG_DATA1_IOENABLE2 = 0x80
	// Position of SDIO_INT_MASK field.
	HINF_CFG_DATA1_SDIO_INT_MASK_Pos = 0x6
	// Bit mask of SDIO_INT_MASK field.
	HINF_CFG_DATA1_SDIO_INT_MASK_Msk = 0x40
	// Bit SDIO_INT_MASK.
	HINF_CFG_DATA1_SDIO_INT_MASK = 0x40
	// Position of SDIO_IOREADY2 field.
	HINF_CFG_DATA1_SDIO_IOREADY2_Pos = 0x5
	// Bit mask of SDIO_IOREADY2 field.
	HINF_CFG_DATA1_SDIO_IOREADY2_Msk = 0x20
	// Bit SDIO_IOREADY2.
	HINF_CFG_DATA1_SDIO_IOREADY2 = 0x20
	// Position of SDIO_CD_ENABLE field.
	HINF_CFG_DATA1_SDIO_CD_ENABLE_Pos = 0x4
	// Bit mask of SDIO_CD_ENABLE field.
	HINF_CFG_DATA1_SDIO_CD_ENABLE_Msk = 0x10
	// Bit SDIO_CD_ENABLE.
	HINF_CFG_DATA1_SDIO_CD_ENABLE = 0x10
	// Position of HIGHSPEED_MODE field.
	HINF_CFG_DATA1_HIGHSPEED_MODE_Pos = 0x3
	// Bit mask of HIGHSPEED_MODE field.
	HINF_CFG_DATA1_HIGHSPEED_MODE_Msk = 0x8
	// Bit HIGHSPEED_MODE.
	HINF_CFG_DATA1_HIGHSPEED_MODE = 0x8
	// Position of HIGHSPEED_ENABLE field.
	HINF_CFG_DATA1_HIGHSPEED_ENABLE_Pos = 0x2
	// Bit mask of HIGHSPEED_ENABLE field.
	HINF_CFG_DATA1_HIGHSPEED_ENABLE_Msk = 0x4
	// Bit HIGHSPEED_ENABLE.
	HINF_CFG_DATA1_HIGHSPEED_ENABLE = 0x4
	// Position of SDIO_IOREADY1 field.
	HINF_CFG_DATA1_SDIO_IOREADY1_Pos = 0x1
	// Bit mask of SDIO_IOREADY1 field.
	HINF_CFG_DATA1_SDIO_IOREADY1_Msk = 0x2
	// Bit SDIO_IOREADY1.
	HINF_CFG_DATA1_SDIO_IOREADY1 = 0x2
	// Position of SDIO_ENABLE field.
	HINF_CFG_DATA1_SDIO_ENABLE_Pos = 0x0
	// Bit mask of SDIO_ENABLE field.
	HINF_CFG_DATA1_SDIO_ENABLE_Msk = 0x1
	// Bit SDIO_ENABLE.
	HINF_CFG_DATA1_SDIO_ENABLE = 0x1

	// CFG_DATA7: HINF_CFG_DATA7
	// Position of SDIO_IOREADY0 field.
	HINF_CFG_DATA7_SDIO_IOREADY0_Pos = 0x11
	// Bit mask of SDIO_IOREADY0 field.
	HINF_CFG_DATA7_SDIO_IOREADY0_Msk = 0x20000
	// Bit SDIO_IOREADY0.
	HINF_CFG_DATA7_SDIO_IOREADY0 = 0x20000
	// Position of SDIO_RST field.
	HINF_CFG_DATA7_SDIO_RST_Pos = 0x10
	// Bit mask of SDIO_RST field.
	HINF_CFG_DATA7_SDIO_RST_Msk = 0x10000
	// Bit SDIO_RST.
	HINF_CFG_DATA7_SDIO_RST = 0x10000
	// Position of CHIP_STATE field.
	HINF_CFG_DATA7_CHIP_STATE_Pos = 0x8
	// Bit mask of CHIP_STATE field.
	HINF_CFG_DATA7_CHIP_STATE_Msk = 0xff00
	// Position of PIN_STATE field.
	HINF_CFG_DATA7_PIN_STATE_Pos = 0x0
	// Bit mask of PIN_STATE field.
	HINF_CFG_DATA7_PIN_STATE_Msk = 0xff

	// CIS_CONF0: HINF_CIS_CONF0
	// Position of CIS_CONF_W0 field.
	HINF_CIS_CONF0_CIS_CONF_W0_Pos = 0x0
	// Bit mask of CIS_CONF_W0 field.
	HINF_CIS_CONF0_CIS_CONF_W0_Msk = 0xffffffff

	// CIS_CONF1: HINF_CIS_CONF1
	// Position of CIS_CONF_W1 field.
	HINF_CIS_CONF1_CIS_CONF_W1_Pos = 0x0
	// Bit mask of CIS_CONF_W1 field.
	HINF_CIS_CONF1_CIS_CONF_W1_Msk = 0xffffffff

	// CIS_CONF2: HINF_CIS_CONF2
	// Position of CIS_CONF_W2 field.
	HINF_CIS_CONF2_CIS_CONF_W2_Pos = 0x0
	// Bit mask of CIS_CONF_W2 field.
	HINF_CIS_CONF2_CIS_CONF_W2_Msk = 0xffffffff

	// CIS_CONF3: HINF_CIS_CONF3
	// Position of CIS_CONF_W3 field.
	HINF_CIS_CONF3_CIS_CONF_W3_Pos = 0x0
	// Bit mask of CIS_CONF_W3 field.
	HINF_CIS_CONF3_CIS_CONF_W3_Msk = 0xffffffff

	// CIS_CONF4: HINF_CIS_CONF4
	// Position of CIS_CONF_W4 field.
	HINF_CIS_CONF4_CIS_CONF_W4_Pos = 0x0
	// Bit mask of CIS_CONF_W4 field.
	HINF_CIS_CONF4_CIS_CONF_W4_Msk = 0xffffffff

	// CIS_CONF5: HINF_CIS_CONF5
	// Position of CIS_CONF_W5 field.
	HINF_CIS_CONF5_CIS_CONF_W5_Pos = 0x0
	// Bit mask of CIS_CONF_W5 field.
	HINF_CIS_CONF5_CIS_CONF_W5_Msk = 0xffffffff

	// CIS_CONF6: HINF_CIS_CONF6
	// Position of CIS_CONF_W6 field.
	HINF_CIS_CONF6_CIS_CONF_W6_Pos = 0x0
	// Bit mask of CIS_CONF_W6 field.
	HINF_CIS_CONF6_CIS_CONF_W6_Msk = 0xffffffff

	// CIS_CONF7: HINF_CIS_CONF7
	// Position of CIS_CONF_W7 field.
	HINF_CIS_CONF7_CIS_CONF_W7_Pos = 0x0
	// Bit mask of CIS_CONF_W7 field.
	HINF_CIS_CONF7_CIS_CONF_W7_Msk = 0xffffffff

	// CFG_DATA16: HINF_CFG_DATA16
	// Position of DEVICE_ID_FN2 field.
	HINF_CFG_DATA16_DEVICE_ID_FN2_Pos = 0x10
	// Bit mask of DEVICE_ID_FN2 field.
	HINF_CFG_DATA16_DEVICE_ID_FN2_Msk = 0xffff0000
	// Position of USER_ID_FN2 field.
	HINF_CFG_DATA16_USER_ID_FN2_Pos = 0x0
	// Bit mask of USER_ID_FN2 field.
	HINF_CFG_DATA16_USER_ID_FN2_Msk = 0xffff

	// DATE: HINF_DATE
	// Position of SDIO_DATE field.
	HINF_DATE_SDIO_DATE_Pos = 0x0
	// Bit mask of SDIO_DATE field.
	HINF_DATE_SDIO_DATE_Msk = 0xffffffff
)

// Constants for SPI
const (
	// CMD: SPI_CMD
	// Position of FLASH_READ field.
	SPI_CMD_FLASH_READ_Pos = 0x1f
	// Bit mask of FLASH_READ field.
	SPI_CMD_FLASH_READ_Msk = 0x80000000
	// Bit FLASH_READ.
	SPI_CMD_FLASH_READ = 0x80000000
	// Position of FLASH_WREN field.
	SPI_CMD_FLASH_WREN_Pos = 0x1e
	// Bit mask of FLASH_WREN field.
	SPI_CMD_FLASH_WREN_Msk = 0x40000000
	// Bit FLASH_WREN.
	SPI_CMD_FLASH_WREN = 0x40000000
	// Position of FLASH_WRDI field.
	SPI_CMD_FLASH_WRDI_Pos = 0x1d
	// Bit mask of FLASH_WRDI field.
	SPI_CMD_FLASH_WRDI_Msk = 0x20000000
	// Bit FLASH_WRDI.
	SPI_CMD_FLASH_WRDI = 0x20000000
	// Position of FLASH_RDID field.
	SPI_CMD_FLASH_RDID_Pos = 0x1c
	// Bit mask of FLASH_RDID field.
	SPI_CMD_FLASH_RDID_Msk = 0x10000000
	// Bit FLASH_RDID.
	SPI_CMD_FLASH_RDID = 0x10000000
	// Position of FLASH_RDSR field.
	SPI_CMD_FLASH_RDSR_Pos = 0x1b
	// Bit mask of FLASH_RDSR field.
	SPI_CMD_FLASH_RDSR_Msk = 0x8000000
	// Bit FLASH_RDSR.
	SPI_CMD_FLASH_RDSR = 0x8000000
	// Position of FLASH_WRSR field.
	SPI_CMD_FLASH_WRSR_Pos = 0x1a
	// Bit mask of FLASH_WRSR field.
	SPI_CMD_FLASH_WRSR_Msk = 0x4000000
	// Bit FLASH_WRSR.
	SPI_CMD_FLASH_WRSR = 0x4000000
	// Position of FLASH_PP field.
	SPI_CMD_FLASH_PP_Pos = 0x19
	// Bit mask of FLASH_PP field.
	SPI_CMD_FLASH_PP_Msk = 0x2000000
	// Bit FLASH_PP.
	SPI_CMD_FLASH_PP = 0x2000000
	// Position of FLASH_SE field.
	SPI_CMD_FLASH_SE_Pos = 0x18
	// Bit mask of FLASH_SE field.
	SPI_CMD_FLASH_SE_Msk = 0x1000000
	// Bit FLASH_SE.
	SPI_CMD_FLASH_SE = 0x1000000
	// Position of FLASH_BE field.
	SPI_CMD_FLASH_BE_Pos = 0x17
	// Bit mask of FLASH_BE field.
	SPI_CMD_FLASH_BE_Msk = 0x800000
	// Bit FLASH_BE.
	SPI_CMD_FLASH_BE = 0x800000
	// Position of FLASH_CE field.
	SPI_CMD_FLASH_CE_Pos = 0x16
	// Bit mask of FLASH_CE field.
	SPI_CMD_FLASH_CE_Msk = 0x400000
	// Bit FLASH_CE.
	SPI_CMD_FLASH_CE = 0x400000
	// Position of FLASH_DP field.
	SPI_CMD_FLASH_DP_Pos = 0x15
	// Bit mask of FLASH_DP field.
	SPI_CMD_FLASH_DP_Msk = 0x200000
	// Bit FLASH_DP.
	SPI_CMD_FLASH_DP = 0x200000
	// Position of FLASH_RES field.
	SPI_CMD_FLASH_RES_Pos = 0x14
	// Bit mask of FLASH_RES field.
	SPI_CMD_FLASH_RES_Msk = 0x100000
	// Bit FLASH_RES.
	SPI_CMD_FLASH_RES = 0x100000
	// Position of FLASH_HPM field.
	SPI_CMD_FLASH_HPM_Pos = 0x13
	// Bit mask of FLASH_HPM field.
	SPI_CMD_FLASH_HPM_Msk = 0x80000
	// Bit FLASH_HPM.
	SPI_CMD_FLASH_HPM = 0x80000
	// Position of USR field.
	SPI_CMD_USR_Pos = 0x12
	// Bit mask of USR field.
	SPI_CMD_USR_Msk = 0x40000
	// Bit USR.
	SPI_CMD_USR = 0x40000
	// Position of FLASH_PES field.
	SPI_CMD_FLASH_PES_Pos = 0x11
	// Bit mask of FLASH_PES field.
	SPI_CMD_FLASH_PES_Msk = 0x20000
	// Bit FLASH_PES.
	SPI_CMD_FLASH_PES = 0x20000
	// Position of FLASH_PER field.
	SPI_CMD_FLASH_PER_Pos = 0x10
	// Bit mask of FLASH_PER field.
	SPI_CMD_FLASH_PER_Msk = 0x10000
	// Bit FLASH_PER.
	SPI_CMD_FLASH_PER = 0x10000

	// CTRL: SPI_CTRL
	// Position of WR_BIT_ORDER field.
	SPI_CTRL_WR_BIT_ORDER_Pos = 0x1a
	// Bit mask of WR_BIT_ORDER field.
	SPI_CTRL_WR_BIT_ORDER_Msk = 0x4000000
	// Bit WR_BIT_ORDER.
	SPI_CTRL_WR_BIT_ORDER = 0x4000000
	// Position of RD_BIT_ORDER field.
	SPI_CTRL_RD_BIT_ORDER_Pos = 0x19
	// Bit mask of RD_BIT_ORDER field.
	SPI_CTRL_RD_BIT_ORDER_Msk = 0x2000000
	// Bit RD_BIT_ORDER.
	SPI_CTRL_RD_BIT_ORDER = 0x2000000
	// Position of FREAD_QIO field.
	SPI_CTRL_FREAD_QIO_Pos = 0x18
	// Bit mask of FREAD_QIO field.
	SPI_CTRL_FREAD_QIO_Msk = 0x1000000
	// Bit FREAD_QIO.
	SPI_CTRL_FREAD_QIO = 0x1000000
	// Position of FREAD_DIO field.
	SPI_CTRL_FREAD_DIO_Pos = 0x17
	// Bit mask of FREAD_DIO field.
	SPI_CTRL_FREAD_DIO_Msk = 0x800000
	// Bit FREAD_DIO.
	SPI_CTRL_FREAD_DIO = 0x800000
	// Position of WRSR_2B field.
	SPI_CTRL_WRSR_2B_Pos = 0x16
	// Bit mask of WRSR_2B field.
	SPI_CTRL_WRSR_2B_Msk = 0x400000
	// Bit WRSR_2B.
	SPI_CTRL_WRSR_2B = 0x400000
	// Position of WP_REG field.
	SPI_CTRL_WP_REG_Pos = 0x15
	// Bit mask of WP_REG field.
	SPI_CTRL_WP_REG_Msk = 0x200000
	// Bit WP_REG.
	SPI_CTRL_WP_REG = 0x200000
	// Position of FREAD_QUAD field.
	SPI_CTRL_FREAD_QUAD_Pos = 0x14
	// Bit mask of FREAD_QUAD field.
	SPI_CTRL_FREAD_QUAD_Msk = 0x100000
	// Bit FREAD_QUAD.
	SPI_CTRL_FREAD_QUAD = 0x100000
	// Position of RESANDRES field.
	SPI_CTRL_RESANDRES_Pos = 0xf
	// Bit mask of RESANDRES field.
	SPI_CTRL_RESANDRES_Msk = 0x8000
	// Bit RESANDRES.
	SPI_CTRL_RESANDRES = 0x8000
	// Position of FREAD_DUAL field.
	SPI_CTRL_FREAD_DUAL_Pos = 0xe
	// Bit mask of FREAD_DUAL field.
	SPI_CTRL_FREAD_DUAL_Msk = 0x4000
	// Bit FREAD_DUAL.
	SPI_CTRL_FREAD_DUAL = 0x4000
	// Position of FASTRD_MODE field.
	SPI_CTRL_FASTRD_MODE_Pos = 0xd
	// Bit mask of FASTRD_MODE field.
	SPI_CTRL_FASTRD_MODE_Msk = 0x2000
	// Bit FASTRD_MODE.
	SPI_CTRL_FASTRD_MODE = 0x2000
	// Position of WAIT_FLASH_IDLE_EN field.
	SPI_CTRL_WAIT_FLASH_IDLE_EN_Pos = 0xc
	// Bit mask of WAIT_FLASH_IDLE_EN field.
	SPI_CTRL_WAIT_FLASH_IDLE_EN_Msk = 0x1000
	// Bit WAIT_FLASH_IDLE_EN.
	SPI_CTRL_WAIT_FLASH_IDLE_EN = 0x1000
	// Position of TX_CRC_EN field.
	SPI_CTRL_TX_CRC_EN_Pos = 0xb
	// Bit mask of TX_CRC_EN field.
	SPI_CTRL_TX_CRC_EN_Msk = 0x800
	// Bit TX_CRC_EN.
	SPI_CTRL_TX_CRC_EN = 0x800
	// Position of FCS_CRC_EN field.
	SPI_CTRL_FCS_CRC_EN_Pos = 0xa
	// Bit mask of FCS_CRC_EN field.
	SPI_CTRL_FCS_CRC_EN_Msk = 0x400
	// Bit FCS_CRC_EN.
	SPI_CTRL_FCS_CRC_EN = 0x400

	// CTRL1: SPI_CTRL1
	// Position of CS_HOLD_DELAY field.
	SPI_CTRL1_CS_HOLD_DELAY_Pos = 0x1c
	// Bit mask of CS_HOLD_DELAY field.
	SPI_CTRL1_CS_HOLD_DELAY_Msk = 0xf0000000
	// Position of CS_HOLD_DELAY_RES field.
	SPI_CTRL1_CS_HOLD_DELAY_RES_Pos = 0x10
	// Bit mask of CS_HOLD_DELAY_RES field.
	SPI_CTRL1_CS_HOLD_DELAY_RES_Msk = 0xfff0000

	// RD_STATUS: SPI_RD_STATUS
	// Position of STATUS_EXT field.
	SPI_RD_STATUS_STATUS_EXT_Pos = 0x18
	// Bit mask of STATUS_EXT field.
	SPI_RD_STATUS_STATUS_EXT_Msk = 0xff000000
	// Position of WB_MODE field.
	SPI_RD_STATUS_WB_MODE_Pos = 0x10
	// Bit mask of WB_MODE field.
	SPI_RD_STATUS_WB_MODE_Msk = 0xff0000
	// Position of STATUS field.
	SPI_RD_STATUS_STATUS_Pos = 0x0
	// Bit mask of STATUS field.
	SPI_RD_STATUS_STATUS_Msk = 0xffff

	// CTRL2: SPI_CTRL2
	// Position of CS_DELAY_NUM field.
	SPI_CTRL2_CS_DELAY_NUM_Pos = 0x1c
	// Bit mask of CS_DELAY_NUM field.
	SPI_CTRL2_CS_DELAY_NUM_Msk = 0xf0000000
	// Position of CS_DELAY_MODE field.
	SPI_CTRL2_CS_DELAY_MODE_Pos = 0x1a
	// Bit mask of CS_DELAY_MODE field.
	SPI_CTRL2_CS_DELAY_MODE_Msk = 0xc000000
	// Position of MOSI_DELAY_NUM field.
	SPI_CTRL2_MOSI_DELAY_NUM_Pos = 0x17
	// Bit mask of MOSI_DELAY_NUM field.
	SPI_CTRL2_MOSI_DELAY_NUM_Msk = 0x3800000
	// Position of MOSI_DELAY_MODE field.
	SPI_CTRL2_MOSI_DELAY_MODE_Pos = 0x15
	// Bit mask of MOSI_DELAY_MODE field.
	SPI_CTRL2_MOSI_DELAY_MODE_Msk = 0x600000
	// Position of MISO_DELAY_NUM field.
	SPI_CTRL2_MISO_DELAY_NUM_Pos = 0x12
	// Bit mask of MISO_DELAY_NUM field.
	SPI_CTRL2_MISO_DELAY_NUM_Msk = 0x1c0000
	// Position of MISO_DELAY_MODE field.
	SPI_CTRL2_MISO_DELAY_MODE_Pos = 0x10
	// Bit mask of MISO_DELAY_MODE field.
	SPI_CTRL2_MISO_DELAY_MODE_Msk = 0x30000
	// Position of CK_OUT_HIGH_MODE field.
	SPI_CTRL2_CK_OUT_HIGH_MODE_Pos = 0xc
	// Bit mask of CK_OUT_HIGH_MODE field.
	SPI_CTRL2_CK_OUT_HIGH_MODE_Msk = 0xf000
	// Position of CK_OUT_LOW_MODE field.
	SPI_CTRL2_CK_OUT_LOW_MODE_Pos = 0x8
	// Bit mask of CK_OUT_LOW_MODE field.
	SPI_CTRL2_CK_OUT_LOW_MODE_Msk = 0xf00
	// Position of HOLD_TIME field.
	SPI_CTRL2_HOLD_TIME_Pos = 0x4
	// Bit mask of HOLD_TIME field.
	SPI_CTRL2_HOLD_TIME_Msk = 0xf0
	// Position of SETUP_TIME field.
	SPI_CTRL2_SETUP_TIME_Pos = 0x0
	// Bit mask of SETUP_TIME field.
	SPI_CTRL2_SETUP_TIME_Msk = 0xf

	// CLOCK: SPI_CLOCK
	// Position of CLK_EQU_SYSCLK field.
	SPI_CLOCK_CLK_EQU_SYSCLK_Pos = 0x1f
	// Bit mask of CLK_EQU_SYSCLK field.
	SPI_CLOCK_CLK_EQU_SYSCLK_Msk = 0x80000000
	// Bit CLK_EQU_SYSCLK.
	SPI_CLOCK_CLK_EQU_SYSCLK = 0x80000000
	// Position of CLKDIV_PRE field.
	SPI_CLOCK_CLKDIV_PRE_Pos = 0x12
	// Bit mask of CLKDIV_PRE field.
	SPI_CLOCK_CLKDIV_PRE_Msk = 0x7ffc0000
	// Position of CLKCNT_N field.
	SPI_CLOCK_CLKCNT_N_Pos = 0xc
	// Bit mask of CLKCNT_N field.
	SPI_CLOCK_CLKCNT_N_Msk = 0x3f000
	// Position of CLKCNT_H field.
	SPI_CLOCK_CLKCNT_H_Pos = 0x6
	// Bit mask of CLKCNT_H field.
	SPI_CLOCK_CLKCNT_H_Msk = 0xfc0
	// Position of CLKCNT_L field.
	SPI_CLOCK_CLKCNT_L_Pos = 0x0
	// Bit mask of CLKCNT_L field.
	SPI_CLOCK_CLKCNT_L_Msk = 0x3f

	// USER: SPI_USER
	// Position of USR_COMMAND field.
	SPI_USER_USR_COMMAND_Pos = 0x1f
	// Bit mask of USR_COMMAND field.
	SPI_USER_USR_COMMAND_Msk = 0x80000000
	// Bit USR_COMMAND.
	SPI_USER_USR_COMMAND = 0x80000000
	// Position of USR_ADDR field.
	SPI_USER_USR_ADDR_Pos = 0x1e
	// Bit mask of USR_ADDR field.
	SPI_USER_USR_ADDR_Msk = 0x40000000
	// Bit USR_ADDR.
	SPI_USER_USR_ADDR = 0x40000000
	// Position of USR_DUMMY field.
	SPI_USER_USR_DUMMY_Pos = 0x1d
	// Bit mask of USR_DUMMY field.
	SPI_USER_USR_DUMMY_Msk = 0x20000000
	// Bit USR_DUMMY.
	SPI_USER_USR_DUMMY = 0x20000000
	// Position of USR_MISO field.
	SPI_USER_USR_MISO_Pos = 0x1c
	// Bit mask of USR_MISO field.
	SPI_USER_USR_MISO_Msk = 0x10000000
	// Bit USR_MISO.
	SPI_USER_USR_MISO = 0x10000000
	// Position of USR_MOSI field.
	SPI_USER_USR_MOSI_Pos = 0x1b
	// Bit mask of USR_MOSI field.
	SPI_USER_USR_MOSI_Msk = 0x8000000
	// Bit USR_MOSI.
	SPI_USER_USR_MOSI = 0x8000000
	// Position of USR_DUMMY_IDLE field.
	SPI_USER_USR_DUMMY_IDLE_Pos = 0x1a
	// Bit mask of USR_DUMMY_IDLE field.
	SPI_USER_USR_DUMMY_IDLE_Msk = 0x4000000
	// Bit USR_DUMMY_IDLE.
	SPI_USER_USR_DUMMY_IDLE = 0x4000000
	// Position of USR_MOSI_HIGHPART field.
	SPI_USER_USR_MOSI_HIGHPART_Pos = 0x19
	// Bit mask of USR_MOSI_HIGHPART field.
	SPI_USER_USR_MOSI_HIGHPART_Msk = 0x2000000
	// Bit USR_MOSI_HIGHPART.
	SPI_USER_USR_MOSI_HIGHPART = 0x2000000
	// Position of USR_MISO_HIGHPART field.
	SPI_USER_USR_MISO_HIGHPART_Pos = 0x18
	// Bit mask of USR_MISO_HIGHPART field.
	SPI_USER_USR_MISO_HIGHPART_Msk = 0x1000000
	// Bit USR_MISO_HIGHPART.
	SPI_USER_USR_MISO_HIGHPART = 0x1000000
	// Position of USR_PREP_HOLD field.
	SPI_USER_USR_PREP_HOLD_Pos = 0x17
	// Bit mask of USR_PREP_HOLD field.
	SPI_USER_USR_PREP_HOLD_Msk = 0x800000
	// Bit USR_PREP_HOLD.
	SPI_USER_USR_PREP_HOLD = 0x800000
	// Position of USR_CMD_HOLD field.
	SPI_USER_USR_CMD_HOLD_Pos = 0x16
	// Bit mask of USR_CMD_HOLD field.
	SPI_USER_USR_CMD_HOLD_Msk = 0x400000
	// Bit USR_CMD_HOLD.
	SPI_USER_USR_CMD_HOLD = 0x400000
	// Position of USR_ADDR_HOLD field.
	SPI_USER_USR_ADDR_HOLD_Pos = 0x15
	// Bit mask of USR_ADDR_HOLD field.
	SPI_USER_USR_ADDR_HOLD_Msk = 0x200000
	// Bit USR_ADDR_HOLD.
	SPI_USER_USR_ADDR_HOLD = 0x200000
	// Position of USR_DUMMY_HOLD field.
	SPI_USER_USR_DUMMY_HOLD_Pos = 0x14
	// Bit mask of USR_DUMMY_HOLD field.
	SPI_USER_USR_DUMMY_HOLD_Msk = 0x100000
	// Bit USR_DUMMY_HOLD.
	SPI_USER_USR_DUMMY_HOLD = 0x100000
	// Position of USR_DIN_HOLD field.
	SPI_USER_USR_DIN_HOLD_Pos = 0x13
	// Bit mask of USR_DIN_HOLD field.
	SPI_USER_USR_DIN_HOLD_Msk = 0x80000
	// Bit USR_DIN_HOLD.
	SPI_USER_USR_DIN_HOLD = 0x80000
	// Position of USR_DOUT_HOLD field.
	SPI_USER_USR_DOUT_HOLD_Pos = 0x12
	// Bit mask of USR_DOUT_HOLD field.
	SPI_USER_USR_DOUT_HOLD_Msk = 0x40000
	// Bit USR_DOUT_HOLD.
	SPI_USER_USR_DOUT_HOLD = 0x40000
	// Position of USR_HOLD_POL field.
	SPI_USER_USR_HOLD_POL_Pos = 0x11
	// Bit mask of USR_HOLD_POL field.
	SPI_USER_USR_HOLD_POL_Msk = 0x20000
	// Bit USR_HOLD_POL.
	SPI_USER_USR_HOLD_POL = 0x20000
	// Position of SIO field.
	SPI_USER_SIO_Pos = 0x10
	// Bit mask of SIO field.
	SPI_USER_SIO_Msk = 0x10000
	// Bit SIO.
	SPI_USER_SIO = 0x10000
	// Position of FWRITE_QIO field.
	SPI_USER_FWRITE_QIO_Pos = 0xf
	// Bit mask of FWRITE_QIO field.
	SPI_USER_FWRITE_QIO_Msk = 0x8000
	// Bit FWRITE_QIO.
	SPI_USER_FWRITE_QIO = 0x8000
	// Position of FWRITE_DIO field.
	SPI_USER_FWRITE_DIO_Pos = 0xe
	// Bit mask of FWRITE_DIO field.
	SPI_USER_FWRITE_DIO_Msk = 0x4000
	// Bit FWRITE_DIO.
	SPI_USER_FWRITE_DIO = 0x4000
	// Position of FWRITE_QUAD field.
	SPI_USER_FWRITE_QUAD_Pos = 0xd
	// Bit mask of FWRITE_QUAD field.
	SPI_USER_FWRITE_QUAD_Msk = 0x2000
	// Bit FWRITE_QUAD.
	SPI_USER_FWRITE_QUAD = 0x2000
	// Position of FWRITE_DUAL field.
	SPI_USER_FWRITE_DUAL_Pos = 0xc
	// Bit mask of FWRITE_DUAL field.
	SPI_USER_FWRITE_DUAL_Msk = 0x1000
	// Bit FWRITE_DUAL.
	SPI_USER_FWRITE_DUAL = 0x1000
	// Position of WR_BYTE_ORDER field.
	SPI_USER_WR_BYTE_ORDER_Pos = 0xb
	// Bit mask of WR_BYTE_ORDER field.
	SPI_USER_WR_BYTE_ORDER_Msk = 0x800
	// Bit WR_BYTE_ORDER.
	SPI_USER_WR_BYTE_ORDER = 0x800
	// Position of RD_BYTE_ORDER field.
	SPI_USER_RD_BYTE_ORDER_Pos = 0xa
	// Bit mask of RD_BYTE_ORDER field.
	SPI_USER_RD_BYTE_ORDER_Msk = 0x400
	// Bit RD_BYTE_ORDER.
	SPI_USER_RD_BYTE_ORDER = 0x400
	// Position of CK_OUT_EDGE field.
	SPI_USER_CK_OUT_EDGE_Pos = 0x7
	// Bit mask of CK_OUT_EDGE field.
	SPI_USER_CK_OUT_EDGE_Msk = 0x80
	// Bit CK_OUT_EDGE.
	SPI_USER_CK_OUT_EDGE = 0x80
	// Position of CK_I_EDGE field.
	SPI_USER_CK_I_EDGE_Pos = 0x6
	// Bit mask of CK_I_EDGE field.
	SPI_USER_CK_I_EDGE_Msk = 0x40
	// Bit CK_I_EDGE.
	SPI_USER_CK_I_EDGE = 0x40
	// Position of CS_SETUP field.
	SPI_USER_CS_SETUP_Pos = 0x5
	// Bit mask of CS_SETUP field.
	SPI_USER_CS_SETUP_Msk = 0x20
	// Bit CS_SETUP.
	SPI_USER_CS_SETUP = 0x20
	// Position of CS_HOLD field.
	SPI_USER_CS_HOLD_Pos = 0x4
	// Bit mask of CS_HOLD field.
	SPI_USER_CS_HOLD_Msk = 0x10
	// Bit CS_HOLD.
	SPI_USER_CS_HOLD = 0x10
	// Position of DOUTDIN field.
	SPI_USER_DOUTDIN_Pos = 0x0
	// Bit mask of DOUTDIN field.
	SPI_USER_DOUTDIN_Msk = 0x1
	// Bit DOUTDIN.
	SPI_USER_DOUTDIN = 0x1

	// USER1: SPI_USER1
	// Position of USR_ADDR_BITLEN field.
	SPI_USER1_USR_ADDR_BITLEN_Pos = 0x1a
	// Bit mask of USR_ADDR_BITLEN field.
	SPI_USER1_USR_ADDR_BITLEN_Msk = 0xfc000000
	// Position of USR_DUMMY_CYCLELEN field.
	SPI_USER1_USR_DUMMY_CYCLELEN_Pos = 0x0
	// Bit mask of USR_DUMMY_CYCLELEN field.
	SPI_USER1_USR_DUMMY_CYCLELEN_Msk = 0xff

	// USER2: SPI_USER2
	// Position of USR_COMMAND_BITLEN field.
	SPI_USER2_USR_COMMAND_BITLEN_Pos = 0x1c
	// Bit mask of USR_COMMAND_BITLEN field.
	SPI_USER2_USR_COMMAND_BITLEN_Msk = 0xf0000000
	// Position of USR_COMMAND_VALUE field.
	SPI_USER2_USR_COMMAND_VALUE_Pos = 0x0
	// Bit mask of USR_COMMAND_VALUE field.
	SPI_USER2_USR_COMMAND_VALUE_Msk = 0xffff

	// MOSI_DLEN: SPI_MOSI_DLEN
	// Position of USR_MOSI_DBITLEN field.
	SPI_MOSI_DLEN_USR_MOSI_DBITLEN_Pos = 0x0
	// Bit mask of USR_MOSI_DBITLEN field.
	SPI_MOSI_DLEN_USR_MOSI_DBITLEN_Msk = 0xffffff

	// MISO_DLEN: SPI_MISO_DLEN
	// Position of USR_MISO_DBITLEN field.
	SPI_MISO_DLEN_USR_MISO_DBITLEN_Pos = 0x0
	// Bit mask of USR_MISO_DBITLEN field.
	SPI_MISO_DLEN_USR_MISO_DBITLEN_Msk = 0xffffff

	// SLV_WR_STATUS: SPI_SLV_WR_STATUS
	// Position of SLV_WR_ST field.
	SPI_SLV_WR_STATUS_SLV_WR_ST_Pos = 0x0
	// Bit mask of SLV_WR_ST field.
	SPI_SLV_WR_STATUS_SLV_WR_ST_Msk = 0xffffffff

	// PIN: SPI_PIN
	// Position of CS_KEEP_ACTIVE field.
	SPI_PIN_CS_KEEP_ACTIVE_Pos = 0x1e
	// Bit mask of CS_KEEP_ACTIVE field.
	SPI_PIN_CS_KEEP_ACTIVE_Msk = 0x40000000
	// Bit CS_KEEP_ACTIVE.
	SPI_PIN_CS_KEEP_ACTIVE = 0x40000000
	// Position of CK_IDLE_EDGE field.
	SPI_PIN_CK_IDLE_EDGE_Pos = 0x1d
	// Bit mask of CK_IDLE_EDGE field.
	SPI_PIN_CK_IDLE_EDGE_Msk = 0x20000000
	// Bit CK_IDLE_EDGE.
	SPI_PIN_CK_IDLE_EDGE = 0x20000000
	// Position of MASTER_CK_SEL field.
	SPI_PIN_MASTER_CK_SEL_Pos = 0xb
	// Bit mask of MASTER_CK_SEL field.
	SPI_PIN_MASTER_CK_SEL_Msk = 0x3800
	// Position of MASTER_CS_POL field.
	SPI_PIN_MASTER_CS_POL_Pos = 0x6
	// Bit mask of MASTER_CS_POL field.
	SPI_PIN_MASTER_CS_POL_Msk = 0x1c0
	// Position of CK_DIS field.
	SPI_PIN_CK_DIS_Pos = 0x5
	// Bit mask of CK_DIS field.
	SPI_PIN_CK_DIS_Msk = 0x20
	// Bit CK_DIS.
	SPI_PIN_CK_DIS = 0x20
	// Position of CS2_DIS field.
	SPI_PIN_CS2_DIS_Pos = 0x2
	// Bit mask of CS2_DIS field.
	SPI_PIN_CS2_DIS_Msk = 0x4
	// Bit CS2_DIS.
	SPI_PIN_CS2_DIS = 0x4
	// Position of CS1_DIS field.
	SPI_PIN_CS1_DIS_Pos = 0x1
	// Bit mask of CS1_DIS field.
	SPI_PIN_CS1_DIS_Msk = 0x2
	// Bit CS1_DIS.
	SPI_PIN_CS1_DIS = 0x2
	// Position of CS0_DIS field.
	SPI_PIN_CS0_DIS_Pos = 0x0
	// Bit mask of CS0_DIS field.
	SPI_PIN_CS0_DIS_Msk = 0x1
	// Bit CS0_DIS.
	SPI_PIN_CS0_DIS = 0x1

	// SLAVE: SPI_SLAVE
	// Position of SYNC_RESET field.
	SPI_SLAVE_SYNC_RESET_Pos = 0x1f
	// Bit mask of SYNC_RESET field.
	SPI_SLAVE_SYNC_RESET_Msk = 0x80000000
	// Bit SYNC_RESET.
	SPI_SLAVE_SYNC_RESET = 0x80000000
	// Position of SLAVE_MODE field.
	SPI_SLAVE_SLAVE_MODE_Pos = 0x1e
	// Bit mask of SLAVE_MODE field.
	SPI_SLAVE_SLAVE_MODE_Msk = 0x40000000
	// Bit SLAVE_MODE.
	SPI_SLAVE_SLAVE_MODE = 0x40000000
	// Position of SLV_WR_RD_BUF_EN field.
	SPI_SLAVE_SLV_WR_RD_BUF_EN_Pos = 0x1d
	// Bit mask of SLV_WR_RD_BUF_EN field.
	SPI_SLAVE_SLV_WR_RD_BUF_EN_Msk = 0x20000000
	// Bit SLV_WR_RD_BUF_EN.
	SPI_SLAVE_SLV_WR_RD_BUF_EN = 0x20000000
	// Position of SLV_WR_RD_STA_EN field.
	SPI_SLAVE_SLV_WR_RD_STA_EN_Pos = 0x1c
	// Bit mask of SLV_WR_RD_STA_EN field.
	SPI_SLAVE_SLV_WR_RD_STA_EN_Msk = 0x10000000
	// Bit SLV_WR_RD_STA_EN.
	SPI_SLAVE_SLV_WR_RD_STA_EN = 0x10000000
	// Position of SLV_CMD_DEFINE field.
	SPI_SLAVE_SLV_CMD_DEFINE_Pos = 0x1b
	// Bit mask of SLV_CMD_DEFINE field.
	SPI_SLAVE_SLV_CMD_DEFINE_Msk = 0x8000000
	// Bit SLV_CMD_DEFINE.
	SPI_SLAVE_SLV_CMD_DEFINE = 0x8000000
	// Position of TRANS_CNT field.
	SPI_SLAVE_TRANS_CNT_Pos = 0x17
	// Bit mask of TRANS_CNT field.
	SPI_SLAVE_TRANS_CNT_Msk = 0x7800000
	// Position of SLV_LAST_STATE field.
	SPI_SLAVE_SLV_LAST_STATE_Pos = 0x14
	// Bit mask of SLV_LAST_STATE field.
	SPI_SLAVE_SLV_LAST_STATE_Msk = 0x700000
	// Position of SLV_LAST_COMMAND field.
	SPI_SLAVE_SLV_LAST_COMMAND_Pos = 0x11
	// Bit mask of SLV_LAST_COMMAND field.
	SPI_SLAVE_SLV_LAST_COMMAND_Msk = 0xe0000
	// Position of CS_I_MODE field.
	SPI_SLAVE_CS_I_MODE_Pos = 0xa
	// Bit mask of CS_I_MODE field.
	SPI_SLAVE_CS_I_MODE_Msk = 0xc00
	// Position of INT_EN field.
	SPI_SLAVE_INT_EN_Pos = 0x5
	// Bit mask of INT_EN field.
	SPI_SLAVE_INT_EN_Msk = 0x3e0
	// Position of TRANS_DONE field.
	SPI_SLAVE_TRANS_DONE_Pos = 0x4
	// Bit mask of TRANS_DONE field.
	SPI_SLAVE_TRANS_DONE_Msk = 0x10
	// Bit TRANS_DONE.
	SPI_SLAVE_TRANS_DONE = 0x10
	// Position of SLV_WR_STA_DONE field.
	SPI_SLAVE_SLV_WR_STA_DONE_Pos = 0x3
	// Bit mask of SLV_WR_STA_DONE field.
	SPI_SLAVE_SLV_WR_STA_DONE_Msk = 0x8
	// Bit SLV_WR_STA_DONE.
	SPI_SLAVE_SLV_WR_STA_DONE = 0x8
	// Position of SLV_RD_STA_DONE field.
	SPI_SLAVE_SLV_RD_STA_DONE_Pos = 0x2
	// Bit mask of SLV_RD_STA_DONE field.
	SPI_SLAVE_SLV_RD_STA_DONE_Msk = 0x4
	// Bit SLV_RD_STA_DONE.
	SPI_SLAVE_SLV_RD_STA_DONE = 0x4
	// Position of SLV_WR_BUF_DONE field.
	SPI_SLAVE_SLV_WR_BUF_DONE_Pos = 0x1
	// Bit mask of SLV_WR_BUF_DONE field.
	SPI_SLAVE_SLV_WR_BUF_DONE_Msk = 0x2
	// Bit SLV_WR_BUF_DONE.
	SPI_SLAVE_SLV_WR_BUF_DONE = 0x2
	// Position of SLV_RD_BUF_DONE field.
	SPI_SLAVE_SLV_RD_BUF_DONE_Pos = 0x0
	// Bit mask of SLV_RD_BUF_DONE field.
	SPI_SLAVE_SLV_RD_BUF_DONE_Msk = 0x1
	// Bit SLV_RD_BUF_DONE.
	SPI_SLAVE_SLV_RD_BUF_DONE = 0x1

	// SLAVE1: SPI_SLAVE1
	// Position of SLV_STATUS_BITLEN field.
	SPI_SLAVE1_SLV_STATUS_BITLEN_Pos = 0x1b
	// Bit mask of SLV_STATUS_BITLEN field.
	SPI_SLAVE1_SLV_STATUS_BITLEN_Msk = 0xf8000000
	// Position of SLV_STATUS_FAST_EN field.
	SPI_SLAVE1_SLV_STATUS_FAST_EN_Pos = 0x1a
	// Bit mask of SLV_STATUS_FAST_EN field.
	SPI_SLAVE1_SLV_STATUS_FAST_EN_Msk = 0x4000000
	// Bit SLV_STATUS_FAST_EN.
	SPI_SLAVE1_SLV_STATUS_FAST_EN = 0x4000000
	// Position of SLV_STATUS_READBACK field.
	SPI_SLAVE1_SLV_STATUS_READBACK_Pos = 0x19
	// Bit mask of SLV_STATUS_READBACK field.
	SPI_SLAVE1_SLV_STATUS_READBACK_Msk = 0x2000000
	// Bit SLV_STATUS_READBACK.
	SPI_SLAVE1_SLV_STATUS_READBACK = 0x2000000
	// Position of SLV_RD_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_RD_ADDR_BITLEN_Pos = 0xa
	// Bit mask of SLV_RD_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_RD_ADDR_BITLEN_Msk = 0xfc00
	// Position of SLV_WR_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_WR_ADDR_BITLEN_Pos = 0x4
	// Bit mask of SLV_WR_ADDR_BITLEN field.
	SPI_SLAVE1_SLV_WR_ADDR_BITLEN_Msk = 0x3f0
	// Position of SLV_WRSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRSTA_DUMMY_EN_Pos = 0x3
	// Bit mask of SLV_WRSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRSTA_DUMMY_EN_Msk = 0x8
	// Bit SLV_WRSTA_DUMMY_EN.
	SPI_SLAVE1_SLV_WRSTA_DUMMY_EN = 0x8
	// Position of SLV_RDSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDSTA_DUMMY_EN_Pos = 0x2
	// Bit mask of SLV_RDSTA_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDSTA_DUMMY_EN_Msk = 0x4
	// Bit SLV_RDSTA_DUMMY_EN.
	SPI_SLAVE1_SLV_RDSTA_DUMMY_EN = 0x4
	// Position of SLV_WRBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRBUF_DUMMY_EN_Pos = 0x1
	// Bit mask of SLV_WRBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_WRBUF_DUMMY_EN_Msk = 0x2
	// Bit SLV_WRBUF_DUMMY_EN.
	SPI_SLAVE1_SLV_WRBUF_DUMMY_EN = 0x2
	// Position of SLV_RDBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDBUF_DUMMY_EN_Pos = 0x0
	// Bit mask of SLV_RDBUF_DUMMY_EN field.
	SPI_SLAVE1_SLV_RDBUF_DUMMY_EN_Msk = 0x1
	// Bit SLV_RDBUF_DUMMY_EN.
	SPI_SLAVE1_SLV_RDBUF_DUMMY_EN = 0x1

	// SLAVE2: SPI_SLAVE2
	// Position of SLV_WRBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRBUF_DUMMY_CYCLELEN_Pos = 0x18
	// Bit mask of SLV_WRBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRBUF_DUMMY_CYCLELEN_Msk = 0xff000000
	// Position of SLV_RDBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDBUF_DUMMY_CYCLELEN_Pos = 0x10
	// Bit mask of SLV_RDBUF_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDBUF_DUMMY_CYCLELEN_Msk = 0xff0000
	// Position of SLV_WRSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRSTA_DUMMY_CYCLELEN_Pos = 0x8
	// Bit mask of SLV_WRSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_WRSTA_DUMMY_CYCLELEN_Msk = 0xff00
	// Position of SLV_RDSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDSTA_DUMMY_CYCLELEN_Pos = 0x0
	// Bit mask of SLV_RDSTA_DUMMY_CYCLELEN field.
	SPI_SLAVE2_SLV_RDSTA_DUMMY_CYCLELEN_Msk = 0xff

	// SLAVE3: SPI_SLAVE3
	// Position of SLV_WRSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRSTA_CMD_VALUE_Pos = 0x18
	// Bit mask of SLV_WRSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRSTA_CMD_VALUE_Msk = 0xff000000
	// Position of SLV_RDSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDSTA_CMD_VALUE_Pos = 0x10
	// Bit mask of SLV_RDSTA_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDSTA_CMD_VALUE_Msk = 0xff0000
	// Position of SLV_WRBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRBUF_CMD_VALUE_Pos = 0x8
	// Bit mask of SLV_WRBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_WRBUF_CMD_VALUE_Msk = 0xff00
	// Position of SLV_RDBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDBUF_CMD_VALUE_Pos = 0x0
	// Bit mask of SLV_RDBUF_CMD_VALUE field.
	SPI_SLAVE3_SLV_RDBUF_CMD_VALUE_Msk = 0xff

	// SLV_WRBUF_DLEN: SPI_SLV_WRBUF_DLEN
	// Position of SLV_WRBUF_DBITLEN field.
	SPI_SLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN_Pos = 0x0
	// Bit mask of SLV_WRBUF_DBITLEN field.
	SPI_SLV_WRBUF_DLEN_SLV_WRBUF_DBITLEN_Msk = 0xffffff

	// SLV_RDBUF_DLEN: SPI_SLV_RDBUF_DLEN
	// Position of SLV_RDBUF_DBITLEN field.
	SPI_SLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN_Pos = 0x0
	// Bit mask of SLV_RDBUF_DBITLEN field.
	SPI_SLV_RDBUF_DLEN_SLV_RDBUF_DBITLEN_Msk = 0xffffff

	// CACHE_FCTRL: SPI_CACHE_FCTRL
	// Position of CACHE_FLASH_PES_EN field.
	SPI_CACHE_FCTRL_CACHE_FLASH_PES_EN_Pos = 0x3
	// Bit mask of CACHE_FLASH_PES_EN field.
	SPI_CACHE_FCTRL_CACHE_FLASH_PES_EN_Msk = 0x8
	// Bit CACHE_FLASH_PES_EN.
	SPI_CACHE_FCTRL_CACHE_FLASH_PES_EN = 0x8
	// Position of CACHE_FLASH_USR_CMD field.
	SPI_CACHE_FCTRL_CACHE_FLASH_USR_CMD_Pos = 0x2
	// Bit mask of CACHE_FLASH_USR_CMD field.
	SPI_CACHE_FCTRL_CACHE_FLASH_USR_CMD_Msk = 0x4
	// Bit CACHE_FLASH_USR_CMD.
	SPI_CACHE_FCTRL_CACHE_FLASH_USR_CMD = 0x4
	// Position of CACHE_USR_CMD_4BYTE field.
	SPI_CACHE_FCTRL_CACHE_USR_CMD_4BYTE_Pos = 0x1
	// Bit mask of CACHE_USR_CMD_4BYTE field.
	SPI_CACHE_FCTRL_CACHE_USR_CMD_4BYTE_Msk = 0x2
	// Bit CACHE_USR_CMD_4BYTE.
	SPI_CACHE_FCTRL_CACHE_USR_CMD_4BYTE = 0x2
	// Position of CACHE_REQ_EN field.
	SPI_CACHE_FCTRL_CACHE_REQ_EN_Pos = 0x0
	// Bit mask of CACHE_REQ_EN field.
	SPI_CACHE_FCTRL_CACHE_REQ_EN_Msk = 0x1
	// Bit CACHE_REQ_EN.
	SPI_CACHE_FCTRL_CACHE_REQ_EN = 0x1

	// CACHE_SCTRL: SPI_CACHE_SCTRL
	// Position of CACHE_SRAM_USR_WCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_WCMD_Pos = 0x1c
	// Bit mask of CACHE_SRAM_USR_WCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_WCMD_Msk = 0x10000000
	// Bit CACHE_SRAM_USR_WCMD.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_WCMD = 0x10000000
	// Position of SRAM_ADDR_BITLEN field.
	SPI_CACHE_SCTRL_SRAM_ADDR_BITLEN_Pos = 0x16
	// Bit mask of SRAM_ADDR_BITLEN field.
	SPI_CACHE_SCTRL_SRAM_ADDR_BITLEN_Msk = 0xfc00000
	// Position of SRAM_DUMMY_CYCLELEN field.
	SPI_CACHE_SCTRL_SRAM_DUMMY_CYCLELEN_Pos = 0xe
	// Bit mask of SRAM_DUMMY_CYCLELEN field.
	SPI_CACHE_SCTRL_SRAM_DUMMY_CYCLELEN_Msk = 0x3fc000
	// Position of SRAM_BYTES_LEN field.
	SPI_CACHE_SCTRL_SRAM_BYTES_LEN_Pos = 0x6
	// Bit mask of SRAM_BYTES_LEN field.
	SPI_CACHE_SCTRL_SRAM_BYTES_LEN_Msk = 0x3fc0
	// Position of CACHE_SRAM_USR_RCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_RCMD_Pos = 0x5
	// Bit mask of CACHE_SRAM_USR_RCMD field.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_RCMD_Msk = 0x20
	// Bit CACHE_SRAM_USR_RCMD.
	SPI_CACHE_SCTRL_CACHE_SRAM_USR_RCMD = 0x20
	// Position of USR_RD_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_RD_SRAM_DUMMY_Pos = 0x4
	// Bit mask of USR_RD_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_RD_SRAM_DUMMY_Msk = 0x10
	// Bit USR_RD_SRAM_DUMMY.
	SPI_CACHE_SCTRL_USR_RD_SRAM_DUMMY = 0x10
	// Position of USR_WR_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_WR_SRAM_DUMMY_Pos = 0x3
	// Bit mask of USR_WR_SRAM_DUMMY field.
	SPI_CACHE_SCTRL_USR_WR_SRAM_DUMMY_Msk = 0x8
	// Bit USR_WR_SRAM_DUMMY.
	SPI_CACHE_SCTRL_USR_WR_SRAM_DUMMY = 0x8
	// Position of USR_SRAM_QIO field.
	SPI_CACHE_SCTRL_USR_SRAM_QIO_Pos = 0x2
	// Bit mask of USR_SRAM_QIO field.
	SPI_CACHE_SCTRL_USR_SRAM_QIO_Msk = 0x4
	// Bit USR_SRAM_QIO.
	SPI_CACHE_SCTRL_USR_SRAM_QIO = 0x4
	// Position of USR_SRAM_DIO field.
	SPI_CACHE_SCTRL_USR_SRAM_DIO_Pos = 0x1
	// Bit mask of USR_SRAM_DIO field.
	SPI_CACHE_SCTRL_USR_SRAM_DIO_Msk = 0x2
	// Bit USR_SRAM_DIO.
	SPI_CACHE_SCTRL_USR_SRAM_DIO = 0x2

	// SRAM_CMD: SPI_SRAM_CMD
	// Position of SRAM_RSTIO field.
	SPI_SRAM_CMD_SRAM_RSTIO_Pos = 0x4
	// Bit mask of SRAM_RSTIO field.
	SPI_SRAM_CMD_SRAM_RSTIO_Msk = 0x10
	// Bit SRAM_RSTIO.
	SPI_SRAM_CMD_SRAM_RSTIO = 0x10
	// Position of SRAM_QIO field.
	SPI_SRAM_CMD_SRAM_QIO_Pos = 0x1
	// Bit mask of SRAM_QIO field.
	SPI_SRAM_CMD_SRAM_QIO_Msk = 0x2
	// Bit SRAM_QIO.
	SPI_SRAM_CMD_SRAM_QIO = 0x2
	// Position of SRAM_DIO field.
	SPI_SRAM_CMD_SRAM_DIO_Pos = 0x0
	// Bit mask of SRAM_DIO field.
	SPI_SRAM_CMD_SRAM_DIO_Msk = 0x1
	// Bit SRAM_DIO.
	SPI_SRAM_CMD_SRAM_DIO = 0x1

	// SRAM_DRD_CMD: SPI_SRAM_DRD_CMD
	// Position of CACHE_SRAM_USR_RD_CMD_BITLEN field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN_Pos = 0x1c
	// Bit mask of CACHE_SRAM_USR_RD_CMD_BITLEN field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_BITLEN_Msk = 0xf0000000
	// Position of CACHE_SRAM_USR_RD_CMD_VALUE field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE_Pos = 0x0
	// Bit mask of CACHE_SRAM_USR_RD_CMD_VALUE field.
	SPI_SRAM_DRD_CMD_CACHE_SRAM_USR_RD_CMD_VALUE_Msk = 0xffff

	// SRAM_DWR_CMD: SPI_SRAM_DWR_CMD
	// Position of CACHE_SRAM_USR_WR_CMD_BITLEN field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN_Pos = 0x1c
	// Bit mask of CACHE_SRAM_USR_WR_CMD_BITLEN field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_BITLEN_Msk = 0xf0000000
	// Position of CACHE_SRAM_USR_WR_CMD_VALUE field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE_Pos = 0x0
	// Bit mask of CACHE_SRAM_USR_WR_CMD_VALUE field.
	SPI_SRAM_DWR_CMD_CACHE_SRAM_USR_WR_CMD_VALUE_Msk = 0xffff

	// SLV_RD_BIT: SPI_SLV_RD_BIT
	// Position of SLV_RDATA_BIT field.
	SPI_SLV_RD_BIT_SLV_RDATA_BIT_Pos = 0x0
	// Bit mask of SLV_RDATA_BIT field.
	SPI_SLV_RD_BIT_SLV_RDATA_BIT_Msk = 0xffffff

	// W0: SPI_W0
	// Position of BUF field.
	SPI_W_BUF_Pos = 0x0
	// Bit mask of BUF field.
	SPI_W_BUF_Msk = 0xffffffff

	// TX_CRC: SPI_TX_CRC
	// Position of TX_CRC_DATA field.
	SPI_TX_CRC_TX_CRC_DATA_Pos = 0x0
	// Bit mask of TX_CRC_DATA field.
	SPI_TX_CRC_TX_CRC_DATA_Msk = 0xffffffff

	// EXT0: SPI_EXT0
	// Position of T_PP_ENA field.
	SPI_EXT0_T_PP_ENA_Pos = 0x1f
	// Bit mask of T_PP_ENA field.
	SPI_EXT0_T_PP_ENA_Msk = 0x80000000
	// Bit T_PP_ENA.
	SPI_EXT0_T_PP_ENA = 0x80000000
	// Position of T_PP_SHIFT field.
	SPI_EXT0_T_PP_SHIFT_Pos = 0x10
	// Bit mask of T_PP_SHIFT field.
	SPI_EXT0_T_PP_SHIFT_Msk = 0xf0000
	// Position of T_PP_TIME field.
	SPI_EXT0_T_PP_TIME_Pos = 0x0
	// Bit mask of T_PP_TIME field.
	SPI_EXT0_T_PP_TIME_Msk = 0xfff

	// EXT1: SPI_EXT1
	// Position of T_ERASE_ENA field.
	SPI_EXT1_T_ERASE_ENA_Pos = 0x1f
	// Bit mask of T_ERASE_ENA field.
	SPI_EXT1_T_ERASE_ENA_Msk = 0x80000000
	// Bit T_ERASE_ENA.
	SPI_EXT1_T_ERASE_ENA = 0x80000000
	// Position of T_ERASE_SHIFT field.
	SPI_EXT1_T_ERASE_SHIFT_Pos = 0x10
	// Bit mask of T_ERASE_SHIFT field.
	SPI_EXT1_T_ERASE_SHIFT_Msk = 0xf0000
	// Position of T_ERASE_TIME field.
	SPI_EXT1_T_ERASE_TIME_Pos = 0x0
	// Bit mask of T_ERASE_TIME field.
	SPI_EXT1_T_ERASE_TIME_Msk = 0xfff

	// EXT2: SPI_EXT2
	// Position of ST field.
	SPI_EXT2_ST_Pos = 0x0
	// Bit mask of ST field.
	SPI_EXT2_ST_Msk = 0x7

	// EXT3: SPI_EXT3
	// Position of INT_HOLD_ENA field.
	SPI_EXT3_INT_HOLD_ENA_Pos = 0x0
	// Bit mask of INT_HOLD_ENA field.
	SPI_EXT3_INT_HOLD_ENA_Msk = 0x3

	// DMA_CONF: SPI_DMA_CONF
	// Position of DMA_CONTINUE field.
	SPI_DMA_CONF_DMA_CONTINUE_Pos = 0x10
	// Bit mask of DMA_CONTINUE field.
	SPI_DMA_CONF_DMA_CONTINUE_Msk = 0x10000
	// Bit DMA_CONTINUE.
	SPI_DMA_CONF_DMA_CONTINUE = 0x10000
	// Position of DMA_TX_STOP field.
	SPI_DMA_CONF_DMA_TX_STOP_Pos = 0xf
	// Bit mask of DMA_TX_STOP field.
	SPI_DMA_CONF_DMA_TX_STOP_Msk = 0x8000
	// Bit DMA_TX_STOP.
	SPI_DMA_CONF_DMA_TX_STOP = 0x8000
	// Position of DMA_RX_STOP field.
	SPI_DMA_CONF_DMA_RX_STOP_Pos = 0xe
	// Bit mask of DMA_RX_STOP field.
	SPI_DMA_CONF_DMA_RX_STOP_Msk = 0x4000
	// Bit DMA_RX_STOP.
	SPI_DMA_CONF_DMA_RX_STOP = 0x4000
	// Position of OUT_DATA_BURST_EN field.
	SPI_DMA_CONF_OUT_DATA_BURST_EN_Pos = 0xc
	// Bit mask of OUT_DATA_BURST_EN field.
	SPI_DMA_CONF_OUT_DATA_BURST_EN_Msk = 0x1000
	// Bit OUT_DATA_BURST_EN.
	SPI_DMA_CONF_OUT_DATA_BURST_EN = 0x1000
	// Position of INDSCR_BURST_EN field.
	SPI_DMA_CONF_INDSCR_BURST_EN_Pos = 0xb
	// Bit mask of INDSCR_BURST_EN field.
	SPI_DMA_CONF_INDSCR_BURST_EN_Msk = 0x800
	// Bit INDSCR_BURST_EN.
	SPI_DMA_CONF_INDSCR_BURST_EN = 0x800
	// Position of OUTDSCR_BURST_EN field.
	SPI_DMA_CONF_OUTDSCR_BURST_EN_Pos = 0xa
	// Bit mask of OUTDSCR_BURST_EN field.
	SPI_DMA_CONF_OUTDSCR_BURST_EN_Msk = 0x400
	// Bit OUTDSCR_BURST_EN.
	SPI_DMA_CONF_OUTDSCR_BURST_EN = 0x400
	// Position of OUT_EOF_MODE field.
	SPI_DMA_CONF_OUT_EOF_MODE_Pos = 0x9
	// Bit mask of OUT_EOF_MODE field.
	SPI_DMA_CONF_OUT_EOF_MODE_Msk = 0x200
	// Bit OUT_EOF_MODE.
	SPI_DMA_CONF_OUT_EOF_MODE = 0x200
	// Position of OUT_AUTO_WRBACK field.
	SPI_DMA_CONF_OUT_AUTO_WRBACK_Pos = 0x8
	// Bit mask of OUT_AUTO_WRBACK field.
	SPI_DMA_CONF_OUT_AUTO_WRBACK_Msk = 0x100
	// Bit OUT_AUTO_WRBACK.
	SPI_DMA_CONF_OUT_AUTO_WRBACK = 0x100
	// Position of OUT_LOOP_TEST field.
	SPI_DMA_CONF_OUT_LOOP_TEST_Pos = 0x7
	// Bit mask of OUT_LOOP_TEST field.
	SPI_DMA_CONF_OUT_LOOP_TEST_Msk = 0x80
	// Bit OUT_LOOP_TEST.
	SPI_DMA_CONF_OUT_LOOP_TEST = 0x80
	// Position of IN_LOOP_TEST field.
	SPI_DMA_CONF_IN_LOOP_TEST_Pos = 0x6
	// Bit mask of IN_LOOP_TEST field.
	SPI_DMA_CONF_IN_LOOP_TEST_Msk = 0x40
	// Bit IN_LOOP_TEST.
	SPI_DMA_CONF_IN_LOOP_TEST = 0x40
	// Position of AHBM_RST field.
	SPI_DMA_CONF_AHBM_RST_Pos = 0x5
	// Bit mask of AHBM_RST field.
	SPI_DMA_CONF_AHBM_RST_Msk = 0x20
	// Bit AHBM_RST.
	SPI_DMA_CONF_AHBM_RST = 0x20
	// Position of AHBM_FIFO_RST field.
	SPI_DMA_CONF_AHBM_FIFO_RST_Pos = 0x4
	// Bit mask of AHBM_FIFO_RST field.
	SPI_DMA_CONF_AHBM_FIFO_RST_Msk = 0x10
	// Bit AHBM_FIFO_RST.
	SPI_DMA_CONF_AHBM_FIFO_RST = 0x10
	// Position of OUT_RST field.
	SPI_DMA_CONF_OUT_RST_Pos = 0x3
	// Bit mask of OUT_RST field.
	SPI_DMA_CONF_OUT_RST_Msk = 0x8
	// Bit OUT_RST.
	SPI_DMA_CONF_OUT_RST = 0x8
	// Position of IN_RST field.
	SPI_DMA_CONF_IN_RST_Pos = 0x2
	// Bit mask of IN_RST field.
	SPI_DMA_CONF_IN_RST_Msk = 0x4
	// Bit IN_RST.
	SPI_DMA_CONF_IN_RST = 0x4

	// DMA_OUT_LINK: SPI_DMA_OUT_LINK
	// Position of OUTLINK_RESTART field.
	SPI_DMA_OUT_LINK_OUTLINK_RESTART_Pos = 0x1e
	// Bit mask of OUTLINK_RESTART field.
	SPI_DMA_OUT_LINK_OUTLINK_RESTART_Msk = 0x40000000
	// Bit OUTLINK_RESTART.
	SPI_DMA_OUT_LINK_OUTLINK_RESTART = 0x40000000
	// Position of OUTLINK_START field.
	SPI_DMA_OUT_LINK_OUTLINK_START_Pos = 0x1d
	// Bit mask of OUTLINK_START field.
	SPI_DMA_OUT_LINK_OUTLINK_START_Msk = 0x20000000
	// Bit OUTLINK_START.
	SPI_DMA_OUT_LINK_OUTLINK_START = 0x20000000
	// Position of OUTLINK_STOP field.
	SPI_DMA_OUT_LINK_OUTLINK_STOP_Pos = 0x1c
	// Bit mask of OUTLINK_STOP field.
	SPI_DMA_OUT_LINK_OUTLINK_STOP_Msk = 0x10000000
	// Bit OUTLINK_STOP.
	SPI_DMA_OUT_LINK_OUTLINK_STOP = 0x10000000
	// Position of OUTLINK_ADDR field.
	SPI_DMA_OUT_LINK_OUTLINK_ADDR_Pos = 0x0
	// Bit mask of OUTLINK_ADDR field.
	SPI_DMA_OUT_LINK_OUTLINK_ADDR_Msk = 0xfffff

	// DMA_IN_LINK: SPI_DMA_IN_LINK
	// Position of INLINK_RESTART field.
	SPI_DMA_IN_LINK_INLINK_RESTART_Pos = 0x1e
	// Bit mask of INLINK_RESTART field.
	SPI_DMA_IN_LINK_INLINK_RESTART_Msk = 0x40000000
	// Bit INLINK_RESTART.
	SPI_DMA_IN_LINK_INLINK_RESTART = 0x40000000
	// Position of INLINK_START field.
	SPI_DMA_IN_LINK_INLINK_START_Pos = 0x1d
	// Bit mask of INLINK_START field.
	SPI_DMA_IN_LINK_INLINK_START_Msk = 0x20000000
	// Bit INLINK_START.
	SPI_DMA_IN_LINK_INLINK_START = 0x20000000
	// Position of INLINK_STOP field.
	SPI_DMA_IN_LINK_INLINK_STOP_Pos = 0x1c
	// Bit mask of INLINK_STOP field.
	SPI_DMA_IN_LINK_INLINK_STOP_Msk = 0x10000000
	// Bit INLINK_STOP.
	SPI_DMA_IN_LINK_INLINK_STOP = 0x10000000
	// Position of INLINK_AUTO_RET field.
	SPI_DMA_IN_LINK_INLINK_AUTO_RET_Pos = 0x14
	// Bit mask of INLINK_AUTO_RET field.
	SPI_DMA_IN_LINK_INLINK_AUTO_RET_Msk = 0x100000
	// Bit INLINK_AUTO_RET.
	SPI_DMA_IN_LINK_INLINK_AUTO_RET = 0x100000
	// Position of INLINK_ADDR field.
	SPI_DMA_IN_LINK_INLINK_ADDR_Pos = 0x0
	// Bit mask of INLINK_ADDR field.
	SPI_DMA_IN_LINK_INLINK_ADDR_Msk = 0xfffff

	// DMA_STATUS: SPI_DMA_STATUS
	// Position of DMA_TX_EN field.
	SPI_DMA_STATUS_DMA_TX_EN_Pos = 0x1
	// Bit mask of DMA_TX_EN field.
	SPI_DMA_STATUS_DMA_TX_EN_Msk = 0x2
	// Bit DMA_TX_EN.
	SPI_DMA_STATUS_DMA_TX_EN = 0x2
	// Position of DMA_RX_EN field.
	SPI_DMA_STATUS_DMA_RX_EN_Pos = 0x0
	// Bit mask of DMA_RX_EN field.
	SPI_DMA_STATUS_DMA_RX_EN_Msk = 0x1
	// Bit DMA_RX_EN.
	SPI_DMA_STATUS_DMA_RX_EN = 0x1

	// DMA_INT_ENA: SPI_DMA_INT_ENA
	// Position of OUT_TOTAL_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_ENA.
	SPI_DMA_INT_ENA_OUT_TOTAL_EOF_INT_ENA = 0x100
	// Position of OUT_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_EOF_INT_ENA_Pos = 0x7
	// Bit mask of OUT_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_EOF_INT_ENA_Msk = 0x80
	// Bit OUT_EOF_INT_ENA.
	SPI_DMA_INT_ENA_OUT_EOF_INT_ENA = 0x80
	// Position of OUT_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_DONE_INT_ENA_Pos = 0x6
	// Bit mask of OUT_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_OUT_DONE_INT_ENA_Msk = 0x40
	// Bit OUT_DONE_INT_ENA.
	SPI_DMA_INT_ENA_OUT_DONE_INT_ENA = 0x40
	// Position of IN_SUC_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_SUC_EOF_INT_ENA_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_SUC_EOF_INT_ENA_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ENA.
	SPI_DMA_INT_ENA_IN_SUC_EOF_INT_ENA = 0x20
	// Position of IN_ERR_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_ERR_EOF_INT_ENA_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_ENA field.
	SPI_DMA_INT_ENA_IN_ERR_EOF_INT_ENA_Msk = 0x10
	// Bit IN_ERR_EOF_INT_ENA.
	SPI_DMA_INT_ENA_IN_ERR_EOF_INT_ENA = 0x10
	// Position of IN_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_IN_DONE_INT_ENA_Pos = 0x3
	// Bit mask of IN_DONE_INT_ENA field.
	SPI_DMA_INT_ENA_IN_DONE_INT_ENA_Msk = 0x8
	// Bit IN_DONE_INT_ENA.
	SPI_DMA_INT_ENA_IN_DONE_INT_ENA = 0x8
	// Position of INLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_ENA.
	SPI_DMA_INT_ENA_INLINK_DSCR_ERROR_INT_ENA = 0x4
	// Position of OUTLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_ENA field.
	SPI_DMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_ENA.
	SPI_DMA_INT_ENA_OUTLINK_DSCR_ERROR_INT_ENA = 0x2
	// Position of INLINK_DSCR_EMPTY_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_ENA field.
	SPI_DMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_ENA.
	SPI_DMA_INT_ENA_INLINK_DSCR_EMPTY_INT_ENA = 0x1

	// DMA_INT_RAW: SPI_DMA_INT_RAW
	// Position of OUT_TOTAL_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_RAW.
	SPI_DMA_INT_RAW_OUT_TOTAL_EOF_INT_RAW = 0x100
	// Position of OUT_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_EOF_INT_RAW_Pos = 0x7
	// Bit mask of OUT_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_EOF_INT_RAW_Msk = 0x80
	// Bit OUT_EOF_INT_RAW.
	SPI_DMA_INT_RAW_OUT_EOF_INT_RAW = 0x80
	// Position of OUT_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_DONE_INT_RAW_Pos = 0x6
	// Bit mask of OUT_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_OUT_DONE_INT_RAW_Msk = 0x40
	// Bit OUT_DONE_INT_RAW.
	SPI_DMA_INT_RAW_OUT_DONE_INT_RAW = 0x40
	// Position of IN_SUC_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_SUC_EOF_INT_RAW_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_SUC_EOF_INT_RAW_Msk = 0x20
	// Bit IN_SUC_EOF_INT_RAW.
	SPI_DMA_INT_RAW_IN_SUC_EOF_INT_RAW = 0x20
	// Position of IN_ERR_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_ERR_EOF_INT_RAW_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_RAW field.
	SPI_DMA_INT_RAW_IN_ERR_EOF_INT_RAW_Msk = 0x10
	// Bit IN_ERR_EOF_INT_RAW.
	SPI_DMA_INT_RAW_IN_ERR_EOF_INT_RAW = 0x10
	// Position of IN_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_IN_DONE_INT_RAW_Pos = 0x3
	// Bit mask of IN_DONE_INT_RAW field.
	SPI_DMA_INT_RAW_IN_DONE_INT_RAW_Msk = 0x8
	// Bit IN_DONE_INT_RAW.
	SPI_DMA_INT_RAW_IN_DONE_INT_RAW = 0x8
	// Position of INLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_RAW.
	SPI_DMA_INT_RAW_INLINK_DSCR_ERROR_INT_RAW = 0x4
	// Position of OUTLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_RAW field.
	SPI_DMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_RAW.
	SPI_DMA_INT_RAW_OUTLINK_DSCR_ERROR_INT_RAW = 0x2
	// Position of INLINK_DSCR_EMPTY_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_RAW field.
	SPI_DMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_RAW.
	SPI_DMA_INT_RAW_INLINK_DSCR_EMPTY_INT_RAW = 0x1

	// DMA_INT_ST: SPI_DMA_INT_ST
	// Position of OUT_TOTAL_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_TOTAL_EOF_INT_ST_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_TOTAL_EOF_INT_ST_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_ST.
	SPI_DMA_INT_ST_OUT_TOTAL_EOF_INT_ST = 0x100
	// Position of OUT_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_EOF_INT_ST_Pos = 0x7
	// Bit mask of OUT_EOF_INT_ST field.
	SPI_DMA_INT_ST_OUT_EOF_INT_ST_Msk = 0x80
	// Bit OUT_EOF_INT_ST.
	SPI_DMA_INT_ST_OUT_EOF_INT_ST = 0x80
	// Position of OUT_DONE_INT_ST field.
	SPI_DMA_INT_ST_OUT_DONE_INT_ST_Pos = 0x6
	// Bit mask of OUT_DONE_INT_ST field.
	SPI_DMA_INT_ST_OUT_DONE_INT_ST_Msk = 0x40
	// Bit OUT_DONE_INT_ST.
	SPI_DMA_INT_ST_OUT_DONE_INT_ST = 0x40
	// Position of IN_SUC_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_SUC_EOF_INT_ST_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_SUC_EOF_INT_ST_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ST.
	SPI_DMA_INT_ST_IN_SUC_EOF_INT_ST = 0x20
	// Position of IN_ERR_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_ERR_EOF_INT_ST_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_ST field.
	SPI_DMA_INT_ST_IN_ERR_EOF_INT_ST_Msk = 0x10
	// Bit IN_ERR_EOF_INT_ST.
	SPI_DMA_INT_ST_IN_ERR_EOF_INT_ST = 0x10
	// Position of IN_DONE_INT_ST field.
	SPI_DMA_INT_ST_IN_DONE_INT_ST_Pos = 0x3
	// Bit mask of IN_DONE_INT_ST field.
	SPI_DMA_INT_ST_IN_DONE_INT_ST_Msk = 0x8
	// Bit IN_DONE_INT_ST.
	SPI_DMA_INT_ST_IN_DONE_INT_ST = 0x8
	// Position of INLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_ERROR_INT_ST_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_ERROR_INT_ST_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_ST.
	SPI_DMA_INT_ST_INLINK_DSCR_ERROR_INT_ST = 0x4
	// Position of OUTLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_ST field.
	SPI_DMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_ST.
	SPI_DMA_INT_ST_OUTLINK_DSCR_ERROR_INT_ST = 0x2
	// Position of INLINK_DSCR_EMPTY_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_ST field.
	SPI_DMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_ST.
	SPI_DMA_INT_ST_INLINK_DSCR_EMPTY_INT_ST = 0x1

	// DMA_INT_CLR: SPI_DMA_INT_CLR
	// Position of OUT_TOTAL_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Pos = 0x8
	// Bit mask of OUT_TOTAL_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Msk = 0x100
	// Bit OUT_TOTAL_EOF_INT_CLR.
	SPI_DMA_INT_CLR_OUT_TOTAL_EOF_INT_CLR = 0x100
	// Position of OUT_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_EOF_INT_CLR_Pos = 0x7
	// Bit mask of OUT_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_EOF_INT_CLR_Msk = 0x80
	// Bit OUT_EOF_INT_CLR.
	SPI_DMA_INT_CLR_OUT_EOF_INT_CLR = 0x80
	// Position of OUT_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_DONE_INT_CLR_Pos = 0x6
	// Bit mask of OUT_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_OUT_DONE_INT_CLR_Msk = 0x40
	// Bit OUT_DONE_INT_CLR.
	SPI_DMA_INT_CLR_OUT_DONE_INT_CLR = 0x40
	// Position of IN_SUC_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_SUC_EOF_INT_CLR_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_SUC_EOF_INT_CLR_Msk = 0x20
	// Bit IN_SUC_EOF_INT_CLR.
	SPI_DMA_INT_CLR_IN_SUC_EOF_INT_CLR = 0x20
	// Position of IN_ERR_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_ERR_EOF_INT_CLR_Pos = 0x4
	// Bit mask of IN_ERR_EOF_INT_CLR field.
	SPI_DMA_INT_CLR_IN_ERR_EOF_INT_CLR_Msk = 0x10
	// Bit IN_ERR_EOF_INT_CLR.
	SPI_DMA_INT_CLR_IN_ERR_EOF_INT_CLR = 0x10
	// Position of IN_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_IN_DONE_INT_CLR_Pos = 0x3
	// Bit mask of IN_DONE_INT_CLR field.
	SPI_DMA_INT_CLR_IN_DONE_INT_CLR_Msk = 0x8
	// Bit IN_DONE_INT_CLR.
	SPI_DMA_INT_CLR_IN_DONE_INT_CLR = 0x8
	// Position of INLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR_Pos = 0x2
	// Bit mask of INLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR_Msk = 0x4
	// Bit INLINK_DSCR_ERROR_INT_CLR.
	SPI_DMA_INT_CLR_INLINK_DSCR_ERROR_INT_CLR = 0x4
	// Position of OUTLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR_Pos = 0x1
	// Bit mask of OUTLINK_DSCR_ERROR_INT_CLR field.
	SPI_DMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR_Msk = 0x2
	// Bit OUTLINK_DSCR_ERROR_INT_CLR.
	SPI_DMA_INT_CLR_OUTLINK_DSCR_ERROR_INT_CLR = 0x2
	// Position of INLINK_DSCR_EMPTY_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR_Pos = 0x0
	// Bit mask of INLINK_DSCR_EMPTY_INT_CLR field.
	SPI_DMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR_Msk = 0x1
	// Bit INLINK_DSCR_EMPTY_INT_CLR.
	SPI_DMA_INT_CLR_INLINK_DSCR_EMPTY_INT_CLR = 0x1

	// IN_ERR_EOF_DES_ADDR: SPI_IN_ERR_EOF_DES_ADDR
	// Position of DMA_IN_ERR_EOF_DES_ADDR field.
	SPI_IN_ERR_EOF_DES_ADDR_DMA_IN_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_IN_ERR_EOF_DES_ADDR field.
	SPI_IN_ERR_EOF_DES_ADDR_DMA_IN_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// IN_SUC_EOF_DES_ADDR: SPI_IN_SUC_EOF_DES_ADDR
	// Position of DMA_IN_SUC_EOF_DES_ADDR field.
	SPI_IN_SUC_EOF_DES_ADDR_DMA_IN_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_IN_SUC_EOF_DES_ADDR field.
	SPI_IN_SUC_EOF_DES_ADDR_DMA_IN_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// INLINK_DSCR: SPI_INLINK_DSCR
	// Position of DMA_INLINK_DSCR field.
	SPI_INLINK_DSCR_DMA_INLINK_DSCR_Pos = 0x0
	// Bit mask of DMA_INLINK_DSCR field.
	SPI_INLINK_DSCR_DMA_INLINK_DSCR_Msk = 0xffffffff

	// INLINK_DSCR_BF0: SPI_INLINK_DSCR_BF0
	// Position of DMA_INLINK_DSCR_BF0 field.
	SPI_INLINK_DSCR_BF0_DMA_INLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of DMA_INLINK_DSCR_BF0 field.
	SPI_INLINK_DSCR_BF0_DMA_INLINK_DSCR_BF0_Msk = 0xffffffff

	// INLINK_DSCR_BF1: SPI_INLINK_DSCR_BF1
	// Position of DMA_INLINK_DSCR_BF1 field.
	SPI_INLINK_DSCR_BF1_DMA_INLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of DMA_INLINK_DSCR_BF1 field.
	SPI_INLINK_DSCR_BF1_DMA_INLINK_DSCR_BF1_Msk = 0xffffffff

	// OUT_EOF_BFR_DES_ADDR: SPI_OUT_EOF_BFR_DES_ADDR
	// Position of DMA_OUT_EOF_BFR_DES_ADDR field.
	SPI_OUT_EOF_BFR_DES_ADDR_DMA_OUT_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_OUT_EOF_BFR_DES_ADDR field.
	SPI_OUT_EOF_BFR_DES_ADDR_DMA_OUT_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// OUT_EOF_DES_ADDR: SPI_OUT_EOF_DES_ADDR
	// Position of DMA_OUT_EOF_DES_ADDR field.
	SPI_OUT_EOF_DES_ADDR_DMA_OUT_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of DMA_OUT_EOF_DES_ADDR field.
	SPI_OUT_EOF_DES_ADDR_DMA_OUT_EOF_DES_ADDR_Msk = 0xffffffff

	// OUTLINK_DSCR: SPI_OUTLINK_DSCR
	// Position of DMA_OUTLINK_DSCR field.
	SPI_OUTLINK_DSCR_DMA_OUTLINK_DSCR_Pos = 0x0
	// Bit mask of DMA_OUTLINK_DSCR field.
	SPI_OUTLINK_DSCR_DMA_OUTLINK_DSCR_Msk = 0xffffffff

	// OUTLINK_DSCR_BF0: SPI_OUTLINK_DSCR_BF0
	// Position of DMA_OUTLINK_DSCR_BF0 field.
	SPI_OUTLINK_DSCR_BF0_DMA_OUTLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of DMA_OUTLINK_DSCR_BF0 field.
	SPI_OUTLINK_DSCR_BF0_DMA_OUTLINK_DSCR_BF0_Msk = 0xffffffff

	// OUTLINK_DSCR_BF1: SPI_OUTLINK_DSCR_BF1
	// Position of DMA_OUTLINK_DSCR_BF1 field.
	SPI_OUTLINK_DSCR_BF1_DMA_OUTLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of DMA_OUTLINK_DSCR_BF1 field.
	SPI_OUTLINK_DSCR_BF1_DMA_OUTLINK_DSCR_BF1_Msk = 0xffffffff

	// DMA_RSTATUS: SPI_DMA_RSTATUS
	// Position of DMA_OUT_STATUS field.
	SPI_DMA_RSTATUS_DMA_OUT_STATUS_Pos = 0x0
	// Bit mask of DMA_OUT_STATUS field.
	SPI_DMA_RSTATUS_DMA_OUT_STATUS_Msk = 0xffffffff

	// DMA_TSTATUS: SPI_DMA_TSTATUS
	// Position of DMA_IN_STATUS field.
	SPI_DMA_TSTATUS_DMA_IN_STATUS_Pos = 0x0
	// Bit mask of DMA_IN_STATUS field.
	SPI_DMA_TSTATUS_DMA_IN_STATUS_Msk = 0xffffffff

	// DATE: SPI_DATE
	// Position of DATE field.
	SPI_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	SPI_DATE_DATE_Msk = 0xfffffff
)

// Constants for I2C
const (
	// SCL_LOW_PERIOD: I2C_SCL_LOW_PERIOD
	// Position of PERIOD field.
	I2C_SCL_LOW_PERIOD_PERIOD_Pos = 0x0
	// Bit mask of PERIOD field.
	I2C_SCL_LOW_PERIOD_PERIOD_Msk = 0x3fff

	// CTR: I2C_CTR
	// Position of CLK_EN field.
	I2C_CTR_CLK_EN_Pos = 0x8
	// Bit mask of CLK_EN field.
	I2C_CTR_CLK_EN_Msk = 0x100
	// Bit CLK_EN.
	I2C_CTR_CLK_EN = 0x100
	// Position of RX_LSB_FIRST field.
	I2C_CTR_RX_LSB_FIRST_Pos = 0x7
	// Bit mask of RX_LSB_FIRST field.
	I2C_CTR_RX_LSB_FIRST_Msk = 0x80
	// Bit RX_LSB_FIRST.
	I2C_CTR_RX_LSB_FIRST = 0x80
	// Position of TX_LSB_FIRST field.
	I2C_CTR_TX_LSB_FIRST_Pos = 0x6
	// Bit mask of TX_LSB_FIRST field.
	I2C_CTR_TX_LSB_FIRST_Msk = 0x40
	// Bit TX_LSB_FIRST.
	I2C_CTR_TX_LSB_FIRST = 0x40
	// Position of TRANS_START field.
	I2C_CTR_TRANS_START_Pos = 0x5
	// Bit mask of TRANS_START field.
	I2C_CTR_TRANS_START_Msk = 0x20
	// Bit TRANS_START.
	I2C_CTR_TRANS_START = 0x20
	// Position of MS_MODE field.
	I2C_CTR_MS_MODE_Pos = 0x4
	// Bit mask of MS_MODE field.
	I2C_CTR_MS_MODE_Msk = 0x10
	// Bit MS_MODE.
	I2C_CTR_MS_MODE = 0x10
	// Position of SAMPLE_SCL_LEVEL field.
	I2C_CTR_SAMPLE_SCL_LEVEL_Pos = 0x2
	// Bit mask of SAMPLE_SCL_LEVEL field.
	I2C_CTR_SAMPLE_SCL_LEVEL_Msk = 0x4
	// Bit SAMPLE_SCL_LEVEL.
	I2C_CTR_SAMPLE_SCL_LEVEL = 0x4
	// Position of SCL_FORCE_OUT field.
	I2C_CTR_SCL_FORCE_OUT_Pos = 0x1
	// Bit mask of SCL_FORCE_OUT field.
	I2C_CTR_SCL_FORCE_OUT_Msk = 0x2
	// Bit SCL_FORCE_OUT.
	I2C_CTR_SCL_FORCE_OUT = 0x2
	// Position of SDA_FORCE_OUT field.
	I2C_CTR_SDA_FORCE_OUT_Pos = 0x0
	// Bit mask of SDA_FORCE_OUT field.
	I2C_CTR_SDA_FORCE_OUT_Msk = 0x1
	// Bit SDA_FORCE_OUT.
	I2C_CTR_SDA_FORCE_OUT = 0x1

	// SR: I2C_SR
	// Position of SCL_STATE_LAST field.
	I2C_SR_SCL_STATE_LAST_Pos = 0x1c
	// Bit mask of SCL_STATE_LAST field.
	I2C_SR_SCL_STATE_LAST_Msk = 0x70000000
	// Position of SCL_MAIN_STATE_LAST field.
	I2C_SR_SCL_MAIN_STATE_LAST_Pos = 0x18
	// Bit mask of SCL_MAIN_STATE_LAST field.
	I2C_SR_SCL_MAIN_STATE_LAST_Msk = 0x7000000
	// Position of TXFIFO_CNT field.
	I2C_SR_TXFIFO_CNT_Pos = 0x12
	// Bit mask of TXFIFO_CNT field.
	I2C_SR_TXFIFO_CNT_Msk = 0xfc0000
	// Position of RXFIFO_CNT field.
	I2C_SR_RXFIFO_CNT_Pos = 0x8
	// Bit mask of RXFIFO_CNT field.
	I2C_SR_RXFIFO_CNT_Msk = 0x3f00
	// Position of BYTE_TRANS field.
	I2C_SR_BYTE_TRANS_Pos = 0x6
	// Bit mask of BYTE_TRANS field.
	I2C_SR_BYTE_TRANS_Msk = 0x40
	// Bit BYTE_TRANS.
	I2C_SR_BYTE_TRANS = 0x40
	// Position of SLAVE_ADDRESSED field.
	I2C_SR_SLAVE_ADDRESSED_Pos = 0x5
	// Bit mask of SLAVE_ADDRESSED field.
	I2C_SR_SLAVE_ADDRESSED_Msk = 0x20
	// Bit SLAVE_ADDRESSED.
	I2C_SR_SLAVE_ADDRESSED = 0x20
	// Position of BUS_BUSY field.
	I2C_SR_BUS_BUSY_Pos = 0x4
	// Bit mask of BUS_BUSY field.
	I2C_SR_BUS_BUSY_Msk = 0x10
	// Bit BUS_BUSY.
	I2C_SR_BUS_BUSY = 0x10
	// Position of ARB_LOST field.
	I2C_SR_ARB_LOST_Pos = 0x3
	// Bit mask of ARB_LOST field.
	I2C_SR_ARB_LOST_Msk = 0x8
	// Bit ARB_LOST.
	I2C_SR_ARB_LOST = 0x8
	// Position of TIME_OUT field.
	I2C_SR_TIME_OUT_Pos = 0x2
	// Bit mask of TIME_OUT field.
	I2C_SR_TIME_OUT_Msk = 0x4
	// Bit TIME_OUT.
	I2C_SR_TIME_OUT = 0x4
	// Position of SLAVE_RW field.
	I2C_SR_SLAVE_RW_Pos = 0x1
	// Bit mask of SLAVE_RW field.
	I2C_SR_SLAVE_RW_Msk = 0x2
	// Bit SLAVE_RW.
	I2C_SR_SLAVE_RW = 0x2
	// Position of ACK_REC field.
	I2C_SR_ACK_REC_Pos = 0x0
	// Bit mask of ACK_REC field.
	I2C_SR_ACK_REC_Msk = 0x1
	// Bit ACK_REC.
	I2C_SR_ACK_REC = 0x1

	// TO: I2C_TO
	// Position of TIME_OUT_REG field.
	I2C_TO_TIME_OUT_REG_Pos = 0x0
	// Bit mask of TIME_OUT_REG field.
	I2C_TO_TIME_OUT_REG_Msk = 0xfffff

	// SLAVE_ADDR: I2C_SLAVE_ADDR
	// Position of ADDR_10BIT_EN field.
	I2C_SLAVE_ADDR_ADDR_10BIT_EN_Pos = 0x1f
	// Bit mask of ADDR_10BIT_EN field.
	I2C_SLAVE_ADDR_ADDR_10BIT_EN_Msk = 0x80000000
	// Bit ADDR_10BIT_EN.
	I2C_SLAVE_ADDR_ADDR_10BIT_EN = 0x80000000
	// Position of SLAVE_ADDR field.
	I2C_SLAVE_ADDR_SLAVE_ADDR_Pos = 0x0
	// Bit mask of SLAVE_ADDR field.
	I2C_SLAVE_ADDR_SLAVE_ADDR_Msk = 0x7fff

	// RXFIFO_ST: I2C_RXFIFO_ST
	// Position of TXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_END_ADDR_Pos = 0xf
	// Bit mask of TXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_END_ADDR_Msk = 0xf8000
	// Position of TXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_START_ADDR_Pos = 0xa
	// Bit mask of TXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_TXFIFO_START_ADDR_Msk = 0x7c00
	// Position of RXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_END_ADDR_Pos = 0x5
	// Bit mask of RXFIFO_END_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_END_ADDR_Msk = 0x3e0
	// Position of RXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_START_ADDR_Pos = 0x0
	// Bit mask of RXFIFO_START_ADDR field.
	I2C_RXFIFO_ST_RXFIFO_START_ADDR_Msk = 0x1f

	// FIFO_CONF: I2C_FIFO_CONF
	// Position of NONFIFO_TX_THRES field.
	I2C_FIFO_CONF_NONFIFO_TX_THRES_Pos = 0x14
	// Bit mask of NONFIFO_TX_THRES field.
	I2C_FIFO_CONF_NONFIFO_TX_THRES_Msk = 0x3f00000
	// Position of NONFIFO_RX_THRES field.
	I2C_FIFO_CONF_NONFIFO_RX_THRES_Pos = 0xe
	// Bit mask of NONFIFO_RX_THRES field.
	I2C_FIFO_CONF_NONFIFO_RX_THRES_Msk = 0xfc000
	// Position of TX_FIFO_RST field.
	I2C_FIFO_CONF_TX_FIFO_RST_Pos = 0xd
	// Bit mask of TX_FIFO_RST field.
	I2C_FIFO_CONF_TX_FIFO_RST_Msk = 0x2000
	// Bit TX_FIFO_RST.
	I2C_FIFO_CONF_TX_FIFO_RST = 0x2000
	// Position of RX_FIFO_RST field.
	I2C_FIFO_CONF_RX_FIFO_RST_Pos = 0xc
	// Bit mask of RX_FIFO_RST field.
	I2C_FIFO_CONF_RX_FIFO_RST_Msk = 0x1000
	// Bit RX_FIFO_RST.
	I2C_FIFO_CONF_RX_FIFO_RST = 0x1000
	// Position of FIFO_ADDR_CFG_EN field.
	I2C_FIFO_CONF_FIFO_ADDR_CFG_EN_Pos = 0xb
	// Bit mask of FIFO_ADDR_CFG_EN field.
	I2C_FIFO_CONF_FIFO_ADDR_CFG_EN_Msk = 0x800
	// Bit FIFO_ADDR_CFG_EN.
	I2C_FIFO_CONF_FIFO_ADDR_CFG_EN = 0x800
	// Position of NONFIFO_EN field.
	I2C_FIFO_CONF_NONFIFO_EN_Pos = 0xa
	// Bit mask of NONFIFO_EN field.
	I2C_FIFO_CONF_NONFIFO_EN_Msk = 0x400
	// Bit NONFIFO_EN.
	I2C_FIFO_CONF_NONFIFO_EN = 0x400
	// Position of TXFIFO_EMPTY_THRHD field.
	I2C_FIFO_CONF_TXFIFO_EMPTY_THRHD_Pos = 0x5
	// Bit mask of TXFIFO_EMPTY_THRHD field.
	I2C_FIFO_CONF_TXFIFO_EMPTY_THRHD_Msk = 0x3e0
	// Position of RXFIFO_FULL_THRHD field.
	I2C_FIFO_CONF_RXFIFO_FULL_THRHD_Pos = 0x0
	// Bit mask of RXFIFO_FULL_THRHD field.
	I2C_FIFO_CONF_RXFIFO_FULL_THRHD_Msk = 0x1f

	// DATA: I2C_DATA
	// Position of FIFO_RDATA field.
	I2C_DATA_FIFO_RDATA_Pos = 0x0
	// Bit mask of FIFO_RDATA field.
	I2C_DATA_FIFO_RDATA_Msk = 0xff

	// INT_RAW: I2C_INT_RAW
	// Position of TX_SEND_EMPTY_INT_RAW field.
	I2C_INT_RAW_TX_SEND_EMPTY_INT_RAW_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_RAW field.
	I2C_INT_RAW_TX_SEND_EMPTY_INT_RAW_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_RAW.
	I2C_INT_RAW_TX_SEND_EMPTY_INT_RAW = 0x1000
	// Position of RX_REC_FULL_INT_RAW field.
	I2C_INT_RAW_RX_REC_FULL_INT_RAW_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_RAW field.
	I2C_INT_RAW_RX_REC_FULL_INT_RAW_Msk = 0x800
	// Bit RX_REC_FULL_INT_RAW.
	I2C_INT_RAW_RX_REC_FULL_INT_RAW = 0x800
	// Position of ACK_ERR_INT_RAW field.
	I2C_INT_RAW_ACK_ERR_INT_RAW_Pos = 0xa
	// Bit mask of ACK_ERR_INT_RAW field.
	I2C_INT_RAW_ACK_ERR_INT_RAW_Msk = 0x400
	// Bit ACK_ERR_INT_RAW.
	I2C_INT_RAW_ACK_ERR_INT_RAW = 0x400
	// Position of TRANS_START_INT_RAW field.
	I2C_INT_RAW_TRANS_START_INT_RAW_Pos = 0x9
	// Bit mask of TRANS_START_INT_RAW field.
	I2C_INT_RAW_TRANS_START_INT_RAW_Msk = 0x200
	// Bit TRANS_START_INT_RAW.
	I2C_INT_RAW_TRANS_START_INT_RAW = 0x200
	// Position of TIME_OUT_INT_RAW field.
	I2C_INT_RAW_TIME_OUT_INT_RAW_Pos = 0x8
	// Bit mask of TIME_OUT_INT_RAW field.
	I2C_INT_RAW_TIME_OUT_INT_RAW_Msk = 0x100
	// Bit TIME_OUT_INT_RAW.
	I2C_INT_RAW_TIME_OUT_INT_RAW = 0x100
	// Position of TRANS_COMPLETE_INT_RAW field.
	I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_RAW field.
	I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_RAW.
	I2C_INT_RAW_TRANS_COMPLETE_INT_RAW = 0x80
	// Position of MASTER_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_MASTER_TRAN_COMP_INT_RAW_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_MASTER_TRAN_COMP_INT_RAW_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_RAW.
	I2C_INT_RAW_MASTER_TRAN_COMP_INT_RAW = 0x40
	// Position of ARBITRATION_LOST_INT_RAW field.
	I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_RAW field.
	I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_RAW.
	I2C_INT_RAW_ARBITRATION_LOST_INT_RAW = 0x20
	// Position of SLAVE_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_SLAVE_TRAN_COMP_INT_RAW_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_RAW field.
	I2C_INT_RAW_SLAVE_TRAN_COMP_INT_RAW_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_RAW.
	I2C_INT_RAW_SLAVE_TRAN_COMP_INT_RAW = 0x10
	// Position of END_DETECT_INT_RAW field.
	I2C_INT_RAW_END_DETECT_INT_RAW_Pos = 0x3
	// Bit mask of END_DETECT_INT_RAW field.
	I2C_INT_RAW_END_DETECT_INT_RAW_Msk = 0x8
	// Bit END_DETECT_INT_RAW.
	I2C_INT_RAW_END_DETECT_INT_RAW = 0x8
	// Position of RXFIFO_OVF_INT_RAW field.
	I2C_INT_RAW_RXFIFO_OVF_INT_RAW_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_RAW field.
	I2C_INT_RAW_RXFIFO_OVF_INT_RAW_Msk = 0x4
	// Bit RXFIFO_OVF_INT_RAW.
	I2C_INT_RAW_RXFIFO_OVF_INT_RAW = 0x4
	// Position of TXFIFO_EMPTY_INT_RAW field.
	I2C_INT_RAW_TXFIFO_EMPTY_INT_RAW_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_RAW field.
	I2C_INT_RAW_TXFIFO_EMPTY_INT_RAW_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_RAW.
	I2C_INT_RAW_TXFIFO_EMPTY_INT_RAW = 0x2
	// Position of RXFIFO_FULL_INT_RAW field.
	I2C_INT_RAW_RXFIFO_FULL_INT_RAW_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_RAW field.
	I2C_INT_RAW_RXFIFO_FULL_INT_RAW_Msk = 0x1
	// Bit RXFIFO_FULL_INT_RAW.
	I2C_INT_RAW_RXFIFO_FULL_INT_RAW = 0x1

	// INT_CLR: I2C_INT_CLR
	// Position of TX_SEND_EMPTY_INT_CLR field.
	I2C_INT_CLR_TX_SEND_EMPTY_INT_CLR_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_CLR field.
	I2C_INT_CLR_TX_SEND_EMPTY_INT_CLR_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_CLR.
	I2C_INT_CLR_TX_SEND_EMPTY_INT_CLR = 0x1000
	// Position of RX_REC_FULL_INT_CLR field.
	I2C_INT_CLR_RX_REC_FULL_INT_CLR_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_CLR field.
	I2C_INT_CLR_RX_REC_FULL_INT_CLR_Msk = 0x800
	// Bit RX_REC_FULL_INT_CLR.
	I2C_INT_CLR_RX_REC_FULL_INT_CLR = 0x800
	// Position of ACK_ERR_INT_CLR field.
	I2C_INT_CLR_ACK_ERR_INT_CLR_Pos = 0xa
	// Bit mask of ACK_ERR_INT_CLR field.
	I2C_INT_CLR_ACK_ERR_INT_CLR_Msk = 0x400
	// Bit ACK_ERR_INT_CLR.
	I2C_INT_CLR_ACK_ERR_INT_CLR = 0x400
	// Position of TRANS_START_INT_CLR field.
	I2C_INT_CLR_TRANS_START_INT_CLR_Pos = 0x9
	// Bit mask of TRANS_START_INT_CLR field.
	I2C_INT_CLR_TRANS_START_INT_CLR_Msk = 0x200
	// Bit TRANS_START_INT_CLR.
	I2C_INT_CLR_TRANS_START_INT_CLR = 0x200
	// Position of TIME_OUT_INT_CLR field.
	I2C_INT_CLR_TIME_OUT_INT_CLR_Pos = 0x8
	// Bit mask of TIME_OUT_INT_CLR field.
	I2C_INT_CLR_TIME_OUT_INT_CLR_Msk = 0x100
	// Bit TIME_OUT_INT_CLR.
	I2C_INT_CLR_TIME_OUT_INT_CLR = 0x100
	// Position of TRANS_COMPLETE_INT_CLR field.
	I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_CLR field.
	I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_CLR.
	I2C_INT_CLR_TRANS_COMPLETE_INT_CLR = 0x80
	// Position of MASTER_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_MASTER_TRAN_COMP_INT_CLR_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_MASTER_TRAN_COMP_INT_CLR_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_CLR.
	I2C_INT_CLR_MASTER_TRAN_COMP_INT_CLR = 0x40
	// Position of ARBITRATION_LOST_INT_CLR field.
	I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_CLR field.
	I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_CLR.
	I2C_INT_CLR_ARBITRATION_LOST_INT_CLR = 0x20
	// Position of SLAVE_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_SLAVE_TRAN_COMP_INT_CLR_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_CLR field.
	I2C_INT_CLR_SLAVE_TRAN_COMP_INT_CLR_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_CLR.
	I2C_INT_CLR_SLAVE_TRAN_COMP_INT_CLR = 0x10
	// Position of END_DETECT_INT_CLR field.
	I2C_INT_CLR_END_DETECT_INT_CLR_Pos = 0x3
	// Bit mask of END_DETECT_INT_CLR field.
	I2C_INT_CLR_END_DETECT_INT_CLR_Msk = 0x8
	// Bit END_DETECT_INT_CLR.
	I2C_INT_CLR_END_DETECT_INT_CLR = 0x8
	// Position of RXFIFO_OVF_INT_CLR field.
	I2C_INT_CLR_RXFIFO_OVF_INT_CLR_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_CLR field.
	I2C_INT_CLR_RXFIFO_OVF_INT_CLR_Msk = 0x4
	// Bit RXFIFO_OVF_INT_CLR.
	I2C_INT_CLR_RXFIFO_OVF_INT_CLR = 0x4
	// Position of TXFIFO_EMPTY_INT_CLR field.
	I2C_INT_CLR_TXFIFO_EMPTY_INT_CLR_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_CLR field.
	I2C_INT_CLR_TXFIFO_EMPTY_INT_CLR_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_CLR.
	I2C_INT_CLR_TXFIFO_EMPTY_INT_CLR = 0x2
	// Position of RXFIFO_FULL_INT_CLR field.
	I2C_INT_CLR_RXFIFO_FULL_INT_CLR_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_CLR field.
	I2C_INT_CLR_RXFIFO_FULL_INT_CLR_Msk = 0x1
	// Bit RXFIFO_FULL_INT_CLR.
	I2C_INT_CLR_RXFIFO_FULL_INT_CLR = 0x1

	// INT_ENA: I2C_INT_ENA
	// Position of TX_SEND_EMPTY_INT_ENA field.
	I2C_INT_ENA_TX_SEND_EMPTY_INT_ENA_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_ENA field.
	I2C_INT_ENA_TX_SEND_EMPTY_INT_ENA_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_ENA.
	I2C_INT_ENA_TX_SEND_EMPTY_INT_ENA = 0x1000
	// Position of RX_REC_FULL_INT_ENA field.
	I2C_INT_ENA_RX_REC_FULL_INT_ENA_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_ENA field.
	I2C_INT_ENA_RX_REC_FULL_INT_ENA_Msk = 0x800
	// Bit RX_REC_FULL_INT_ENA.
	I2C_INT_ENA_RX_REC_FULL_INT_ENA = 0x800
	// Position of ACK_ERR_INT_ENA field.
	I2C_INT_ENA_ACK_ERR_INT_ENA_Pos = 0xa
	// Bit mask of ACK_ERR_INT_ENA field.
	I2C_INT_ENA_ACK_ERR_INT_ENA_Msk = 0x400
	// Bit ACK_ERR_INT_ENA.
	I2C_INT_ENA_ACK_ERR_INT_ENA = 0x400
	// Position of TRANS_START_INT_ENA field.
	I2C_INT_ENA_TRANS_START_INT_ENA_Pos = 0x9
	// Bit mask of TRANS_START_INT_ENA field.
	I2C_INT_ENA_TRANS_START_INT_ENA_Msk = 0x200
	// Bit TRANS_START_INT_ENA.
	I2C_INT_ENA_TRANS_START_INT_ENA = 0x200
	// Position of TIME_OUT_INT_ENA field.
	I2C_INT_ENA_TIME_OUT_INT_ENA_Pos = 0x8
	// Bit mask of TIME_OUT_INT_ENA field.
	I2C_INT_ENA_TIME_OUT_INT_ENA_Msk = 0x100
	// Bit TIME_OUT_INT_ENA.
	I2C_INT_ENA_TIME_OUT_INT_ENA = 0x100
	// Position of TRANS_COMPLETE_INT_ENA field.
	I2C_INT_ENA_TRANS_COMPLETE_INT_ENA_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_ENA field.
	I2C_INT_ENA_TRANS_COMPLETE_INT_ENA_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_ENA.
	I2C_INT_ENA_TRANS_COMPLETE_INT_ENA = 0x80
	// Position of MASTER_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_MASTER_TRAN_COMP_INT_ENA_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_MASTER_TRAN_COMP_INT_ENA_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_ENA.
	I2C_INT_ENA_MASTER_TRAN_COMP_INT_ENA = 0x40
	// Position of ARBITRATION_LOST_INT_ENA field.
	I2C_INT_ENA_ARBITRATION_LOST_INT_ENA_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_ENA field.
	I2C_INT_ENA_ARBITRATION_LOST_INT_ENA_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_ENA.
	I2C_INT_ENA_ARBITRATION_LOST_INT_ENA = 0x20
	// Position of SLAVE_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_SLAVE_TRAN_COMP_INT_ENA_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_ENA field.
	I2C_INT_ENA_SLAVE_TRAN_COMP_INT_ENA_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_ENA.
	I2C_INT_ENA_SLAVE_TRAN_COMP_INT_ENA = 0x10
	// Position of END_DETECT_INT_ENA field.
	I2C_INT_ENA_END_DETECT_INT_ENA_Pos = 0x3
	// Bit mask of END_DETECT_INT_ENA field.
	I2C_INT_ENA_END_DETECT_INT_ENA_Msk = 0x8
	// Bit END_DETECT_INT_ENA.
	I2C_INT_ENA_END_DETECT_INT_ENA = 0x8
	// Position of RXFIFO_OVF_INT_ENA field.
	I2C_INT_ENA_RXFIFO_OVF_INT_ENA_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_ENA field.
	I2C_INT_ENA_RXFIFO_OVF_INT_ENA_Msk = 0x4
	// Bit RXFIFO_OVF_INT_ENA.
	I2C_INT_ENA_RXFIFO_OVF_INT_ENA = 0x4
	// Position of TXFIFO_EMPTY_INT_ENA field.
	I2C_INT_ENA_TXFIFO_EMPTY_INT_ENA_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ENA field.
	I2C_INT_ENA_TXFIFO_EMPTY_INT_ENA_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ENA.
	I2C_INT_ENA_TXFIFO_EMPTY_INT_ENA = 0x2
	// Position of RXFIFO_FULL_INT_ENA field.
	I2C_INT_ENA_RXFIFO_FULL_INT_ENA_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ENA field.
	I2C_INT_ENA_RXFIFO_FULL_INT_ENA_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ENA.
	I2C_INT_ENA_RXFIFO_FULL_INT_ENA = 0x1

	// INT_STATUS: I2C_INT_STATUS
	// Position of TX_SEND_EMPTY_INT_ST field.
	I2C_INT_STATUS_TX_SEND_EMPTY_INT_ST_Pos = 0xc
	// Bit mask of TX_SEND_EMPTY_INT_ST field.
	I2C_INT_STATUS_TX_SEND_EMPTY_INT_ST_Msk = 0x1000
	// Bit TX_SEND_EMPTY_INT_ST.
	I2C_INT_STATUS_TX_SEND_EMPTY_INT_ST = 0x1000
	// Position of RX_REC_FULL_INT_ST field.
	I2C_INT_STATUS_RX_REC_FULL_INT_ST_Pos = 0xb
	// Bit mask of RX_REC_FULL_INT_ST field.
	I2C_INT_STATUS_RX_REC_FULL_INT_ST_Msk = 0x800
	// Bit RX_REC_FULL_INT_ST.
	I2C_INT_STATUS_RX_REC_FULL_INT_ST = 0x800
	// Position of ACK_ERR_INT_ST field.
	I2C_INT_STATUS_ACK_ERR_INT_ST_Pos = 0xa
	// Bit mask of ACK_ERR_INT_ST field.
	I2C_INT_STATUS_ACK_ERR_INT_ST_Msk = 0x400
	// Bit ACK_ERR_INT_ST.
	I2C_INT_STATUS_ACK_ERR_INT_ST = 0x400
	// Position of TRANS_START_INT_ST field.
	I2C_INT_STATUS_TRANS_START_INT_ST_Pos = 0x9
	// Bit mask of TRANS_START_INT_ST field.
	I2C_INT_STATUS_TRANS_START_INT_ST_Msk = 0x200
	// Bit TRANS_START_INT_ST.
	I2C_INT_STATUS_TRANS_START_INT_ST = 0x200
	// Position of TIME_OUT_INT_ST field.
	I2C_INT_STATUS_TIME_OUT_INT_ST_Pos = 0x8
	// Bit mask of TIME_OUT_INT_ST field.
	I2C_INT_STATUS_TIME_OUT_INT_ST_Msk = 0x100
	// Bit TIME_OUT_INT_ST.
	I2C_INT_STATUS_TIME_OUT_INT_ST = 0x100
	// Position of TRANS_COMPLETE_INT_ST field.
	I2C_INT_STATUS_TRANS_COMPLETE_INT_ST_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_ST field.
	I2C_INT_STATUS_TRANS_COMPLETE_INT_ST_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_ST.
	I2C_INT_STATUS_TRANS_COMPLETE_INT_ST = 0x80
	// Position of MASTER_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_MASTER_TRAN_COMP_INT_ST_Pos = 0x6
	// Bit mask of MASTER_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_MASTER_TRAN_COMP_INT_ST_Msk = 0x40
	// Bit MASTER_TRAN_COMP_INT_ST.
	I2C_INT_STATUS_MASTER_TRAN_COMP_INT_ST = 0x40
	// Position of ARBITRATION_LOST_INT_ST field.
	I2C_INT_STATUS_ARBITRATION_LOST_INT_ST_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_ST field.
	I2C_INT_STATUS_ARBITRATION_LOST_INT_ST_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_ST.
	I2C_INT_STATUS_ARBITRATION_LOST_INT_ST = 0x20
	// Position of SLAVE_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_SLAVE_TRAN_COMP_INT_ST_Pos = 0x4
	// Bit mask of SLAVE_TRAN_COMP_INT_ST field.
	I2C_INT_STATUS_SLAVE_TRAN_COMP_INT_ST_Msk = 0x10
	// Bit SLAVE_TRAN_COMP_INT_ST.
	I2C_INT_STATUS_SLAVE_TRAN_COMP_INT_ST = 0x10
	// Position of END_DETECT_INT_ST field.
	I2C_INT_STATUS_END_DETECT_INT_ST_Pos = 0x3
	// Bit mask of END_DETECT_INT_ST field.
	I2C_INT_STATUS_END_DETECT_INT_ST_Msk = 0x8
	// Bit END_DETECT_INT_ST.
	I2C_INT_STATUS_END_DETECT_INT_ST = 0x8
	// Position of RXFIFO_OVF_INT_ST field.
	I2C_INT_STATUS_RXFIFO_OVF_INT_ST_Pos = 0x2
	// Bit mask of RXFIFO_OVF_INT_ST field.
	I2C_INT_STATUS_RXFIFO_OVF_INT_ST_Msk = 0x4
	// Bit RXFIFO_OVF_INT_ST.
	I2C_INT_STATUS_RXFIFO_OVF_INT_ST = 0x4
	// Position of TXFIFO_EMPTY_INT_ST field.
	I2C_INT_STATUS_TXFIFO_EMPTY_INT_ST_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ST field.
	I2C_INT_STATUS_TXFIFO_EMPTY_INT_ST_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ST.
	I2C_INT_STATUS_TXFIFO_EMPTY_INT_ST = 0x2
	// Position of RXFIFO_FULL_INT_ST field.
	I2C_INT_STATUS_RXFIFO_FULL_INT_ST_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ST field.
	I2C_INT_STATUS_RXFIFO_FULL_INT_ST_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ST.
	I2C_INT_STATUS_RXFIFO_FULL_INT_ST = 0x1

	// SDA_HOLD: I2C_SDA_HOLD
	// Position of TIME field.
	I2C_SDA_HOLD_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SDA_HOLD_TIME_Msk = 0x3ff

	// SDA_SAMPLE: I2C_SDA_SAMPLE
	// Position of TIME field.
	I2C_SDA_SAMPLE_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SDA_SAMPLE_TIME_Msk = 0x3ff

	// SCL_HIGH_PERIOD: I2C_SCL_HIGH_PERIOD
	// Position of PERIOD field.
	I2C_SCL_HIGH_PERIOD_PERIOD_Pos = 0x0
	// Bit mask of PERIOD field.
	I2C_SCL_HIGH_PERIOD_PERIOD_Msk = 0x3fff

	// SCL_START_HOLD: I2C_SCL_START_HOLD
	// Position of TIME field.
	I2C_SCL_START_HOLD_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_START_HOLD_TIME_Msk = 0x3ff

	// SCL_RSTART_SETUP: I2C_SCL_RSTART_SETUP
	// Position of TIME field.
	I2C_SCL_RSTART_SETUP_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_RSTART_SETUP_TIME_Msk = 0x3ff

	// SCL_STOP_HOLD: I2C_SCL_STOP_HOLD
	// Position of TIME field.
	I2C_SCL_STOP_HOLD_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_STOP_HOLD_TIME_Msk = 0x3fff

	// SCL_STOP_SETUP: I2C_SCL_STOP_SETUP
	// Position of TIME field.
	I2C_SCL_STOP_SETUP_TIME_Pos = 0x0
	// Bit mask of TIME field.
	I2C_SCL_STOP_SETUP_TIME_Msk = 0x3ff

	// SCL_FILTER_CFG: I2C_SCL_FILTER_CFG
	// Position of SCL_FILTER_EN field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_EN_Pos = 0x3
	// Bit mask of SCL_FILTER_EN field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_EN_Msk = 0x8
	// Bit SCL_FILTER_EN.
	I2C_SCL_FILTER_CFG_SCL_FILTER_EN = 0x8
	// Position of SCL_FILTER_THRES field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_THRES_Pos = 0x0
	// Bit mask of SCL_FILTER_THRES field.
	I2C_SCL_FILTER_CFG_SCL_FILTER_THRES_Msk = 0x7

	// SDA_FILTER_CFG: I2C_SDA_FILTER_CFG
	// Position of SDA_FILTER_EN field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_EN_Pos = 0x3
	// Bit mask of SDA_FILTER_EN field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_EN_Msk = 0x8
	// Bit SDA_FILTER_EN.
	I2C_SDA_FILTER_CFG_SDA_FILTER_EN = 0x8
	// Position of SDA_FILTER_THRES field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_THRES_Pos = 0x0
	// Bit mask of SDA_FILTER_THRES field.
	I2C_SDA_FILTER_CFG_SDA_FILTER_THRES_Msk = 0x7

	// COMD0: I2C_COMD0
	// Position of COMMAND0_DONE field.
	I2C_COMD0_COMMAND0_DONE_Pos = 0x1f
	// Bit mask of COMMAND0_DONE field.
	I2C_COMD0_COMMAND0_DONE_Msk = 0x80000000
	// Bit COMMAND0_DONE.
	I2C_COMD0_COMMAND0_DONE = 0x80000000
	// Position of COMMAND0 field.
	I2C_COMD0_COMMAND0_Pos = 0x0
	// Bit mask of COMMAND0 field.
	I2C_COMD0_COMMAND0_Msk = 0x3fff

	// COMD1: I2C_COMD1
	// Position of COMMAND1_DONE field.
	I2C_COMD1_COMMAND1_DONE_Pos = 0x1f
	// Bit mask of COMMAND1_DONE field.
	I2C_COMD1_COMMAND1_DONE_Msk = 0x80000000
	// Bit COMMAND1_DONE.
	I2C_COMD1_COMMAND1_DONE = 0x80000000
	// Position of COMMAND1 field.
	I2C_COMD1_COMMAND1_Pos = 0x0
	// Bit mask of COMMAND1 field.
	I2C_COMD1_COMMAND1_Msk = 0x3fff

	// COMD2: I2C_COMD2
	// Position of COMMAND2_DONE field.
	I2C_COMD2_COMMAND2_DONE_Pos = 0x1f
	// Bit mask of COMMAND2_DONE field.
	I2C_COMD2_COMMAND2_DONE_Msk = 0x80000000
	// Bit COMMAND2_DONE.
	I2C_COMD2_COMMAND2_DONE = 0x80000000
	// Position of COMMAND2 field.
	I2C_COMD2_COMMAND2_Pos = 0x0
	// Bit mask of COMMAND2 field.
	I2C_COMD2_COMMAND2_Msk = 0x3fff

	// COMD3: I2C_COMD3
	// Position of COMMAND3_DONE field.
	I2C_COMD3_COMMAND3_DONE_Pos = 0x1f
	// Bit mask of COMMAND3_DONE field.
	I2C_COMD3_COMMAND3_DONE_Msk = 0x80000000
	// Bit COMMAND3_DONE.
	I2C_COMD3_COMMAND3_DONE = 0x80000000
	// Position of COMMAND3 field.
	I2C_COMD3_COMMAND3_Pos = 0x0
	// Bit mask of COMMAND3 field.
	I2C_COMD3_COMMAND3_Msk = 0x3fff

	// COMD4: I2C_COMD4
	// Position of COMMAND4_DONE field.
	I2C_COMD4_COMMAND4_DONE_Pos = 0x1f
	// Bit mask of COMMAND4_DONE field.
	I2C_COMD4_COMMAND4_DONE_Msk = 0x80000000
	// Bit COMMAND4_DONE.
	I2C_COMD4_COMMAND4_DONE = 0x80000000
	// Position of COMMAND4 field.
	I2C_COMD4_COMMAND4_Pos = 0x0
	// Bit mask of COMMAND4 field.
	I2C_COMD4_COMMAND4_Msk = 0x3fff

	// COMD5: I2C_COMD5
	// Position of COMMAND5_DONE field.
	I2C_COMD5_COMMAND5_DONE_Pos = 0x1f
	// Bit mask of COMMAND5_DONE field.
	I2C_COMD5_COMMAND5_DONE_Msk = 0x80000000
	// Bit COMMAND5_DONE.
	I2C_COMD5_COMMAND5_DONE = 0x80000000
	// Position of COMMAND5 field.
	I2C_COMD5_COMMAND5_Pos = 0x0
	// Bit mask of COMMAND5 field.
	I2C_COMD5_COMMAND5_Msk = 0x3fff

	// COMD6: I2C_COMD6
	// Position of COMMAND6_DONE field.
	I2C_COMD6_COMMAND6_DONE_Pos = 0x1f
	// Bit mask of COMMAND6_DONE field.
	I2C_COMD6_COMMAND6_DONE_Msk = 0x80000000
	// Bit COMMAND6_DONE.
	I2C_COMD6_COMMAND6_DONE = 0x80000000
	// Position of COMMAND6 field.
	I2C_COMD6_COMMAND6_Pos = 0x0
	// Bit mask of COMMAND6 field.
	I2C_COMD6_COMMAND6_Msk = 0x3fff

	// COMD7: I2C_COMD7
	// Position of COMMAND7_DONE field.
	I2C_COMD7_COMMAND7_DONE_Pos = 0x1f
	// Bit mask of COMMAND7_DONE field.
	I2C_COMD7_COMMAND7_DONE_Msk = 0x80000000
	// Bit COMMAND7_DONE.
	I2C_COMD7_COMMAND7_DONE = 0x80000000
	// Position of COMMAND7 field.
	I2C_COMD7_COMMAND7_Pos = 0x0
	// Bit mask of COMMAND7 field.
	I2C_COMD7_COMMAND7_Msk = 0x3fff

	// COMD8: I2C_COMD8
	// Position of COMMAND8_DONE field.
	I2C_COMD8_COMMAND8_DONE_Pos = 0x1f
	// Bit mask of COMMAND8_DONE field.
	I2C_COMD8_COMMAND8_DONE_Msk = 0x80000000
	// Bit COMMAND8_DONE.
	I2C_COMD8_COMMAND8_DONE = 0x80000000
	// Position of COMMAND8 field.
	I2C_COMD8_COMMAND8_Pos = 0x0
	// Bit mask of COMMAND8 field.
	I2C_COMD8_COMMAND8_Msk = 0x3fff

	// COMD9: I2C_COMD9
	// Position of COMMAND9_DONE field.
	I2C_COMD9_COMMAND9_DONE_Pos = 0x1f
	// Bit mask of COMMAND9_DONE field.
	I2C_COMD9_COMMAND9_DONE_Msk = 0x80000000
	// Bit COMMAND9_DONE.
	I2C_COMD9_COMMAND9_DONE = 0x80000000
	// Position of COMMAND9 field.
	I2C_COMD9_COMMAND9_Pos = 0x0
	// Bit mask of COMMAND9 field.
	I2C_COMD9_COMMAND9_Msk = 0x3fff

	// COMD10: I2C_COMD10
	// Position of COMMAND10_DONE field.
	I2C_COMD10_COMMAND10_DONE_Pos = 0x1f
	// Bit mask of COMMAND10_DONE field.
	I2C_COMD10_COMMAND10_DONE_Msk = 0x80000000
	// Bit COMMAND10_DONE.
	I2C_COMD10_COMMAND10_DONE = 0x80000000
	// Position of COMMAND10 field.
	I2C_COMD10_COMMAND10_Pos = 0x0
	// Bit mask of COMMAND10 field.
	I2C_COMD10_COMMAND10_Msk = 0x3fff

	// COMD11: I2C_COMD11
	// Position of COMMAND11_DONE field.
	I2C_COMD11_COMMAND11_DONE_Pos = 0x1f
	// Bit mask of COMMAND11_DONE field.
	I2C_COMD11_COMMAND11_DONE_Msk = 0x80000000
	// Bit COMMAND11_DONE.
	I2C_COMD11_COMMAND11_DONE = 0x80000000
	// Position of COMMAND11 field.
	I2C_COMD11_COMMAND11_Pos = 0x0
	// Bit mask of COMMAND11 field.
	I2C_COMD11_COMMAND11_Msk = 0x3fff

	// COMD12: I2C_COMD12
	// Position of COMMAND12_DONE field.
	I2C_COMD12_COMMAND12_DONE_Pos = 0x1f
	// Bit mask of COMMAND12_DONE field.
	I2C_COMD12_COMMAND12_DONE_Msk = 0x80000000
	// Bit COMMAND12_DONE.
	I2C_COMD12_COMMAND12_DONE = 0x80000000
	// Position of COMMAND12 field.
	I2C_COMD12_COMMAND12_Pos = 0x0
	// Bit mask of COMMAND12 field.
	I2C_COMD12_COMMAND12_Msk = 0x3fff

	// COMD13: I2C_COMD13
	// Position of COMMAND13_DONE field.
	I2C_COMD13_COMMAND13_DONE_Pos = 0x1f
	// Bit mask of COMMAND13_DONE field.
	I2C_COMD13_COMMAND13_DONE_Msk = 0x80000000
	// Bit COMMAND13_DONE.
	I2C_COMD13_COMMAND13_DONE = 0x80000000
	// Position of COMMAND13 field.
	I2C_COMD13_COMMAND13_Pos = 0x0
	// Bit mask of COMMAND13 field.
	I2C_COMD13_COMMAND13_Msk = 0x3fff

	// COMD14: I2C_COMD14
	// Position of COMMAND14_DONE field.
	I2C_COMD14_COMMAND14_DONE_Pos = 0x1f
	// Bit mask of COMMAND14_DONE field.
	I2C_COMD14_COMMAND14_DONE_Msk = 0x80000000
	// Bit COMMAND14_DONE.
	I2C_COMD14_COMMAND14_DONE = 0x80000000
	// Position of COMMAND14 field.
	I2C_COMD14_COMMAND14_Pos = 0x0
	// Bit mask of COMMAND14 field.
	I2C_COMD14_COMMAND14_Msk = 0x3fff

	// COMD15: I2C_COMD15
	// Position of COMMAND15_DONE field.
	I2C_COMD15_COMMAND15_DONE_Pos = 0x1f
	// Bit mask of COMMAND15_DONE field.
	I2C_COMD15_COMMAND15_DONE_Msk = 0x80000000
	// Bit COMMAND15_DONE.
	I2C_COMD15_COMMAND15_DONE = 0x80000000
	// Position of COMMAND15 field.
	I2C_COMD15_COMMAND15_Pos = 0x0
	// Bit mask of COMMAND15 field.
	I2C_COMD15_COMMAND15_Msk = 0x3fff

	// DATE: I2C_DATE
	// Position of DATE field.
	I2C_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	I2C_DATE_DATE_Msk = 0xffffffff
)

// Constants for EFUSE
const (
	// BLK0_RDATA0: EFUSE_BLK0_RDATA0
	// Position of RD_FLASH_CRYPT_CNT field.
	EFUSE_BLK0_RDATA0_RD_FLASH_CRYPT_CNT_Pos = 0x14
	// Bit mask of RD_FLASH_CRYPT_CNT field.
	EFUSE_BLK0_RDATA0_RD_FLASH_CRYPT_CNT_Msk = 0x7f00000
	// Position of RD_EFUSE_RD_DIS field.
	EFUSE_BLK0_RDATA0_RD_EFUSE_RD_DIS_Pos = 0x10
	// Bit mask of RD_EFUSE_RD_DIS field.
	EFUSE_BLK0_RDATA0_RD_EFUSE_RD_DIS_Msk = 0xf0000

	// BLK0_RDATA1: EFUSE_BLK0_RDATA1
	// Position of RD_WIFI_MAC_CRC_LOW field.
	EFUSE_BLK0_RDATA1_RD_WIFI_MAC_CRC_LOW_Pos = 0x0
	// Bit mask of RD_WIFI_MAC_CRC_LOW field.
	EFUSE_BLK0_RDATA1_RD_WIFI_MAC_CRC_LOW_Msk = 0xffffffff

	// BLK0_RDATA2: EFUSE_BLK0_RDATA2
	// Position of RD_WIFI_MAC_CRC_HIGH field.
	EFUSE_BLK0_RDATA2_RD_WIFI_MAC_CRC_HIGH_Pos = 0x0
	// Bit mask of RD_WIFI_MAC_CRC_HIGH field.
	EFUSE_BLK0_RDATA2_RD_WIFI_MAC_CRC_HIGH_Msk = 0xffffff

	// BLK0_RDATA3: EFUSE_BLK0_RDATA3
	// Position of RD_CHIP_VER_REV1 field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_REV1_Pos = 0xf
	// Bit mask of RD_CHIP_VER_REV1 field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_REV1_Msk = 0x8000
	// Bit RD_CHIP_VER_REV1.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_REV1 = 0x8000
	// Position of RD_CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED_Pos = 0xd
	// Bit mask of RD_CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED_Msk = 0x2000
	// Bit RD_CHIP_CPU_FREQ_RATED.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_RATED = 0x2000
	// Position of RD_CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW_Pos = 0xc
	// Bit mask of RD_CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW_Msk = 0x1000
	// Bit RD_CHIP_CPU_FREQ_LOW.
	EFUSE_BLK0_RDATA3_RD_CHIP_CPU_FREQ_LOW = 0x1000
	// Position of RD_CHIP_VER_PKG field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_PKG_Pos = 0x9
	// Bit mask of RD_CHIP_VER_PKG field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_PKG_Msk = 0xe00
	// Position of RD_SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_RDATA3_RD_SPI_PAD_CONFIG_HD_Pos = 0x4
	// Bit mask of RD_SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_RDATA3_RD_SPI_PAD_CONFIG_HD_Msk = 0x1f0
	// Position of RD_CHIP_VER_DIS_CACHE field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_CACHE_Pos = 0x3
	// Bit mask of RD_CHIP_VER_DIS_CACHE field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_CACHE_Msk = 0x8
	// Bit RD_CHIP_VER_DIS_CACHE.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_CACHE = 0x8
	// Position of RD_CHIP_VER_32PAD field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_32PAD_Pos = 0x2
	// Bit mask of RD_CHIP_VER_32PAD field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_32PAD_Msk = 0x4
	// Bit RD_CHIP_VER_32PAD.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_32PAD = 0x4
	// Position of RD_CHIP_VER_DIS_BT field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_BT_Pos = 0x1
	// Bit mask of RD_CHIP_VER_DIS_BT field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_BT_Msk = 0x2
	// Bit RD_CHIP_VER_DIS_BT.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_BT = 0x2
	// Position of RD_CHIP_VER_DIS_APP_CPU field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_APP_CPU_Pos = 0x0
	// Bit mask of RD_CHIP_VER_DIS_APP_CPU field.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_APP_CPU_Msk = 0x1
	// Bit RD_CHIP_VER_DIS_APP_CPU.
	EFUSE_BLK0_RDATA3_RD_CHIP_VER_DIS_APP_CPU = 0x1

	// BLK0_RDATA4: EFUSE_BLK0_RDATA4
	// Position of RD_SDIO_FORCE field.
	EFUSE_BLK0_RDATA4_RD_SDIO_FORCE_Pos = 0x10
	// Bit mask of RD_SDIO_FORCE field.
	EFUSE_BLK0_RDATA4_RD_SDIO_FORCE_Msk = 0x10000
	// Bit RD_SDIO_FORCE.
	EFUSE_BLK0_RDATA4_RD_SDIO_FORCE = 0x10000
	// Position of RD_SDIO_TIEH field.
	EFUSE_BLK0_RDATA4_RD_SDIO_TIEH_Pos = 0xf
	// Bit mask of RD_SDIO_TIEH field.
	EFUSE_BLK0_RDATA4_RD_SDIO_TIEH_Msk = 0x8000
	// Bit RD_SDIO_TIEH.
	EFUSE_BLK0_RDATA4_RD_SDIO_TIEH = 0x8000
	// Position of RD_XPD_SDIO_REG field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_REG_Pos = 0xe
	// Bit mask of RD_XPD_SDIO_REG field.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_REG_Msk = 0x4000
	// Bit RD_XPD_SDIO_REG.
	EFUSE_BLK0_RDATA4_RD_XPD_SDIO_REG = 0x4000
	// Position of RD_ADC_VREF field.
	EFUSE_BLK0_RDATA4_RD_ADC_VREF_Pos = 0x8
	// Bit mask of RD_ADC_VREF field.
	EFUSE_BLK0_RDATA4_RD_ADC_VREF_Msk = 0x1f00
	// Position of RD_SDIO_DREFL field.
	EFUSE_BLK0_RDATA4_RD_SDIO_DREFL_Pos = 0xc
	// Bit mask of RD_SDIO_DREFL field.
	EFUSE_BLK0_RDATA4_RD_SDIO_DREFL_Msk = 0x3000
	// Position of RD_SDIO_DREFM field.
	EFUSE_BLK0_RDATA4_RD_SDIO_DREFM_Pos = 0xa
	// Bit mask of RD_SDIO_DREFM field.
	EFUSE_BLK0_RDATA4_RD_SDIO_DREFM_Msk = 0xc00
	// Position of RD_SDIO_DREFH field.
	EFUSE_BLK0_RDATA4_RD_SDIO_DREFH_Pos = 0x8
	// Bit mask of RD_SDIO_DREFH field.
	EFUSE_BLK0_RDATA4_RD_SDIO_DREFH_Msk = 0x300
	// Position of RD_CK8M_FREQ field.
	EFUSE_BLK0_RDATA4_RD_CK8M_FREQ_Pos = 0x0
	// Bit mask of RD_CK8M_FREQ field.
	EFUSE_BLK0_RDATA4_RD_CK8M_FREQ_Msk = 0xff

	// BLK0_RDATA5: EFUSE_BLK0_RDATA5
	// Position of RD_FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_RDATA5_RD_FLASH_CRYPT_CONFIG_Pos = 0x1c
	// Bit mask of RD_FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_RDATA5_RD_FLASH_CRYPT_CONFIG_Msk = 0xf0000000
	// Position of RD_INST_CONFIG field.
	EFUSE_BLK0_RDATA5_RD_INST_CONFIG_Pos = 0x14
	// Bit mask of RD_INST_CONFIG field.
	EFUSE_BLK0_RDATA5_RD_INST_CONFIG_Msk = 0xff00000
	// Position of RD_SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_D_Pos = 0xa
	// Bit mask of RD_SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_D_Msk = 0x7c00
	// Position of RD_SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_Q_Pos = 0x5
	// Bit mask of RD_SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_Q_Msk = 0x3e0
	// Position of RD_SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK_Pos = 0x0
	// Bit mask of RD_SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_RDATA5_RD_SPI_PAD_CONFIG_CLK_Msk = 0x1f

	// BLK0_RDATA6: EFUSE_BLK0_RDATA6
	// Position of RD_KEY_STATUS field.
	EFUSE_BLK0_RDATA6_RD_KEY_STATUS_Pos = 0xa
	// Bit mask of RD_KEY_STATUS field.
	EFUSE_BLK0_RDATA6_RD_KEY_STATUS_Msk = 0x400
	// Bit RD_KEY_STATUS.
	EFUSE_BLK0_RDATA6_RD_KEY_STATUS = 0x400
	// Position of RD_DISABLE_DL_CACHE field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_CACHE_Pos = 0x9
	// Bit mask of RD_DISABLE_DL_CACHE field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_CACHE_Msk = 0x200
	// Bit RD_DISABLE_DL_CACHE.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_CACHE = 0x200
	// Position of RD_DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_DECRYPT_Pos = 0x8
	// Bit mask of RD_DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_DECRYPT_Msk = 0x100
	// Bit RD_DISABLE_DL_DECRYPT.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_DECRYPT = 0x100
	// Position of RD_DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_ENCRYPT_Pos = 0x7
	// Bit mask of RD_DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_ENCRYPT_Msk = 0x80
	// Bit RD_DISABLE_DL_ENCRYPT.
	EFUSE_BLK0_RDATA6_RD_DISABLE_DL_ENCRYPT = 0x80
	// Position of RD_DISABLE_JTAG field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_JTAG_Pos = 0x6
	// Bit mask of RD_DISABLE_JTAG field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_JTAG_Msk = 0x40
	// Bit RD_DISABLE_JTAG.
	EFUSE_BLK0_RDATA6_RD_DISABLE_JTAG = 0x40
	// Position of RD_ABS_DONE_1 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_1_Pos = 0x5
	// Bit mask of RD_ABS_DONE_1 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_1_Msk = 0x20
	// Bit RD_ABS_DONE_1.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_1 = 0x20
	// Position of RD_ABS_DONE_0 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_0_Pos = 0x4
	// Bit mask of RD_ABS_DONE_0 field.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_0_Msk = 0x10
	// Bit RD_ABS_DONE_0.
	EFUSE_BLK0_RDATA6_RD_ABS_DONE_0 = 0x10
	// Position of RD_DISABLE_SDIO_HOST field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_SDIO_HOST_Pos = 0x3
	// Bit mask of RD_DISABLE_SDIO_HOST field.
	EFUSE_BLK0_RDATA6_RD_DISABLE_SDIO_HOST_Msk = 0x8
	// Bit RD_DISABLE_SDIO_HOST.
	EFUSE_BLK0_RDATA6_RD_DISABLE_SDIO_HOST = 0x8
	// Position of RD_CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE_Pos = 0x2
	// Bit mask of RD_CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE_Msk = 0x4
	// Bit RD_CONSOLE_DEBUG_DISABLE.
	EFUSE_BLK0_RDATA6_RD_CONSOLE_DEBUG_DISABLE = 0x4
	// Position of RD_CODING_SCHEME field.
	EFUSE_BLK0_RDATA6_RD_CODING_SCHEME_Pos = 0x0
	// Bit mask of RD_CODING_SCHEME field.
	EFUSE_BLK0_RDATA6_RD_CODING_SCHEME_Msk = 0x3

	// BLK0_WDATA0: EFUSE_BLK0_WDATA0
	// Position of FLASH_CRYPT_CNT field.
	EFUSE_BLK0_WDATA0_FLASH_CRYPT_CNT_Pos = 0x14
	// Bit mask of FLASH_CRYPT_CNT field.
	EFUSE_BLK0_WDATA0_FLASH_CRYPT_CNT_Msk = 0x7f00000
	// Position of RD_DIS field.
	EFUSE_BLK0_WDATA0_RD_DIS_Pos = 0x10
	// Bit mask of RD_DIS field.
	EFUSE_BLK0_WDATA0_RD_DIS_Msk = 0xf0000
	// Position of WR_DIS field.
	EFUSE_BLK0_WDATA0_WR_DIS_Pos = 0x0
	// Bit mask of WR_DIS field.
	EFUSE_BLK0_WDATA0_WR_DIS_Msk = 0xffff

	// BLK0_WDATA1: EFUSE_BLK0_WDATA1
	// Position of WIFI_MAC_CRC_LOW field.
	EFUSE_BLK0_WDATA1_WIFI_MAC_CRC_LOW_Pos = 0x0
	// Bit mask of WIFI_MAC_CRC_LOW field.
	EFUSE_BLK0_WDATA1_WIFI_MAC_CRC_LOW_Msk = 0xffffffff

	// BLK0_WDATA2: EFUSE_BLK0_WDATA2
	// Position of WIFI_MAC_CRC_HIGH field.
	EFUSE_BLK0_WDATA2_WIFI_MAC_CRC_HIGH_Pos = 0x0
	// Bit mask of WIFI_MAC_CRC_HIGH field.
	EFUSE_BLK0_WDATA2_WIFI_MAC_CRC_HIGH_Msk = 0xffffff

	// BLK0_WDATA3: EFUSE_BLK0_WDATA3
	// Position of CHIP_VER_REV1 field.
	EFUSE_BLK0_WDATA3_CHIP_VER_REV1_Pos = 0xf
	// Bit mask of CHIP_VER_REV1 field.
	EFUSE_BLK0_WDATA3_CHIP_VER_REV1_Msk = 0x8000
	// Bit CHIP_VER_REV1.
	EFUSE_BLK0_WDATA3_CHIP_VER_REV1 = 0x8000
	// Position of CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_RATED_Pos = 0xd
	// Bit mask of CHIP_CPU_FREQ_RATED field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_RATED_Msk = 0x2000
	// Bit CHIP_CPU_FREQ_RATED.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_RATED = 0x2000
	// Position of CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_LOW_Pos = 0xc
	// Bit mask of CHIP_CPU_FREQ_LOW field.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_LOW_Msk = 0x1000
	// Bit CHIP_CPU_FREQ_LOW.
	EFUSE_BLK0_WDATA3_CHIP_CPU_FREQ_LOW = 0x1000
	// Position of CHIP_VER_PKG field.
	EFUSE_BLK0_WDATA3_CHIP_VER_PKG_Pos = 0x9
	// Bit mask of CHIP_VER_PKG field.
	EFUSE_BLK0_WDATA3_CHIP_VER_PKG_Msk = 0xe00
	// Position of SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_WDATA3_SPI_PAD_CONFIG_HD_Pos = 0x4
	// Bit mask of SPI_PAD_CONFIG_HD field.
	EFUSE_BLK0_WDATA3_SPI_PAD_CONFIG_HD_Msk = 0x1f0
	// Position of CHIP_VER_DIS_CACHE field.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_CACHE_Pos = 0x3
	// Bit mask of CHIP_VER_DIS_CACHE field.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_CACHE_Msk = 0x8
	// Bit CHIP_VER_DIS_CACHE.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_CACHE = 0x8
	// Position of CHIP_VER_32PAD field.
	EFUSE_BLK0_WDATA3_CHIP_VER_32PAD_Pos = 0x2
	// Bit mask of CHIP_VER_32PAD field.
	EFUSE_BLK0_WDATA3_CHIP_VER_32PAD_Msk = 0x4
	// Bit CHIP_VER_32PAD.
	EFUSE_BLK0_WDATA3_CHIP_VER_32PAD = 0x4
	// Position of CHIP_VER_DIS_BT field.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_BT_Pos = 0x1
	// Bit mask of CHIP_VER_DIS_BT field.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_BT_Msk = 0x2
	// Bit CHIP_VER_DIS_BT.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_BT = 0x2
	// Position of CHIP_VER_DIS_APP_CPU field.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_APP_CPU_Pos = 0x0
	// Bit mask of CHIP_VER_DIS_APP_CPU field.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_APP_CPU_Msk = 0x1
	// Bit CHIP_VER_DIS_APP_CPU.
	EFUSE_BLK0_WDATA3_CHIP_VER_DIS_APP_CPU = 0x1

	// BLK0_WDATA4: EFUSE_BLK0_WDATA4
	// Position of SDIO_FORCE field.
	EFUSE_BLK0_WDATA4_SDIO_FORCE_Pos = 0x10
	// Bit mask of SDIO_FORCE field.
	EFUSE_BLK0_WDATA4_SDIO_FORCE_Msk = 0x10000
	// Bit SDIO_FORCE.
	EFUSE_BLK0_WDATA4_SDIO_FORCE = 0x10000
	// Position of SDIO_TIEH field.
	EFUSE_BLK0_WDATA4_SDIO_TIEH_Pos = 0xf
	// Bit mask of SDIO_TIEH field.
	EFUSE_BLK0_WDATA4_SDIO_TIEH_Msk = 0x8000
	// Bit SDIO_TIEH.
	EFUSE_BLK0_WDATA4_SDIO_TIEH = 0x8000
	// Position of XPD_SDIO_REG field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_REG_Pos = 0xe
	// Bit mask of XPD_SDIO_REG field.
	EFUSE_BLK0_WDATA4_XPD_SDIO_REG_Msk = 0x4000
	// Bit XPD_SDIO_REG.
	EFUSE_BLK0_WDATA4_XPD_SDIO_REG = 0x4000
	// Position of ADC_VREF field.
	EFUSE_BLK0_WDATA4_ADC_VREF_Pos = 0x8
	// Bit mask of ADC_VREF field.
	EFUSE_BLK0_WDATA4_ADC_VREF_Msk = 0x1f00
	// Position of SDIO_DREFL field.
	EFUSE_BLK0_WDATA4_SDIO_DREFL_Pos = 0xc
	// Bit mask of SDIO_DREFL field.
	EFUSE_BLK0_WDATA4_SDIO_DREFL_Msk = 0x3000
	// Position of SDIO_DREFM field.
	EFUSE_BLK0_WDATA4_SDIO_DREFM_Pos = 0xa
	// Bit mask of SDIO_DREFM field.
	EFUSE_BLK0_WDATA4_SDIO_DREFM_Msk = 0xc00
	// Position of SDIO_DREFH field.
	EFUSE_BLK0_WDATA4_SDIO_DREFH_Pos = 0x8
	// Bit mask of SDIO_DREFH field.
	EFUSE_BLK0_WDATA4_SDIO_DREFH_Msk = 0x300
	// Position of CK8M_FREQ field.
	EFUSE_BLK0_WDATA4_CK8M_FREQ_Pos = 0x0
	// Bit mask of CK8M_FREQ field.
	EFUSE_BLK0_WDATA4_CK8M_FREQ_Msk = 0xff

	// BLK0_WDATA5: EFUSE_BLK0_WDATA5
	// Position of FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_WDATA5_FLASH_CRYPT_CONFIG_Pos = 0x1c
	// Bit mask of FLASH_CRYPT_CONFIG field.
	EFUSE_BLK0_WDATA5_FLASH_CRYPT_CONFIG_Msk = 0xf0000000
	// Position of INST_CONFIG field.
	EFUSE_BLK0_WDATA5_INST_CONFIG_Pos = 0x14
	// Bit mask of INST_CONFIG field.
	EFUSE_BLK0_WDATA5_INST_CONFIG_Msk = 0xff00000
	// Position of SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_D_Pos = 0xa
	// Bit mask of SPI_PAD_CONFIG_D field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_D_Msk = 0x7c00
	// Position of SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_Q_Pos = 0x5
	// Bit mask of SPI_PAD_CONFIG_Q field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_Q_Msk = 0x3e0
	// Position of SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_CLK_Pos = 0x0
	// Bit mask of SPI_PAD_CONFIG_CLK field.
	EFUSE_BLK0_WDATA5_SPI_PAD_CONFIG_CLK_Msk = 0x1f

	// BLK0_WDATA6: EFUSE_BLK0_WDATA6
	// Position of KEY_STATUS field.
	EFUSE_BLK0_WDATA6_KEY_STATUS_Pos = 0xa
	// Bit mask of KEY_STATUS field.
	EFUSE_BLK0_WDATA6_KEY_STATUS_Msk = 0x400
	// Bit KEY_STATUS.
	EFUSE_BLK0_WDATA6_KEY_STATUS = 0x400
	// Position of DISABLE_DL_CACHE field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_CACHE_Pos = 0x9
	// Bit mask of DISABLE_DL_CACHE field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_CACHE_Msk = 0x200
	// Bit DISABLE_DL_CACHE.
	EFUSE_BLK0_WDATA6_DISABLE_DL_CACHE = 0x200
	// Position of DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_DECRYPT_Pos = 0x8
	// Bit mask of DISABLE_DL_DECRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_DECRYPT_Msk = 0x100
	// Bit DISABLE_DL_DECRYPT.
	EFUSE_BLK0_WDATA6_DISABLE_DL_DECRYPT = 0x100
	// Position of DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_ENCRYPT_Pos = 0x7
	// Bit mask of DISABLE_DL_ENCRYPT field.
	EFUSE_BLK0_WDATA6_DISABLE_DL_ENCRYPT_Msk = 0x80
	// Bit DISABLE_DL_ENCRYPT.
	EFUSE_BLK0_WDATA6_DISABLE_DL_ENCRYPT = 0x80
	// Position of DISABLE_JTAG field.
	EFUSE_BLK0_WDATA6_DISABLE_JTAG_Pos = 0x6
	// Bit mask of DISABLE_JTAG field.
	EFUSE_BLK0_WDATA6_DISABLE_JTAG_Msk = 0x40
	// Bit DISABLE_JTAG.
	EFUSE_BLK0_WDATA6_DISABLE_JTAG = 0x40
	// Position of ABS_DONE_1 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_1_Pos = 0x5
	// Bit mask of ABS_DONE_1 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_1_Msk = 0x20
	// Bit ABS_DONE_1.
	EFUSE_BLK0_WDATA6_ABS_DONE_1 = 0x20
	// Position of ABS_DONE_0 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_0_Pos = 0x4
	// Bit mask of ABS_DONE_0 field.
	EFUSE_BLK0_WDATA6_ABS_DONE_0_Msk = 0x10
	// Bit ABS_DONE_0.
	EFUSE_BLK0_WDATA6_ABS_DONE_0 = 0x10
	// Position of DISABLE_SDIO_HOST field.
	EFUSE_BLK0_WDATA6_DISABLE_SDIO_HOST_Pos = 0x3
	// Bit mask of DISABLE_SDIO_HOST field.
	EFUSE_BLK0_WDATA6_DISABLE_SDIO_HOST_Msk = 0x8
	// Bit DISABLE_SDIO_HOST.
	EFUSE_BLK0_WDATA6_DISABLE_SDIO_HOST = 0x8
	// Position of CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_WDATA6_CONSOLE_DEBUG_DISABLE_Pos = 0x2
	// Bit mask of CONSOLE_DEBUG_DISABLE field.
	EFUSE_BLK0_WDATA6_CONSOLE_DEBUG_DISABLE_Msk = 0x4
	// Bit CONSOLE_DEBUG_DISABLE.
	EFUSE_BLK0_WDATA6_CONSOLE_DEBUG_DISABLE = 0x4
	// Position of CODING_SCHEME field.
	EFUSE_BLK0_WDATA6_CODING_SCHEME_Pos = 0x0
	// Bit mask of CODING_SCHEME field.
	EFUSE_BLK0_WDATA6_CODING_SCHEME_Msk = 0x3

	// BLK1_RDATA0: EFUSE_BLK1_RDATA0
	// Position of BLK1_DOUT0 field.
	EFUSE_BLK1_RDATA0_BLK1_DOUT0_Pos = 0x0
	// Bit mask of BLK1_DOUT0 field.
	EFUSE_BLK1_RDATA0_BLK1_DOUT0_Msk = 0xffffffff

	// BLK1_RDATA1: EFUSE_BLK1_RDATA1
	// Position of BLK1_DOUT1 field.
	EFUSE_BLK1_RDATA1_BLK1_DOUT1_Pos = 0x0
	// Bit mask of BLK1_DOUT1 field.
	EFUSE_BLK1_RDATA1_BLK1_DOUT1_Msk = 0xffffffff

	// BLK1_RDATA2: EFUSE_BLK1_RDATA2
	// Position of BLK1_DOUT2 field.
	EFUSE_BLK1_RDATA2_BLK1_DOUT2_Pos = 0x0
	// Bit mask of BLK1_DOUT2 field.
	EFUSE_BLK1_RDATA2_BLK1_DOUT2_Msk = 0xffffffff

	// BLK1_RDATA3: EFUSE_BLK1_RDATA3
	// Position of BLK1_DOUT3 field.
	EFUSE_BLK1_RDATA3_BLK1_DOUT3_Pos = 0x0
	// Bit mask of BLK1_DOUT3 field.
	EFUSE_BLK1_RDATA3_BLK1_DOUT3_Msk = 0xffffffff

	// BLK1_RDATA4: EFUSE_BLK1_RDATA4
	// Position of BLK1_DOUT4 field.
	EFUSE_BLK1_RDATA4_BLK1_DOUT4_Pos = 0x0
	// Bit mask of BLK1_DOUT4 field.
	EFUSE_BLK1_RDATA4_BLK1_DOUT4_Msk = 0xffffffff

	// BLK1_RDATA5: EFUSE_BLK1_RDATA5
	// Position of BLK1_DOUT5 field.
	EFUSE_BLK1_RDATA5_BLK1_DOUT5_Pos = 0x0
	// Bit mask of BLK1_DOUT5 field.
	EFUSE_BLK1_RDATA5_BLK1_DOUT5_Msk = 0xffffffff

	// BLK1_RDATA6: EFUSE_BLK1_RDATA6
	// Position of BLK1_DOUT6 field.
	EFUSE_BLK1_RDATA6_BLK1_DOUT6_Pos = 0x0
	// Bit mask of BLK1_DOUT6 field.
	EFUSE_BLK1_RDATA6_BLK1_DOUT6_Msk = 0xffffffff

	// BLK1_RDATA7: EFUSE_BLK1_RDATA7
	// Position of BLK1_DOUT7 field.
	EFUSE_BLK1_RDATA7_BLK1_DOUT7_Pos = 0x0
	// Bit mask of BLK1_DOUT7 field.
	EFUSE_BLK1_RDATA7_BLK1_DOUT7_Msk = 0xffffffff

	// BLK2_RDATA0: EFUSE_BLK2_RDATA0
	// Position of BLK2_DOUT0 field.
	EFUSE_BLK2_RDATA0_BLK2_DOUT0_Pos = 0x0
	// Bit mask of BLK2_DOUT0 field.
	EFUSE_BLK2_RDATA0_BLK2_DOUT0_Msk = 0xffffffff

	// BLK2_RDATA1: EFUSE_BLK2_RDATA1
	// Position of BLK2_DOUT1 field.
	EFUSE_BLK2_RDATA1_BLK2_DOUT1_Pos = 0x0
	// Bit mask of BLK2_DOUT1 field.
	EFUSE_BLK2_RDATA1_BLK2_DOUT1_Msk = 0xffffffff

	// BLK2_RDATA2: EFUSE_BLK2_RDATA2
	// Position of BLK2_DOUT2 field.
	EFUSE_BLK2_RDATA2_BLK2_DOUT2_Pos = 0x0
	// Bit mask of BLK2_DOUT2 field.
	EFUSE_BLK2_RDATA2_BLK2_DOUT2_Msk = 0xffffffff

	// BLK2_RDATA3: EFUSE_BLK2_RDATA3
	// Position of BLK2_DOUT3 field.
	EFUSE_BLK2_RDATA3_BLK2_DOUT3_Pos = 0x0
	// Bit mask of BLK2_DOUT3 field.
	EFUSE_BLK2_RDATA3_BLK2_DOUT3_Msk = 0xffffffff

	// BLK2_RDATA4: EFUSE_BLK2_RDATA4
	// Position of BLK2_DOUT4 field.
	EFUSE_BLK2_RDATA4_BLK2_DOUT4_Pos = 0x0
	// Bit mask of BLK2_DOUT4 field.
	EFUSE_BLK2_RDATA4_BLK2_DOUT4_Msk = 0xffffffff

	// BLK2_RDATA5: EFUSE_BLK2_RDATA5
	// Position of BLK2_DOUT5 field.
	EFUSE_BLK2_RDATA5_BLK2_DOUT5_Pos = 0x0
	// Bit mask of BLK2_DOUT5 field.
	EFUSE_BLK2_RDATA5_BLK2_DOUT5_Msk = 0xffffffff

	// BLK2_RDATA6: EFUSE_BLK2_RDATA6
	// Position of BLK2_DOUT6 field.
	EFUSE_BLK2_RDATA6_BLK2_DOUT6_Pos = 0x0
	// Bit mask of BLK2_DOUT6 field.
	EFUSE_BLK2_RDATA6_BLK2_DOUT6_Msk = 0xffffffff

	// BLK2_RDATA7: EFUSE_BLK2_RDATA7
	// Position of BLK2_DOUT7 field.
	EFUSE_BLK2_RDATA7_BLK2_DOUT7_Pos = 0x0
	// Bit mask of BLK2_DOUT7 field.
	EFUSE_BLK2_RDATA7_BLK2_DOUT7_Msk = 0xffffffff

	// BLK3_RDATA0: EFUSE_BLK3_RDATA0
	// Position of BLK3_DOUT0 field.
	EFUSE_BLK3_RDATA0_BLK3_DOUT0_Pos = 0x0
	// Bit mask of BLK3_DOUT0 field.
	EFUSE_BLK3_RDATA0_BLK3_DOUT0_Msk = 0xffffffff

	// BLK3_RDATA1: EFUSE_BLK3_RDATA1
	// Position of BLK3_DOUT1 field.
	EFUSE_BLK3_RDATA1_BLK3_DOUT1_Pos = 0x0
	// Bit mask of BLK3_DOUT1 field.
	EFUSE_BLK3_RDATA1_BLK3_DOUT1_Msk = 0xffffffff

	// BLK3_RDATA2: EFUSE_BLK3_RDATA2
	// Position of BLK3_DOUT2 field.
	EFUSE_BLK3_RDATA2_BLK3_DOUT2_Pos = 0x0
	// Bit mask of BLK3_DOUT2 field.
	EFUSE_BLK3_RDATA2_BLK3_DOUT2_Msk = 0xffffffff

	// BLK3_RDATA3: EFUSE_BLK3_RDATA3
	// Position of BLK3_DOUT3 field.
	EFUSE_BLK3_RDATA3_BLK3_DOUT3_Pos = 0x0
	// Bit mask of BLK3_DOUT3 field.
	EFUSE_BLK3_RDATA3_BLK3_DOUT3_Msk = 0xffffffff
	// Position of RD_ADC2_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_HIGH_Pos = 0x17
	// Bit mask of RD_ADC2_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_HIGH_Msk = 0xff800000
	// Position of RD_ADC2_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_LOW_Pos = 0x10
	// Bit mask of RD_ADC2_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC2_TP_LOW_Msk = 0x7f0000
	// Position of RD_ADC1_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_HIGH_Pos = 0x7
	// Bit mask of RD_ADC1_TP_HIGH field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_HIGH_Msk = 0xff80
	// Position of RD_ADC1_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_LOW_Pos = 0x0
	// Bit mask of RD_ADC1_TP_LOW field.
	EFUSE_BLK3_RDATA3_RD_ADC1_TP_LOW_Msk = 0x7f

	// BLK3_RDATA4: EFUSE_BLK3_RDATA4
	// Position of BLK3_DOUT4 field.
	EFUSE_BLK3_RDATA4_BLK3_DOUT4_Pos = 0x0
	// Bit mask of BLK3_DOUT4 field.
	EFUSE_BLK3_RDATA4_BLK3_DOUT4_Msk = 0xffffffff

	// BLK3_RDATA5: EFUSE_BLK3_RDATA5
	// Position of BLK3_DOUT5 field.
	EFUSE_BLK3_RDATA5_BLK3_DOUT5_Pos = 0x0
	// Bit mask of BLK3_DOUT5 field.
	EFUSE_BLK3_RDATA5_BLK3_DOUT5_Msk = 0xffffffff

	// BLK3_RDATA6: EFUSE_BLK3_RDATA6
	// Position of BLK3_DOUT6 field.
	EFUSE_BLK3_RDATA6_BLK3_DOUT6_Pos = 0x0
	// Bit mask of BLK3_DOUT6 field.
	EFUSE_BLK3_RDATA6_BLK3_DOUT6_Msk = 0xffffffff

	// BLK3_RDATA7: EFUSE_BLK3_RDATA7
	// Position of BLK3_DOUT7 field.
	EFUSE_BLK3_RDATA7_BLK3_DOUT7_Pos = 0x0
	// Bit mask of BLK3_DOUT7 field.
	EFUSE_BLK3_RDATA7_BLK3_DOUT7_Msk = 0xffffffff

	// BLK1_WDATA0: EFUSE_BLK1_WDATA0
	// Position of BLK1_DIN0 field.
	EFUSE_BLK1_WDATA0_BLK1_DIN0_Pos = 0x0
	// Bit mask of BLK1_DIN0 field.
	EFUSE_BLK1_WDATA0_BLK1_DIN0_Msk = 0xffffffff

	// BLK1_WDATA1: EFUSE_BLK1_WDATA1
	// Position of BLK1_DIN1 field.
	EFUSE_BLK1_WDATA1_BLK1_DIN1_Pos = 0x0
	// Bit mask of BLK1_DIN1 field.
	EFUSE_BLK1_WDATA1_BLK1_DIN1_Msk = 0xffffffff

	// BLK1_WDATA2: EFUSE_BLK1_WDATA2
	// Position of BLK1_DIN2 field.
	EFUSE_BLK1_WDATA2_BLK1_DIN2_Pos = 0x0
	// Bit mask of BLK1_DIN2 field.
	EFUSE_BLK1_WDATA2_BLK1_DIN2_Msk = 0xffffffff

	// BLK1_WDATA3: EFUSE_BLK1_WDATA3
	// Position of BLK1_DIN3 field.
	EFUSE_BLK1_WDATA3_BLK1_DIN3_Pos = 0x0
	// Bit mask of BLK1_DIN3 field.
	EFUSE_BLK1_WDATA3_BLK1_DIN3_Msk = 0xffffffff

	// BLK1_WDATA4: EFUSE_BLK1_WDATA4
	// Position of BLK1_DIN4 field.
	EFUSE_BLK1_WDATA4_BLK1_DIN4_Pos = 0x0
	// Bit mask of BLK1_DIN4 field.
	EFUSE_BLK1_WDATA4_BLK1_DIN4_Msk = 0xffffffff

	// BLK1_WDATA5: EFUSE_BLK1_WDATA5
	// Position of BLK1_DIN5 field.
	EFUSE_BLK1_WDATA5_BLK1_DIN5_Pos = 0x0
	// Bit mask of BLK1_DIN5 field.
	EFUSE_BLK1_WDATA5_BLK1_DIN5_Msk = 0xffffffff

	// BLK1_WDATA6: EFUSE_BLK1_WDATA6
	// Position of BLK1_DIN6 field.
	EFUSE_BLK1_WDATA6_BLK1_DIN6_Pos = 0x0
	// Bit mask of BLK1_DIN6 field.
	EFUSE_BLK1_WDATA6_BLK1_DIN6_Msk = 0xffffffff

	// BLK1_WDATA7: EFUSE_BLK1_WDATA7
	// Position of BLK1_DIN7 field.
	EFUSE_BLK1_WDATA7_BLK1_DIN7_Pos = 0x0
	// Bit mask of BLK1_DIN7 field.
	EFUSE_BLK1_WDATA7_BLK1_DIN7_Msk = 0xffffffff

	// BLK2_WDATA0: EFUSE_BLK2_WDATA0
	// Position of BLK2_DIN0 field.
	EFUSE_BLK2_WDATA0_BLK2_DIN0_Pos = 0x0
	// Bit mask of BLK2_DIN0 field.
	EFUSE_BLK2_WDATA0_BLK2_DIN0_Msk = 0xffffffff

	// BLK2_WDATA1: EFUSE_BLK2_WDATA1
	// Position of BLK2_DIN1 field.
	EFUSE_BLK2_WDATA1_BLK2_DIN1_Pos = 0x0
	// Bit mask of BLK2_DIN1 field.
	EFUSE_BLK2_WDATA1_BLK2_DIN1_Msk = 0xffffffff

	// BLK2_WDATA2: EFUSE_BLK2_WDATA2
	// Position of BLK2_DIN2 field.
	EFUSE_BLK2_WDATA2_BLK2_DIN2_Pos = 0x0
	// Bit mask of BLK2_DIN2 field.
	EFUSE_BLK2_WDATA2_BLK2_DIN2_Msk = 0xffffffff

	// BLK2_WDATA3: EFUSE_BLK2_WDATA3
	// Position of BLK2_DIN3 field.
	EFUSE_BLK2_WDATA3_BLK2_DIN3_Pos = 0x0
	// Bit mask of BLK2_DIN3 field.
	EFUSE_BLK2_WDATA3_BLK2_DIN3_Msk = 0xffffffff

	// BLK2_WDATA4: EFUSE_BLK2_WDATA4
	// Position of BLK2_DIN4 field.
	EFUSE_BLK2_WDATA4_BLK2_DIN4_Pos = 0x0
	// Bit mask of BLK2_DIN4 field.
	EFUSE_BLK2_WDATA4_BLK2_DIN4_Msk = 0xffffffff

	// BLK2_WDATA5: EFUSE_BLK2_WDATA5
	// Position of BLK2_DIN5 field.
	EFUSE_BLK2_WDATA5_BLK2_DIN5_Pos = 0x0
	// Bit mask of BLK2_DIN5 field.
	EFUSE_BLK2_WDATA5_BLK2_DIN5_Msk = 0xffffffff

	// BLK2_WDATA6: EFUSE_BLK2_WDATA6
	// Position of BLK2_DIN6 field.
	EFUSE_BLK2_WDATA6_BLK2_DIN6_Pos = 0x0
	// Bit mask of BLK2_DIN6 field.
	EFUSE_BLK2_WDATA6_BLK2_DIN6_Msk = 0xffffffff

	// BLK2_WDATA7: EFUSE_BLK2_WDATA7
	// Position of BLK2_DIN7 field.
	EFUSE_BLK2_WDATA7_BLK2_DIN7_Pos = 0x0
	// Bit mask of BLK2_DIN7 field.
	EFUSE_BLK2_WDATA7_BLK2_DIN7_Msk = 0xffffffff

	// BLK3_WDATA0: EFUSE_BLK3_WDATA0
	// Position of BLK3_DIN0 field.
	EFUSE_BLK3_WDATA0_BLK3_DIN0_Pos = 0x0
	// Bit mask of BLK3_DIN0 field.
	EFUSE_BLK3_WDATA0_BLK3_DIN0_Msk = 0xffffffff

	// BLK3_WDATA1: EFUSE_BLK3_WDATA1
	// Position of BLK3_DIN1 field.
	EFUSE_BLK3_WDATA1_BLK3_DIN1_Pos = 0x0
	// Bit mask of BLK3_DIN1 field.
	EFUSE_BLK3_WDATA1_BLK3_DIN1_Msk = 0xffffffff

	// BLK3_WDATA2: EFUSE_BLK3_WDATA2
	// Position of BLK3_DIN2 field.
	EFUSE_BLK3_WDATA2_BLK3_DIN2_Pos = 0x0
	// Bit mask of BLK3_DIN2 field.
	EFUSE_BLK3_WDATA2_BLK3_DIN2_Msk = 0xffffffff

	// BLK3_WDATA3: EFUSE_BLK3_WDATA3
	// Position of BLK3_DIN3 field.
	EFUSE_BLK3_WDATA3_BLK3_DIN3_Pos = 0x0
	// Bit mask of BLK3_DIN3 field.
	EFUSE_BLK3_WDATA3_BLK3_DIN3_Msk = 0xffffffff
	// Position of ADC2_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC2_TP_HIGH_Pos = 0x17
	// Bit mask of ADC2_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC2_TP_HIGH_Msk = 0xff800000
	// Position of ADC2_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC2_TP_LOW_Pos = 0x10
	// Bit mask of ADC2_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC2_TP_LOW_Msk = 0x7f0000
	// Position of ADC1_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC1_TP_HIGH_Pos = 0x7
	// Bit mask of ADC1_TP_HIGH field.
	EFUSE_BLK3_WDATA3_ADC1_TP_HIGH_Msk = 0xff80
	// Position of ADC1_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC1_TP_LOW_Pos = 0x0
	// Bit mask of ADC1_TP_LOW field.
	EFUSE_BLK3_WDATA3_ADC1_TP_LOW_Msk = 0x7f

	// BLK3_WDATA4: EFUSE_BLK3_WDATA4
	// Position of BLK3_DIN4 field.
	EFUSE_BLK3_WDATA4_BLK3_DIN4_Pos = 0x0
	// Bit mask of BLK3_DIN4 field.
	EFUSE_BLK3_WDATA4_BLK3_DIN4_Msk = 0xffffffff

	// BLK3_WDATA5: EFUSE_BLK3_WDATA5
	// Position of BLK3_DIN5 field.
	EFUSE_BLK3_WDATA5_BLK3_DIN5_Pos = 0x0
	// Bit mask of BLK3_DIN5 field.
	EFUSE_BLK3_WDATA5_BLK3_DIN5_Msk = 0xffffffff

	// BLK3_WDATA6: EFUSE_BLK3_WDATA6
	// Position of BLK3_DIN6 field.
	EFUSE_BLK3_WDATA6_BLK3_DIN6_Pos = 0x0
	// Bit mask of BLK3_DIN6 field.
	EFUSE_BLK3_WDATA6_BLK3_DIN6_Msk = 0xffffffff

	// BLK3_WDATA7: EFUSE_BLK3_WDATA7
	// Position of BLK3_DIN7 field.
	EFUSE_BLK3_WDATA7_BLK3_DIN7_Pos = 0x0
	// Bit mask of BLK3_DIN7 field.
	EFUSE_BLK3_WDATA7_BLK3_DIN7_Msk = 0xffffffff

	// CLK: EFUSE_CLK
	// Position of CLK_EN field.
	EFUSE_CLK_CLK_EN_Pos = 0x10
	// Bit mask of CLK_EN field.
	EFUSE_CLK_CLK_EN_Msk = 0x10000
	// Bit CLK_EN.
	EFUSE_CLK_CLK_EN = 0x10000
	// Position of CLK_SEL1 field.
	EFUSE_CLK_CLK_SEL1_Pos = 0x8
	// Bit mask of CLK_SEL1 field.
	EFUSE_CLK_CLK_SEL1_Msk = 0xff00
	// Position of CLK_SEL0 field.
	EFUSE_CLK_CLK_SEL0_Pos = 0x0
	// Bit mask of CLK_SEL0 field.
	EFUSE_CLK_CLK_SEL0_Msk = 0xff

	// CONF: EFUSE_CONF
	// Position of FORCE_NO_WR_RD_DIS field.
	EFUSE_CONF_FORCE_NO_WR_RD_DIS_Pos = 0x10
	// Bit mask of FORCE_NO_WR_RD_DIS field.
	EFUSE_CONF_FORCE_NO_WR_RD_DIS_Msk = 0x10000
	// Bit FORCE_NO_WR_RD_DIS.
	EFUSE_CONF_FORCE_NO_WR_RD_DIS = 0x10000
	// Position of OP_CODE field.
	EFUSE_CONF_OP_CODE_Pos = 0x0
	// Bit mask of OP_CODE field.
	EFUSE_CONF_OP_CODE_Msk = 0xffff

	// STATUS: EFUSE_STATUS
	// Position of DEBUG field.
	EFUSE_STATUS_DEBUG_Pos = 0x0
	// Bit mask of DEBUG field.
	EFUSE_STATUS_DEBUG_Msk = 0xffffffff

	// CMD: EFUSE_CMD
	// Position of PGM_CMD field.
	EFUSE_CMD_PGM_CMD_Pos = 0x1
	// Bit mask of PGM_CMD field.
	EFUSE_CMD_PGM_CMD_Msk = 0x2
	// Bit PGM_CMD.
	EFUSE_CMD_PGM_CMD = 0x2
	// Position of READ_CMD field.
	EFUSE_CMD_READ_CMD_Pos = 0x0
	// Bit mask of READ_CMD field.
	EFUSE_CMD_READ_CMD_Msk = 0x1
	// Bit READ_CMD.
	EFUSE_CMD_READ_CMD = 0x1

	// INT_RAW: EFUSE_INT_RAW
	// Position of PGM_DONE_INT_RAW field.
	EFUSE_INT_RAW_PGM_DONE_INT_RAW_Pos = 0x1
	// Bit mask of PGM_DONE_INT_RAW field.
	EFUSE_INT_RAW_PGM_DONE_INT_RAW_Msk = 0x2
	// Bit PGM_DONE_INT_RAW.
	EFUSE_INT_RAW_PGM_DONE_INT_RAW = 0x2
	// Position of READ_DONE_INT_RAW field.
	EFUSE_INT_RAW_READ_DONE_INT_RAW_Pos = 0x0
	// Bit mask of READ_DONE_INT_RAW field.
	EFUSE_INT_RAW_READ_DONE_INT_RAW_Msk = 0x1
	// Bit READ_DONE_INT_RAW.
	EFUSE_INT_RAW_READ_DONE_INT_RAW = 0x1

	// INT_ST: EFUSE_INT_ST
	// Position of PGM_DONE_INT_ST field.
	EFUSE_INT_ST_PGM_DONE_INT_ST_Pos = 0x1
	// Bit mask of PGM_DONE_INT_ST field.
	EFUSE_INT_ST_PGM_DONE_INT_ST_Msk = 0x2
	// Bit PGM_DONE_INT_ST.
	EFUSE_INT_ST_PGM_DONE_INT_ST = 0x2
	// Position of READ_DONE_INT_ST field.
	EFUSE_INT_ST_READ_DONE_INT_ST_Pos = 0x0
	// Bit mask of READ_DONE_INT_ST field.
	EFUSE_INT_ST_READ_DONE_INT_ST_Msk = 0x1
	// Bit READ_DONE_INT_ST.
	EFUSE_INT_ST_READ_DONE_INT_ST = 0x1

	// INT_ENA: EFUSE_INT_ENA
	// Position of PGM_DONE_INT_ENA field.
	EFUSE_INT_ENA_PGM_DONE_INT_ENA_Pos = 0x1
	// Bit mask of PGM_DONE_INT_ENA field.
	EFUSE_INT_ENA_PGM_DONE_INT_ENA_Msk = 0x2
	// Bit PGM_DONE_INT_ENA.
	EFUSE_INT_ENA_PGM_DONE_INT_ENA = 0x2
	// Position of READ_DONE_INT_ENA field.
	EFUSE_INT_ENA_READ_DONE_INT_ENA_Pos = 0x0
	// Bit mask of READ_DONE_INT_ENA field.
	EFUSE_INT_ENA_READ_DONE_INT_ENA_Msk = 0x1
	// Bit READ_DONE_INT_ENA.
	EFUSE_INT_ENA_READ_DONE_INT_ENA = 0x1

	// INT_CLR: EFUSE_INT_CLR
	// Position of PGM_DONE_INT_CLR field.
	EFUSE_INT_CLR_PGM_DONE_INT_CLR_Pos = 0x1
	// Bit mask of PGM_DONE_INT_CLR field.
	EFUSE_INT_CLR_PGM_DONE_INT_CLR_Msk = 0x2
	// Bit PGM_DONE_INT_CLR.
	EFUSE_INT_CLR_PGM_DONE_INT_CLR = 0x2
	// Position of READ_DONE_INT_CLR field.
	EFUSE_INT_CLR_READ_DONE_INT_CLR_Pos = 0x0
	// Bit mask of READ_DONE_INT_CLR field.
	EFUSE_INT_CLR_READ_DONE_INT_CLR_Msk = 0x1
	// Bit READ_DONE_INT_CLR.
	EFUSE_INT_CLR_READ_DONE_INT_CLR = 0x1

	// DAC_CONF: EFUSE_DAC_CONF
	// Position of DAC_CLK_PAD_SEL field.
	EFUSE_DAC_CONF_DAC_CLK_PAD_SEL_Pos = 0x8
	// Bit mask of DAC_CLK_PAD_SEL field.
	EFUSE_DAC_CONF_DAC_CLK_PAD_SEL_Msk = 0x100
	// Bit DAC_CLK_PAD_SEL.
	EFUSE_DAC_CONF_DAC_CLK_PAD_SEL = 0x100
	// Position of DAC_CLK_DIV field.
	EFUSE_DAC_CONF_DAC_CLK_DIV_Pos = 0x0
	// Bit mask of DAC_CLK_DIV field.
	EFUSE_DAC_CONF_DAC_CLK_DIV_Msk = 0xff

	// DEC_STATUS: EFUSE_DEC_STATUS
	// Position of DEC_WARNINGS field.
	EFUSE_DEC_STATUS_DEC_WARNINGS_Pos = 0x0
	// Bit mask of DEC_WARNINGS field.
	EFUSE_DEC_STATUS_DEC_WARNINGS_Msk = 0xfff

	// DATE: EFUSE_DATE
	// Position of DATE field.
	EFUSE_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	EFUSE_DATE_DATE_Msk = 0xffffffff
)

// Constants for RTCMEM1
const ()

// Constants for RSA
const ()

// Constants for PCNT
const (
	// U0_CONF0: PCNT_U0_CONF0
	// Position of CH1_LCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH1_LCTRL_MODE_U0_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH1_LCTRL_MODE_U0_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH1_HCTRL_MODE_U0_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH1_HCTRL_MODE_U0_Msk = 0x30000000
	// Position of CH1_POS_MODE_U0 field.
	PCNT_U0_CONF0_CH1_POS_MODE_U0_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U0 field.
	PCNT_U0_CONF0_CH1_POS_MODE_U0_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U0 field.
	PCNT_U0_CONF0_CH1_NEG_MODE_U0_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U0 field.
	PCNT_U0_CONF0_CH1_NEG_MODE_U0_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH0_LCTRL_MODE_U0_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH0_LCTRL_MODE_U0_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH0_HCTRL_MODE_U0_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U0 field.
	PCNT_U0_CONF0_CH0_HCTRL_MODE_U0_Msk = 0x300000
	// Position of CH0_POS_MODE_U0 field.
	PCNT_U0_CONF0_CH0_POS_MODE_U0_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U0 field.
	PCNT_U0_CONF0_CH0_POS_MODE_U0_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U0 field.
	PCNT_U0_CONF0_CH0_NEG_MODE_U0_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U0 field.
	PCNT_U0_CONF0_CH0_NEG_MODE_U0_Msk = 0x30000
	// Position of THR_THRES1_EN_U0 field.
	PCNT_U0_CONF0_THR_THRES1_EN_U0_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U0 field.
	PCNT_U0_CONF0_THR_THRES1_EN_U0_Msk = 0x8000
	// Bit THR_THRES1_EN_U0.
	PCNT_U0_CONF0_THR_THRES1_EN_U0 = 0x8000
	// Position of THR_THRES0_EN_U0 field.
	PCNT_U0_CONF0_THR_THRES0_EN_U0_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U0 field.
	PCNT_U0_CONF0_THR_THRES0_EN_U0_Msk = 0x4000
	// Bit THR_THRES0_EN_U0.
	PCNT_U0_CONF0_THR_THRES0_EN_U0 = 0x4000
	// Position of THR_L_LIM_EN_U0 field.
	PCNT_U0_CONF0_THR_L_LIM_EN_U0_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U0 field.
	PCNT_U0_CONF0_THR_L_LIM_EN_U0_Msk = 0x2000
	// Bit THR_L_LIM_EN_U0.
	PCNT_U0_CONF0_THR_L_LIM_EN_U0 = 0x2000
	// Position of THR_H_LIM_EN_U0 field.
	PCNT_U0_CONF0_THR_H_LIM_EN_U0_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U0 field.
	PCNT_U0_CONF0_THR_H_LIM_EN_U0_Msk = 0x1000
	// Bit THR_H_LIM_EN_U0.
	PCNT_U0_CONF0_THR_H_LIM_EN_U0 = 0x1000
	// Position of THR_ZERO_EN_U0 field.
	PCNT_U0_CONF0_THR_ZERO_EN_U0_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U0 field.
	PCNT_U0_CONF0_THR_ZERO_EN_U0_Msk = 0x800
	// Bit THR_ZERO_EN_U0.
	PCNT_U0_CONF0_THR_ZERO_EN_U0 = 0x800
	// Position of FILTER_EN_U0 field.
	PCNT_U0_CONF0_FILTER_EN_U0_Pos = 0xa
	// Bit mask of FILTER_EN_U0 field.
	PCNT_U0_CONF0_FILTER_EN_U0_Msk = 0x400
	// Bit FILTER_EN_U0.
	PCNT_U0_CONF0_FILTER_EN_U0 = 0x400
	// Position of FILTER_THRES_U0 field.
	PCNT_U0_CONF0_FILTER_THRES_U0_Pos = 0x0
	// Bit mask of FILTER_THRES_U0 field.
	PCNT_U0_CONF0_FILTER_THRES_U0_Msk = 0x3ff

	// U0_CONF1: PCNT_U0_CONF1
	// Position of CNT_THRES1_U0 field.
	PCNT_U0_CONF1_CNT_THRES1_U0_Pos = 0x10
	// Bit mask of CNT_THRES1_U0 field.
	PCNT_U0_CONF1_CNT_THRES1_U0_Msk = 0xffff0000
	// Position of CNT_THRES0_U0 field.
	PCNT_U0_CONF1_CNT_THRES0_U0_Pos = 0x0
	// Bit mask of CNT_THRES0_U0 field.
	PCNT_U0_CONF1_CNT_THRES0_U0_Msk = 0xffff

	// U0_CONF2: PCNT_U0_CONF2
	// Position of CNT_L_LIM_U0 field.
	PCNT_U0_CONF2_CNT_L_LIM_U0_Pos = 0x10
	// Bit mask of CNT_L_LIM_U0 field.
	PCNT_U0_CONF2_CNT_L_LIM_U0_Msk = 0xffff0000
	// Position of CNT_H_LIM_U0 field.
	PCNT_U0_CONF2_CNT_H_LIM_U0_Pos = 0x0
	// Bit mask of CNT_H_LIM_U0 field.
	PCNT_U0_CONF2_CNT_H_LIM_U0_Msk = 0xffff

	// U1_CONF0: PCNT_U1_CONF0
	// Position of CH1_LCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH1_LCTRL_MODE_U1_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH1_LCTRL_MODE_U1_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH1_HCTRL_MODE_U1_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH1_HCTRL_MODE_U1_Msk = 0x30000000
	// Position of CH1_POS_MODE_U1 field.
	PCNT_U1_CONF0_CH1_POS_MODE_U1_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U1 field.
	PCNT_U1_CONF0_CH1_POS_MODE_U1_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U1 field.
	PCNT_U1_CONF0_CH1_NEG_MODE_U1_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U1 field.
	PCNT_U1_CONF0_CH1_NEG_MODE_U1_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH0_LCTRL_MODE_U1_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH0_LCTRL_MODE_U1_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH0_HCTRL_MODE_U1_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U1 field.
	PCNT_U1_CONF0_CH0_HCTRL_MODE_U1_Msk = 0x300000
	// Position of CH0_POS_MODE_U1 field.
	PCNT_U1_CONF0_CH0_POS_MODE_U1_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U1 field.
	PCNT_U1_CONF0_CH0_POS_MODE_U1_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U1 field.
	PCNT_U1_CONF0_CH0_NEG_MODE_U1_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U1 field.
	PCNT_U1_CONF0_CH0_NEG_MODE_U1_Msk = 0x30000
	// Position of THR_THRES1_EN_U1 field.
	PCNT_U1_CONF0_THR_THRES1_EN_U1_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U1 field.
	PCNT_U1_CONF0_THR_THRES1_EN_U1_Msk = 0x8000
	// Bit THR_THRES1_EN_U1.
	PCNT_U1_CONF0_THR_THRES1_EN_U1 = 0x8000
	// Position of THR_THRES0_EN_U1 field.
	PCNT_U1_CONF0_THR_THRES0_EN_U1_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U1 field.
	PCNT_U1_CONF0_THR_THRES0_EN_U1_Msk = 0x4000
	// Bit THR_THRES0_EN_U1.
	PCNT_U1_CONF0_THR_THRES0_EN_U1 = 0x4000
	// Position of THR_L_LIM_EN_U1 field.
	PCNT_U1_CONF0_THR_L_LIM_EN_U1_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U1 field.
	PCNT_U1_CONF0_THR_L_LIM_EN_U1_Msk = 0x2000
	// Bit THR_L_LIM_EN_U1.
	PCNT_U1_CONF0_THR_L_LIM_EN_U1 = 0x2000
	// Position of THR_H_LIM_EN_U1 field.
	PCNT_U1_CONF0_THR_H_LIM_EN_U1_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U1 field.
	PCNT_U1_CONF0_THR_H_LIM_EN_U1_Msk = 0x1000
	// Bit THR_H_LIM_EN_U1.
	PCNT_U1_CONF0_THR_H_LIM_EN_U1 = 0x1000
	// Position of THR_ZERO_EN_U1 field.
	PCNT_U1_CONF0_THR_ZERO_EN_U1_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U1 field.
	PCNT_U1_CONF0_THR_ZERO_EN_U1_Msk = 0x800
	// Bit THR_ZERO_EN_U1.
	PCNT_U1_CONF0_THR_ZERO_EN_U1 = 0x800
	// Position of FILTER_EN_U1 field.
	PCNT_U1_CONF0_FILTER_EN_U1_Pos = 0xa
	// Bit mask of FILTER_EN_U1 field.
	PCNT_U1_CONF0_FILTER_EN_U1_Msk = 0x400
	// Bit FILTER_EN_U1.
	PCNT_U1_CONF0_FILTER_EN_U1 = 0x400
	// Position of FILTER_THRES_U1 field.
	PCNT_U1_CONF0_FILTER_THRES_U1_Pos = 0x0
	// Bit mask of FILTER_THRES_U1 field.
	PCNT_U1_CONF0_FILTER_THRES_U1_Msk = 0x3ff

	// U1_CONF1: PCNT_U1_CONF1
	// Position of CNT_THRES1_U1 field.
	PCNT_U1_CONF1_CNT_THRES1_U1_Pos = 0x10
	// Bit mask of CNT_THRES1_U1 field.
	PCNT_U1_CONF1_CNT_THRES1_U1_Msk = 0xffff0000
	// Position of CNT_THRES0_U1 field.
	PCNT_U1_CONF1_CNT_THRES0_U1_Pos = 0x0
	// Bit mask of CNT_THRES0_U1 field.
	PCNT_U1_CONF1_CNT_THRES0_U1_Msk = 0xffff

	// U1_CONF2: PCNT_U1_CONF2
	// Position of CNT_L_LIM_U1 field.
	PCNT_U1_CONF2_CNT_L_LIM_U1_Pos = 0x10
	// Bit mask of CNT_L_LIM_U1 field.
	PCNT_U1_CONF2_CNT_L_LIM_U1_Msk = 0xffff0000
	// Position of CNT_H_LIM_U1 field.
	PCNT_U1_CONF2_CNT_H_LIM_U1_Pos = 0x0
	// Bit mask of CNT_H_LIM_U1 field.
	PCNT_U1_CONF2_CNT_H_LIM_U1_Msk = 0xffff

	// U2_CONF0: PCNT_U2_CONF0
	// Position of CH1_LCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH1_LCTRL_MODE_U2_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH1_LCTRL_MODE_U2_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH1_HCTRL_MODE_U2_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH1_HCTRL_MODE_U2_Msk = 0x30000000
	// Position of CH1_POS_MODE_U2 field.
	PCNT_U2_CONF0_CH1_POS_MODE_U2_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U2 field.
	PCNT_U2_CONF0_CH1_POS_MODE_U2_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U2 field.
	PCNT_U2_CONF0_CH1_NEG_MODE_U2_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U2 field.
	PCNT_U2_CONF0_CH1_NEG_MODE_U2_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH0_LCTRL_MODE_U2_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH0_LCTRL_MODE_U2_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH0_HCTRL_MODE_U2_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U2 field.
	PCNT_U2_CONF0_CH0_HCTRL_MODE_U2_Msk = 0x300000
	// Position of CH0_POS_MODE_U2 field.
	PCNT_U2_CONF0_CH0_POS_MODE_U2_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U2 field.
	PCNT_U2_CONF0_CH0_POS_MODE_U2_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U2 field.
	PCNT_U2_CONF0_CH0_NEG_MODE_U2_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U2 field.
	PCNT_U2_CONF0_CH0_NEG_MODE_U2_Msk = 0x30000
	// Position of THR_THRES1_EN_U2 field.
	PCNT_U2_CONF0_THR_THRES1_EN_U2_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U2 field.
	PCNT_U2_CONF0_THR_THRES1_EN_U2_Msk = 0x8000
	// Bit THR_THRES1_EN_U2.
	PCNT_U2_CONF0_THR_THRES1_EN_U2 = 0x8000
	// Position of THR_THRES0_EN_U2 field.
	PCNT_U2_CONF0_THR_THRES0_EN_U2_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U2 field.
	PCNT_U2_CONF0_THR_THRES0_EN_U2_Msk = 0x4000
	// Bit THR_THRES0_EN_U2.
	PCNT_U2_CONF0_THR_THRES0_EN_U2 = 0x4000
	// Position of THR_L_LIM_EN_U2 field.
	PCNT_U2_CONF0_THR_L_LIM_EN_U2_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U2 field.
	PCNT_U2_CONF0_THR_L_LIM_EN_U2_Msk = 0x2000
	// Bit THR_L_LIM_EN_U2.
	PCNT_U2_CONF0_THR_L_LIM_EN_U2 = 0x2000
	// Position of THR_H_LIM_EN_U2 field.
	PCNT_U2_CONF0_THR_H_LIM_EN_U2_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U2 field.
	PCNT_U2_CONF0_THR_H_LIM_EN_U2_Msk = 0x1000
	// Bit THR_H_LIM_EN_U2.
	PCNT_U2_CONF0_THR_H_LIM_EN_U2 = 0x1000
	// Position of THR_ZERO_EN_U2 field.
	PCNT_U2_CONF0_THR_ZERO_EN_U2_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U2 field.
	PCNT_U2_CONF0_THR_ZERO_EN_U2_Msk = 0x800
	// Bit THR_ZERO_EN_U2.
	PCNT_U2_CONF0_THR_ZERO_EN_U2 = 0x800
	// Position of FILTER_EN_U2 field.
	PCNT_U2_CONF0_FILTER_EN_U2_Pos = 0xa
	// Bit mask of FILTER_EN_U2 field.
	PCNT_U2_CONF0_FILTER_EN_U2_Msk = 0x400
	// Bit FILTER_EN_U2.
	PCNT_U2_CONF0_FILTER_EN_U2 = 0x400
	// Position of FILTER_THRES_U2 field.
	PCNT_U2_CONF0_FILTER_THRES_U2_Pos = 0x0
	// Bit mask of FILTER_THRES_U2 field.
	PCNT_U2_CONF0_FILTER_THRES_U2_Msk = 0x3ff

	// U2_CONF1: PCNT_U2_CONF1
	// Position of CNT_THRES1_U2 field.
	PCNT_U2_CONF1_CNT_THRES1_U2_Pos = 0x10
	// Bit mask of CNT_THRES1_U2 field.
	PCNT_U2_CONF1_CNT_THRES1_U2_Msk = 0xffff0000
	// Position of CNT_THRES0_U2 field.
	PCNT_U2_CONF1_CNT_THRES0_U2_Pos = 0x0
	// Bit mask of CNT_THRES0_U2 field.
	PCNT_U2_CONF1_CNT_THRES0_U2_Msk = 0xffff

	// U2_CONF2: PCNT_U2_CONF2
	// Position of CNT_L_LIM_U2 field.
	PCNT_U2_CONF2_CNT_L_LIM_U2_Pos = 0x10
	// Bit mask of CNT_L_LIM_U2 field.
	PCNT_U2_CONF2_CNT_L_LIM_U2_Msk = 0xffff0000
	// Position of CNT_H_LIM_U2 field.
	PCNT_U2_CONF2_CNT_H_LIM_U2_Pos = 0x0
	// Bit mask of CNT_H_LIM_U2 field.
	PCNT_U2_CONF2_CNT_H_LIM_U2_Msk = 0xffff

	// U3_CONF0: PCNT_U3_CONF0
	// Position of CH1_LCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH1_LCTRL_MODE_U3_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH1_LCTRL_MODE_U3_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH1_HCTRL_MODE_U3_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH1_HCTRL_MODE_U3_Msk = 0x30000000
	// Position of CH1_POS_MODE_U3 field.
	PCNT_U3_CONF0_CH1_POS_MODE_U3_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U3 field.
	PCNT_U3_CONF0_CH1_POS_MODE_U3_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U3 field.
	PCNT_U3_CONF0_CH1_NEG_MODE_U3_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U3 field.
	PCNT_U3_CONF0_CH1_NEG_MODE_U3_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH0_LCTRL_MODE_U3_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH0_LCTRL_MODE_U3_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH0_HCTRL_MODE_U3_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U3 field.
	PCNT_U3_CONF0_CH0_HCTRL_MODE_U3_Msk = 0x300000
	// Position of CH0_POS_MODE_U3 field.
	PCNT_U3_CONF0_CH0_POS_MODE_U3_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U3 field.
	PCNT_U3_CONF0_CH0_POS_MODE_U3_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U3 field.
	PCNT_U3_CONF0_CH0_NEG_MODE_U3_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U3 field.
	PCNT_U3_CONF0_CH0_NEG_MODE_U3_Msk = 0x30000
	// Position of THR_THRES1_EN_U3 field.
	PCNT_U3_CONF0_THR_THRES1_EN_U3_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U3 field.
	PCNT_U3_CONF0_THR_THRES1_EN_U3_Msk = 0x8000
	// Bit THR_THRES1_EN_U3.
	PCNT_U3_CONF0_THR_THRES1_EN_U3 = 0x8000
	// Position of THR_THRES0_EN_U3 field.
	PCNT_U3_CONF0_THR_THRES0_EN_U3_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U3 field.
	PCNT_U3_CONF0_THR_THRES0_EN_U3_Msk = 0x4000
	// Bit THR_THRES0_EN_U3.
	PCNT_U3_CONF0_THR_THRES0_EN_U3 = 0x4000
	// Position of THR_L_LIM_EN_U3 field.
	PCNT_U3_CONF0_THR_L_LIM_EN_U3_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U3 field.
	PCNT_U3_CONF0_THR_L_LIM_EN_U3_Msk = 0x2000
	// Bit THR_L_LIM_EN_U3.
	PCNT_U3_CONF0_THR_L_LIM_EN_U3 = 0x2000
	// Position of THR_H_LIM_EN_U3 field.
	PCNT_U3_CONF0_THR_H_LIM_EN_U3_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U3 field.
	PCNT_U3_CONF0_THR_H_LIM_EN_U3_Msk = 0x1000
	// Bit THR_H_LIM_EN_U3.
	PCNT_U3_CONF0_THR_H_LIM_EN_U3 = 0x1000
	// Position of THR_ZERO_EN_U3 field.
	PCNT_U3_CONF0_THR_ZERO_EN_U3_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U3 field.
	PCNT_U3_CONF0_THR_ZERO_EN_U3_Msk = 0x800
	// Bit THR_ZERO_EN_U3.
	PCNT_U3_CONF0_THR_ZERO_EN_U3 = 0x800
	// Position of FILTER_EN_U3 field.
	PCNT_U3_CONF0_FILTER_EN_U3_Pos = 0xa
	// Bit mask of FILTER_EN_U3 field.
	PCNT_U3_CONF0_FILTER_EN_U3_Msk = 0x400
	// Bit FILTER_EN_U3.
	PCNT_U3_CONF0_FILTER_EN_U3 = 0x400
	// Position of FILTER_THRES_U3 field.
	PCNT_U3_CONF0_FILTER_THRES_U3_Pos = 0x0
	// Bit mask of FILTER_THRES_U3 field.
	PCNT_U3_CONF0_FILTER_THRES_U3_Msk = 0x3ff

	// U3_CONF1: PCNT_U3_CONF1
	// Position of CNT_THRES1_U3 field.
	PCNT_U3_CONF1_CNT_THRES1_U3_Pos = 0x10
	// Bit mask of CNT_THRES1_U3 field.
	PCNT_U3_CONF1_CNT_THRES1_U3_Msk = 0xffff0000
	// Position of CNT_THRES0_U3 field.
	PCNT_U3_CONF1_CNT_THRES0_U3_Pos = 0x0
	// Bit mask of CNT_THRES0_U3 field.
	PCNT_U3_CONF1_CNT_THRES0_U3_Msk = 0xffff

	// U3_CONF2: PCNT_U3_CONF2
	// Position of CNT_L_LIM_U3 field.
	PCNT_U3_CONF2_CNT_L_LIM_U3_Pos = 0x10
	// Bit mask of CNT_L_LIM_U3 field.
	PCNT_U3_CONF2_CNT_L_LIM_U3_Msk = 0xffff0000
	// Position of CNT_H_LIM_U3 field.
	PCNT_U3_CONF2_CNT_H_LIM_U3_Pos = 0x0
	// Bit mask of CNT_H_LIM_U3 field.
	PCNT_U3_CONF2_CNT_H_LIM_U3_Msk = 0xffff

	// U4_CONF0: PCNT_U4_CONF0
	// Position of CH1_LCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH1_LCTRL_MODE_U4_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH1_LCTRL_MODE_U4_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH1_HCTRL_MODE_U4_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH1_HCTRL_MODE_U4_Msk = 0x30000000
	// Position of CH1_POS_MODE_U4 field.
	PCNT_U4_CONF0_CH1_POS_MODE_U4_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U4 field.
	PCNT_U4_CONF0_CH1_POS_MODE_U4_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U4 field.
	PCNT_U4_CONF0_CH1_NEG_MODE_U4_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U4 field.
	PCNT_U4_CONF0_CH1_NEG_MODE_U4_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH0_LCTRL_MODE_U4_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH0_LCTRL_MODE_U4_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH0_HCTRL_MODE_U4_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U4 field.
	PCNT_U4_CONF0_CH0_HCTRL_MODE_U4_Msk = 0x300000
	// Position of CH0_POS_MODE_U4 field.
	PCNT_U4_CONF0_CH0_POS_MODE_U4_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U4 field.
	PCNT_U4_CONF0_CH0_POS_MODE_U4_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U4 field.
	PCNT_U4_CONF0_CH0_NEG_MODE_U4_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U4 field.
	PCNT_U4_CONF0_CH0_NEG_MODE_U4_Msk = 0x30000
	// Position of THR_THRES1_EN_U4 field.
	PCNT_U4_CONF0_THR_THRES1_EN_U4_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U4 field.
	PCNT_U4_CONF0_THR_THRES1_EN_U4_Msk = 0x8000
	// Bit THR_THRES1_EN_U4.
	PCNT_U4_CONF0_THR_THRES1_EN_U4 = 0x8000
	// Position of THR_THRES0_EN_U4 field.
	PCNT_U4_CONF0_THR_THRES0_EN_U4_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U4 field.
	PCNT_U4_CONF0_THR_THRES0_EN_U4_Msk = 0x4000
	// Bit THR_THRES0_EN_U4.
	PCNT_U4_CONF0_THR_THRES0_EN_U4 = 0x4000
	// Position of THR_L_LIM_EN_U4 field.
	PCNT_U4_CONF0_THR_L_LIM_EN_U4_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U4 field.
	PCNT_U4_CONF0_THR_L_LIM_EN_U4_Msk = 0x2000
	// Bit THR_L_LIM_EN_U4.
	PCNT_U4_CONF0_THR_L_LIM_EN_U4 = 0x2000
	// Position of THR_H_LIM_EN_U4 field.
	PCNT_U4_CONF0_THR_H_LIM_EN_U4_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U4 field.
	PCNT_U4_CONF0_THR_H_LIM_EN_U4_Msk = 0x1000
	// Bit THR_H_LIM_EN_U4.
	PCNT_U4_CONF0_THR_H_LIM_EN_U4 = 0x1000
	// Position of THR_ZERO_EN_U4 field.
	PCNT_U4_CONF0_THR_ZERO_EN_U4_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U4 field.
	PCNT_U4_CONF0_THR_ZERO_EN_U4_Msk = 0x800
	// Bit THR_ZERO_EN_U4.
	PCNT_U4_CONF0_THR_ZERO_EN_U4 = 0x800
	// Position of FILTER_EN_U4 field.
	PCNT_U4_CONF0_FILTER_EN_U4_Pos = 0xa
	// Bit mask of FILTER_EN_U4 field.
	PCNT_U4_CONF0_FILTER_EN_U4_Msk = 0x400
	// Bit FILTER_EN_U4.
	PCNT_U4_CONF0_FILTER_EN_U4 = 0x400
	// Position of FILTER_THRES_U4 field.
	PCNT_U4_CONF0_FILTER_THRES_U4_Pos = 0x0
	// Bit mask of FILTER_THRES_U4 field.
	PCNT_U4_CONF0_FILTER_THRES_U4_Msk = 0x3ff

	// U4_CONF1: PCNT_U4_CONF1
	// Position of CNT_THRES1_U4 field.
	PCNT_U4_CONF1_CNT_THRES1_U4_Pos = 0x10
	// Bit mask of CNT_THRES1_U4 field.
	PCNT_U4_CONF1_CNT_THRES1_U4_Msk = 0xffff0000
	// Position of CNT_THRES0_U4 field.
	PCNT_U4_CONF1_CNT_THRES0_U4_Pos = 0x0
	// Bit mask of CNT_THRES0_U4 field.
	PCNT_U4_CONF1_CNT_THRES0_U4_Msk = 0xffff

	// U4_CONF2: PCNT_U4_CONF2
	// Position of CNT_L_LIM_U4 field.
	PCNT_U4_CONF2_CNT_L_LIM_U4_Pos = 0x10
	// Bit mask of CNT_L_LIM_U4 field.
	PCNT_U4_CONF2_CNT_L_LIM_U4_Msk = 0xffff0000
	// Position of CNT_H_LIM_U4 field.
	PCNT_U4_CONF2_CNT_H_LIM_U4_Pos = 0x0
	// Bit mask of CNT_H_LIM_U4 field.
	PCNT_U4_CONF2_CNT_H_LIM_U4_Msk = 0xffff

	// U5_CONF0: PCNT_U5_CONF0
	// Position of CH1_LCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH1_LCTRL_MODE_U5_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH1_LCTRL_MODE_U5_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH1_HCTRL_MODE_U5_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH1_HCTRL_MODE_U5_Msk = 0x30000000
	// Position of CH1_POS_MODE_U5 field.
	PCNT_U5_CONF0_CH1_POS_MODE_U5_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U5 field.
	PCNT_U5_CONF0_CH1_POS_MODE_U5_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U5 field.
	PCNT_U5_CONF0_CH1_NEG_MODE_U5_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U5 field.
	PCNT_U5_CONF0_CH1_NEG_MODE_U5_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH0_LCTRL_MODE_U5_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH0_LCTRL_MODE_U5_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH0_HCTRL_MODE_U5_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U5 field.
	PCNT_U5_CONF0_CH0_HCTRL_MODE_U5_Msk = 0x300000
	// Position of CH0_POS_MODE_U5 field.
	PCNT_U5_CONF0_CH0_POS_MODE_U5_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U5 field.
	PCNT_U5_CONF0_CH0_POS_MODE_U5_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U5 field.
	PCNT_U5_CONF0_CH0_NEG_MODE_U5_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U5 field.
	PCNT_U5_CONF0_CH0_NEG_MODE_U5_Msk = 0x30000
	// Position of THR_THRES1_EN_U5 field.
	PCNT_U5_CONF0_THR_THRES1_EN_U5_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U5 field.
	PCNT_U5_CONF0_THR_THRES1_EN_U5_Msk = 0x8000
	// Bit THR_THRES1_EN_U5.
	PCNT_U5_CONF0_THR_THRES1_EN_U5 = 0x8000
	// Position of THR_THRES0_EN_U5 field.
	PCNT_U5_CONF0_THR_THRES0_EN_U5_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U5 field.
	PCNT_U5_CONF0_THR_THRES0_EN_U5_Msk = 0x4000
	// Bit THR_THRES0_EN_U5.
	PCNT_U5_CONF0_THR_THRES0_EN_U5 = 0x4000
	// Position of THR_L_LIM_EN_U5 field.
	PCNT_U5_CONF0_THR_L_LIM_EN_U5_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U5 field.
	PCNT_U5_CONF0_THR_L_LIM_EN_U5_Msk = 0x2000
	// Bit THR_L_LIM_EN_U5.
	PCNT_U5_CONF0_THR_L_LIM_EN_U5 = 0x2000
	// Position of THR_H_LIM_EN_U5 field.
	PCNT_U5_CONF0_THR_H_LIM_EN_U5_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U5 field.
	PCNT_U5_CONF0_THR_H_LIM_EN_U5_Msk = 0x1000
	// Bit THR_H_LIM_EN_U5.
	PCNT_U5_CONF0_THR_H_LIM_EN_U5 = 0x1000
	// Position of THR_ZERO_EN_U5 field.
	PCNT_U5_CONF0_THR_ZERO_EN_U5_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U5 field.
	PCNT_U5_CONF0_THR_ZERO_EN_U5_Msk = 0x800
	// Bit THR_ZERO_EN_U5.
	PCNT_U5_CONF0_THR_ZERO_EN_U5 = 0x800
	// Position of FILTER_EN_U5 field.
	PCNT_U5_CONF0_FILTER_EN_U5_Pos = 0xa
	// Bit mask of FILTER_EN_U5 field.
	PCNT_U5_CONF0_FILTER_EN_U5_Msk = 0x400
	// Bit FILTER_EN_U5.
	PCNT_U5_CONF0_FILTER_EN_U5 = 0x400
	// Position of FILTER_THRES_U5 field.
	PCNT_U5_CONF0_FILTER_THRES_U5_Pos = 0x0
	// Bit mask of FILTER_THRES_U5 field.
	PCNT_U5_CONF0_FILTER_THRES_U5_Msk = 0x3ff

	// U5_CONF1: PCNT_U5_CONF1
	// Position of CNT_THRES1_U5 field.
	PCNT_U5_CONF1_CNT_THRES1_U5_Pos = 0x10
	// Bit mask of CNT_THRES1_U5 field.
	PCNT_U5_CONF1_CNT_THRES1_U5_Msk = 0xffff0000
	// Position of CNT_THRES0_U5 field.
	PCNT_U5_CONF1_CNT_THRES0_U5_Pos = 0x0
	// Bit mask of CNT_THRES0_U5 field.
	PCNT_U5_CONF1_CNT_THRES0_U5_Msk = 0xffff

	// U5_CONF2: PCNT_U5_CONF2
	// Position of CNT_L_LIM_U5 field.
	PCNT_U5_CONF2_CNT_L_LIM_U5_Pos = 0x10
	// Bit mask of CNT_L_LIM_U5 field.
	PCNT_U5_CONF2_CNT_L_LIM_U5_Msk = 0xffff0000
	// Position of CNT_H_LIM_U5 field.
	PCNT_U5_CONF2_CNT_H_LIM_U5_Pos = 0x0
	// Bit mask of CNT_H_LIM_U5 field.
	PCNT_U5_CONF2_CNT_H_LIM_U5_Msk = 0xffff

	// U6_CONF0: PCNT_U6_CONF0
	// Position of CH1_LCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH1_LCTRL_MODE_U6_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH1_LCTRL_MODE_U6_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH1_HCTRL_MODE_U6_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH1_HCTRL_MODE_U6_Msk = 0x30000000
	// Position of CH1_POS_MODE_U6 field.
	PCNT_U6_CONF0_CH1_POS_MODE_U6_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U6 field.
	PCNT_U6_CONF0_CH1_POS_MODE_U6_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U6 field.
	PCNT_U6_CONF0_CH1_NEG_MODE_U6_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U6 field.
	PCNT_U6_CONF0_CH1_NEG_MODE_U6_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH0_LCTRL_MODE_U6_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH0_LCTRL_MODE_U6_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH0_HCTRL_MODE_U6_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U6 field.
	PCNT_U6_CONF0_CH0_HCTRL_MODE_U6_Msk = 0x300000
	// Position of CH0_POS_MODE_U6 field.
	PCNT_U6_CONF0_CH0_POS_MODE_U6_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U6 field.
	PCNT_U6_CONF0_CH0_POS_MODE_U6_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U6 field.
	PCNT_U6_CONF0_CH0_NEG_MODE_U6_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U6 field.
	PCNT_U6_CONF0_CH0_NEG_MODE_U6_Msk = 0x30000
	// Position of THR_THRES1_EN_U6 field.
	PCNT_U6_CONF0_THR_THRES1_EN_U6_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U6 field.
	PCNT_U6_CONF0_THR_THRES1_EN_U6_Msk = 0x8000
	// Bit THR_THRES1_EN_U6.
	PCNT_U6_CONF0_THR_THRES1_EN_U6 = 0x8000
	// Position of THR_THRES0_EN_U6 field.
	PCNT_U6_CONF0_THR_THRES0_EN_U6_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U6 field.
	PCNT_U6_CONF0_THR_THRES0_EN_U6_Msk = 0x4000
	// Bit THR_THRES0_EN_U6.
	PCNT_U6_CONF0_THR_THRES0_EN_U6 = 0x4000
	// Position of THR_L_LIM_EN_U6 field.
	PCNT_U6_CONF0_THR_L_LIM_EN_U6_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U6 field.
	PCNT_U6_CONF0_THR_L_LIM_EN_U6_Msk = 0x2000
	// Bit THR_L_LIM_EN_U6.
	PCNT_U6_CONF0_THR_L_LIM_EN_U6 = 0x2000
	// Position of THR_H_LIM_EN_U6 field.
	PCNT_U6_CONF0_THR_H_LIM_EN_U6_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U6 field.
	PCNT_U6_CONF0_THR_H_LIM_EN_U6_Msk = 0x1000
	// Bit THR_H_LIM_EN_U6.
	PCNT_U6_CONF0_THR_H_LIM_EN_U6 = 0x1000
	// Position of THR_ZERO_EN_U6 field.
	PCNT_U6_CONF0_THR_ZERO_EN_U6_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U6 field.
	PCNT_U6_CONF0_THR_ZERO_EN_U6_Msk = 0x800
	// Bit THR_ZERO_EN_U6.
	PCNT_U6_CONF0_THR_ZERO_EN_U6 = 0x800
	// Position of FILTER_EN_U6 field.
	PCNT_U6_CONF0_FILTER_EN_U6_Pos = 0xa
	// Bit mask of FILTER_EN_U6 field.
	PCNT_U6_CONF0_FILTER_EN_U6_Msk = 0x400
	// Bit FILTER_EN_U6.
	PCNT_U6_CONF0_FILTER_EN_U6 = 0x400
	// Position of FILTER_THRES_U6 field.
	PCNT_U6_CONF0_FILTER_THRES_U6_Pos = 0x0
	// Bit mask of FILTER_THRES_U6 field.
	PCNT_U6_CONF0_FILTER_THRES_U6_Msk = 0x3ff

	// U6_CONF1: PCNT_U6_CONF1
	// Position of CNT_THRES1_U6 field.
	PCNT_U6_CONF1_CNT_THRES1_U6_Pos = 0x10
	// Bit mask of CNT_THRES1_U6 field.
	PCNT_U6_CONF1_CNT_THRES1_U6_Msk = 0xffff0000
	// Position of CNT_THRES0_U6 field.
	PCNT_U6_CONF1_CNT_THRES0_U6_Pos = 0x0
	// Bit mask of CNT_THRES0_U6 field.
	PCNT_U6_CONF1_CNT_THRES0_U6_Msk = 0xffff

	// U6_CONF2: PCNT_U6_CONF2
	// Position of CNT_L_LIM_U6 field.
	PCNT_U6_CONF2_CNT_L_LIM_U6_Pos = 0x10
	// Bit mask of CNT_L_LIM_U6 field.
	PCNT_U6_CONF2_CNT_L_LIM_U6_Msk = 0xffff0000
	// Position of CNT_H_LIM_U6 field.
	PCNT_U6_CONF2_CNT_H_LIM_U6_Pos = 0x0
	// Bit mask of CNT_H_LIM_U6 field.
	PCNT_U6_CONF2_CNT_H_LIM_U6_Msk = 0xffff

	// U7_CONF0: PCNT_U7_CONF0
	// Position of CH1_LCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH1_LCTRL_MODE_U7_Pos = 0x1e
	// Bit mask of CH1_LCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH1_LCTRL_MODE_U7_Msk = 0xc0000000
	// Position of CH1_HCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH1_HCTRL_MODE_U7_Pos = 0x1c
	// Bit mask of CH1_HCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH1_HCTRL_MODE_U7_Msk = 0x30000000
	// Position of CH1_POS_MODE_U7 field.
	PCNT_U7_CONF0_CH1_POS_MODE_U7_Pos = 0x1a
	// Bit mask of CH1_POS_MODE_U7 field.
	PCNT_U7_CONF0_CH1_POS_MODE_U7_Msk = 0xc000000
	// Position of CH1_NEG_MODE_U7 field.
	PCNT_U7_CONF0_CH1_NEG_MODE_U7_Pos = 0x18
	// Bit mask of CH1_NEG_MODE_U7 field.
	PCNT_U7_CONF0_CH1_NEG_MODE_U7_Msk = 0x3000000
	// Position of CH0_LCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH0_LCTRL_MODE_U7_Pos = 0x16
	// Bit mask of CH0_LCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH0_LCTRL_MODE_U7_Msk = 0xc00000
	// Position of CH0_HCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH0_HCTRL_MODE_U7_Pos = 0x14
	// Bit mask of CH0_HCTRL_MODE_U7 field.
	PCNT_U7_CONF0_CH0_HCTRL_MODE_U7_Msk = 0x300000
	// Position of CH0_POS_MODE_U7 field.
	PCNT_U7_CONF0_CH0_POS_MODE_U7_Pos = 0x12
	// Bit mask of CH0_POS_MODE_U7 field.
	PCNT_U7_CONF0_CH0_POS_MODE_U7_Msk = 0xc0000
	// Position of CH0_NEG_MODE_U7 field.
	PCNT_U7_CONF0_CH0_NEG_MODE_U7_Pos = 0x10
	// Bit mask of CH0_NEG_MODE_U7 field.
	PCNT_U7_CONF0_CH0_NEG_MODE_U7_Msk = 0x30000
	// Position of THR_THRES1_EN_U7 field.
	PCNT_U7_CONF0_THR_THRES1_EN_U7_Pos = 0xf
	// Bit mask of THR_THRES1_EN_U7 field.
	PCNT_U7_CONF0_THR_THRES1_EN_U7_Msk = 0x8000
	// Bit THR_THRES1_EN_U7.
	PCNT_U7_CONF0_THR_THRES1_EN_U7 = 0x8000
	// Position of THR_THRES0_EN_U7 field.
	PCNT_U7_CONF0_THR_THRES0_EN_U7_Pos = 0xe
	// Bit mask of THR_THRES0_EN_U7 field.
	PCNT_U7_CONF0_THR_THRES0_EN_U7_Msk = 0x4000
	// Bit THR_THRES0_EN_U7.
	PCNT_U7_CONF0_THR_THRES0_EN_U7 = 0x4000
	// Position of THR_L_LIM_EN_U7 field.
	PCNT_U7_CONF0_THR_L_LIM_EN_U7_Pos = 0xd
	// Bit mask of THR_L_LIM_EN_U7 field.
	PCNT_U7_CONF0_THR_L_LIM_EN_U7_Msk = 0x2000
	// Bit THR_L_LIM_EN_U7.
	PCNT_U7_CONF0_THR_L_LIM_EN_U7 = 0x2000
	// Position of THR_H_LIM_EN_U7 field.
	PCNT_U7_CONF0_THR_H_LIM_EN_U7_Pos = 0xc
	// Bit mask of THR_H_LIM_EN_U7 field.
	PCNT_U7_CONF0_THR_H_LIM_EN_U7_Msk = 0x1000
	// Bit THR_H_LIM_EN_U7.
	PCNT_U7_CONF0_THR_H_LIM_EN_U7 = 0x1000
	// Position of THR_ZERO_EN_U7 field.
	PCNT_U7_CONF0_THR_ZERO_EN_U7_Pos = 0xb
	// Bit mask of THR_ZERO_EN_U7 field.
	PCNT_U7_CONF0_THR_ZERO_EN_U7_Msk = 0x800
	// Bit THR_ZERO_EN_U7.
	PCNT_U7_CONF0_THR_ZERO_EN_U7 = 0x800
	// Position of FILTER_EN_U7 field.
	PCNT_U7_CONF0_FILTER_EN_U7_Pos = 0xa
	// Bit mask of FILTER_EN_U7 field.
	PCNT_U7_CONF0_FILTER_EN_U7_Msk = 0x400
	// Bit FILTER_EN_U7.
	PCNT_U7_CONF0_FILTER_EN_U7 = 0x400
	// Position of FILTER_THRES_U7 field.
	PCNT_U7_CONF0_FILTER_THRES_U7_Pos = 0x0
	// Bit mask of FILTER_THRES_U7 field.
	PCNT_U7_CONF0_FILTER_THRES_U7_Msk = 0x3ff

	// U7_CONF1: PCNT_U7_CONF1
	// Position of CNT_THRES1_U7 field.
	PCNT_U7_CONF1_CNT_THRES1_U7_Pos = 0x10
	// Bit mask of CNT_THRES1_U7 field.
	PCNT_U7_CONF1_CNT_THRES1_U7_Msk = 0xffff0000
	// Position of CNT_THRES0_U7 field.
	PCNT_U7_CONF1_CNT_THRES0_U7_Pos = 0x0
	// Bit mask of CNT_THRES0_U7 field.
	PCNT_U7_CONF1_CNT_THRES0_U7_Msk = 0xffff

	// U7_CONF2: PCNT_U7_CONF2
	// Position of CNT_L_LIM_U7 field.
	PCNT_U7_CONF2_CNT_L_LIM_U7_Pos = 0x10
	// Bit mask of CNT_L_LIM_U7 field.
	PCNT_U7_CONF2_CNT_L_LIM_U7_Msk = 0xffff0000
	// Position of CNT_H_LIM_U7 field.
	PCNT_U7_CONF2_CNT_H_LIM_U7_Pos = 0x0
	// Bit mask of CNT_H_LIM_U7 field.
	PCNT_U7_CONF2_CNT_H_LIM_U7_Msk = 0xffff

	// U0_CNT: PCNT_U0_CNT
	// Position of PLUS_CNT_U0 field.
	PCNT_U0_CNT_PLUS_CNT_U0_Pos = 0x0
	// Bit mask of PLUS_CNT_U0 field.
	PCNT_U0_CNT_PLUS_CNT_U0_Msk = 0xffff

	// U1_CNT: PCNT_U1_CNT
	// Position of PLUS_CNT_U1 field.
	PCNT_U1_CNT_PLUS_CNT_U1_Pos = 0x0
	// Bit mask of PLUS_CNT_U1 field.
	PCNT_U1_CNT_PLUS_CNT_U1_Msk = 0xffff

	// U2_CNT: PCNT_U2_CNT
	// Position of PLUS_CNT_U2 field.
	PCNT_U2_CNT_PLUS_CNT_U2_Pos = 0x0
	// Bit mask of PLUS_CNT_U2 field.
	PCNT_U2_CNT_PLUS_CNT_U2_Msk = 0xffff

	// U3_CNT: PCNT_U3_CNT
	// Position of PLUS_CNT_U3 field.
	PCNT_U3_CNT_PLUS_CNT_U3_Pos = 0x0
	// Bit mask of PLUS_CNT_U3 field.
	PCNT_U3_CNT_PLUS_CNT_U3_Msk = 0xffff

	// U4_CNT: PCNT_U4_CNT
	// Position of PLUS_CNT_U4 field.
	PCNT_U4_CNT_PLUS_CNT_U4_Pos = 0x0
	// Bit mask of PLUS_CNT_U4 field.
	PCNT_U4_CNT_PLUS_CNT_U4_Msk = 0xffff

	// U5_CNT: PCNT_U5_CNT
	// Position of PLUS_CNT_U5 field.
	PCNT_U5_CNT_PLUS_CNT_U5_Pos = 0x0
	// Bit mask of PLUS_CNT_U5 field.
	PCNT_U5_CNT_PLUS_CNT_U5_Msk = 0xffff

	// U6_CNT: PCNT_U6_CNT
	// Position of PLUS_CNT_U6 field.
	PCNT_U6_CNT_PLUS_CNT_U6_Pos = 0x0
	// Bit mask of PLUS_CNT_U6 field.
	PCNT_U6_CNT_PLUS_CNT_U6_Msk = 0xffff

	// U7_CNT: PCNT_U7_CNT
	// Position of PLUS_CNT_U7 field.
	PCNT_U7_CNT_PLUS_CNT_U7_Pos = 0x0
	// Bit mask of PLUS_CNT_U7 field.
	PCNT_U7_CNT_PLUS_CNT_U7_Msk = 0xffff

	// INT_RAW: PCNT_INT_RAW
	// Position of CNT_THR_EVENT_U7_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U7_INT_RAW_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U7_INT_RAW_Msk = 0x80
	// Bit CNT_THR_EVENT_U7_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U7_INT_RAW = 0x80
	// Position of CNT_THR_EVENT_U6_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U6_INT_RAW_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U6_INT_RAW_Msk = 0x40
	// Bit CNT_THR_EVENT_U6_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U6_INT_RAW = 0x40
	// Position of CNT_THR_EVENT_U5_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U5_INT_RAW_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U5_INT_RAW_Msk = 0x20
	// Bit CNT_THR_EVENT_U5_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U5_INT_RAW = 0x20
	// Position of CNT_THR_EVENT_U4_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U4_INT_RAW_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U4_INT_RAW_Msk = 0x10
	// Bit CNT_THR_EVENT_U4_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U4_INT_RAW = 0x10
	// Position of CNT_THR_EVENT_U3_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U3_INT_RAW_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U3_INT_RAW_Msk = 0x8
	// Bit CNT_THR_EVENT_U3_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U3_INT_RAW = 0x8
	// Position of CNT_THR_EVENT_U2_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U2_INT_RAW_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U2_INT_RAW_Msk = 0x4
	// Bit CNT_THR_EVENT_U2_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U2_INT_RAW = 0x4
	// Position of CNT_THR_EVENT_U1_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U1_INT_RAW_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U1_INT_RAW_Msk = 0x2
	// Bit CNT_THR_EVENT_U1_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U1_INT_RAW = 0x2
	// Position of CNT_THR_EVENT_U0_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U0_INT_RAW_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0_INT_RAW field.
	PCNT_INT_RAW_CNT_THR_EVENT_U0_INT_RAW_Msk = 0x1
	// Bit CNT_THR_EVENT_U0_INT_RAW.
	PCNT_INT_RAW_CNT_THR_EVENT_U0_INT_RAW = 0x1

	// INT_ST: PCNT_INT_ST
	// Position of CNT_THR_EVENT_U7_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U7_INT_ST_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U7_INT_ST_Msk = 0x80
	// Bit CNT_THR_EVENT_U7_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U7_INT_ST = 0x80
	// Position of CNT_THR_EVENT_U6_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U6_INT_ST_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U6_INT_ST_Msk = 0x40
	// Bit CNT_THR_EVENT_U6_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U6_INT_ST = 0x40
	// Position of CNT_THR_EVENT_U5_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U5_INT_ST_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U5_INT_ST_Msk = 0x20
	// Bit CNT_THR_EVENT_U5_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U5_INT_ST = 0x20
	// Position of CNT_THR_EVENT_U4_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U4_INT_ST_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U4_INT_ST_Msk = 0x10
	// Bit CNT_THR_EVENT_U4_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U4_INT_ST = 0x10
	// Position of CNT_THR_EVENT_U3_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U3_INT_ST_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U3_INT_ST_Msk = 0x8
	// Bit CNT_THR_EVENT_U3_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U3_INT_ST = 0x8
	// Position of CNT_THR_EVENT_U2_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U2_INT_ST_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U2_INT_ST_Msk = 0x4
	// Bit CNT_THR_EVENT_U2_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U2_INT_ST = 0x4
	// Position of CNT_THR_EVENT_U1_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U1_INT_ST_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U1_INT_ST_Msk = 0x2
	// Bit CNT_THR_EVENT_U1_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U1_INT_ST = 0x2
	// Position of CNT_THR_EVENT_U0_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U0_INT_ST_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0_INT_ST field.
	PCNT_INT_ST_CNT_THR_EVENT_U0_INT_ST_Msk = 0x1
	// Bit CNT_THR_EVENT_U0_INT_ST.
	PCNT_INT_ST_CNT_THR_EVENT_U0_INT_ST = 0x1

	// INT_ENA: PCNT_INT_ENA
	// Position of CNT_THR_EVENT_U7_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U7_INT_ENA_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U7_INT_ENA_Msk = 0x80
	// Bit CNT_THR_EVENT_U7_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U7_INT_ENA = 0x80
	// Position of CNT_THR_EVENT_U6_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U6_INT_ENA_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U6_INT_ENA_Msk = 0x40
	// Bit CNT_THR_EVENT_U6_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U6_INT_ENA = 0x40
	// Position of CNT_THR_EVENT_U5_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U5_INT_ENA_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U5_INT_ENA_Msk = 0x20
	// Bit CNT_THR_EVENT_U5_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U5_INT_ENA = 0x20
	// Position of CNT_THR_EVENT_U4_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U4_INT_ENA_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U4_INT_ENA_Msk = 0x10
	// Bit CNT_THR_EVENT_U4_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U4_INT_ENA = 0x10
	// Position of CNT_THR_EVENT_U3_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U3_INT_ENA_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U3_INT_ENA_Msk = 0x8
	// Bit CNT_THR_EVENT_U3_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U3_INT_ENA = 0x8
	// Position of CNT_THR_EVENT_U2_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U2_INT_ENA_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U2_INT_ENA_Msk = 0x4
	// Bit CNT_THR_EVENT_U2_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U2_INT_ENA = 0x4
	// Position of CNT_THR_EVENT_U1_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U1_INT_ENA_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U1_INT_ENA_Msk = 0x2
	// Bit CNT_THR_EVENT_U1_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U1_INT_ENA = 0x2
	// Position of CNT_THR_EVENT_U0_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U0_INT_ENA_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0_INT_ENA field.
	PCNT_INT_ENA_CNT_THR_EVENT_U0_INT_ENA_Msk = 0x1
	// Bit CNT_THR_EVENT_U0_INT_ENA.
	PCNT_INT_ENA_CNT_THR_EVENT_U0_INT_ENA = 0x1

	// INT_CLR: PCNT_INT_CLR
	// Position of CNT_THR_EVENT_U7_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U7_INT_CLR_Pos = 0x7
	// Bit mask of CNT_THR_EVENT_U7_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U7_INT_CLR_Msk = 0x80
	// Bit CNT_THR_EVENT_U7_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U7_INT_CLR = 0x80
	// Position of CNT_THR_EVENT_U6_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U6_INT_CLR_Pos = 0x6
	// Bit mask of CNT_THR_EVENT_U6_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U6_INT_CLR_Msk = 0x40
	// Bit CNT_THR_EVENT_U6_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U6_INT_CLR = 0x40
	// Position of CNT_THR_EVENT_U5_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U5_INT_CLR_Pos = 0x5
	// Bit mask of CNT_THR_EVENT_U5_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U5_INT_CLR_Msk = 0x20
	// Bit CNT_THR_EVENT_U5_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U5_INT_CLR = 0x20
	// Position of CNT_THR_EVENT_U4_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U4_INT_CLR_Pos = 0x4
	// Bit mask of CNT_THR_EVENT_U4_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U4_INT_CLR_Msk = 0x10
	// Bit CNT_THR_EVENT_U4_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U4_INT_CLR = 0x10
	// Position of CNT_THR_EVENT_U3_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U3_INT_CLR_Pos = 0x3
	// Bit mask of CNT_THR_EVENT_U3_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U3_INT_CLR_Msk = 0x8
	// Bit CNT_THR_EVENT_U3_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U3_INT_CLR = 0x8
	// Position of CNT_THR_EVENT_U2_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U2_INT_CLR_Pos = 0x2
	// Bit mask of CNT_THR_EVENT_U2_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U2_INT_CLR_Msk = 0x4
	// Bit CNT_THR_EVENT_U2_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U2_INT_CLR = 0x4
	// Position of CNT_THR_EVENT_U1_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U1_INT_CLR_Pos = 0x1
	// Bit mask of CNT_THR_EVENT_U1_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U1_INT_CLR_Msk = 0x2
	// Bit CNT_THR_EVENT_U1_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U1_INT_CLR = 0x2
	// Position of CNT_THR_EVENT_U0_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U0_INT_CLR_Pos = 0x0
	// Bit mask of CNT_THR_EVENT_U0_INT_CLR field.
	PCNT_INT_CLR_CNT_THR_EVENT_U0_INT_CLR_Msk = 0x1
	// Bit CNT_THR_EVENT_U0_INT_CLR.
	PCNT_INT_CLR_CNT_THR_EVENT_U0_INT_CLR = 0x1

	// U0_STATUS: PCNT_U0_STATUS
	// Position of CORE_STATUS_U0 field.
	PCNT_U0_STATUS_CORE_STATUS_U0_Pos = 0x0
	// Bit mask of CORE_STATUS_U0 field.
	PCNT_U0_STATUS_CORE_STATUS_U0_Msk = 0xffffffff

	// U1_STATUS: PCNT_U1_STATUS
	// Position of CORE_STATUS_U1 field.
	PCNT_U1_STATUS_CORE_STATUS_U1_Pos = 0x0
	// Bit mask of CORE_STATUS_U1 field.
	PCNT_U1_STATUS_CORE_STATUS_U1_Msk = 0xffffffff

	// U2_STATUS: PCNT_U2_STATUS
	// Position of CORE_STATUS_U2 field.
	PCNT_U2_STATUS_CORE_STATUS_U2_Pos = 0x0
	// Bit mask of CORE_STATUS_U2 field.
	PCNT_U2_STATUS_CORE_STATUS_U2_Msk = 0xffffffff

	// U3_STATUS: PCNT_U3_STATUS
	// Position of CORE_STATUS_U3 field.
	PCNT_U3_STATUS_CORE_STATUS_U3_Pos = 0x0
	// Bit mask of CORE_STATUS_U3 field.
	PCNT_U3_STATUS_CORE_STATUS_U3_Msk = 0xffffffff

	// U4_STATUS: PCNT_U4_STATUS
	// Position of CORE_STATUS_U4 field.
	PCNT_U4_STATUS_CORE_STATUS_U4_Pos = 0x0
	// Bit mask of CORE_STATUS_U4 field.
	PCNT_U4_STATUS_CORE_STATUS_U4_Msk = 0xffffffff

	// U5_STATUS: PCNT_U5_STATUS
	// Position of CORE_STATUS_U5 field.
	PCNT_U5_STATUS_CORE_STATUS_U5_Pos = 0x0
	// Bit mask of CORE_STATUS_U5 field.
	PCNT_U5_STATUS_CORE_STATUS_U5_Msk = 0xffffffff

	// U6_STATUS: PCNT_U6_STATUS
	// Position of CORE_STATUS_U6 field.
	PCNT_U6_STATUS_CORE_STATUS_U6_Pos = 0x0
	// Bit mask of CORE_STATUS_U6 field.
	PCNT_U6_STATUS_CORE_STATUS_U6_Msk = 0xffffffff

	// U7_STATUS: PCNT_U7_STATUS
	// Position of CORE_STATUS_U7 field.
	PCNT_U7_STATUS_CORE_STATUS_U7_Pos = 0x0
	// Bit mask of CORE_STATUS_U7 field.
	PCNT_U7_STATUS_CORE_STATUS_U7_Msk = 0xffffffff

	// CTRL: PCNT_CTRL
	// Position of CLK_EN field.
	PCNT_CTRL_CLK_EN_Pos = 0x10
	// Bit mask of CLK_EN field.
	PCNT_CTRL_CLK_EN_Msk = 0x10000
	// Bit CLK_EN.
	PCNT_CTRL_CLK_EN = 0x10000
	// Position of CNT_PAUSE_U7 field.
	PCNT_CTRL_CNT_PAUSE_U7_Pos = 0xf
	// Bit mask of CNT_PAUSE_U7 field.
	PCNT_CTRL_CNT_PAUSE_U7_Msk = 0x8000
	// Bit CNT_PAUSE_U7.
	PCNT_CTRL_CNT_PAUSE_U7 = 0x8000
	// Position of PLUS_CNT_RST_U7 field.
	PCNT_CTRL_PLUS_CNT_RST_U7_Pos = 0xe
	// Bit mask of PLUS_CNT_RST_U7 field.
	PCNT_CTRL_PLUS_CNT_RST_U7_Msk = 0x4000
	// Bit PLUS_CNT_RST_U7.
	PCNT_CTRL_PLUS_CNT_RST_U7 = 0x4000
	// Position of CNT_PAUSE_U6 field.
	PCNT_CTRL_CNT_PAUSE_U6_Pos = 0xd
	// Bit mask of CNT_PAUSE_U6 field.
	PCNT_CTRL_CNT_PAUSE_U6_Msk = 0x2000
	// Bit CNT_PAUSE_U6.
	PCNT_CTRL_CNT_PAUSE_U6 = 0x2000
	// Position of PLUS_CNT_RST_U6 field.
	PCNT_CTRL_PLUS_CNT_RST_U6_Pos = 0xc
	// Bit mask of PLUS_CNT_RST_U6 field.
	PCNT_CTRL_PLUS_CNT_RST_U6_Msk = 0x1000
	// Bit PLUS_CNT_RST_U6.
	PCNT_CTRL_PLUS_CNT_RST_U6 = 0x1000
	// Position of CNT_PAUSE_U5 field.
	PCNT_CTRL_CNT_PAUSE_U5_Pos = 0xb
	// Bit mask of CNT_PAUSE_U5 field.
	PCNT_CTRL_CNT_PAUSE_U5_Msk = 0x800
	// Bit CNT_PAUSE_U5.
	PCNT_CTRL_CNT_PAUSE_U5 = 0x800
	// Position of PLUS_CNT_RST_U5 field.
	PCNT_CTRL_PLUS_CNT_RST_U5_Pos = 0xa
	// Bit mask of PLUS_CNT_RST_U5 field.
	PCNT_CTRL_PLUS_CNT_RST_U5_Msk = 0x400
	// Bit PLUS_CNT_RST_U5.
	PCNT_CTRL_PLUS_CNT_RST_U5 = 0x400
	// Position of CNT_PAUSE_U4 field.
	PCNT_CTRL_CNT_PAUSE_U4_Pos = 0x9
	// Bit mask of CNT_PAUSE_U4 field.
	PCNT_CTRL_CNT_PAUSE_U4_Msk = 0x200
	// Bit CNT_PAUSE_U4.
	PCNT_CTRL_CNT_PAUSE_U4 = 0x200
	// Position of PLUS_CNT_RST_U4 field.
	PCNT_CTRL_PLUS_CNT_RST_U4_Pos = 0x8
	// Bit mask of PLUS_CNT_RST_U4 field.
	PCNT_CTRL_PLUS_CNT_RST_U4_Msk = 0x100
	// Bit PLUS_CNT_RST_U4.
	PCNT_CTRL_PLUS_CNT_RST_U4 = 0x100
	// Position of CNT_PAUSE_U3 field.
	PCNT_CTRL_CNT_PAUSE_U3_Pos = 0x7
	// Bit mask of CNT_PAUSE_U3 field.
	PCNT_CTRL_CNT_PAUSE_U3_Msk = 0x80
	// Bit CNT_PAUSE_U3.
	PCNT_CTRL_CNT_PAUSE_U3 = 0x80
	// Position of PLUS_CNT_RST_U3 field.
	PCNT_CTRL_PLUS_CNT_RST_U3_Pos = 0x6
	// Bit mask of PLUS_CNT_RST_U3 field.
	PCNT_CTRL_PLUS_CNT_RST_U3_Msk = 0x40
	// Bit PLUS_CNT_RST_U3.
	PCNT_CTRL_PLUS_CNT_RST_U3 = 0x40
	// Position of CNT_PAUSE_U2 field.
	PCNT_CTRL_CNT_PAUSE_U2_Pos = 0x5
	// Bit mask of CNT_PAUSE_U2 field.
	PCNT_CTRL_CNT_PAUSE_U2_Msk = 0x20
	// Bit CNT_PAUSE_U2.
	PCNT_CTRL_CNT_PAUSE_U2 = 0x20
	// Position of PLUS_CNT_RST_U2 field.
	PCNT_CTRL_PLUS_CNT_RST_U2_Pos = 0x4
	// Bit mask of PLUS_CNT_RST_U2 field.
	PCNT_CTRL_PLUS_CNT_RST_U2_Msk = 0x10
	// Bit PLUS_CNT_RST_U2.
	PCNT_CTRL_PLUS_CNT_RST_U2 = 0x10
	// Position of CNT_PAUSE_U1 field.
	PCNT_CTRL_CNT_PAUSE_U1_Pos = 0x3
	// Bit mask of CNT_PAUSE_U1 field.
	PCNT_CTRL_CNT_PAUSE_U1_Msk = 0x8
	// Bit CNT_PAUSE_U1.
	PCNT_CTRL_CNT_PAUSE_U1 = 0x8
	// Position of PLUS_CNT_RST_U1 field.
	PCNT_CTRL_PLUS_CNT_RST_U1_Pos = 0x2
	// Bit mask of PLUS_CNT_RST_U1 field.
	PCNT_CTRL_PLUS_CNT_RST_U1_Msk = 0x4
	// Bit PLUS_CNT_RST_U1.
	PCNT_CTRL_PLUS_CNT_RST_U1 = 0x4
	// Position of CNT_PAUSE_U0 field.
	PCNT_CTRL_CNT_PAUSE_U0_Pos = 0x1
	// Bit mask of CNT_PAUSE_U0 field.
	PCNT_CTRL_CNT_PAUSE_U0_Msk = 0x2
	// Bit CNT_PAUSE_U0.
	PCNT_CTRL_CNT_PAUSE_U0 = 0x2
	// Position of PLUS_CNT_RST_U0 field.
	PCNT_CTRL_PLUS_CNT_RST_U0_Pos = 0x0
	// Bit mask of PLUS_CNT_RST_U0 field.
	PCNT_CTRL_PLUS_CNT_RST_U0_Msk = 0x1
	// Bit PLUS_CNT_RST_U0.
	PCNT_CTRL_PLUS_CNT_RST_U0 = 0x1

	// DATE: PCNT_DATE
	// Position of DATE field.
	PCNT_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	PCNT_DATE_DATE_Msk = 0xffffffff
)

// Constants for RMT
const (
	// CH0CONF0: RMT_CH0CONF0
	// Position of CLK_EN field.
	RMT_CH0CONF0_CLK_EN_Pos = 0x1f
	// Bit mask of CLK_EN field.
	RMT_CH0CONF0_CLK_EN_Msk = 0x80000000
	// Bit CLK_EN.
	RMT_CH0CONF0_CLK_EN = 0x80000000
	// Position of MEM_PD field.
	RMT_CH0CONF0_MEM_PD_Pos = 0x1e
	// Bit mask of MEM_PD field.
	RMT_CH0CONF0_MEM_PD_Msk = 0x40000000
	// Bit MEM_PD.
	RMT_CH0CONF0_MEM_PD = 0x40000000
	// Position of CARRIER_OUT_LV_CH0 field.
	RMT_CH0CONF0_CARRIER_OUT_LV_CH0_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH0 field.
	RMT_CH0CONF0_CARRIER_OUT_LV_CH0_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH0.
	RMT_CH0CONF0_CARRIER_OUT_LV_CH0 = 0x20000000
	// Position of CARRIER_EN_CH0 field.
	RMT_CH0CONF0_CARRIER_EN_CH0_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH0 field.
	RMT_CH0CONF0_CARRIER_EN_CH0_Msk = 0x10000000
	// Bit CARRIER_EN_CH0.
	RMT_CH0CONF0_CARRIER_EN_CH0 = 0x10000000
	// Position of MEM_SIZE_CH0 field.
	RMT_CH0CONF0_MEM_SIZE_CH0_Pos = 0x18
	// Bit mask of MEM_SIZE_CH0 field.
	RMT_CH0CONF0_MEM_SIZE_CH0_Msk = 0xf000000
	// Position of IDLE_THRES_CH0 field.
	RMT_CH0CONF0_IDLE_THRES_CH0_Pos = 0x8
	// Bit mask of IDLE_THRES_CH0 field.
	RMT_CH0CONF0_IDLE_THRES_CH0_Msk = 0xffff00
	// Position of DIV_CNT_CH0 field.
	RMT_CH0CONF0_DIV_CNT_CH0_Pos = 0x0
	// Bit mask of DIV_CNT_CH0 field.
	RMT_CH0CONF0_DIV_CNT_CH0_Msk = 0xff

	// CH0CONF1: RMT_CH0CONF1
	// Position of IDLE_OUT_EN_CH0 field.
	RMT_CH0CONF1_IDLE_OUT_EN_CH0_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH0 field.
	RMT_CH0CONF1_IDLE_OUT_EN_CH0_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH0.
	RMT_CH0CONF1_IDLE_OUT_EN_CH0 = 0x80000
	// Position of IDLE_OUT_LV_CH0 field.
	RMT_CH0CONF1_IDLE_OUT_LV_CH0_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH0 field.
	RMT_CH0CONF1_IDLE_OUT_LV_CH0_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH0.
	RMT_CH0CONF1_IDLE_OUT_LV_CH0 = 0x40000
	// Position of REF_ALWAYS_ON_CH0 field.
	RMT_CH0CONF1_REF_ALWAYS_ON_CH0_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH0 field.
	RMT_CH0CONF1_REF_ALWAYS_ON_CH0_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH0.
	RMT_CH0CONF1_REF_ALWAYS_ON_CH0 = 0x20000
	// Position of REF_CNT_RST_CH0 field.
	RMT_CH0CONF1_REF_CNT_RST_CH0_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH0 field.
	RMT_CH0CONF1_REF_CNT_RST_CH0_Msk = 0x10000
	// Bit REF_CNT_RST_CH0.
	RMT_CH0CONF1_REF_CNT_RST_CH0 = 0x10000
	// Position of RX_FILTER_THRES_CH0 field.
	RMT_CH0CONF1_RX_FILTER_THRES_CH0_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH0 field.
	RMT_CH0CONF1_RX_FILTER_THRES_CH0_Msk = 0xff00
	// Position of RX_FILTER_EN_CH0 field.
	RMT_CH0CONF1_RX_FILTER_EN_CH0_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH0 field.
	RMT_CH0CONF1_RX_FILTER_EN_CH0_Msk = 0x80
	// Bit RX_FILTER_EN_CH0.
	RMT_CH0CONF1_RX_FILTER_EN_CH0 = 0x80
	// Position of TX_CONTI_MODE_CH0 field.
	RMT_CH0CONF1_TX_CONTI_MODE_CH0_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH0 field.
	RMT_CH0CONF1_TX_CONTI_MODE_CH0_Msk = 0x40
	// Bit TX_CONTI_MODE_CH0.
	RMT_CH0CONF1_TX_CONTI_MODE_CH0 = 0x40
	// Position of MEM_OWNER_CH0 field.
	RMT_CH0CONF1_MEM_OWNER_CH0_Pos = 0x5
	// Bit mask of MEM_OWNER_CH0 field.
	RMT_CH0CONF1_MEM_OWNER_CH0_Msk = 0x20
	// Bit MEM_OWNER_CH0.
	RMT_CH0CONF1_MEM_OWNER_CH0 = 0x20
	// Position of APB_MEM_RST_CH0 field.
	RMT_CH0CONF1_APB_MEM_RST_CH0_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH0 field.
	RMT_CH0CONF1_APB_MEM_RST_CH0_Msk = 0x10
	// Bit APB_MEM_RST_CH0.
	RMT_CH0CONF1_APB_MEM_RST_CH0 = 0x10
	// Position of MEM_RD_RST_CH0 field.
	RMT_CH0CONF1_MEM_RD_RST_CH0_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH0 field.
	RMT_CH0CONF1_MEM_RD_RST_CH0_Msk = 0x8
	// Bit MEM_RD_RST_CH0.
	RMT_CH0CONF1_MEM_RD_RST_CH0 = 0x8
	// Position of MEM_WR_RST_CH0 field.
	RMT_CH0CONF1_MEM_WR_RST_CH0_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH0 field.
	RMT_CH0CONF1_MEM_WR_RST_CH0_Msk = 0x4
	// Bit MEM_WR_RST_CH0.
	RMT_CH0CONF1_MEM_WR_RST_CH0 = 0x4
	// Position of RX_EN_CH0 field.
	RMT_CH0CONF1_RX_EN_CH0_Pos = 0x1
	// Bit mask of RX_EN_CH0 field.
	RMT_CH0CONF1_RX_EN_CH0_Msk = 0x2
	// Bit RX_EN_CH0.
	RMT_CH0CONF1_RX_EN_CH0 = 0x2
	// Position of TX_START_CH0 field.
	RMT_CH0CONF1_TX_START_CH0_Pos = 0x0
	// Bit mask of TX_START_CH0 field.
	RMT_CH0CONF1_TX_START_CH0_Msk = 0x1
	// Bit TX_START_CH0.
	RMT_CH0CONF1_TX_START_CH0 = 0x1

	// CH1CONF0: RMT_CH1CONF0
	// Position of CARRIER_OUT_LV_CH1 field.
	RMT_CH1CONF0_CARRIER_OUT_LV_CH1_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH1 field.
	RMT_CH1CONF0_CARRIER_OUT_LV_CH1_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH1.
	RMT_CH1CONF0_CARRIER_OUT_LV_CH1 = 0x20000000
	// Position of CARRIER_EN_CH1 field.
	RMT_CH1CONF0_CARRIER_EN_CH1_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH1 field.
	RMT_CH1CONF0_CARRIER_EN_CH1_Msk = 0x10000000
	// Bit CARRIER_EN_CH1.
	RMT_CH1CONF0_CARRIER_EN_CH1 = 0x10000000
	// Position of MEM_SIZE_CH1 field.
	RMT_CH1CONF0_MEM_SIZE_CH1_Pos = 0x18
	// Bit mask of MEM_SIZE_CH1 field.
	RMT_CH1CONF0_MEM_SIZE_CH1_Msk = 0xf000000
	// Position of IDLE_THRES_CH1 field.
	RMT_CH1CONF0_IDLE_THRES_CH1_Pos = 0x8
	// Bit mask of IDLE_THRES_CH1 field.
	RMT_CH1CONF0_IDLE_THRES_CH1_Msk = 0xffff00
	// Position of DIV_CNT_CH1 field.
	RMT_CH1CONF0_DIV_CNT_CH1_Pos = 0x0
	// Bit mask of DIV_CNT_CH1 field.
	RMT_CH1CONF0_DIV_CNT_CH1_Msk = 0xff

	// CH1CONF1: RMT_CH1CONF1
	// Position of IDLE_OUT_EN_CH1 field.
	RMT_CH1CONF1_IDLE_OUT_EN_CH1_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH1 field.
	RMT_CH1CONF1_IDLE_OUT_EN_CH1_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH1.
	RMT_CH1CONF1_IDLE_OUT_EN_CH1 = 0x80000
	// Position of IDLE_OUT_LV_CH1 field.
	RMT_CH1CONF1_IDLE_OUT_LV_CH1_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH1 field.
	RMT_CH1CONF1_IDLE_OUT_LV_CH1_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH1.
	RMT_CH1CONF1_IDLE_OUT_LV_CH1 = 0x40000
	// Position of REF_ALWAYS_ON_CH1 field.
	RMT_CH1CONF1_REF_ALWAYS_ON_CH1_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH1 field.
	RMT_CH1CONF1_REF_ALWAYS_ON_CH1_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH1.
	RMT_CH1CONF1_REF_ALWAYS_ON_CH1 = 0x20000
	// Position of REF_CNT_RST_CH1 field.
	RMT_CH1CONF1_REF_CNT_RST_CH1_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH1 field.
	RMT_CH1CONF1_REF_CNT_RST_CH1_Msk = 0x10000
	// Bit REF_CNT_RST_CH1.
	RMT_CH1CONF1_REF_CNT_RST_CH1 = 0x10000
	// Position of RX_FILTER_THRES_CH1 field.
	RMT_CH1CONF1_RX_FILTER_THRES_CH1_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH1 field.
	RMT_CH1CONF1_RX_FILTER_THRES_CH1_Msk = 0xff00
	// Position of RX_FILTER_EN_CH1 field.
	RMT_CH1CONF1_RX_FILTER_EN_CH1_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH1 field.
	RMT_CH1CONF1_RX_FILTER_EN_CH1_Msk = 0x80
	// Bit RX_FILTER_EN_CH1.
	RMT_CH1CONF1_RX_FILTER_EN_CH1 = 0x80
	// Position of TX_CONTI_MODE_CH1 field.
	RMT_CH1CONF1_TX_CONTI_MODE_CH1_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH1 field.
	RMT_CH1CONF1_TX_CONTI_MODE_CH1_Msk = 0x40
	// Bit TX_CONTI_MODE_CH1.
	RMT_CH1CONF1_TX_CONTI_MODE_CH1 = 0x40
	// Position of MEM_OWNER_CH1 field.
	RMT_CH1CONF1_MEM_OWNER_CH1_Pos = 0x5
	// Bit mask of MEM_OWNER_CH1 field.
	RMT_CH1CONF1_MEM_OWNER_CH1_Msk = 0x20
	// Bit MEM_OWNER_CH1.
	RMT_CH1CONF1_MEM_OWNER_CH1 = 0x20
	// Position of APB_MEM_RST_CH1 field.
	RMT_CH1CONF1_APB_MEM_RST_CH1_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH1 field.
	RMT_CH1CONF1_APB_MEM_RST_CH1_Msk = 0x10
	// Bit APB_MEM_RST_CH1.
	RMT_CH1CONF1_APB_MEM_RST_CH1 = 0x10
	// Position of MEM_RD_RST_CH1 field.
	RMT_CH1CONF1_MEM_RD_RST_CH1_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH1 field.
	RMT_CH1CONF1_MEM_RD_RST_CH1_Msk = 0x8
	// Bit MEM_RD_RST_CH1.
	RMT_CH1CONF1_MEM_RD_RST_CH1 = 0x8
	// Position of MEM_WR_RST_CH1 field.
	RMT_CH1CONF1_MEM_WR_RST_CH1_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH1 field.
	RMT_CH1CONF1_MEM_WR_RST_CH1_Msk = 0x4
	// Bit MEM_WR_RST_CH1.
	RMT_CH1CONF1_MEM_WR_RST_CH1 = 0x4
	// Position of RX_EN_CH1 field.
	RMT_CH1CONF1_RX_EN_CH1_Pos = 0x1
	// Bit mask of RX_EN_CH1 field.
	RMT_CH1CONF1_RX_EN_CH1_Msk = 0x2
	// Bit RX_EN_CH1.
	RMT_CH1CONF1_RX_EN_CH1 = 0x2
	// Position of TX_START_CH1 field.
	RMT_CH1CONF1_TX_START_CH1_Pos = 0x0
	// Bit mask of TX_START_CH1 field.
	RMT_CH1CONF1_TX_START_CH1_Msk = 0x1
	// Bit TX_START_CH1.
	RMT_CH1CONF1_TX_START_CH1 = 0x1

	// CH2CONF0: RMT_CH2CONF0
	// Position of CARRIER_OUT_LV_CH2 field.
	RMT_CH2CONF0_CARRIER_OUT_LV_CH2_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH2 field.
	RMT_CH2CONF0_CARRIER_OUT_LV_CH2_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH2.
	RMT_CH2CONF0_CARRIER_OUT_LV_CH2 = 0x20000000
	// Position of CARRIER_EN_CH2 field.
	RMT_CH2CONF0_CARRIER_EN_CH2_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH2 field.
	RMT_CH2CONF0_CARRIER_EN_CH2_Msk = 0x10000000
	// Bit CARRIER_EN_CH2.
	RMT_CH2CONF0_CARRIER_EN_CH2 = 0x10000000
	// Position of MEM_SIZE_CH2 field.
	RMT_CH2CONF0_MEM_SIZE_CH2_Pos = 0x18
	// Bit mask of MEM_SIZE_CH2 field.
	RMT_CH2CONF0_MEM_SIZE_CH2_Msk = 0xf000000
	// Position of IDLE_THRES_CH2 field.
	RMT_CH2CONF0_IDLE_THRES_CH2_Pos = 0x8
	// Bit mask of IDLE_THRES_CH2 field.
	RMT_CH2CONF0_IDLE_THRES_CH2_Msk = 0xffff00
	// Position of DIV_CNT_CH2 field.
	RMT_CH2CONF0_DIV_CNT_CH2_Pos = 0x0
	// Bit mask of DIV_CNT_CH2 field.
	RMT_CH2CONF0_DIV_CNT_CH2_Msk = 0xff

	// CH2CONF1: RMT_CH2CONF1
	// Position of IDLE_OUT_EN_CH2 field.
	RMT_CH2CONF1_IDLE_OUT_EN_CH2_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH2 field.
	RMT_CH2CONF1_IDLE_OUT_EN_CH2_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH2.
	RMT_CH2CONF1_IDLE_OUT_EN_CH2 = 0x80000
	// Position of IDLE_OUT_LV_CH2 field.
	RMT_CH2CONF1_IDLE_OUT_LV_CH2_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH2 field.
	RMT_CH2CONF1_IDLE_OUT_LV_CH2_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH2.
	RMT_CH2CONF1_IDLE_OUT_LV_CH2 = 0x40000
	// Position of REF_ALWAYS_ON_CH2 field.
	RMT_CH2CONF1_REF_ALWAYS_ON_CH2_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH2 field.
	RMT_CH2CONF1_REF_ALWAYS_ON_CH2_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH2.
	RMT_CH2CONF1_REF_ALWAYS_ON_CH2 = 0x20000
	// Position of REF_CNT_RST_CH2 field.
	RMT_CH2CONF1_REF_CNT_RST_CH2_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH2 field.
	RMT_CH2CONF1_REF_CNT_RST_CH2_Msk = 0x10000
	// Bit REF_CNT_RST_CH2.
	RMT_CH2CONF1_REF_CNT_RST_CH2 = 0x10000
	// Position of RX_FILTER_THRES_CH2 field.
	RMT_CH2CONF1_RX_FILTER_THRES_CH2_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH2 field.
	RMT_CH2CONF1_RX_FILTER_THRES_CH2_Msk = 0xff00
	// Position of RX_FILTER_EN_CH2 field.
	RMT_CH2CONF1_RX_FILTER_EN_CH2_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH2 field.
	RMT_CH2CONF1_RX_FILTER_EN_CH2_Msk = 0x80
	// Bit RX_FILTER_EN_CH2.
	RMT_CH2CONF1_RX_FILTER_EN_CH2 = 0x80
	// Position of TX_CONTI_MODE_CH2 field.
	RMT_CH2CONF1_TX_CONTI_MODE_CH2_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH2 field.
	RMT_CH2CONF1_TX_CONTI_MODE_CH2_Msk = 0x40
	// Bit TX_CONTI_MODE_CH2.
	RMT_CH2CONF1_TX_CONTI_MODE_CH2 = 0x40
	// Position of MEM_OWNER_CH2 field.
	RMT_CH2CONF1_MEM_OWNER_CH2_Pos = 0x5
	// Bit mask of MEM_OWNER_CH2 field.
	RMT_CH2CONF1_MEM_OWNER_CH2_Msk = 0x20
	// Bit MEM_OWNER_CH2.
	RMT_CH2CONF1_MEM_OWNER_CH2 = 0x20
	// Position of APB_MEM_RST_CH2 field.
	RMT_CH2CONF1_APB_MEM_RST_CH2_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH2 field.
	RMT_CH2CONF1_APB_MEM_RST_CH2_Msk = 0x10
	// Bit APB_MEM_RST_CH2.
	RMT_CH2CONF1_APB_MEM_RST_CH2 = 0x10
	// Position of MEM_RD_RST_CH2 field.
	RMT_CH2CONF1_MEM_RD_RST_CH2_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH2 field.
	RMT_CH2CONF1_MEM_RD_RST_CH2_Msk = 0x8
	// Bit MEM_RD_RST_CH2.
	RMT_CH2CONF1_MEM_RD_RST_CH2 = 0x8
	// Position of MEM_WR_RST_CH2 field.
	RMT_CH2CONF1_MEM_WR_RST_CH2_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH2 field.
	RMT_CH2CONF1_MEM_WR_RST_CH2_Msk = 0x4
	// Bit MEM_WR_RST_CH2.
	RMT_CH2CONF1_MEM_WR_RST_CH2 = 0x4
	// Position of RX_EN_CH2 field.
	RMT_CH2CONF1_RX_EN_CH2_Pos = 0x1
	// Bit mask of RX_EN_CH2 field.
	RMT_CH2CONF1_RX_EN_CH2_Msk = 0x2
	// Bit RX_EN_CH2.
	RMT_CH2CONF1_RX_EN_CH2 = 0x2
	// Position of TX_START_CH2 field.
	RMT_CH2CONF1_TX_START_CH2_Pos = 0x0
	// Bit mask of TX_START_CH2 field.
	RMT_CH2CONF1_TX_START_CH2_Msk = 0x1
	// Bit TX_START_CH2.
	RMT_CH2CONF1_TX_START_CH2 = 0x1

	// CH3CONF0: RMT_CH3CONF0
	// Position of CARRIER_OUT_LV_CH3 field.
	RMT_CH3CONF0_CARRIER_OUT_LV_CH3_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH3 field.
	RMT_CH3CONF0_CARRIER_OUT_LV_CH3_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH3.
	RMT_CH3CONF0_CARRIER_OUT_LV_CH3 = 0x20000000
	// Position of CARRIER_EN_CH3 field.
	RMT_CH3CONF0_CARRIER_EN_CH3_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH3 field.
	RMT_CH3CONF0_CARRIER_EN_CH3_Msk = 0x10000000
	// Bit CARRIER_EN_CH3.
	RMT_CH3CONF0_CARRIER_EN_CH3 = 0x10000000
	// Position of MEM_SIZE_CH3 field.
	RMT_CH3CONF0_MEM_SIZE_CH3_Pos = 0x18
	// Bit mask of MEM_SIZE_CH3 field.
	RMT_CH3CONF0_MEM_SIZE_CH3_Msk = 0xf000000
	// Position of IDLE_THRES_CH3 field.
	RMT_CH3CONF0_IDLE_THRES_CH3_Pos = 0x8
	// Bit mask of IDLE_THRES_CH3 field.
	RMT_CH3CONF0_IDLE_THRES_CH3_Msk = 0xffff00
	// Position of DIV_CNT_CH3 field.
	RMT_CH3CONF0_DIV_CNT_CH3_Pos = 0x0
	// Bit mask of DIV_CNT_CH3 field.
	RMT_CH3CONF0_DIV_CNT_CH3_Msk = 0xff

	// CH3CONF1: RMT_CH3CONF1
	// Position of IDLE_OUT_EN_CH3 field.
	RMT_CH3CONF1_IDLE_OUT_EN_CH3_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH3 field.
	RMT_CH3CONF1_IDLE_OUT_EN_CH3_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH3.
	RMT_CH3CONF1_IDLE_OUT_EN_CH3 = 0x80000
	// Position of IDLE_OUT_LV_CH3 field.
	RMT_CH3CONF1_IDLE_OUT_LV_CH3_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH3 field.
	RMT_CH3CONF1_IDLE_OUT_LV_CH3_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH3.
	RMT_CH3CONF1_IDLE_OUT_LV_CH3 = 0x40000
	// Position of REF_ALWAYS_ON_CH3 field.
	RMT_CH3CONF1_REF_ALWAYS_ON_CH3_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH3 field.
	RMT_CH3CONF1_REF_ALWAYS_ON_CH3_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH3.
	RMT_CH3CONF1_REF_ALWAYS_ON_CH3 = 0x20000
	// Position of REF_CNT_RST_CH3 field.
	RMT_CH3CONF1_REF_CNT_RST_CH3_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH3 field.
	RMT_CH3CONF1_REF_CNT_RST_CH3_Msk = 0x10000
	// Bit REF_CNT_RST_CH3.
	RMT_CH3CONF1_REF_CNT_RST_CH3 = 0x10000
	// Position of RX_FILTER_THRES_CH3 field.
	RMT_CH3CONF1_RX_FILTER_THRES_CH3_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH3 field.
	RMT_CH3CONF1_RX_FILTER_THRES_CH3_Msk = 0xff00
	// Position of RX_FILTER_EN_CH3 field.
	RMT_CH3CONF1_RX_FILTER_EN_CH3_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH3 field.
	RMT_CH3CONF1_RX_FILTER_EN_CH3_Msk = 0x80
	// Bit RX_FILTER_EN_CH3.
	RMT_CH3CONF1_RX_FILTER_EN_CH3 = 0x80
	// Position of TX_CONTI_MODE_CH3 field.
	RMT_CH3CONF1_TX_CONTI_MODE_CH3_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH3 field.
	RMT_CH3CONF1_TX_CONTI_MODE_CH3_Msk = 0x40
	// Bit TX_CONTI_MODE_CH3.
	RMT_CH3CONF1_TX_CONTI_MODE_CH3 = 0x40
	// Position of MEM_OWNER_CH3 field.
	RMT_CH3CONF1_MEM_OWNER_CH3_Pos = 0x5
	// Bit mask of MEM_OWNER_CH3 field.
	RMT_CH3CONF1_MEM_OWNER_CH3_Msk = 0x20
	// Bit MEM_OWNER_CH3.
	RMT_CH3CONF1_MEM_OWNER_CH3 = 0x20
	// Position of APB_MEM_RST_CH3 field.
	RMT_CH3CONF1_APB_MEM_RST_CH3_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH3 field.
	RMT_CH3CONF1_APB_MEM_RST_CH3_Msk = 0x10
	// Bit APB_MEM_RST_CH3.
	RMT_CH3CONF1_APB_MEM_RST_CH3 = 0x10
	// Position of MEM_RD_RST_CH3 field.
	RMT_CH3CONF1_MEM_RD_RST_CH3_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH3 field.
	RMT_CH3CONF1_MEM_RD_RST_CH3_Msk = 0x8
	// Bit MEM_RD_RST_CH3.
	RMT_CH3CONF1_MEM_RD_RST_CH3 = 0x8
	// Position of MEM_WR_RST_CH3 field.
	RMT_CH3CONF1_MEM_WR_RST_CH3_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH3 field.
	RMT_CH3CONF1_MEM_WR_RST_CH3_Msk = 0x4
	// Bit MEM_WR_RST_CH3.
	RMT_CH3CONF1_MEM_WR_RST_CH3 = 0x4
	// Position of RX_EN_CH3 field.
	RMT_CH3CONF1_RX_EN_CH3_Pos = 0x1
	// Bit mask of RX_EN_CH3 field.
	RMT_CH3CONF1_RX_EN_CH3_Msk = 0x2
	// Bit RX_EN_CH3.
	RMT_CH3CONF1_RX_EN_CH3 = 0x2
	// Position of TX_START_CH3 field.
	RMT_CH3CONF1_TX_START_CH3_Pos = 0x0
	// Bit mask of TX_START_CH3 field.
	RMT_CH3CONF1_TX_START_CH3_Msk = 0x1
	// Bit TX_START_CH3.
	RMT_CH3CONF1_TX_START_CH3 = 0x1

	// CH4CONF0: RMT_CH4CONF0
	// Position of CARRIER_OUT_LV_CH4 field.
	RMT_CH4CONF0_CARRIER_OUT_LV_CH4_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH4 field.
	RMT_CH4CONF0_CARRIER_OUT_LV_CH4_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH4.
	RMT_CH4CONF0_CARRIER_OUT_LV_CH4 = 0x20000000
	// Position of CARRIER_EN_CH4 field.
	RMT_CH4CONF0_CARRIER_EN_CH4_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH4 field.
	RMT_CH4CONF0_CARRIER_EN_CH4_Msk = 0x10000000
	// Bit CARRIER_EN_CH4.
	RMT_CH4CONF0_CARRIER_EN_CH4 = 0x10000000
	// Position of MEM_SIZE_CH4 field.
	RMT_CH4CONF0_MEM_SIZE_CH4_Pos = 0x18
	// Bit mask of MEM_SIZE_CH4 field.
	RMT_CH4CONF0_MEM_SIZE_CH4_Msk = 0xf000000
	// Position of IDLE_THRES_CH4 field.
	RMT_CH4CONF0_IDLE_THRES_CH4_Pos = 0x8
	// Bit mask of IDLE_THRES_CH4 field.
	RMT_CH4CONF0_IDLE_THRES_CH4_Msk = 0xffff00
	// Position of DIV_CNT_CH4 field.
	RMT_CH4CONF0_DIV_CNT_CH4_Pos = 0x0
	// Bit mask of DIV_CNT_CH4 field.
	RMT_CH4CONF0_DIV_CNT_CH4_Msk = 0xff

	// CH4CONF1: RMT_CH4CONF1
	// Position of IDLE_OUT_EN_CH4 field.
	RMT_CH4CONF1_IDLE_OUT_EN_CH4_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH4 field.
	RMT_CH4CONF1_IDLE_OUT_EN_CH4_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH4.
	RMT_CH4CONF1_IDLE_OUT_EN_CH4 = 0x80000
	// Position of IDLE_OUT_LV_CH4 field.
	RMT_CH4CONF1_IDLE_OUT_LV_CH4_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH4 field.
	RMT_CH4CONF1_IDLE_OUT_LV_CH4_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH4.
	RMT_CH4CONF1_IDLE_OUT_LV_CH4 = 0x40000
	// Position of REF_ALWAYS_ON_CH4 field.
	RMT_CH4CONF1_REF_ALWAYS_ON_CH4_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH4 field.
	RMT_CH4CONF1_REF_ALWAYS_ON_CH4_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH4.
	RMT_CH4CONF1_REF_ALWAYS_ON_CH4 = 0x20000
	// Position of REF_CNT_RST_CH4 field.
	RMT_CH4CONF1_REF_CNT_RST_CH4_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH4 field.
	RMT_CH4CONF1_REF_CNT_RST_CH4_Msk = 0x10000
	// Bit REF_CNT_RST_CH4.
	RMT_CH4CONF1_REF_CNT_RST_CH4 = 0x10000
	// Position of RX_FILTER_THRES_CH4 field.
	RMT_CH4CONF1_RX_FILTER_THRES_CH4_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH4 field.
	RMT_CH4CONF1_RX_FILTER_THRES_CH4_Msk = 0xff00
	// Position of RX_FILTER_EN_CH4 field.
	RMT_CH4CONF1_RX_FILTER_EN_CH4_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH4 field.
	RMT_CH4CONF1_RX_FILTER_EN_CH4_Msk = 0x80
	// Bit RX_FILTER_EN_CH4.
	RMT_CH4CONF1_RX_FILTER_EN_CH4 = 0x80
	// Position of TX_CONTI_MODE_CH4 field.
	RMT_CH4CONF1_TX_CONTI_MODE_CH4_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH4 field.
	RMT_CH4CONF1_TX_CONTI_MODE_CH4_Msk = 0x40
	// Bit TX_CONTI_MODE_CH4.
	RMT_CH4CONF1_TX_CONTI_MODE_CH4 = 0x40
	// Position of MEM_OWNER_CH4 field.
	RMT_CH4CONF1_MEM_OWNER_CH4_Pos = 0x5
	// Bit mask of MEM_OWNER_CH4 field.
	RMT_CH4CONF1_MEM_OWNER_CH4_Msk = 0x20
	// Bit MEM_OWNER_CH4.
	RMT_CH4CONF1_MEM_OWNER_CH4 = 0x20
	// Position of APB_MEM_RST_CH4 field.
	RMT_CH4CONF1_APB_MEM_RST_CH4_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH4 field.
	RMT_CH4CONF1_APB_MEM_RST_CH4_Msk = 0x10
	// Bit APB_MEM_RST_CH4.
	RMT_CH4CONF1_APB_MEM_RST_CH4 = 0x10
	// Position of MEM_RD_RST_CH4 field.
	RMT_CH4CONF1_MEM_RD_RST_CH4_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH4 field.
	RMT_CH4CONF1_MEM_RD_RST_CH4_Msk = 0x8
	// Bit MEM_RD_RST_CH4.
	RMT_CH4CONF1_MEM_RD_RST_CH4 = 0x8
	// Position of MEM_WR_RST_CH4 field.
	RMT_CH4CONF1_MEM_WR_RST_CH4_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH4 field.
	RMT_CH4CONF1_MEM_WR_RST_CH4_Msk = 0x4
	// Bit MEM_WR_RST_CH4.
	RMT_CH4CONF1_MEM_WR_RST_CH4 = 0x4
	// Position of RX_EN_CH4 field.
	RMT_CH4CONF1_RX_EN_CH4_Pos = 0x1
	// Bit mask of RX_EN_CH4 field.
	RMT_CH4CONF1_RX_EN_CH4_Msk = 0x2
	// Bit RX_EN_CH4.
	RMT_CH4CONF1_RX_EN_CH4 = 0x2
	// Position of TX_START_CH4 field.
	RMT_CH4CONF1_TX_START_CH4_Pos = 0x0
	// Bit mask of TX_START_CH4 field.
	RMT_CH4CONF1_TX_START_CH4_Msk = 0x1
	// Bit TX_START_CH4.
	RMT_CH4CONF1_TX_START_CH4 = 0x1

	// CH5CONF0: RMT_CH5CONF0
	// Position of CARRIER_OUT_LV_CH5 field.
	RMT_CH5CONF0_CARRIER_OUT_LV_CH5_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH5 field.
	RMT_CH5CONF0_CARRIER_OUT_LV_CH5_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH5.
	RMT_CH5CONF0_CARRIER_OUT_LV_CH5 = 0x20000000
	// Position of CARRIER_EN_CH5 field.
	RMT_CH5CONF0_CARRIER_EN_CH5_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH5 field.
	RMT_CH5CONF0_CARRIER_EN_CH5_Msk = 0x10000000
	// Bit CARRIER_EN_CH5.
	RMT_CH5CONF0_CARRIER_EN_CH5 = 0x10000000
	// Position of MEM_SIZE_CH5 field.
	RMT_CH5CONF0_MEM_SIZE_CH5_Pos = 0x18
	// Bit mask of MEM_SIZE_CH5 field.
	RMT_CH5CONF0_MEM_SIZE_CH5_Msk = 0xf000000
	// Position of IDLE_THRES_CH5 field.
	RMT_CH5CONF0_IDLE_THRES_CH5_Pos = 0x8
	// Bit mask of IDLE_THRES_CH5 field.
	RMT_CH5CONF0_IDLE_THRES_CH5_Msk = 0xffff00
	// Position of DIV_CNT_CH5 field.
	RMT_CH5CONF0_DIV_CNT_CH5_Pos = 0x0
	// Bit mask of DIV_CNT_CH5 field.
	RMT_CH5CONF0_DIV_CNT_CH5_Msk = 0xff

	// CH5CONF1: RMT_CH5CONF1
	// Position of IDLE_OUT_EN_CH5 field.
	RMT_CH5CONF1_IDLE_OUT_EN_CH5_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH5 field.
	RMT_CH5CONF1_IDLE_OUT_EN_CH5_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH5.
	RMT_CH5CONF1_IDLE_OUT_EN_CH5 = 0x80000
	// Position of IDLE_OUT_LV_CH5 field.
	RMT_CH5CONF1_IDLE_OUT_LV_CH5_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH5 field.
	RMT_CH5CONF1_IDLE_OUT_LV_CH5_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH5.
	RMT_CH5CONF1_IDLE_OUT_LV_CH5 = 0x40000
	// Position of REF_ALWAYS_ON_CH5 field.
	RMT_CH5CONF1_REF_ALWAYS_ON_CH5_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH5 field.
	RMT_CH5CONF1_REF_ALWAYS_ON_CH5_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH5.
	RMT_CH5CONF1_REF_ALWAYS_ON_CH5 = 0x20000
	// Position of REF_CNT_RST_CH5 field.
	RMT_CH5CONF1_REF_CNT_RST_CH5_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH5 field.
	RMT_CH5CONF1_REF_CNT_RST_CH5_Msk = 0x10000
	// Bit REF_CNT_RST_CH5.
	RMT_CH5CONF1_REF_CNT_RST_CH5 = 0x10000
	// Position of RX_FILTER_THRES_CH5 field.
	RMT_CH5CONF1_RX_FILTER_THRES_CH5_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH5 field.
	RMT_CH5CONF1_RX_FILTER_THRES_CH5_Msk = 0xff00
	// Position of RX_FILTER_EN_CH5 field.
	RMT_CH5CONF1_RX_FILTER_EN_CH5_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH5 field.
	RMT_CH5CONF1_RX_FILTER_EN_CH5_Msk = 0x80
	// Bit RX_FILTER_EN_CH5.
	RMT_CH5CONF1_RX_FILTER_EN_CH5 = 0x80
	// Position of TX_CONTI_MODE_CH5 field.
	RMT_CH5CONF1_TX_CONTI_MODE_CH5_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH5 field.
	RMT_CH5CONF1_TX_CONTI_MODE_CH5_Msk = 0x40
	// Bit TX_CONTI_MODE_CH5.
	RMT_CH5CONF1_TX_CONTI_MODE_CH5 = 0x40
	// Position of MEM_OWNER_CH5 field.
	RMT_CH5CONF1_MEM_OWNER_CH5_Pos = 0x5
	// Bit mask of MEM_OWNER_CH5 field.
	RMT_CH5CONF1_MEM_OWNER_CH5_Msk = 0x20
	// Bit MEM_OWNER_CH5.
	RMT_CH5CONF1_MEM_OWNER_CH5 = 0x20
	// Position of APB_MEM_RST_CH5 field.
	RMT_CH5CONF1_APB_MEM_RST_CH5_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH5 field.
	RMT_CH5CONF1_APB_MEM_RST_CH5_Msk = 0x10
	// Bit APB_MEM_RST_CH5.
	RMT_CH5CONF1_APB_MEM_RST_CH5 = 0x10
	// Position of MEM_RD_RST_CH5 field.
	RMT_CH5CONF1_MEM_RD_RST_CH5_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH5 field.
	RMT_CH5CONF1_MEM_RD_RST_CH5_Msk = 0x8
	// Bit MEM_RD_RST_CH5.
	RMT_CH5CONF1_MEM_RD_RST_CH5 = 0x8
	// Position of MEM_WR_RST_CH5 field.
	RMT_CH5CONF1_MEM_WR_RST_CH5_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH5 field.
	RMT_CH5CONF1_MEM_WR_RST_CH5_Msk = 0x4
	// Bit MEM_WR_RST_CH5.
	RMT_CH5CONF1_MEM_WR_RST_CH5 = 0x4
	// Position of RX_EN_CH5 field.
	RMT_CH5CONF1_RX_EN_CH5_Pos = 0x1
	// Bit mask of RX_EN_CH5 field.
	RMT_CH5CONF1_RX_EN_CH5_Msk = 0x2
	// Bit RX_EN_CH5.
	RMT_CH5CONF1_RX_EN_CH5 = 0x2
	// Position of TX_START_CH5 field.
	RMT_CH5CONF1_TX_START_CH5_Pos = 0x0
	// Bit mask of TX_START_CH5 field.
	RMT_CH5CONF1_TX_START_CH5_Msk = 0x1
	// Bit TX_START_CH5.
	RMT_CH5CONF1_TX_START_CH5 = 0x1

	// CH6CONF0: RMT_CH6CONF0
	// Position of CARRIER_OUT_LV_CH6 field.
	RMT_CH6CONF0_CARRIER_OUT_LV_CH6_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH6 field.
	RMT_CH6CONF0_CARRIER_OUT_LV_CH6_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH6.
	RMT_CH6CONF0_CARRIER_OUT_LV_CH6 = 0x20000000
	// Position of CARRIER_EN_CH6 field.
	RMT_CH6CONF0_CARRIER_EN_CH6_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH6 field.
	RMT_CH6CONF0_CARRIER_EN_CH6_Msk = 0x10000000
	// Bit CARRIER_EN_CH6.
	RMT_CH6CONF0_CARRIER_EN_CH6 = 0x10000000
	// Position of MEM_SIZE_CH6 field.
	RMT_CH6CONF0_MEM_SIZE_CH6_Pos = 0x18
	// Bit mask of MEM_SIZE_CH6 field.
	RMT_CH6CONF0_MEM_SIZE_CH6_Msk = 0xf000000
	// Position of IDLE_THRES_CH6 field.
	RMT_CH6CONF0_IDLE_THRES_CH6_Pos = 0x8
	// Bit mask of IDLE_THRES_CH6 field.
	RMT_CH6CONF0_IDLE_THRES_CH6_Msk = 0xffff00
	// Position of DIV_CNT_CH6 field.
	RMT_CH6CONF0_DIV_CNT_CH6_Pos = 0x0
	// Bit mask of DIV_CNT_CH6 field.
	RMT_CH6CONF0_DIV_CNT_CH6_Msk = 0xff

	// CH6CONF1: RMT_CH6CONF1
	// Position of IDLE_OUT_EN_CH6 field.
	RMT_CH6CONF1_IDLE_OUT_EN_CH6_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH6 field.
	RMT_CH6CONF1_IDLE_OUT_EN_CH6_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH6.
	RMT_CH6CONF1_IDLE_OUT_EN_CH6 = 0x80000
	// Position of IDLE_OUT_LV_CH6 field.
	RMT_CH6CONF1_IDLE_OUT_LV_CH6_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH6 field.
	RMT_CH6CONF1_IDLE_OUT_LV_CH6_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH6.
	RMT_CH6CONF1_IDLE_OUT_LV_CH6 = 0x40000
	// Position of REF_ALWAYS_ON_CH6 field.
	RMT_CH6CONF1_REF_ALWAYS_ON_CH6_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH6 field.
	RMT_CH6CONF1_REF_ALWAYS_ON_CH6_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH6.
	RMT_CH6CONF1_REF_ALWAYS_ON_CH6 = 0x20000
	// Position of REF_CNT_RST_CH6 field.
	RMT_CH6CONF1_REF_CNT_RST_CH6_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH6 field.
	RMT_CH6CONF1_REF_CNT_RST_CH6_Msk = 0x10000
	// Bit REF_CNT_RST_CH6.
	RMT_CH6CONF1_REF_CNT_RST_CH6 = 0x10000
	// Position of RX_FILTER_THRES_CH6 field.
	RMT_CH6CONF1_RX_FILTER_THRES_CH6_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH6 field.
	RMT_CH6CONF1_RX_FILTER_THRES_CH6_Msk = 0xff00
	// Position of RX_FILTER_EN_CH6 field.
	RMT_CH6CONF1_RX_FILTER_EN_CH6_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH6 field.
	RMT_CH6CONF1_RX_FILTER_EN_CH6_Msk = 0x80
	// Bit RX_FILTER_EN_CH6.
	RMT_CH6CONF1_RX_FILTER_EN_CH6 = 0x80
	// Position of TX_CONTI_MODE_CH6 field.
	RMT_CH6CONF1_TX_CONTI_MODE_CH6_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH6 field.
	RMT_CH6CONF1_TX_CONTI_MODE_CH6_Msk = 0x40
	// Bit TX_CONTI_MODE_CH6.
	RMT_CH6CONF1_TX_CONTI_MODE_CH6 = 0x40
	// Position of MEM_OWNER_CH6 field.
	RMT_CH6CONF1_MEM_OWNER_CH6_Pos = 0x5
	// Bit mask of MEM_OWNER_CH6 field.
	RMT_CH6CONF1_MEM_OWNER_CH6_Msk = 0x20
	// Bit MEM_OWNER_CH6.
	RMT_CH6CONF1_MEM_OWNER_CH6 = 0x20
	// Position of APB_MEM_RST_CH6 field.
	RMT_CH6CONF1_APB_MEM_RST_CH6_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH6 field.
	RMT_CH6CONF1_APB_MEM_RST_CH6_Msk = 0x10
	// Bit APB_MEM_RST_CH6.
	RMT_CH6CONF1_APB_MEM_RST_CH6 = 0x10
	// Position of MEM_RD_RST_CH6 field.
	RMT_CH6CONF1_MEM_RD_RST_CH6_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH6 field.
	RMT_CH6CONF1_MEM_RD_RST_CH6_Msk = 0x8
	// Bit MEM_RD_RST_CH6.
	RMT_CH6CONF1_MEM_RD_RST_CH6 = 0x8
	// Position of MEM_WR_RST_CH6 field.
	RMT_CH6CONF1_MEM_WR_RST_CH6_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH6 field.
	RMT_CH6CONF1_MEM_WR_RST_CH6_Msk = 0x4
	// Bit MEM_WR_RST_CH6.
	RMT_CH6CONF1_MEM_WR_RST_CH6 = 0x4
	// Position of RX_EN_CH6 field.
	RMT_CH6CONF1_RX_EN_CH6_Pos = 0x1
	// Bit mask of RX_EN_CH6 field.
	RMT_CH6CONF1_RX_EN_CH6_Msk = 0x2
	// Bit RX_EN_CH6.
	RMT_CH6CONF1_RX_EN_CH6 = 0x2
	// Position of TX_START_CH6 field.
	RMT_CH6CONF1_TX_START_CH6_Pos = 0x0
	// Bit mask of TX_START_CH6 field.
	RMT_CH6CONF1_TX_START_CH6_Msk = 0x1
	// Bit TX_START_CH6.
	RMT_CH6CONF1_TX_START_CH6 = 0x1

	// CH7CONF0: RMT_CH7CONF0
	// Position of CARRIER_OUT_LV_CH7 field.
	RMT_CH7CONF0_CARRIER_OUT_LV_CH7_Pos = 0x1d
	// Bit mask of CARRIER_OUT_LV_CH7 field.
	RMT_CH7CONF0_CARRIER_OUT_LV_CH7_Msk = 0x20000000
	// Bit CARRIER_OUT_LV_CH7.
	RMT_CH7CONF0_CARRIER_OUT_LV_CH7 = 0x20000000
	// Position of CARRIER_EN_CH7 field.
	RMT_CH7CONF0_CARRIER_EN_CH7_Pos = 0x1c
	// Bit mask of CARRIER_EN_CH7 field.
	RMT_CH7CONF0_CARRIER_EN_CH7_Msk = 0x10000000
	// Bit CARRIER_EN_CH7.
	RMT_CH7CONF0_CARRIER_EN_CH7 = 0x10000000
	// Position of MEM_SIZE_CH7 field.
	RMT_CH7CONF0_MEM_SIZE_CH7_Pos = 0x18
	// Bit mask of MEM_SIZE_CH7 field.
	RMT_CH7CONF0_MEM_SIZE_CH7_Msk = 0xf000000
	// Position of IDLE_THRES_CH7 field.
	RMT_CH7CONF0_IDLE_THRES_CH7_Pos = 0x8
	// Bit mask of IDLE_THRES_CH7 field.
	RMT_CH7CONF0_IDLE_THRES_CH7_Msk = 0xffff00
	// Position of DIV_CNT_CH7 field.
	RMT_CH7CONF0_DIV_CNT_CH7_Pos = 0x0
	// Bit mask of DIV_CNT_CH7 field.
	RMT_CH7CONF0_DIV_CNT_CH7_Msk = 0xff

	// CH7CONF1: RMT_CH7CONF1
	// Position of IDLE_OUT_EN_CH7 field.
	RMT_CH7CONF1_IDLE_OUT_EN_CH7_Pos = 0x13
	// Bit mask of IDLE_OUT_EN_CH7 field.
	RMT_CH7CONF1_IDLE_OUT_EN_CH7_Msk = 0x80000
	// Bit IDLE_OUT_EN_CH7.
	RMT_CH7CONF1_IDLE_OUT_EN_CH7 = 0x80000
	// Position of IDLE_OUT_LV_CH7 field.
	RMT_CH7CONF1_IDLE_OUT_LV_CH7_Pos = 0x12
	// Bit mask of IDLE_OUT_LV_CH7 field.
	RMT_CH7CONF1_IDLE_OUT_LV_CH7_Msk = 0x40000
	// Bit IDLE_OUT_LV_CH7.
	RMT_CH7CONF1_IDLE_OUT_LV_CH7 = 0x40000
	// Position of REF_ALWAYS_ON_CH7 field.
	RMT_CH7CONF1_REF_ALWAYS_ON_CH7_Pos = 0x11
	// Bit mask of REF_ALWAYS_ON_CH7 field.
	RMT_CH7CONF1_REF_ALWAYS_ON_CH7_Msk = 0x20000
	// Bit REF_ALWAYS_ON_CH7.
	RMT_CH7CONF1_REF_ALWAYS_ON_CH7 = 0x20000
	// Position of REF_CNT_RST_CH7 field.
	RMT_CH7CONF1_REF_CNT_RST_CH7_Pos = 0x10
	// Bit mask of REF_CNT_RST_CH7 field.
	RMT_CH7CONF1_REF_CNT_RST_CH7_Msk = 0x10000
	// Bit REF_CNT_RST_CH7.
	RMT_CH7CONF1_REF_CNT_RST_CH7 = 0x10000
	// Position of RX_FILTER_THRES_CH7 field.
	RMT_CH7CONF1_RX_FILTER_THRES_CH7_Pos = 0x8
	// Bit mask of RX_FILTER_THRES_CH7 field.
	RMT_CH7CONF1_RX_FILTER_THRES_CH7_Msk = 0xff00
	// Position of RX_FILTER_EN_CH7 field.
	RMT_CH7CONF1_RX_FILTER_EN_CH7_Pos = 0x7
	// Bit mask of RX_FILTER_EN_CH7 field.
	RMT_CH7CONF1_RX_FILTER_EN_CH7_Msk = 0x80
	// Bit RX_FILTER_EN_CH7.
	RMT_CH7CONF1_RX_FILTER_EN_CH7 = 0x80
	// Position of TX_CONTI_MODE_CH7 field.
	RMT_CH7CONF1_TX_CONTI_MODE_CH7_Pos = 0x6
	// Bit mask of TX_CONTI_MODE_CH7 field.
	RMT_CH7CONF1_TX_CONTI_MODE_CH7_Msk = 0x40
	// Bit TX_CONTI_MODE_CH7.
	RMT_CH7CONF1_TX_CONTI_MODE_CH7 = 0x40
	// Position of MEM_OWNER_CH7 field.
	RMT_CH7CONF1_MEM_OWNER_CH7_Pos = 0x5
	// Bit mask of MEM_OWNER_CH7 field.
	RMT_CH7CONF1_MEM_OWNER_CH7_Msk = 0x20
	// Bit MEM_OWNER_CH7.
	RMT_CH7CONF1_MEM_OWNER_CH7 = 0x20
	// Position of APB_MEM_RST_CH7 field.
	RMT_CH7CONF1_APB_MEM_RST_CH7_Pos = 0x4
	// Bit mask of APB_MEM_RST_CH7 field.
	RMT_CH7CONF1_APB_MEM_RST_CH7_Msk = 0x10
	// Bit APB_MEM_RST_CH7.
	RMT_CH7CONF1_APB_MEM_RST_CH7 = 0x10
	// Position of MEM_RD_RST_CH7 field.
	RMT_CH7CONF1_MEM_RD_RST_CH7_Pos = 0x3
	// Bit mask of MEM_RD_RST_CH7 field.
	RMT_CH7CONF1_MEM_RD_RST_CH7_Msk = 0x8
	// Bit MEM_RD_RST_CH7.
	RMT_CH7CONF1_MEM_RD_RST_CH7 = 0x8
	// Position of MEM_WR_RST_CH7 field.
	RMT_CH7CONF1_MEM_WR_RST_CH7_Pos = 0x2
	// Bit mask of MEM_WR_RST_CH7 field.
	RMT_CH7CONF1_MEM_WR_RST_CH7_Msk = 0x4
	// Bit MEM_WR_RST_CH7.
	RMT_CH7CONF1_MEM_WR_RST_CH7 = 0x4
	// Position of RX_EN_CH7 field.
	RMT_CH7CONF1_RX_EN_CH7_Pos = 0x1
	// Bit mask of RX_EN_CH7 field.
	RMT_CH7CONF1_RX_EN_CH7_Msk = 0x2
	// Bit RX_EN_CH7.
	RMT_CH7CONF1_RX_EN_CH7 = 0x2
	// Position of TX_START_CH7 field.
	RMT_CH7CONF1_TX_START_CH7_Pos = 0x0
	// Bit mask of TX_START_CH7 field.
	RMT_CH7CONF1_TX_START_CH7_Msk = 0x1
	// Bit TX_START_CH7.
	RMT_CH7CONF1_TX_START_CH7 = 0x1

	// CH0STATUS: RMT_CH0STATUS
	// Position of STATUS_CH0 field.
	RMT_CH0STATUS_STATUS_CH0_Pos = 0x0
	// Bit mask of STATUS_CH0 field.
	RMT_CH0STATUS_STATUS_CH0_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH0 field.
	RMT_CH0STATUS_APB_MEM_RD_ERR_CH0_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH0 field.
	RMT_CH0STATUS_APB_MEM_RD_ERR_CH0_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH0.
	RMT_CH0STATUS_APB_MEM_RD_ERR_CH0 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH0 field.
	RMT_CH0STATUS_APB_MEM_WR_ERR_CH0_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH0 field.
	RMT_CH0STATUS_APB_MEM_WR_ERR_CH0_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH0.
	RMT_CH0STATUS_APB_MEM_WR_ERR_CH0 = 0x40000000
	// Position of MEM_EMPTY_CH0 field.
	RMT_CH0STATUS_MEM_EMPTY_CH0_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH0 field.
	RMT_CH0STATUS_MEM_EMPTY_CH0_Msk = 0x20000000
	// Bit MEM_EMPTY_CH0.
	RMT_CH0STATUS_MEM_EMPTY_CH0 = 0x20000000
	// Position of MEM_FULL_CH0 field.
	RMT_CH0STATUS_MEM_FULL_CH0_Pos = 0x1c
	// Bit mask of MEM_FULL_CH0 field.
	RMT_CH0STATUS_MEM_FULL_CH0_Msk = 0x10000000
	// Bit MEM_FULL_CH0.
	RMT_CH0STATUS_MEM_FULL_CH0 = 0x10000000
	// Position of MEM_OWNER_ERR_CH0 field.
	RMT_CH0STATUS_MEM_OWNER_ERR_CH0_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH0 field.
	RMT_CH0STATUS_MEM_OWNER_ERR_CH0_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH0.
	RMT_CH0STATUS_MEM_OWNER_ERR_CH0 = 0x8000000
	// Position of STATE_CH0 field.
	RMT_CH0STATUS_STATE_CH0_Pos = 0x18
	// Bit mask of STATE_CH0 field.
	RMT_CH0STATUS_STATE_CH0_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH0 field.
	RMT_CH0STATUS_MEM_RADDR_EX_CH0_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH0 field.
	RMT_CH0STATUS_MEM_RADDR_EX_CH0_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH0 field.
	RMT_CH0STATUS_MEM_WADDR_EX_CH0_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH0 field.
	RMT_CH0STATUS_MEM_WADDR_EX_CH0_Msk = 0x3ff

	// CH1STATUS: RMT_CH1STATUS
	// Position of STATUS_CH1 field.
	RMT_CH1STATUS_STATUS_CH1_Pos = 0x0
	// Bit mask of STATUS_CH1 field.
	RMT_CH1STATUS_STATUS_CH1_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH1 field.
	RMT_CH1STATUS_APB_MEM_RD_ERR_CH1_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH1 field.
	RMT_CH1STATUS_APB_MEM_RD_ERR_CH1_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH1.
	RMT_CH1STATUS_APB_MEM_RD_ERR_CH1 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH1 field.
	RMT_CH1STATUS_APB_MEM_WR_ERR_CH1_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH1 field.
	RMT_CH1STATUS_APB_MEM_WR_ERR_CH1_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH1.
	RMT_CH1STATUS_APB_MEM_WR_ERR_CH1 = 0x40000000
	// Position of MEM_EMPTY_CH1 field.
	RMT_CH1STATUS_MEM_EMPTY_CH1_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH1 field.
	RMT_CH1STATUS_MEM_EMPTY_CH1_Msk = 0x20000000
	// Bit MEM_EMPTY_CH1.
	RMT_CH1STATUS_MEM_EMPTY_CH1 = 0x20000000
	// Position of MEM_FULL_CH1 field.
	RMT_CH1STATUS_MEM_FULL_CH1_Pos = 0x1c
	// Bit mask of MEM_FULL_CH1 field.
	RMT_CH1STATUS_MEM_FULL_CH1_Msk = 0x10000000
	// Bit MEM_FULL_CH1.
	RMT_CH1STATUS_MEM_FULL_CH1 = 0x10000000
	// Position of MEM_OWNER_ERR_CH1 field.
	RMT_CH1STATUS_MEM_OWNER_ERR_CH1_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH1 field.
	RMT_CH1STATUS_MEM_OWNER_ERR_CH1_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH1.
	RMT_CH1STATUS_MEM_OWNER_ERR_CH1 = 0x8000000
	// Position of STATE_CH1 field.
	RMT_CH1STATUS_STATE_CH1_Pos = 0x18
	// Bit mask of STATE_CH1 field.
	RMT_CH1STATUS_STATE_CH1_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH1 field.
	RMT_CH1STATUS_MEM_RADDR_EX_CH1_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH1 field.
	RMT_CH1STATUS_MEM_RADDR_EX_CH1_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH1 field.
	RMT_CH1STATUS_MEM_WADDR_EX_CH1_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH1 field.
	RMT_CH1STATUS_MEM_WADDR_EX_CH1_Msk = 0x3ff

	// CH2STATUS: RMT_CH2STATUS
	// Position of STATUS_CH2 field.
	RMT_CH2STATUS_STATUS_CH2_Pos = 0x0
	// Bit mask of STATUS_CH2 field.
	RMT_CH2STATUS_STATUS_CH2_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH2 field.
	RMT_CH2STATUS_APB_MEM_RD_ERR_CH2_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH2 field.
	RMT_CH2STATUS_APB_MEM_RD_ERR_CH2_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH2.
	RMT_CH2STATUS_APB_MEM_RD_ERR_CH2 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH2 field.
	RMT_CH2STATUS_APB_MEM_WR_ERR_CH2_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH2 field.
	RMT_CH2STATUS_APB_MEM_WR_ERR_CH2_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH2.
	RMT_CH2STATUS_APB_MEM_WR_ERR_CH2 = 0x40000000
	// Position of MEM_EMPTY_CH2 field.
	RMT_CH2STATUS_MEM_EMPTY_CH2_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH2 field.
	RMT_CH2STATUS_MEM_EMPTY_CH2_Msk = 0x20000000
	// Bit MEM_EMPTY_CH2.
	RMT_CH2STATUS_MEM_EMPTY_CH2 = 0x20000000
	// Position of MEM_FULL_CH2 field.
	RMT_CH2STATUS_MEM_FULL_CH2_Pos = 0x1c
	// Bit mask of MEM_FULL_CH2 field.
	RMT_CH2STATUS_MEM_FULL_CH2_Msk = 0x10000000
	// Bit MEM_FULL_CH2.
	RMT_CH2STATUS_MEM_FULL_CH2 = 0x10000000
	// Position of MEM_OWNER_ERR_CH2 field.
	RMT_CH2STATUS_MEM_OWNER_ERR_CH2_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH2 field.
	RMT_CH2STATUS_MEM_OWNER_ERR_CH2_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH2.
	RMT_CH2STATUS_MEM_OWNER_ERR_CH2 = 0x8000000
	// Position of STATE_CH2 field.
	RMT_CH2STATUS_STATE_CH2_Pos = 0x18
	// Bit mask of STATE_CH2 field.
	RMT_CH2STATUS_STATE_CH2_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH2 field.
	RMT_CH2STATUS_MEM_RADDR_EX_CH2_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH2 field.
	RMT_CH2STATUS_MEM_RADDR_EX_CH2_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH2 field.
	RMT_CH2STATUS_MEM_WADDR_EX_CH2_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH2 field.
	RMT_CH2STATUS_MEM_WADDR_EX_CH2_Msk = 0x3ff

	// CH3STATUS: RMT_CH3STATUS
	// Position of STATUS_CH3 field.
	RMT_CH3STATUS_STATUS_CH3_Pos = 0x0
	// Bit mask of STATUS_CH3 field.
	RMT_CH3STATUS_STATUS_CH3_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH3 field.
	RMT_CH3STATUS_APB_MEM_RD_ERR_CH3_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH3 field.
	RMT_CH3STATUS_APB_MEM_RD_ERR_CH3_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH3.
	RMT_CH3STATUS_APB_MEM_RD_ERR_CH3 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH3 field.
	RMT_CH3STATUS_APB_MEM_WR_ERR_CH3_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH3 field.
	RMT_CH3STATUS_APB_MEM_WR_ERR_CH3_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH3.
	RMT_CH3STATUS_APB_MEM_WR_ERR_CH3 = 0x40000000
	// Position of MEM_EMPTY_CH3 field.
	RMT_CH3STATUS_MEM_EMPTY_CH3_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH3 field.
	RMT_CH3STATUS_MEM_EMPTY_CH3_Msk = 0x20000000
	// Bit MEM_EMPTY_CH3.
	RMT_CH3STATUS_MEM_EMPTY_CH3 = 0x20000000
	// Position of MEM_FULL_CH3 field.
	RMT_CH3STATUS_MEM_FULL_CH3_Pos = 0x1c
	// Bit mask of MEM_FULL_CH3 field.
	RMT_CH3STATUS_MEM_FULL_CH3_Msk = 0x10000000
	// Bit MEM_FULL_CH3.
	RMT_CH3STATUS_MEM_FULL_CH3 = 0x10000000
	// Position of MEM_OWNER_ERR_CH3 field.
	RMT_CH3STATUS_MEM_OWNER_ERR_CH3_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH3 field.
	RMT_CH3STATUS_MEM_OWNER_ERR_CH3_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH3.
	RMT_CH3STATUS_MEM_OWNER_ERR_CH3 = 0x8000000
	// Position of STATE_CH3 field.
	RMT_CH3STATUS_STATE_CH3_Pos = 0x18
	// Bit mask of STATE_CH3 field.
	RMT_CH3STATUS_STATE_CH3_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH3 field.
	RMT_CH3STATUS_MEM_RADDR_EX_CH3_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH3 field.
	RMT_CH3STATUS_MEM_RADDR_EX_CH3_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH3 field.
	RMT_CH3STATUS_MEM_WADDR_EX_CH3_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH3 field.
	RMT_CH3STATUS_MEM_WADDR_EX_CH3_Msk = 0x3ff

	// CH4STATUS: RMT_CH4STATUS
	// Position of STATUS_CH4 field.
	RMT_CH4STATUS_STATUS_CH4_Pos = 0x0
	// Bit mask of STATUS_CH4 field.
	RMT_CH4STATUS_STATUS_CH4_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH4 field.
	RMT_CH4STATUS_APB_MEM_RD_ERR_CH4_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH4 field.
	RMT_CH4STATUS_APB_MEM_RD_ERR_CH4_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH4.
	RMT_CH4STATUS_APB_MEM_RD_ERR_CH4 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH4 field.
	RMT_CH4STATUS_APB_MEM_WR_ERR_CH4_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH4 field.
	RMT_CH4STATUS_APB_MEM_WR_ERR_CH4_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH4.
	RMT_CH4STATUS_APB_MEM_WR_ERR_CH4 = 0x40000000
	// Position of MEM_EMPTY_CH4 field.
	RMT_CH4STATUS_MEM_EMPTY_CH4_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH4 field.
	RMT_CH4STATUS_MEM_EMPTY_CH4_Msk = 0x20000000
	// Bit MEM_EMPTY_CH4.
	RMT_CH4STATUS_MEM_EMPTY_CH4 = 0x20000000
	// Position of MEM_FULL_CH4 field.
	RMT_CH4STATUS_MEM_FULL_CH4_Pos = 0x1c
	// Bit mask of MEM_FULL_CH4 field.
	RMT_CH4STATUS_MEM_FULL_CH4_Msk = 0x10000000
	// Bit MEM_FULL_CH4.
	RMT_CH4STATUS_MEM_FULL_CH4 = 0x10000000
	// Position of MEM_OWNER_ERR_CH4 field.
	RMT_CH4STATUS_MEM_OWNER_ERR_CH4_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH4 field.
	RMT_CH4STATUS_MEM_OWNER_ERR_CH4_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH4.
	RMT_CH4STATUS_MEM_OWNER_ERR_CH4 = 0x8000000
	// Position of STATE_CH4 field.
	RMT_CH4STATUS_STATE_CH4_Pos = 0x18
	// Bit mask of STATE_CH4 field.
	RMT_CH4STATUS_STATE_CH4_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH4 field.
	RMT_CH4STATUS_MEM_RADDR_EX_CH4_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH4 field.
	RMT_CH4STATUS_MEM_RADDR_EX_CH4_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH4 field.
	RMT_CH4STATUS_MEM_WADDR_EX_CH4_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH4 field.
	RMT_CH4STATUS_MEM_WADDR_EX_CH4_Msk = 0x3ff

	// CH5STATUS: RMT_CH5STATUS
	// Position of STATUS_CH5 field.
	RMT_CH5STATUS_STATUS_CH5_Pos = 0x0
	// Bit mask of STATUS_CH5 field.
	RMT_CH5STATUS_STATUS_CH5_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH5 field.
	RMT_CH5STATUS_APB_MEM_RD_ERR_CH5_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH5 field.
	RMT_CH5STATUS_APB_MEM_RD_ERR_CH5_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH5.
	RMT_CH5STATUS_APB_MEM_RD_ERR_CH5 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH5 field.
	RMT_CH5STATUS_APB_MEM_WR_ERR_CH5_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH5 field.
	RMT_CH5STATUS_APB_MEM_WR_ERR_CH5_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH5.
	RMT_CH5STATUS_APB_MEM_WR_ERR_CH5 = 0x40000000
	// Position of MEM_EMPTY_CH5 field.
	RMT_CH5STATUS_MEM_EMPTY_CH5_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH5 field.
	RMT_CH5STATUS_MEM_EMPTY_CH5_Msk = 0x20000000
	// Bit MEM_EMPTY_CH5.
	RMT_CH5STATUS_MEM_EMPTY_CH5 = 0x20000000
	// Position of MEM_FULL_CH5 field.
	RMT_CH5STATUS_MEM_FULL_CH5_Pos = 0x1c
	// Bit mask of MEM_FULL_CH5 field.
	RMT_CH5STATUS_MEM_FULL_CH5_Msk = 0x10000000
	// Bit MEM_FULL_CH5.
	RMT_CH5STATUS_MEM_FULL_CH5 = 0x10000000
	// Position of MEM_OWNER_ERR_CH5 field.
	RMT_CH5STATUS_MEM_OWNER_ERR_CH5_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH5 field.
	RMT_CH5STATUS_MEM_OWNER_ERR_CH5_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH5.
	RMT_CH5STATUS_MEM_OWNER_ERR_CH5 = 0x8000000
	// Position of STATE_CH5 field.
	RMT_CH5STATUS_STATE_CH5_Pos = 0x18
	// Bit mask of STATE_CH5 field.
	RMT_CH5STATUS_STATE_CH5_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH5 field.
	RMT_CH5STATUS_MEM_RADDR_EX_CH5_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH5 field.
	RMT_CH5STATUS_MEM_RADDR_EX_CH5_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH5 field.
	RMT_CH5STATUS_MEM_WADDR_EX_CH5_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH5 field.
	RMT_CH5STATUS_MEM_WADDR_EX_CH5_Msk = 0x3ff

	// CH6STATUS: RMT_CH6STATUS
	// Position of STATUS_CH6 field.
	RMT_CH6STATUS_STATUS_CH6_Pos = 0x0
	// Bit mask of STATUS_CH6 field.
	RMT_CH6STATUS_STATUS_CH6_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH6 field.
	RMT_CH6STATUS_APB_MEM_RD_ERR_CH6_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH6 field.
	RMT_CH6STATUS_APB_MEM_RD_ERR_CH6_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH6.
	RMT_CH6STATUS_APB_MEM_RD_ERR_CH6 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH6 field.
	RMT_CH6STATUS_APB_MEM_WR_ERR_CH6_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH6 field.
	RMT_CH6STATUS_APB_MEM_WR_ERR_CH6_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH6.
	RMT_CH6STATUS_APB_MEM_WR_ERR_CH6 = 0x40000000
	// Position of MEM_EMPTY_CH6 field.
	RMT_CH6STATUS_MEM_EMPTY_CH6_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH6 field.
	RMT_CH6STATUS_MEM_EMPTY_CH6_Msk = 0x20000000
	// Bit MEM_EMPTY_CH6.
	RMT_CH6STATUS_MEM_EMPTY_CH6 = 0x20000000
	// Position of MEM_FULL_CH6 field.
	RMT_CH6STATUS_MEM_FULL_CH6_Pos = 0x1c
	// Bit mask of MEM_FULL_CH6 field.
	RMT_CH6STATUS_MEM_FULL_CH6_Msk = 0x10000000
	// Bit MEM_FULL_CH6.
	RMT_CH6STATUS_MEM_FULL_CH6 = 0x10000000
	// Position of MEM_OWNER_ERR_CH6 field.
	RMT_CH6STATUS_MEM_OWNER_ERR_CH6_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH6 field.
	RMT_CH6STATUS_MEM_OWNER_ERR_CH6_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH6.
	RMT_CH6STATUS_MEM_OWNER_ERR_CH6 = 0x8000000
	// Position of STATE_CH6 field.
	RMT_CH6STATUS_STATE_CH6_Pos = 0x18
	// Bit mask of STATE_CH6 field.
	RMT_CH6STATUS_STATE_CH6_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH6 field.
	RMT_CH6STATUS_MEM_RADDR_EX_CH6_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH6 field.
	RMT_CH6STATUS_MEM_RADDR_EX_CH6_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH6 field.
	RMT_CH6STATUS_MEM_WADDR_EX_CH6_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH6 field.
	RMT_CH6STATUS_MEM_WADDR_EX_CH6_Msk = 0x3ff

	// CH7STATUS: RMT_CH7STATUS
	// Position of STATUS_CH7 field.
	RMT_CH7STATUS_STATUS_CH7_Pos = 0x0
	// Bit mask of STATUS_CH7 field.
	RMT_CH7STATUS_STATUS_CH7_Msk = 0xffffffff
	// Position of APB_MEM_RD_ERR_CH7 field.
	RMT_CH7STATUS_APB_MEM_RD_ERR_CH7_Pos = 0x1f
	// Bit mask of APB_MEM_RD_ERR_CH7 field.
	RMT_CH7STATUS_APB_MEM_RD_ERR_CH7_Msk = 0x80000000
	// Bit APB_MEM_RD_ERR_CH7.
	RMT_CH7STATUS_APB_MEM_RD_ERR_CH7 = 0x80000000
	// Position of APB_MEM_WR_ERR_CH7 field.
	RMT_CH7STATUS_APB_MEM_WR_ERR_CH7_Pos = 0x1e
	// Bit mask of APB_MEM_WR_ERR_CH7 field.
	RMT_CH7STATUS_APB_MEM_WR_ERR_CH7_Msk = 0x40000000
	// Bit APB_MEM_WR_ERR_CH7.
	RMT_CH7STATUS_APB_MEM_WR_ERR_CH7 = 0x40000000
	// Position of MEM_EMPTY_CH7 field.
	RMT_CH7STATUS_MEM_EMPTY_CH7_Pos = 0x1d
	// Bit mask of MEM_EMPTY_CH7 field.
	RMT_CH7STATUS_MEM_EMPTY_CH7_Msk = 0x20000000
	// Bit MEM_EMPTY_CH7.
	RMT_CH7STATUS_MEM_EMPTY_CH7 = 0x20000000
	// Position of MEM_FULL_CH7 field.
	RMT_CH7STATUS_MEM_FULL_CH7_Pos = 0x1c
	// Bit mask of MEM_FULL_CH7 field.
	RMT_CH7STATUS_MEM_FULL_CH7_Msk = 0x10000000
	// Bit MEM_FULL_CH7.
	RMT_CH7STATUS_MEM_FULL_CH7 = 0x10000000
	// Position of MEM_OWNER_ERR_CH7 field.
	RMT_CH7STATUS_MEM_OWNER_ERR_CH7_Pos = 0x1b
	// Bit mask of MEM_OWNER_ERR_CH7 field.
	RMT_CH7STATUS_MEM_OWNER_ERR_CH7_Msk = 0x8000000
	// Bit MEM_OWNER_ERR_CH7.
	RMT_CH7STATUS_MEM_OWNER_ERR_CH7 = 0x8000000
	// Position of STATE_CH7 field.
	RMT_CH7STATUS_STATE_CH7_Pos = 0x18
	// Bit mask of STATE_CH7 field.
	RMT_CH7STATUS_STATE_CH7_Msk = 0x7000000
	// Position of MEM_RADDR_EX_CH7 field.
	RMT_CH7STATUS_MEM_RADDR_EX_CH7_Pos = 0xc
	// Bit mask of MEM_RADDR_EX_CH7 field.
	RMT_CH7STATUS_MEM_RADDR_EX_CH7_Msk = 0x3ff000
	// Position of MEM_WADDR_EX_CH7 field.
	RMT_CH7STATUS_MEM_WADDR_EX_CH7_Pos = 0x0
	// Bit mask of MEM_WADDR_EX_CH7 field.
	RMT_CH7STATUS_MEM_WADDR_EX_CH7_Msk = 0x3ff

	// CH0ADDR: RMT_CH0ADDR
	// Position of APB_MEM_ADDR_CH0 field.
	RMT_CH0ADDR_APB_MEM_ADDR_CH0_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH0 field.
	RMT_CH0ADDR_APB_MEM_ADDR_CH0_Msk = 0xffffffff

	// CH1ADDR: RMT_CH1ADDR
	// Position of APB_MEM_ADDR_CH1 field.
	RMT_CH1ADDR_APB_MEM_ADDR_CH1_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH1 field.
	RMT_CH1ADDR_APB_MEM_ADDR_CH1_Msk = 0xffffffff

	// CH2ADDR: RMT_CH2ADDR
	// Position of APB_MEM_ADDR_CH2 field.
	RMT_CH2ADDR_APB_MEM_ADDR_CH2_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH2 field.
	RMT_CH2ADDR_APB_MEM_ADDR_CH2_Msk = 0xffffffff

	// CH3ADDR: RMT_CH3ADDR
	// Position of APB_MEM_ADDR_CH3 field.
	RMT_CH3ADDR_APB_MEM_ADDR_CH3_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH3 field.
	RMT_CH3ADDR_APB_MEM_ADDR_CH3_Msk = 0xffffffff

	// CH4ADDR: RMT_CH4ADDR
	// Position of APB_MEM_ADDR_CH4 field.
	RMT_CH4ADDR_APB_MEM_ADDR_CH4_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH4 field.
	RMT_CH4ADDR_APB_MEM_ADDR_CH4_Msk = 0xffffffff

	// CH5ADDR: RMT_CH5ADDR
	// Position of APB_MEM_ADDR_CH5 field.
	RMT_CH5ADDR_APB_MEM_ADDR_CH5_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH5 field.
	RMT_CH5ADDR_APB_MEM_ADDR_CH5_Msk = 0xffffffff

	// CH6ADDR: RMT_CH6ADDR
	// Position of APB_MEM_ADDR_CH6 field.
	RMT_CH6ADDR_APB_MEM_ADDR_CH6_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH6 field.
	RMT_CH6ADDR_APB_MEM_ADDR_CH6_Msk = 0xffffffff

	// CH7ADDR: RMT_CH7ADDR
	// Position of APB_MEM_ADDR_CH7 field.
	RMT_CH7ADDR_APB_MEM_ADDR_CH7_Pos = 0x0
	// Bit mask of APB_MEM_ADDR_CH7 field.
	RMT_CH7ADDR_APB_MEM_ADDR_CH7_Msk = 0xffffffff

	// INT_RAW: RMT_INT_RAW
	// Position of CH7_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH7_TX_THR_EVENT_INT_RAW_Pos = 0x1f
	// Bit mask of CH7_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH7_TX_THR_EVENT_INT_RAW_Msk = 0x80000000
	// Bit CH7_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH7_TX_THR_EVENT_INT_RAW = 0x80000000
	// Position of CH6_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH6_TX_THR_EVENT_INT_RAW_Pos = 0x1e
	// Bit mask of CH6_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH6_TX_THR_EVENT_INT_RAW_Msk = 0x40000000
	// Bit CH6_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH6_TX_THR_EVENT_INT_RAW = 0x40000000
	// Position of CH5_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH5_TX_THR_EVENT_INT_RAW_Pos = 0x1d
	// Bit mask of CH5_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH5_TX_THR_EVENT_INT_RAW_Msk = 0x20000000
	// Bit CH5_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH5_TX_THR_EVENT_INT_RAW = 0x20000000
	// Position of CH4_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH4_TX_THR_EVENT_INT_RAW_Pos = 0x1c
	// Bit mask of CH4_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH4_TX_THR_EVENT_INT_RAW_Msk = 0x10000000
	// Bit CH4_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH4_TX_THR_EVENT_INT_RAW = 0x10000000
	// Position of CH3_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH3_TX_THR_EVENT_INT_RAW_Pos = 0x1b
	// Bit mask of CH3_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH3_TX_THR_EVENT_INT_RAW_Msk = 0x8000000
	// Bit CH3_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH3_TX_THR_EVENT_INT_RAW = 0x8000000
	// Position of CH2_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH2_TX_THR_EVENT_INT_RAW_Pos = 0x1a
	// Bit mask of CH2_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH2_TX_THR_EVENT_INT_RAW_Msk = 0x4000000
	// Bit CH2_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH2_TX_THR_EVENT_INT_RAW = 0x4000000
	// Position of CH1_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH1_TX_THR_EVENT_INT_RAW_Pos = 0x19
	// Bit mask of CH1_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH1_TX_THR_EVENT_INT_RAW_Msk = 0x2000000
	// Bit CH1_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH1_TX_THR_EVENT_INT_RAW = 0x2000000
	// Position of CH0_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH0_TX_THR_EVENT_INT_RAW_Pos = 0x18
	// Bit mask of CH0_TX_THR_EVENT_INT_RAW field.
	RMT_INT_RAW_CH0_TX_THR_EVENT_INT_RAW_Msk = 0x1000000
	// Bit CH0_TX_THR_EVENT_INT_RAW.
	RMT_INT_RAW_CH0_TX_THR_EVENT_INT_RAW = 0x1000000
	// Position of CH7_ERR_INT_RAW field.
	RMT_INT_RAW_CH7_ERR_INT_RAW_Pos = 0x17
	// Bit mask of CH7_ERR_INT_RAW field.
	RMT_INT_RAW_CH7_ERR_INT_RAW_Msk = 0x800000
	// Bit CH7_ERR_INT_RAW.
	RMT_INT_RAW_CH7_ERR_INT_RAW = 0x800000
	// Position of CH7_RX_END_INT_RAW field.
	RMT_INT_RAW_CH7_RX_END_INT_RAW_Pos = 0x16
	// Bit mask of CH7_RX_END_INT_RAW field.
	RMT_INT_RAW_CH7_RX_END_INT_RAW_Msk = 0x400000
	// Bit CH7_RX_END_INT_RAW.
	RMT_INT_RAW_CH7_RX_END_INT_RAW = 0x400000
	// Position of CH7_TX_END_INT_RAW field.
	RMT_INT_RAW_CH7_TX_END_INT_RAW_Pos = 0x15
	// Bit mask of CH7_TX_END_INT_RAW field.
	RMT_INT_RAW_CH7_TX_END_INT_RAW_Msk = 0x200000
	// Bit CH7_TX_END_INT_RAW.
	RMT_INT_RAW_CH7_TX_END_INT_RAW = 0x200000
	// Position of CH6_ERR_INT_RAW field.
	RMT_INT_RAW_CH6_ERR_INT_RAW_Pos = 0x14
	// Bit mask of CH6_ERR_INT_RAW field.
	RMT_INT_RAW_CH6_ERR_INT_RAW_Msk = 0x100000
	// Bit CH6_ERR_INT_RAW.
	RMT_INT_RAW_CH6_ERR_INT_RAW = 0x100000
	// Position of CH6_RX_END_INT_RAW field.
	RMT_INT_RAW_CH6_RX_END_INT_RAW_Pos = 0x13
	// Bit mask of CH6_RX_END_INT_RAW field.
	RMT_INT_RAW_CH6_RX_END_INT_RAW_Msk = 0x80000
	// Bit CH6_RX_END_INT_RAW.
	RMT_INT_RAW_CH6_RX_END_INT_RAW = 0x80000
	// Position of CH6_TX_END_INT_RAW field.
	RMT_INT_RAW_CH6_TX_END_INT_RAW_Pos = 0x12
	// Bit mask of CH6_TX_END_INT_RAW field.
	RMT_INT_RAW_CH6_TX_END_INT_RAW_Msk = 0x40000
	// Bit CH6_TX_END_INT_RAW.
	RMT_INT_RAW_CH6_TX_END_INT_RAW = 0x40000
	// Position of CH5_ERR_INT_RAW field.
	RMT_INT_RAW_CH5_ERR_INT_RAW_Pos = 0x11
	// Bit mask of CH5_ERR_INT_RAW field.
	RMT_INT_RAW_CH5_ERR_INT_RAW_Msk = 0x20000
	// Bit CH5_ERR_INT_RAW.
	RMT_INT_RAW_CH5_ERR_INT_RAW = 0x20000
	// Position of CH5_RX_END_INT_RAW field.
	RMT_INT_RAW_CH5_RX_END_INT_RAW_Pos = 0x10
	// Bit mask of CH5_RX_END_INT_RAW field.
	RMT_INT_RAW_CH5_RX_END_INT_RAW_Msk = 0x10000
	// Bit CH5_RX_END_INT_RAW.
	RMT_INT_RAW_CH5_RX_END_INT_RAW = 0x10000
	// Position of CH5_TX_END_INT_RAW field.
	RMT_INT_RAW_CH5_TX_END_INT_RAW_Pos = 0xf
	// Bit mask of CH5_TX_END_INT_RAW field.
	RMT_INT_RAW_CH5_TX_END_INT_RAW_Msk = 0x8000
	// Bit CH5_TX_END_INT_RAW.
	RMT_INT_RAW_CH5_TX_END_INT_RAW = 0x8000
	// Position of CH4_ERR_INT_RAW field.
	RMT_INT_RAW_CH4_ERR_INT_RAW_Pos = 0xe
	// Bit mask of CH4_ERR_INT_RAW field.
	RMT_INT_RAW_CH4_ERR_INT_RAW_Msk = 0x4000
	// Bit CH4_ERR_INT_RAW.
	RMT_INT_RAW_CH4_ERR_INT_RAW = 0x4000
	// Position of CH4_RX_END_INT_RAW field.
	RMT_INT_RAW_CH4_RX_END_INT_RAW_Pos = 0xd
	// Bit mask of CH4_RX_END_INT_RAW field.
	RMT_INT_RAW_CH4_RX_END_INT_RAW_Msk = 0x2000
	// Bit CH4_RX_END_INT_RAW.
	RMT_INT_RAW_CH4_RX_END_INT_RAW = 0x2000
	// Position of CH4_TX_END_INT_RAW field.
	RMT_INT_RAW_CH4_TX_END_INT_RAW_Pos = 0xc
	// Bit mask of CH4_TX_END_INT_RAW field.
	RMT_INT_RAW_CH4_TX_END_INT_RAW_Msk = 0x1000
	// Bit CH4_TX_END_INT_RAW.
	RMT_INT_RAW_CH4_TX_END_INT_RAW = 0x1000
	// Position of CH3_ERR_INT_RAW field.
	RMT_INT_RAW_CH3_ERR_INT_RAW_Pos = 0xb
	// Bit mask of CH3_ERR_INT_RAW field.
	RMT_INT_RAW_CH3_ERR_INT_RAW_Msk = 0x800
	// Bit CH3_ERR_INT_RAW.
	RMT_INT_RAW_CH3_ERR_INT_RAW = 0x800
	// Position of CH3_RX_END_INT_RAW field.
	RMT_INT_RAW_CH3_RX_END_INT_RAW_Pos = 0xa
	// Bit mask of CH3_RX_END_INT_RAW field.
	RMT_INT_RAW_CH3_RX_END_INT_RAW_Msk = 0x400
	// Bit CH3_RX_END_INT_RAW.
	RMT_INT_RAW_CH3_RX_END_INT_RAW = 0x400
	// Position of CH3_TX_END_INT_RAW field.
	RMT_INT_RAW_CH3_TX_END_INT_RAW_Pos = 0x9
	// Bit mask of CH3_TX_END_INT_RAW field.
	RMT_INT_RAW_CH3_TX_END_INT_RAW_Msk = 0x200
	// Bit CH3_TX_END_INT_RAW.
	RMT_INT_RAW_CH3_TX_END_INT_RAW = 0x200
	// Position of CH2_ERR_INT_RAW field.
	RMT_INT_RAW_CH2_ERR_INT_RAW_Pos = 0x8
	// Bit mask of CH2_ERR_INT_RAW field.
	RMT_INT_RAW_CH2_ERR_INT_RAW_Msk = 0x100
	// Bit CH2_ERR_INT_RAW.
	RMT_INT_RAW_CH2_ERR_INT_RAW = 0x100
	// Position of CH2_RX_END_INT_RAW field.
	RMT_INT_RAW_CH2_RX_END_INT_RAW_Pos = 0x7
	// Bit mask of CH2_RX_END_INT_RAW field.
	RMT_INT_RAW_CH2_RX_END_INT_RAW_Msk = 0x80
	// Bit CH2_RX_END_INT_RAW.
	RMT_INT_RAW_CH2_RX_END_INT_RAW = 0x80
	// Position of CH2_TX_END_INT_RAW field.
	RMT_INT_RAW_CH2_TX_END_INT_RAW_Pos = 0x6
	// Bit mask of CH2_TX_END_INT_RAW field.
	RMT_INT_RAW_CH2_TX_END_INT_RAW_Msk = 0x40
	// Bit CH2_TX_END_INT_RAW.
	RMT_INT_RAW_CH2_TX_END_INT_RAW = 0x40
	// Position of CH1_ERR_INT_RAW field.
	RMT_INT_RAW_CH1_ERR_INT_RAW_Pos = 0x5
	// Bit mask of CH1_ERR_INT_RAW field.
	RMT_INT_RAW_CH1_ERR_INT_RAW_Msk = 0x20
	// Bit CH1_ERR_INT_RAW.
	RMT_INT_RAW_CH1_ERR_INT_RAW = 0x20
	// Position of CH1_RX_END_INT_RAW field.
	RMT_INT_RAW_CH1_RX_END_INT_RAW_Pos = 0x4
	// Bit mask of CH1_RX_END_INT_RAW field.
	RMT_INT_RAW_CH1_RX_END_INT_RAW_Msk = 0x10
	// Bit CH1_RX_END_INT_RAW.
	RMT_INT_RAW_CH1_RX_END_INT_RAW = 0x10
	// Position of CH1_TX_END_INT_RAW field.
	RMT_INT_RAW_CH1_TX_END_INT_RAW_Pos = 0x3
	// Bit mask of CH1_TX_END_INT_RAW field.
	RMT_INT_RAW_CH1_TX_END_INT_RAW_Msk = 0x8
	// Bit CH1_TX_END_INT_RAW.
	RMT_INT_RAW_CH1_TX_END_INT_RAW = 0x8
	// Position of CH0_ERR_INT_RAW field.
	RMT_INT_RAW_CH0_ERR_INT_RAW_Pos = 0x2
	// Bit mask of CH0_ERR_INT_RAW field.
	RMT_INT_RAW_CH0_ERR_INT_RAW_Msk = 0x4
	// Bit CH0_ERR_INT_RAW.
	RMT_INT_RAW_CH0_ERR_INT_RAW = 0x4
	// Position of CH0_RX_END_INT_RAW field.
	RMT_INT_RAW_CH0_RX_END_INT_RAW_Pos = 0x1
	// Bit mask of CH0_RX_END_INT_RAW field.
	RMT_INT_RAW_CH0_RX_END_INT_RAW_Msk = 0x2
	// Bit CH0_RX_END_INT_RAW.
	RMT_INT_RAW_CH0_RX_END_INT_RAW = 0x2
	// Position of CH0_TX_END_INT_RAW field.
	RMT_INT_RAW_CH0_TX_END_INT_RAW_Pos = 0x0
	// Bit mask of CH0_TX_END_INT_RAW field.
	RMT_INT_RAW_CH0_TX_END_INT_RAW_Msk = 0x1
	// Bit CH0_TX_END_INT_RAW.
	RMT_INT_RAW_CH0_TX_END_INT_RAW = 0x1

	// INT_ST: RMT_INT_ST
	// Position of CH7_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH7_TX_THR_EVENT_INT_ST_Pos = 0x1f
	// Bit mask of CH7_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH7_TX_THR_EVENT_INT_ST_Msk = 0x80000000
	// Bit CH7_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH7_TX_THR_EVENT_INT_ST = 0x80000000
	// Position of CH6_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH6_TX_THR_EVENT_INT_ST_Pos = 0x1e
	// Bit mask of CH6_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH6_TX_THR_EVENT_INT_ST_Msk = 0x40000000
	// Bit CH6_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH6_TX_THR_EVENT_INT_ST = 0x40000000
	// Position of CH5_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH5_TX_THR_EVENT_INT_ST_Pos = 0x1d
	// Bit mask of CH5_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH5_TX_THR_EVENT_INT_ST_Msk = 0x20000000
	// Bit CH5_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH5_TX_THR_EVENT_INT_ST = 0x20000000
	// Position of CH4_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH4_TX_THR_EVENT_INT_ST_Pos = 0x1c
	// Bit mask of CH4_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH4_TX_THR_EVENT_INT_ST_Msk = 0x10000000
	// Bit CH4_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH4_TX_THR_EVENT_INT_ST = 0x10000000
	// Position of CH3_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH3_TX_THR_EVENT_INT_ST_Pos = 0x1b
	// Bit mask of CH3_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH3_TX_THR_EVENT_INT_ST_Msk = 0x8000000
	// Bit CH3_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH3_TX_THR_EVENT_INT_ST = 0x8000000
	// Position of CH2_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH2_TX_THR_EVENT_INT_ST_Pos = 0x1a
	// Bit mask of CH2_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH2_TX_THR_EVENT_INT_ST_Msk = 0x4000000
	// Bit CH2_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH2_TX_THR_EVENT_INT_ST = 0x4000000
	// Position of CH1_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH1_TX_THR_EVENT_INT_ST_Pos = 0x19
	// Bit mask of CH1_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH1_TX_THR_EVENT_INT_ST_Msk = 0x2000000
	// Bit CH1_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH1_TX_THR_EVENT_INT_ST = 0x2000000
	// Position of CH0_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH0_TX_THR_EVENT_INT_ST_Pos = 0x18
	// Bit mask of CH0_TX_THR_EVENT_INT_ST field.
	RMT_INT_ST_CH0_TX_THR_EVENT_INT_ST_Msk = 0x1000000
	// Bit CH0_TX_THR_EVENT_INT_ST.
	RMT_INT_ST_CH0_TX_THR_EVENT_INT_ST = 0x1000000
	// Position of CH7_ERR_INT_ST field.
	RMT_INT_ST_CH7_ERR_INT_ST_Pos = 0x17
	// Bit mask of CH7_ERR_INT_ST field.
	RMT_INT_ST_CH7_ERR_INT_ST_Msk = 0x800000
	// Bit CH7_ERR_INT_ST.
	RMT_INT_ST_CH7_ERR_INT_ST = 0x800000
	// Position of CH7_RX_END_INT_ST field.
	RMT_INT_ST_CH7_RX_END_INT_ST_Pos = 0x16
	// Bit mask of CH7_RX_END_INT_ST field.
	RMT_INT_ST_CH7_RX_END_INT_ST_Msk = 0x400000
	// Bit CH7_RX_END_INT_ST.
	RMT_INT_ST_CH7_RX_END_INT_ST = 0x400000
	// Position of CH7_TX_END_INT_ST field.
	RMT_INT_ST_CH7_TX_END_INT_ST_Pos = 0x15
	// Bit mask of CH7_TX_END_INT_ST field.
	RMT_INT_ST_CH7_TX_END_INT_ST_Msk = 0x200000
	// Bit CH7_TX_END_INT_ST.
	RMT_INT_ST_CH7_TX_END_INT_ST = 0x200000
	// Position of CH6_ERR_INT_ST field.
	RMT_INT_ST_CH6_ERR_INT_ST_Pos = 0x14
	// Bit mask of CH6_ERR_INT_ST field.
	RMT_INT_ST_CH6_ERR_INT_ST_Msk = 0x100000
	// Bit CH6_ERR_INT_ST.
	RMT_INT_ST_CH6_ERR_INT_ST = 0x100000
	// Position of CH6_RX_END_INT_ST field.
	RMT_INT_ST_CH6_RX_END_INT_ST_Pos = 0x13
	// Bit mask of CH6_RX_END_INT_ST field.
	RMT_INT_ST_CH6_RX_END_INT_ST_Msk = 0x80000
	// Bit CH6_RX_END_INT_ST.
	RMT_INT_ST_CH6_RX_END_INT_ST = 0x80000
	// Position of CH6_TX_END_INT_ST field.
	RMT_INT_ST_CH6_TX_END_INT_ST_Pos = 0x12
	// Bit mask of CH6_TX_END_INT_ST field.
	RMT_INT_ST_CH6_TX_END_INT_ST_Msk = 0x40000
	// Bit CH6_TX_END_INT_ST.
	RMT_INT_ST_CH6_TX_END_INT_ST = 0x40000
	// Position of CH5_ERR_INT_ST field.
	RMT_INT_ST_CH5_ERR_INT_ST_Pos = 0x11
	// Bit mask of CH5_ERR_INT_ST field.
	RMT_INT_ST_CH5_ERR_INT_ST_Msk = 0x20000
	// Bit CH5_ERR_INT_ST.
	RMT_INT_ST_CH5_ERR_INT_ST = 0x20000
	// Position of CH5_RX_END_INT_ST field.
	RMT_INT_ST_CH5_RX_END_INT_ST_Pos = 0x10
	// Bit mask of CH5_RX_END_INT_ST field.
	RMT_INT_ST_CH5_RX_END_INT_ST_Msk = 0x10000
	// Bit CH5_RX_END_INT_ST.
	RMT_INT_ST_CH5_RX_END_INT_ST = 0x10000
	// Position of CH5_TX_END_INT_ST field.
	RMT_INT_ST_CH5_TX_END_INT_ST_Pos = 0xf
	// Bit mask of CH5_TX_END_INT_ST field.
	RMT_INT_ST_CH5_TX_END_INT_ST_Msk = 0x8000
	// Bit CH5_TX_END_INT_ST.
	RMT_INT_ST_CH5_TX_END_INT_ST = 0x8000
	// Position of CH4_ERR_INT_ST field.
	RMT_INT_ST_CH4_ERR_INT_ST_Pos = 0xe
	// Bit mask of CH4_ERR_INT_ST field.
	RMT_INT_ST_CH4_ERR_INT_ST_Msk = 0x4000
	// Bit CH4_ERR_INT_ST.
	RMT_INT_ST_CH4_ERR_INT_ST = 0x4000
	// Position of CH4_RX_END_INT_ST field.
	RMT_INT_ST_CH4_RX_END_INT_ST_Pos = 0xd
	// Bit mask of CH4_RX_END_INT_ST field.
	RMT_INT_ST_CH4_RX_END_INT_ST_Msk = 0x2000
	// Bit CH4_RX_END_INT_ST.
	RMT_INT_ST_CH4_RX_END_INT_ST = 0x2000
	// Position of CH4_TX_END_INT_ST field.
	RMT_INT_ST_CH4_TX_END_INT_ST_Pos = 0xc
	// Bit mask of CH4_TX_END_INT_ST field.
	RMT_INT_ST_CH4_TX_END_INT_ST_Msk = 0x1000
	// Bit CH4_TX_END_INT_ST.
	RMT_INT_ST_CH4_TX_END_INT_ST = 0x1000
	// Position of CH3_ERR_INT_ST field.
	RMT_INT_ST_CH3_ERR_INT_ST_Pos = 0xb
	// Bit mask of CH3_ERR_INT_ST field.
	RMT_INT_ST_CH3_ERR_INT_ST_Msk = 0x800
	// Bit CH3_ERR_INT_ST.
	RMT_INT_ST_CH3_ERR_INT_ST = 0x800
	// Position of CH3_RX_END_INT_ST field.
	RMT_INT_ST_CH3_RX_END_INT_ST_Pos = 0xa
	// Bit mask of CH3_RX_END_INT_ST field.
	RMT_INT_ST_CH3_RX_END_INT_ST_Msk = 0x400
	// Bit CH3_RX_END_INT_ST.
	RMT_INT_ST_CH3_RX_END_INT_ST = 0x400
	// Position of CH3_TX_END_INT_ST field.
	RMT_INT_ST_CH3_TX_END_INT_ST_Pos = 0x9
	// Bit mask of CH3_TX_END_INT_ST field.
	RMT_INT_ST_CH3_TX_END_INT_ST_Msk = 0x200
	// Bit CH3_TX_END_INT_ST.
	RMT_INT_ST_CH3_TX_END_INT_ST = 0x200
	// Position of CH2_ERR_INT_ST field.
	RMT_INT_ST_CH2_ERR_INT_ST_Pos = 0x8
	// Bit mask of CH2_ERR_INT_ST field.
	RMT_INT_ST_CH2_ERR_INT_ST_Msk = 0x100
	// Bit CH2_ERR_INT_ST.
	RMT_INT_ST_CH2_ERR_INT_ST = 0x100
	// Position of CH2_RX_END_INT_ST field.
	RMT_INT_ST_CH2_RX_END_INT_ST_Pos = 0x7
	// Bit mask of CH2_RX_END_INT_ST field.
	RMT_INT_ST_CH2_RX_END_INT_ST_Msk = 0x80
	// Bit CH2_RX_END_INT_ST.
	RMT_INT_ST_CH2_RX_END_INT_ST = 0x80
	// Position of CH2_TX_END_INT_ST field.
	RMT_INT_ST_CH2_TX_END_INT_ST_Pos = 0x6
	// Bit mask of CH2_TX_END_INT_ST field.
	RMT_INT_ST_CH2_TX_END_INT_ST_Msk = 0x40
	// Bit CH2_TX_END_INT_ST.
	RMT_INT_ST_CH2_TX_END_INT_ST = 0x40
	// Position of CH1_ERR_INT_ST field.
	RMT_INT_ST_CH1_ERR_INT_ST_Pos = 0x5
	// Bit mask of CH1_ERR_INT_ST field.
	RMT_INT_ST_CH1_ERR_INT_ST_Msk = 0x20
	// Bit CH1_ERR_INT_ST.
	RMT_INT_ST_CH1_ERR_INT_ST = 0x20
	// Position of CH1_RX_END_INT_ST field.
	RMT_INT_ST_CH1_RX_END_INT_ST_Pos = 0x4
	// Bit mask of CH1_RX_END_INT_ST field.
	RMT_INT_ST_CH1_RX_END_INT_ST_Msk = 0x10
	// Bit CH1_RX_END_INT_ST.
	RMT_INT_ST_CH1_RX_END_INT_ST = 0x10
	// Position of CH1_TX_END_INT_ST field.
	RMT_INT_ST_CH1_TX_END_INT_ST_Pos = 0x3
	// Bit mask of CH1_TX_END_INT_ST field.
	RMT_INT_ST_CH1_TX_END_INT_ST_Msk = 0x8
	// Bit CH1_TX_END_INT_ST.
	RMT_INT_ST_CH1_TX_END_INT_ST = 0x8
	// Position of CH0_ERR_INT_ST field.
	RMT_INT_ST_CH0_ERR_INT_ST_Pos = 0x2
	// Bit mask of CH0_ERR_INT_ST field.
	RMT_INT_ST_CH0_ERR_INT_ST_Msk = 0x4
	// Bit CH0_ERR_INT_ST.
	RMT_INT_ST_CH0_ERR_INT_ST = 0x4
	// Position of CH0_RX_END_INT_ST field.
	RMT_INT_ST_CH0_RX_END_INT_ST_Pos = 0x1
	// Bit mask of CH0_RX_END_INT_ST field.
	RMT_INT_ST_CH0_RX_END_INT_ST_Msk = 0x2
	// Bit CH0_RX_END_INT_ST.
	RMT_INT_ST_CH0_RX_END_INT_ST = 0x2
	// Position of CH0_TX_END_INT_ST field.
	RMT_INT_ST_CH0_TX_END_INT_ST_Pos = 0x0
	// Bit mask of CH0_TX_END_INT_ST field.
	RMT_INT_ST_CH0_TX_END_INT_ST_Msk = 0x1
	// Bit CH0_TX_END_INT_ST.
	RMT_INT_ST_CH0_TX_END_INT_ST = 0x1

	// INT_ENA: RMT_INT_ENA
	// Position of CH7_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH7_TX_THR_EVENT_INT_ENA_Pos = 0x1f
	// Bit mask of CH7_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH7_TX_THR_EVENT_INT_ENA_Msk = 0x80000000
	// Bit CH7_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH7_TX_THR_EVENT_INT_ENA = 0x80000000
	// Position of CH6_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH6_TX_THR_EVENT_INT_ENA_Pos = 0x1e
	// Bit mask of CH6_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH6_TX_THR_EVENT_INT_ENA_Msk = 0x40000000
	// Bit CH6_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH6_TX_THR_EVENT_INT_ENA = 0x40000000
	// Position of CH5_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH5_TX_THR_EVENT_INT_ENA_Pos = 0x1d
	// Bit mask of CH5_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH5_TX_THR_EVENT_INT_ENA_Msk = 0x20000000
	// Bit CH5_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH5_TX_THR_EVENT_INT_ENA = 0x20000000
	// Position of CH4_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH4_TX_THR_EVENT_INT_ENA_Pos = 0x1c
	// Bit mask of CH4_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH4_TX_THR_EVENT_INT_ENA_Msk = 0x10000000
	// Bit CH4_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH4_TX_THR_EVENT_INT_ENA = 0x10000000
	// Position of CH3_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH3_TX_THR_EVENT_INT_ENA_Pos = 0x1b
	// Bit mask of CH3_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH3_TX_THR_EVENT_INT_ENA_Msk = 0x8000000
	// Bit CH3_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH3_TX_THR_EVENT_INT_ENA = 0x8000000
	// Position of CH2_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH2_TX_THR_EVENT_INT_ENA_Pos = 0x1a
	// Bit mask of CH2_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH2_TX_THR_EVENT_INT_ENA_Msk = 0x4000000
	// Bit CH2_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH2_TX_THR_EVENT_INT_ENA = 0x4000000
	// Position of CH1_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH1_TX_THR_EVENT_INT_ENA_Pos = 0x19
	// Bit mask of CH1_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH1_TX_THR_EVENT_INT_ENA_Msk = 0x2000000
	// Bit CH1_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH1_TX_THR_EVENT_INT_ENA = 0x2000000
	// Position of CH0_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH0_TX_THR_EVENT_INT_ENA_Pos = 0x18
	// Bit mask of CH0_TX_THR_EVENT_INT_ENA field.
	RMT_INT_ENA_CH0_TX_THR_EVENT_INT_ENA_Msk = 0x1000000
	// Bit CH0_TX_THR_EVENT_INT_ENA.
	RMT_INT_ENA_CH0_TX_THR_EVENT_INT_ENA = 0x1000000
	// Position of CH7_ERR_INT_ENA field.
	RMT_INT_ENA_CH7_ERR_INT_ENA_Pos = 0x17
	// Bit mask of CH7_ERR_INT_ENA field.
	RMT_INT_ENA_CH7_ERR_INT_ENA_Msk = 0x800000
	// Bit CH7_ERR_INT_ENA.
	RMT_INT_ENA_CH7_ERR_INT_ENA = 0x800000
	// Position of CH7_RX_END_INT_ENA field.
	RMT_INT_ENA_CH7_RX_END_INT_ENA_Pos = 0x16
	// Bit mask of CH7_RX_END_INT_ENA field.
	RMT_INT_ENA_CH7_RX_END_INT_ENA_Msk = 0x400000
	// Bit CH7_RX_END_INT_ENA.
	RMT_INT_ENA_CH7_RX_END_INT_ENA = 0x400000
	// Position of CH7_TX_END_INT_ENA field.
	RMT_INT_ENA_CH7_TX_END_INT_ENA_Pos = 0x15
	// Bit mask of CH7_TX_END_INT_ENA field.
	RMT_INT_ENA_CH7_TX_END_INT_ENA_Msk = 0x200000
	// Bit CH7_TX_END_INT_ENA.
	RMT_INT_ENA_CH7_TX_END_INT_ENA = 0x200000
	// Position of CH6_ERR_INT_ENA field.
	RMT_INT_ENA_CH6_ERR_INT_ENA_Pos = 0x14
	// Bit mask of CH6_ERR_INT_ENA field.
	RMT_INT_ENA_CH6_ERR_INT_ENA_Msk = 0x100000
	// Bit CH6_ERR_INT_ENA.
	RMT_INT_ENA_CH6_ERR_INT_ENA = 0x100000
	// Position of CH6_RX_END_INT_ENA field.
	RMT_INT_ENA_CH6_RX_END_INT_ENA_Pos = 0x13
	// Bit mask of CH6_RX_END_INT_ENA field.
	RMT_INT_ENA_CH6_RX_END_INT_ENA_Msk = 0x80000
	// Bit CH6_RX_END_INT_ENA.
	RMT_INT_ENA_CH6_RX_END_INT_ENA = 0x80000
	// Position of CH6_TX_END_INT_ENA field.
	RMT_INT_ENA_CH6_TX_END_INT_ENA_Pos = 0x12
	// Bit mask of CH6_TX_END_INT_ENA field.
	RMT_INT_ENA_CH6_TX_END_INT_ENA_Msk = 0x40000
	// Bit CH6_TX_END_INT_ENA.
	RMT_INT_ENA_CH6_TX_END_INT_ENA = 0x40000
	// Position of CH5_ERR_INT_ENA field.
	RMT_INT_ENA_CH5_ERR_INT_ENA_Pos = 0x11
	// Bit mask of CH5_ERR_INT_ENA field.
	RMT_INT_ENA_CH5_ERR_INT_ENA_Msk = 0x20000
	// Bit CH5_ERR_INT_ENA.
	RMT_INT_ENA_CH5_ERR_INT_ENA = 0x20000
	// Position of CH5_RX_END_INT_ENA field.
	RMT_INT_ENA_CH5_RX_END_INT_ENA_Pos = 0x10
	// Bit mask of CH5_RX_END_INT_ENA field.
	RMT_INT_ENA_CH5_RX_END_INT_ENA_Msk = 0x10000
	// Bit CH5_RX_END_INT_ENA.
	RMT_INT_ENA_CH5_RX_END_INT_ENA = 0x10000
	// Position of CH5_TX_END_INT_ENA field.
	RMT_INT_ENA_CH5_TX_END_INT_ENA_Pos = 0xf
	// Bit mask of CH5_TX_END_INT_ENA field.
	RMT_INT_ENA_CH5_TX_END_INT_ENA_Msk = 0x8000
	// Bit CH5_TX_END_INT_ENA.
	RMT_INT_ENA_CH5_TX_END_INT_ENA = 0x8000
	// Position of CH4_ERR_INT_ENA field.
	RMT_INT_ENA_CH4_ERR_INT_ENA_Pos = 0xe
	// Bit mask of CH4_ERR_INT_ENA field.
	RMT_INT_ENA_CH4_ERR_INT_ENA_Msk = 0x4000
	// Bit CH4_ERR_INT_ENA.
	RMT_INT_ENA_CH4_ERR_INT_ENA = 0x4000
	// Position of CH4_RX_END_INT_ENA field.
	RMT_INT_ENA_CH4_RX_END_INT_ENA_Pos = 0xd
	// Bit mask of CH4_RX_END_INT_ENA field.
	RMT_INT_ENA_CH4_RX_END_INT_ENA_Msk = 0x2000
	// Bit CH4_RX_END_INT_ENA.
	RMT_INT_ENA_CH4_RX_END_INT_ENA = 0x2000
	// Position of CH4_TX_END_INT_ENA field.
	RMT_INT_ENA_CH4_TX_END_INT_ENA_Pos = 0xc
	// Bit mask of CH4_TX_END_INT_ENA field.
	RMT_INT_ENA_CH4_TX_END_INT_ENA_Msk = 0x1000
	// Bit CH4_TX_END_INT_ENA.
	RMT_INT_ENA_CH4_TX_END_INT_ENA = 0x1000
	// Position of CH3_ERR_INT_ENA field.
	RMT_INT_ENA_CH3_ERR_INT_ENA_Pos = 0xb
	// Bit mask of CH3_ERR_INT_ENA field.
	RMT_INT_ENA_CH3_ERR_INT_ENA_Msk = 0x800
	// Bit CH3_ERR_INT_ENA.
	RMT_INT_ENA_CH3_ERR_INT_ENA = 0x800
	// Position of CH3_RX_END_INT_ENA field.
	RMT_INT_ENA_CH3_RX_END_INT_ENA_Pos = 0xa
	// Bit mask of CH3_RX_END_INT_ENA field.
	RMT_INT_ENA_CH3_RX_END_INT_ENA_Msk = 0x400
	// Bit CH3_RX_END_INT_ENA.
	RMT_INT_ENA_CH3_RX_END_INT_ENA = 0x400
	// Position of CH3_TX_END_INT_ENA field.
	RMT_INT_ENA_CH3_TX_END_INT_ENA_Pos = 0x9
	// Bit mask of CH3_TX_END_INT_ENA field.
	RMT_INT_ENA_CH3_TX_END_INT_ENA_Msk = 0x200
	// Bit CH3_TX_END_INT_ENA.
	RMT_INT_ENA_CH3_TX_END_INT_ENA = 0x200
	// Position of CH2_ERR_INT_ENA field.
	RMT_INT_ENA_CH2_ERR_INT_ENA_Pos = 0x8
	// Bit mask of CH2_ERR_INT_ENA field.
	RMT_INT_ENA_CH2_ERR_INT_ENA_Msk = 0x100
	// Bit CH2_ERR_INT_ENA.
	RMT_INT_ENA_CH2_ERR_INT_ENA = 0x100
	// Position of CH2_RX_END_INT_ENA field.
	RMT_INT_ENA_CH2_RX_END_INT_ENA_Pos = 0x7
	// Bit mask of CH2_RX_END_INT_ENA field.
	RMT_INT_ENA_CH2_RX_END_INT_ENA_Msk = 0x80
	// Bit CH2_RX_END_INT_ENA.
	RMT_INT_ENA_CH2_RX_END_INT_ENA = 0x80
	// Position of CH2_TX_END_INT_ENA field.
	RMT_INT_ENA_CH2_TX_END_INT_ENA_Pos = 0x6
	// Bit mask of CH2_TX_END_INT_ENA field.
	RMT_INT_ENA_CH2_TX_END_INT_ENA_Msk = 0x40
	// Bit CH2_TX_END_INT_ENA.
	RMT_INT_ENA_CH2_TX_END_INT_ENA = 0x40
	// Position of CH1_ERR_INT_ENA field.
	RMT_INT_ENA_CH1_ERR_INT_ENA_Pos = 0x5
	// Bit mask of CH1_ERR_INT_ENA field.
	RMT_INT_ENA_CH1_ERR_INT_ENA_Msk = 0x20
	// Bit CH1_ERR_INT_ENA.
	RMT_INT_ENA_CH1_ERR_INT_ENA = 0x20
	// Position of CH1_RX_END_INT_ENA field.
	RMT_INT_ENA_CH1_RX_END_INT_ENA_Pos = 0x4
	// Bit mask of CH1_RX_END_INT_ENA field.
	RMT_INT_ENA_CH1_RX_END_INT_ENA_Msk = 0x10
	// Bit CH1_RX_END_INT_ENA.
	RMT_INT_ENA_CH1_RX_END_INT_ENA = 0x10
	// Position of CH1_TX_END_INT_ENA field.
	RMT_INT_ENA_CH1_TX_END_INT_ENA_Pos = 0x3
	// Bit mask of CH1_TX_END_INT_ENA field.
	RMT_INT_ENA_CH1_TX_END_INT_ENA_Msk = 0x8
	// Bit CH1_TX_END_INT_ENA.
	RMT_INT_ENA_CH1_TX_END_INT_ENA = 0x8
	// Position of CH0_ERR_INT_ENA field.
	RMT_INT_ENA_CH0_ERR_INT_ENA_Pos = 0x2
	// Bit mask of CH0_ERR_INT_ENA field.
	RMT_INT_ENA_CH0_ERR_INT_ENA_Msk = 0x4
	// Bit CH0_ERR_INT_ENA.
	RMT_INT_ENA_CH0_ERR_INT_ENA = 0x4
	// Position of CH0_RX_END_INT_ENA field.
	RMT_INT_ENA_CH0_RX_END_INT_ENA_Pos = 0x1
	// Bit mask of CH0_RX_END_INT_ENA field.
	RMT_INT_ENA_CH0_RX_END_INT_ENA_Msk = 0x2
	// Bit CH0_RX_END_INT_ENA.
	RMT_INT_ENA_CH0_RX_END_INT_ENA = 0x2
	// Position of CH0_TX_END_INT_ENA field.
	RMT_INT_ENA_CH0_TX_END_INT_ENA_Pos = 0x0
	// Bit mask of CH0_TX_END_INT_ENA field.
	RMT_INT_ENA_CH0_TX_END_INT_ENA_Msk = 0x1
	// Bit CH0_TX_END_INT_ENA.
	RMT_INT_ENA_CH0_TX_END_INT_ENA = 0x1

	// INT_CLR: RMT_INT_CLR
	// Position of CH7_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH7_TX_THR_EVENT_INT_CLR_Pos = 0x1f
	// Bit mask of CH7_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH7_TX_THR_EVENT_INT_CLR_Msk = 0x80000000
	// Bit CH7_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH7_TX_THR_EVENT_INT_CLR = 0x80000000
	// Position of CH6_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH6_TX_THR_EVENT_INT_CLR_Pos = 0x1e
	// Bit mask of CH6_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH6_TX_THR_EVENT_INT_CLR_Msk = 0x40000000
	// Bit CH6_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH6_TX_THR_EVENT_INT_CLR = 0x40000000
	// Position of CH5_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH5_TX_THR_EVENT_INT_CLR_Pos = 0x1d
	// Bit mask of CH5_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH5_TX_THR_EVENT_INT_CLR_Msk = 0x20000000
	// Bit CH5_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH5_TX_THR_EVENT_INT_CLR = 0x20000000
	// Position of CH4_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH4_TX_THR_EVENT_INT_CLR_Pos = 0x1c
	// Bit mask of CH4_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH4_TX_THR_EVENT_INT_CLR_Msk = 0x10000000
	// Bit CH4_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH4_TX_THR_EVENT_INT_CLR = 0x10000000
	// Position of CH3_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH3_TX_THR_EVENT_INT_CLR_Pos = 0x1b
	// Bit mask of CH3_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH3_TX_THR_EVENT_INT_CLR_Msk = 0x8000000
	// Bit CH3_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH3_TX_THR_EVENT_INT_CLR = 0x8000000
	// Position of CH2_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH2_TX_THR_EVENT_INT_CLR_Pos = 0x1a
	// Bit mask of CH2_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH2_TX_THR_EVENT_INT_CLR_Msk = 0x4000000
	// Bit CH2_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH2_TX_THR_EVENT_INT_CLR = 0x4000000
	// Position of CH1_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH1_TX_THR_EVENT_INT_CLR_Pos = 0x19
	// Bit mask of CH1_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH1_TX_THR_EVENT_INT_CLR_Msk = 0x2000000
	// Bit CH1_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH1_TX_THR_EVENT_INT_CLR = 0x2000000
	// Position of CH0_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH0_TX_THR_EVENT_INT_CLR_Pos = 0x18
	// Bit mask of CH0_TX_THR_EVENT_INT_CLR field.
	RMT_INT_CLR_CH0_TX_THR_EVENT_INT_CLR_Msk = 0x1000000
	// Bit CH0_TX_THR_EVENT_INT_CLR.
	RMT_INT_CLR_CH0_TX_THR_EVENT_INT_CLR = 0x1000000
	// Position of CH7_ERR_INT_CLR field.
	RMT_INT_CLR_CH7_ERR_INT_CLR_Pos = 0x17
	// Bit mask of CH7_ERR_INT_CLR field.
	RMT_INT_CLR_CH7_ERR_INT_CLR_Msk = 0x800000
	// Bit CH7_ERR_INT_CLR.
	RMT_INT_CLR_CH7_ERR_INT_CLR = 0x800000
	// Position of CH7_RX_END_INT_CLR field.
	RMT_INT_CLR_CH7_RX_END_INT_CLR_Pos = 0x16
	// Bit mask of CH7_RX_END_INT_CLR field.
	RMT_INT_CLR_CH7_RX_END_INT_CLR_Msk = 0x400000
	// Bit CH7_RX_END_INT_CLR.
	RMT_INT_CLR_CH7_RX_END_INT_CLR = 0x400000
	// Position of CH7_TX_END_INT_CLR field.
	RMT_INT_CLR_CH7_TX_END_INT_CLR_Pos = 0x15
	// Bit mask of CH7_TX_END_INT_CLR field.
	RMT_INT_CLR_CH7_TX_END_INT_CLR_Msk = 0x200000
	// Bit CH7_TX_END_INT_CLR.
	RMT_INT_CLR_CH7_TX_END_INT_CLR = 0x200000
	// Position of CH6_ERR_INT_CLR field.
	RMT_INT_CLR_CH6_ERR_INT_CLR_Pos = 0x14
	// Bit mask of CH6_ERR_INT_CLR field.
	RMT_INT_CLR_CH6_ERR_INT_CLR_Msk = 0x100000
	// Bit CH6_ERR_INT_CLR.
	RMT_INT_CLR_CH6_ERR_INT_CLR = 0x100000
	// Position of CH6_RX_END_INT_CLR field.
	RMT_INT_CLR_CH6_RX_END_INT_CLR_Pos = 0x13
	// Bit mask of CH6_RX_END_INT_CLR field.
	RMT_INT_CLR_CH6_RX_END_INT_CLR_Msk = 0x80000
	// Bit CH6_RX_END_INT_CLR.
	RMT_INT_CLR_CH6_RX_END_INT_CLR = 0x80000
	// Position of CH6_TX_END_INT_CLR field.
	RMT_INT_CLR_CH6_TX_END_INT_CLR_Pos = 0x12
	// Bit mask of CH6_TX_END_INT_CLR field.
	RMT_INT_CLR_CH6_TX_END_INT_CLR_Msk = 0x40000
	// Bit CH6_TX_END_INT_CLR.
	RMT_INT_CLR_CH6_TX_END_INT_CLR = 0x40000
	// Position of CH5_ERR_INT_CLR field.
	RMT_INT_CLR_CH5_ERR_INT_CLR_Pos = 0x11
	// Bit mask of CH5_ERR_INT_CLR field.
	RMT_INT_CLR_CH5_ERR_INT_CLR_Msk = 0x20000
	// Bit CH5_ERR_INT_CLR.
	RMT_INT_CLR_CH5_ERR_INT_CLR = 0x20000
	// Position of CH5_RX_END_INT_CLR field.
	RMT_INT_CLR_CH5_RX_END_INT_CLR_Pos = 0x10
	// Bit mask of CH5_RX_END_INT_CLR field.
	RMT_INT_CLR_CH5_RX_END_INT_CLR_Msk = 0x10000
	// Bit CH5_RX_END_INT_CLR.
	RMT_INT_CLR_CH5_RX_END_INT_CLR = 0x10000
	// Position of CH5_TX_END_INT_CLR field.
	RMT_INT_CLR_CH5_TX_END_INT_CLR_Pos = 0xf
	// Bit mask of CH5_TX_END_INT_CLR field.
	RMT_INT_CLR_CH5_TX_END_INT_CLR_Msk = 0x8000
	// Bit CH5_TX_END_INT_CLR.
	RMT_INT_CLR_CH5_TX_END_INT_CLR = 0x8000
	// Position of CH4_ERR_INT_CLR field.
	RMT_INT_CLR_CH4_ERR_INT_CLR_Pos = 0xe
	// Bit mask of CH4_ERR_INT_CLR field.
	RMT_INT_CLR_CH4_ERR_INT_CLR_Msk = 0x4000
	// Bit CH4_ERR_INT_CLR.
	RMT_INT_CLR_CH4_ERR_INT_CLR = 0x4000
	// Position of CH4_RX_END_INT_CLR field.
	RMT_INT_CLR_CH4_RX_END_INT_CLR_Pos = 0xd
	// Bit mask of CH4_RX_END_INT_CLR field.
	RMT_INT_CLR_CH4_RX_END_INT_CLR_Msk = 0x2000
	// Bit CH4_RX_END_INT_CLR.
	RMT_INT_CLR_CH4_RX_END_INT_CLR = 0x2000
	// Position of CH4_TX_END_INT_CLR field.
	RMT_INT_CLR_CH4_TX_END_INT_CLR_Pos = 0xc
	// Bit mask of CH4_TX_END_INT_CLR field.
	RMT_INT_CLR_CH4_TX_END_INT_CLR_Msk = 0x1000
	// Bit CH4_TX_END_INT_CLR.
	RMT_INT_CLR_CH4_TX_END_INT_CLR = 0x1000
	// Position of CH3_ERR_INT_CLR field.
	RMT_INT_CLR_CH3_ERR_INT_CLR_Pos = 0xb
	// Bit mask of CH3_ERR_INT_CLR field.
	RMT_INT_CLR_CH3_ERR_INT_CLR_Msk = 0x800
	// Bit CH3_ERR_INT_CLR.
	RMT_INT_CLR_CH3_ERR_INT_CLR = 0x800
	// Position of CH3_RX_END_INT_CLR field.
	RMT_INT_CLR_CH3_RX_END_INT_CLR_Pos = 0xa
	// Bit mask of CH3_RX_END_INT_CLR field.
	RMT_INT_CLR_CH3_RX_END_INT_CLR_Msk = 0x400
	// Bit CH3_RX_END_INT_CLR.
	RMT_INT_CLR_CH3_RX_END_INT_CLR = 0x400
	// Position of CH3_TX_END_INT_CLR field.
	RMT_INT_CLR_CH3_TX_END_INT_CLR_Pos = 0x9
	// Bit mask of CH3_TX_END_INT_CLR field.
	RMT_INT_CLR_CH3_TX_END_INT_CLR_Msk = 0x200
	// Bit CH3_TX_END_INT_CLR.
	RMT_INT_CLR_CH3_TX_END_INT_CLR = 0x200
	// Position of CH2_ERR_INT_CLR field.
	RMT_INT_CLR_CH2_ERR_INT_CLR_Pos = 0x8
	// Bit mask of CH2_ERR_INT_CLR field.
	RMT_INT_CLR_CH2_ERR_INT_CLR_Msk = 0x100
	// Bit CH2_ERR_INT_CLR.
	RMT_INT_CLR_CH2_ERR_INT_CLR = 0x100
	// Position of CH2_RX_END_INT_CLR field.
	RMT_INT_CLR_CH2_RX_END_INT_CLR_Pos = 0x7
	// Bit mask of CH2_RX_END_INT_CLR field.
	RMT_INT_CLR_CH2_RX_END_INT_CLR_Msk = 0x80
	// Bit CH2_RX_END_INT_CLR.
	RMT_INT_CLR_CH2_RX_END_INT_CLR = 0x80
	// Position of CH2_TX_END_INT_CLR field.
	RMT_INT_CLR_CH2_TX_END_INT_CLR_Pos = 0x6
	// Bit mask of CH2_TX_END_INT_CLR field.
	RMT_INT_CLR_CH2_TX_END_INT_CLR_Msk = 0x40
	// Bit CH2_TX_END_INT_CLR.
	RMT_INT_CLR_CH2_TX_END_INT_CLR = 0x40
	// Position of CH1_ERR_INT_CLR field.
	RMT_INT_CLR_CH1_ERR_INT_CLR_Pos = 0x5
	// Bit mask of CH1_ERR_INT_CLR field.
	RMT_INT_CLR_CH1_ERR_INT_CLR_Msk = 0x20
	// Bit CH1_ERR_INT_CLR.
	RMT_INT_CLR_CH1_ERR_INT_CLR = 0x20
	// Position of CH1_RX_END_INT_CLR field.
	RMT_INT_CLR_CH1_RX_END_INT_CLR_Pos = 0x4
	// Bit mask of CH1_RX_END_INT_CLR field.
	RMT_INT_CLR_CH1_RX_END_INT_CLR_Msk = 0x10
	// Bit CH1_RX_END_INT_CLR.
	RMT_INT_CLR_CH1_RX_END_INT_CLR = 0x10
	// Position of CH1_TX_END_INT_CLR field.
	RMT_INT_CLR_CH1_TX_END_INT_CLR_Pos = 0x3
	// Bit mask of CH1_TX_END_INT_CLR field.
	RMT_INT_CLR_CH1_TX_END_INT_CLR_Msk = 0x8
	// Bit CH1_TX_END_INT_CLR.
	RMT_INT_CLR_CH1_TX_END_INT_CLR = 0x8
	// Position of CH0_ERR_INT_CLR field.
	RMT_INT_CLR_CH0_ERR_INT_CLR_Pos = 0x2
	// Bit mask of CH0_ERR_INT_CLR field.
	RMT_INT_CLR_CH0_ERR_INT_CLR_Msk = 0x4
	// Bit CH0_ERR_INT_CLR.
	RMT_INT_CLR_CH0_ERR_INT_CLR = 0x4
	// Position of CH0_RX_END_INT_CLR field.
	RMT_INT_CLR_CH0_RX_END_INT_CLR_Pos = 0x1
	// Bit mask of CH0_RX_END_INT_CLR field.
	RMT_INT_CLR_CH0_RX_END_INT_CLR_Msk = 0x2
	// Bit CH0_RX_END_INT_CLR.
	RMT_INT_CLR_CH0_RX_END_INT_CLR = 0x2
	// Position of CH0_TX_END_INT_CLR field.
	RMT_INT_CLR_CH0_TX_END_INT_CLR_Pos = 0x0
	// Bit mask of CH0_TX_END_INT_CLR field.
	RMT_INT_CLR_CH0_TX_END_INT_CLR_Msk = 0x1
	// Bit CH0_TX_END_INT_CLR.
	RMT_INT_CLR_CH0_TX_END_INT_CLR = 0x1

	// CH0CARRIER_DUTY: RMT_CH0CARRIER_DUTY
	// Position of CARRIER_HIGH_CH0 field.
	RMT_CH0CARRIER_DUTY_CARRIER_HIGH_CH0_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH0 field.
	RMT_CH0CARRIER_DUTY_CARRIER_HIGH_CH0_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH0 field.
	RMT_CH0CARRIER_DUTY_CARRIER_LOW_CH0_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH0 field.
	RMT_CH0CARRIER_DUTY_CARRIER_LOW_CH0_Msk = 0xffff

	// CH1CARRIER_DUTY: RMT_CH1CARRIER_DUTY
	// Position of CARRIER_HIGH_CH1 field.
	RMT_CH1CARRIER_DUTY_CARRIER_HIGH_CH1_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH1 field.
	RMT_CH1CARRIER_DUTY_CARRIER_HIGH_CH1_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH1 field.
	RMT_CH1CARRIER_DUTY_CARRIER_LOW_CH1_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH1 field.
	RMT_CH1CARRIER_DUTY_CARRIER_LOW_CH1_Msk = 0xffff

	// CH2CARRIER_DUTY: RMT_CH2CARRIER_DUTY
	// Position of CARRIER_HIGH_CH2 field.
	RMT_CH2CARRIER_DUTY_CARRIER_HIGH_CH2_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH2 field.
	RMT_CH2CARRIER_DUTY_CARRIER_HIGH_CH2_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH2 field.
	RMT_CH2CARRIER_DUTY_CARRIER_LOW_CH2_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH2 field.
	RMT_CH2CARRIER_DUTY_CARRIER_LOW_CH2_Msk = 0xffff

	// CH3CARRIER_DUTY: RMT_CH3CARRIER_DUTY
	// Position of CARRIER_HIGH_CH3 field.
	RMT_CH3CARRIER_DUTY_CARRIER_HIGH_CH3_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH3 field.
	RMT_CH3CARRIER_DUTY_CARRIER_HIGH_CH3_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH3 field.
	RMT_CH3CARRIER_DUTY_CARRIER_LOW_CH3_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH3 field.
	RMT_CH3CARRIER_DUTY_CARRIER_LOW_CH3_Msk = 0xffff

	// CH4CARRIER_DUTY: RMT_CH4CARRIER_DUTY
	// Position of CARRIER_HIGH_CH4 field.
	RMT_CH4CARRIER_DUTY_CARRIER_HIGH_CH4_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH4 field.
	RMT_CH4CARRIER_DUTY_CARRIER_HIGH_CH4_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH4 field.
	RMT_CH4CARRIER_DUTY_CARRIER_LOW_CH4_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH4 field.
	RMT_CH4CARRIER_DUTY_CARRIER_LOW_CH4_Msk = 0xffff

	// CH5CARRIER_DUTY: RMT_CH5CARRIER_DUTY
	// Position of CARRIER_HIGH_CH5 field.
	RMT_CH5CARRIER_DUTY_CARRIER_HIGH_CH5_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH5 field.
	RMT_CH5CARRIER_DUTY_CARRIER_HIGH_CH5_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH5 field.
	RMT_CH5CARRIER_DUTY_CARRIER_LOW_CH5_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH5 field.
	RMT_CH5CARRIER_DUTY_CARRIER_LOW_CH5_Msk = 0xffff

	// CH6CARRIER_DUTY: RMT_CH6CARRIER_DUTY
	// Position of CARRIER_HIGH_CH6 field.
	RMT_CH6CARRIER_DUTY_CARRIER_HIGH_CH6_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH6 field.
	RMT_CH6CARRIER_DUTY_CARRIER_HIGH_CH6_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH6 field.
	RMT_CH6CARRIER_DUTY_CARRIER_LOW_CH6_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH6 field.
	RMT_CH6CARRIER_DUTY_CARRIER_LOW_CH6_Msk = 0xffff

	// CH7CARRIER_DUTY: RMT_CH7CARRIER_DUTY
	// Position of CARRIER_HIGH_CH7 field.
	RMT_CH7CARRIER_DUTY_CARRIER_HIGH_CH7_Pos = 0x10
	// Bit mask of CARRIER_HIGH_CH7 field.
	RMT_CH7CARRIER_DUTY_CARRIER_HIGH_CH7_Msk = 0xffff0000
	// Position of CARRIER_LOW_CH7 field.
	RMT_CH7CARRIER_DUTY_CARRIER_LOW_CH7_Pos = 0x0
	// Bit mask of CARRIER_LOW_CH7 field.
	RMT_CH7CARRIER_DUTY_CARRIER_LOW_CH7_Msk = 0xffff

	// CH0_TX_LIM: RMT_CH0_TX_LIM
	// Position of TX_LIM_CH0 field.
	RMT_CH0_TX_LIM_TX_LIM_CH0_Pos = 0x0
	// Bit mask of TX_LIM_CH0 field.
	RMT_CH0_TX_LIM_TX_LIM_CH0_Msk = 0x1ff

	// CH1_TX_LIM: RMT_CH1_TX_LIM
	// Position of TX_LIM_CH1 field.
	RMT_CH1_TX_LIM_TX_LIM_CH1_Pos = 0x0
	// Bit mask of TX_LIM_CH1 field.
	RMT_CH1_TX_LIM_TX_LIM_CH1_Msk = 0x1ff

	// CH2_TX_LIM: RMT_CH2_TX_LIM
	// Position of TX_LIM_CH2 field.
	RMT_CH2_TX_LIM_TX_LIM_CH2_Pos = 0x0
	// Bit mask of TX_LIM_CH2 field.
	RMT_CH2_TX_LIM_TX_LIM_CH2_Msk = 0x1ff

	// CH3_TX_LIM: RMT_CH3_TX_LIM
	// Position of TX_LIM_CH3 field.
	RMT_CH3_TX_LIM_TX_LIM_CH3_Pos = 0x0
	// Bit mask of TX_LIM_CH3 field.
	RMT_CH3_TX_LIM_TX_LIM_CH3_Msk = 0x1ff

	// CH4_TX_LIM: RMT_CH4_TX_LIM
	// Position of TX_LIM_CH4 field.
	RMT_CH4_TX_LIM_TX_LIM_CH4_Pos = 0x0
	// Bit mask of TX_LIM_CH4 field.
	RMT_CH4_TX_LIM_TX_LIM_CH4_Msk = 0x1ff

	// CH5_TX_LIM: RMT_CH5_TX_LIM
	// Position of TX_LIM_CH5 field.
	RMT_CH5_TX_LIM_TX_LIM_CH5_Pos = 0x0
	// Bit mask of TX_LIM_CH5 field.
	RMT_CH5_TX_LIM_TX_LIM_CH5_Msk = 0x1ff

	// CH6_TX_LIM: RMT_CH6_TX_LIM
	// Position of TX_LIM_CH6 field.
	RMT_CH6_TX_LIM_TX_LIM_CH6_Pos = 0x0
	// Bit mask of TX_LIM_CH6 field.
	RMT_CH6_TX_LIM_TX_LIM_CH6_Msk = 0x1ff

	// CH7_TX_LIM: RMT_CH7_TX_LIM
	// Position of TX_LIM_CH7 field.
	RMT_CH7_TX_LIM_TX_LIM_CH7_Pos = 0x0
	// Bit mask of TX_LIM_CH7 field.
	RMT_CH7_TX_LIM_TX_LIM_CH7_Msk = 0x1ff

	// APB_CONF: RMT_APB_CONF
	// Position of MEM_TX_WRAP_EN field.
	RMT_APB_CONF_MEM_TX_WRAP_EN_Pos = 0x1
	// Bit mask of MEM_TX_WRAP_EN field.
	RMT_APB_CONF_MEM_TX_WRAP_EN_Msk = 0x2
	// Bit MEM_TX_WRAP_EN.
	RMT_APB_CONF_MEM_TX_WRAP_EN = 0x2
	// Position of APB_FIFO_MASK field.
	RMT_APB_CONF_APB_FIFO_MASK_Pos = 0x0
	// Bit mask of APB_FIFO_MASK field.
	RMT_APB_CONF_APB_FIFO_MASK_Msk = 0x1
	// Bit APB_FIFO_MASK.
	RMT_APB_CONF_APB_FIFO_MASK = 0x1

	// DATE: RMT_DATE
	// Position of DATE field.
	RMT_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	RMT_DATE_DATE_Msk = 0xffffffff
)

// Constants for EMAC
const ()

// Constants for RTCMEM2
const ()

// Constants for GPIO
const (
	// BT_SELECT: GPIO_BT_SELECT
	// Position of BT_SEL field.
	GPIO_BT_SELECT_BT_SEL_Pos = 0x0
	// Bit mask of BT_SEL field.
	GPIO_BT_SELECT_BT_SEL_Msk = 0xffffffff

	// OUT: GPIO_OUT
	// Position of OUT_DATA field.
	GPIO_OUT_OUT_DATA_Pos = 0x0
	// Bit mask of OUT_DATA field.
	GPIO_OUT_OUT_DATA_Msk = 0xffffffff

	// OUT_W1TS: GPIO_OUT_W1TS
	// Position of OUT_DATA_W1TS field.
	GPIO_OUT_W1TS_OUT_DATA_W1TS_Pos = 0x0
	// Bit mask of OUT_DATA_W1TS field.
	GPIO_OUT_W1TS_OUT_DATA_W1TS_Msk = 0xffffffff

	// OUT_W1TC: GPIO_OUT_W1TC
	// Position of OUT_DATA_W1TC field.
	GPIO_OUT_W1TC_OUT_DATA_W1TC_Pos = 0x0
	// Bit mask of OUT_DATA_W1TC field.
	GPIO_OUT_W1TC_OUT_DATA_W1TC_Msk = 0xffffffff

	// OUT1: GPIO_OUT1
	// Position of OUT1_DATA field.
	GPIO_OUT1_OUT1_DATA_Pos = 0x0
	// Bit mask of OUT1_DATA field.
	GPIO_OUT1_OUT1_DATA_Msk = 0xff

	// OUT1_W1TS: GPIO_OUT1_W1TS
	// Position of OUT1_DATA_W1TS field.
	GPIO_OUT1_W1TS_OUT1_DATA_W1TS_Pos = 0x0
	// Bit mask of OUT1_DATA_W1TS field.
	GPIO_OUT1_W1TS_OUT1_DATA_W1TS_Msk = 0xff

	// OUT1_W1TC: GPIO_OUT1_W1TC
	// Position of OUT1_DATA_W1TC field.
	GPIO_OUT1_W1TC_OUT1_DATA_W1TC_Pos = 0x0
	// Bit mask of OUT1_DATA_W1TC field.
	GPIO_OUT1_W1TC_OUT1_DATA_W1TC_Msk = 0xff

	// SDIO_SELECT: GPIO_SDIO_SELECT
	// Position of SDIO_SEL field.
	GPIO_SDIO_SELECT_SDIO_SEL_Pos = 0x0
	// Bit mask of SDIO_SEL field.
	GPIO_SDIO_SELECT_SDIO_SEL_Msk = 0xff

	// ENABLE: GPIO_ENABLE
	// Position of ENABLE_DATA field.
	GPIO_ENABLE_ENABLE_DATA_Pos = 0x0
	// Bit mask of ENABLE_DATA field.
	GPIO_ENABLE_ENABLE_DATA_Msk = 0xffffffff

	// ENABLE_W1TS: GPIO_ENABLE_W1TS
	// Position of ENABLE_DATA_W1TS field.
	GPIO_ENABLE_W1TS_ENABLE_DATA_W1TS_Pos = 0x0
	// Bit mask of ENABLE_DATA_W1TS field.
	GPIO_ENABLE_W1TS_ENABLE_DATA_W1TS_Msk = 0xffffffff

	// ENABLE_W1TC: GPIO_ENABLE_W1TC
	// Position of ENABLE_DATA_W1TC field.
	GPIO_ENABLE_W1TC_ENABLE_DATA_W1TC_Pos = 0x0
	// Bit mask of ENABLE_DATA_W1TC field.
	GPIO_ENABLE_W1TC_ENABLE_DATA_W1TC_Msk = 0xffffffff

	// ENABLE1: GPIO_ENABLE1
	// Position of ENABLE1_DATA field.
	GPIO_ENABLE1_ENABLE1_DATA_Pos = 0x0
	// Bit mask of ENABLE1_DATA field.
	GPIO_ENABLE1_ENABLE1_DATA_Msk = 0xff

	// ENABLE1_W1TS: GPIO_ENABLE1_W1TS
	// Position of ENABLE1_DATA_W1TS field.
	GPIO_ENABLE1_W1TS_ENABLE1_DATA_W1TS_Pos = 0x0
	// Bit mask of ENABLE1_DATA_W1TS field.
	GPIO_ENABLE1_W1TS_ENABLE1_DATA_W1TS_Msk = 0xff

	// ENABLE1_W1TC: GPIO_ENABLE1_W1TC
	// Position of ENABLE1_DATA_W1TC field.
	GPIO_ENABLE1_W1TC_ENABLE1_DATA_W1TC_Pos = 0x0
	// Bit mask of ENABLE1_DATA_W1TC field.
	GPIO_ENABLE1_W1TC_ENABLE1_DATA_W1TC_Msk = 0xff

	// STRAP: GPIO_STRAP
	// Position of STRAPPING field.
	GPIO_STRAP_STRAPPING_Pos = 0x0
	// Bit mask of STRAPPING field.
	GPIO_STRAP_STRAPPING_Msk = 0xffff

	// IN: GPIO_IN
	// Position of IN_DATA field.
	GPIO_IN_IN_DATA_Pos = 0x0
	// Bit mask of IN_DATA field.
	GPIO_IN_IN_DATA_Msk = 0xffffffff

	// IN1: GPIO_IN1
	// Position of IN1_DATA field.
	GPIO_IN1_IN1_DATA_Pos = 0x0
	// Bit mask of IN1_DATA field.
	GPIO_IN1_IN1_DATA_Msk = 0xff

	// STATUS: GPIO_STATUS
	// Position of STATUS_INT field.
	GPIO_STATUS_STATUS_INT_Pos = 0x0
	// Bit mask of STATUS_INT field.
	GPIO_STATUS_STATUS_INT_Msk = 0xffffffff

	// STATUS_W1TS: GPIO_STATUS_W1TS
	// Position of STATUS_INT_W1TS field.
	GPIO_STATUS_W1TS_STATUS_INT_W1TS_Pos = 0x0
	// Bit mask of STATUS_INT_W1TS field.
	GPIO_STATUS_W1TS_STATUS_INT_W1TS_Msk = 0xffffffff

	// STATUS_W1TC: GPIO_STATUS_W1TC
	// Position of STATUS_INT_W1TC field.
	GPIO_STATUS_W1TC_STATUS_INT_W1TC_Pos = 0x0
	// Bit mask of STATUS_INT_W1TC field.
	GPIO_STATUS_W1TC_STATUS_INT_W1TC_Msk = 0xffffffff

	// STATUS1: GPIO_STATUS1
	// Position of STATUS1_INT field.
	GPIO_STATUS1_STATUS1_INT_Pos = 0x0
	// Bit mask of STATUS1_INT field.
	GPIO_STATUS1_STATUS1_INT_Msk = 0xff

	// STATUS1_W1TS: GPIO_STATUS1_W1TS
	// Position of STATUS1_INT_W1TS field.
	GPIO_STATUS1_W1TS_STATUS1_INT_W1TS_Pos = 0x0
	// Bit mask of STATUS1_INT_W1TS field.
	GPIO_STATUS1_W1TS_STATUS1_INT_W1TS_Msk = 0xff

	// STATUS1_W1TC: GPIO_STATUS1_W1TC
	// Position of STATUS1_INT_W1TC field.
	GPIO_STATUS1_W1TC_STATUS1_INT_W1TC_Pos = 0x0
	// Bit mask of STATUS1_INT_W1TC field.
	GPIO_STATUS1_W1TC_STATUS1_INT_W1TC_Msk = 0xff

	// ACPU_INT: GPIO_ACPU_INT
	// Position of APPCPU_INT field.
	GPIO_ACPU_INT_APPCPU_INT_Pos = 0x0
	// Bit mask of APPCPU_INT field.
	GPIO_ACPU_INT_APPCPU_INT_Msk = 0xffffffff

	// ACPU_NMI_INT: GPIO_ACPU_NMI_INT
	// Position of APPCPU_NMI_INT field.
	GPIO_ACPU_NMI_INT_APPCPU_NMI_INT_Pos = 0x0
	// Bit mask of APPCPU_NMI_INT field.
	GPIO_ACPU_NMI_INT_APPCPU_NMI_INT_Msk = 0xffffffff

	// PCPU_INT: GPIO_PCPU_INT
	// Position of PROCPU_INT field.
	GPIO_PCPU_INT_PROCPU_INT_Pos = 0x0
	// Bit mask of PROCPU_INT field.
	GPIO_PCPU_INT_PROCPU_INT_Msk = 0xffffffff

	// PCPU_NMI_INT: GPIO_PCPU_NMI_INT
	// Position of PROCPU_NMI_INT field.
	GPIO_PCPU_NMI_INT_PROCPU_NMI_INT_Pos = 0x0
	// Bit mask of PROCPU_NMI_INT field.
	GPIO_PCPU_NMI_INT_PROCPU_NMI_INT_Msk = 0xffffffff

	// CPUSDIO_INT: GPIO_CPUSDIO_INT
	// Position of SDIO_INT field.
	GPIO_CPUSDIO_INT_SDIO_INT_Pos = 0x0
	// Bit mask of SDIO_INT field.
	GPIO_CPUSDIO_INT_SDIO_INT_Msk = 0xffffffff

	// ACPU_INT1: GPIO_ACPU_INT1
	// Position of APPCPU_INT_H field.
	GPIO_ACPU_INT1_APPCPU_INT_H_Pos = 0x0
	// Bit mask of APPCPU_INT_H field.
	GPIO_ACPU_INT1_APPCPU_INT_H_Msk = 0xff

	// ACPU_NMI_INT1: GPIO_ACPU_NMI_INT1
	// Position of APPCPU_NMI_INT_H field.
	GPIO_ACPU_NMI_INT1_APPCPU_NMI_INT_H_Pos = 0x0
	// Bit mask of APPCPU_NMI_INT_H field.
	GPIO_ACPU_NMI_INT1_APPCPU_NMI_INT_H_Msk = 0xff

	// PCPU_INT1: GPIO_PCPU_INT1
	// Position of PROCPU_INT_H field.
	GPIO_PCPU_INT1_PROCPU_INT_H_Pos = 0x0
	// Bit mask of PROCPU_INT_H field.
	GPIO_PCPU_INT1_PROCPU_INT_H_Msk = 0xff

	// PCPU_NMI_INT1: GPIO_PCPU_NMI_INT1
	// Position of PROCPU_NMI_INT_H field.
	GPIO_PCPU_NMI_INT1_PROCPU_NMI_INT_H_Pos = 0x0
	// Bit mask of PROCPU_NMI_INT_H field.
	GPIO_PCPU_NMI_INT1_PROCPU_NMI_INT_H_Msk = 0xff

	// CPUSDIO_INT1: GPIO_CPUSDIO_INT1
	// Position of SDIO_INT_H field.
	GPIO_CPUSDIO_INT1_SDIO_INT_H_Pos = 0x0
	// Bit mask of SDIO_INT_H field.
	GPIO_CPUSDIO_INT1_SDIO_INT_H_Msk = 0xff

	// PIN0: GPIO_PIN0
	// Position of INT_ENA field.
	GPIO_PIN_INT_ENA_Pos = 0xd
	// Bit mask of INT_ENA field.
	GPIO_PIN_INT_ENA_Msk = 0x3e000
	// Position of CONFIG field.
	GPIO_PIN_CONFIG_Pos = 0xb
	// Bit mask of CONFIG field.
	GPIO_PIN_CONFIG_Msk = 0x1800
	// Position of WAKEUP_ENABLE field.
	GPIO_PIN_WAKEUP_ENABLE_Pos = 0xa
	// Bit mask of WAKEUP_ENABLE field.
	GPIO_PIN_WAKEUP_ENABLE_Msk = 0x400
	// Bit WAKEUP_ENABLE.
	GPIO_PIN_WAKEUP_ENABLE = 0x400
	// Position of INT_TYPE field.
	GPIO_PIN_INT_TYPE_Pos = 0x7
	// Bit mask of INT_TYPE field.
	GPIO_PIN_INT_TYPE_Msk = 0x380
	// Position of PAD_DRIVER field.
	GPIO_PIN_PAD_DRIVER_Pos = 0x2
	// Bit mask of PAD_DRIVER field.
	GPIO_PIN_PAD_DRIVER_Msk = 0x4
	// Bit PAD_DRIVER.
	GPIO_PIN_PAD_DRIVER = 0x4

	// CALI_CONF: GPIO_cali_conf
	// Position of CALI_START field.
	GPIO_CALI_CONF_CALI_START_Pos = 0x1f
	// Bit mask of CALI_START field.
	GPIO_CALI_CONF_CALI_START_Msk = 0x80000000
	// Bit CALI_START.
	GPIO_CALI_CONF_CALI_START = 0x80000000
	// Position of CALI_RTC_MAX field.
	GPIO_CALI_CONF_CALI_RTC_MAX_Pos = 0x0
	// Bit mask of CALI_RTC_MAX field.
	GPIO_CALI_CONF_CALI_RTC_MAX_Msk = 0x3ff

	// CALI_DATA: GPIO_cali_data
	// Position of CALI_RDY_SYNC2 field.
	GPIO_CALI_DATA_CALI_RDY_SYNC2_Pos = 0x1f
	// Bit mask of CALI_RDY_SYNC2 field.
	GPIO_CALI_DATA_CALI_RDY_SYNC2_Msk = 0x80000000
	// Bit CALI_RDY_SYNC2.
	GPIO_CALI_DATA_CALI_RDY_SYNC2 = 0x80000000
	// Position of CALI_RDY_REAL field.
	GPIO_CALI_DATA_CALI_RDY_REAL_Pos = 0x1e
	// Bit mask of CALI_RDY_REAL field.
	GPIO_CALI_DATA_CALI_RDY_REAL_Msk = 0x40000000
	// Bit CALI_RDY_REAL.
	GPIO_CALI_DATA_CALI_RDY_REAL = 0x40000000
	// Position of CALI_VALUE_SYNC2 field.
	GPIO_CALI_DATA_CALI_VALUE_SYNC2_Pos = 0x0
	// Bit mask of CALI_VALUE_SYNC2 field.
	GPIO_CALI_DATA_CALI_VALUE_SYNC2_Msk = 0xfffff

	// FUNC0_IN_SEL_CFG: GPIO_FUNC0_IN_SEL_CFG
	// Position of SEL field.
	GPIO_FUNC_IN_SEL_CFG_SEL_Pos = 0x7
	// Bit mask of SEL field.
	GPIO_FUNC_IN_SEL_CFG_SEL_Msk = 0x80
	// Bit SEL.
	GPIO_FUNC_IN_SEL_CFG_SEL = 0x80
	// Position of IN_INV_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_INV_SEL_Pos = 0x6
	// Bit mask of IN_INV_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_INV_SEL_Msk = 0x40
	// Bit IN_INV_SEL.
	GPIO_FUNC_IN_SEL_CFG_IN_INV_SEL = 0x40
	// Position of IN_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_SEL_Pos = 0x0
	// Bit mask of IN_SEL field.
	GPIO_FUNC_IN_SEL_CFG_IN_SEL_Msk = 0x3f

	// FUNC0_OUT_SEL_CFG: GPIO_FUNC0_OUT_SEL_CFG
	// Position of OEN_INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_INV_SEL_Pos = 0xb
	// Bit mask of OEN_INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_INV_SEL_Msk = 0x800
	// Bit OEN_INV_SEL.
	GPIO_FUNC_OUT_SEL_CFG_OEN_INV_SEL = 0x800
	// Position of OEN_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_SEL_Pos = 0xa
	// Bit mask of OEN_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OEN_SEL_Msk = 0x400
	// Bit OEN_SEL.
	GPIO_FUNC_OUT_SEL_CFG_OEN_SEL = 0x400
	// Position of OUT_INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OUT_INV_SEL_Pos = 0x9
	// Bit mask of OUT_INV_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OUT_INV_SEL_Msk = 0x200
	// Bit OUT_INV_SEL.
	GPIO_FUNC_OUT_SEL_CFG_OUT_INV_SEL = 0x200
	// Position of OUT_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OUT_SEL_Pos = 0x0
	// Bit mask of OUT_SEL field.
	GPIO_FUNC_OUT_SEL_CFG_OUT_SEL_Msk = 0x1ff
)

// Constants for FRC_TIMER
const ()

// Constants for UHCI
const (
	// CONF0: UHCI_CONF0
	// Position of UART_RX_BRK_EOF_EN field.
	UHCI_CONF0_UART_RX_BRK_EOF_EN_Pos = 0x17
	// Bit mask of UART_RX_BRK_EOF_EN field.
	UHCI_CONF0_UART_RX_BRK_EOF_EN_Msk = 0x800000
	// Bit UART_RX_BRK_EOF_EN.
	UHCI_CONF0_UART_RX_BRK_EOF_EN = 0x800000
	// Position of CLK_EN field.
	UHCI_CONF0_CLK_EN_Pos = 0x16
	// Bit mask of CLK_EN field.
	UHCI_CONF0_CLK_EN_Msk = 0x400000
	// Bit CLK_EN.
	UHCI_CONF0_CLK_EN = 0x400000
	// Position of ENCODE_CRC_EN field.
	UHCI_CONF0_ENCODE_CRC_EN_Pos = 0x15
	// Bit mask of ENCODE_CRC_EN field.
	UHCI_CONF0_ENCODE_CRC_EN_Msk = 0x200000
	// Bit ENCODE_CRC_EN.
	UHCI_CONF0_ENCODE_CRC_EN = 0x200000
	// Position of LEN_EOF_EN field.
	UHCI_CONF0_LEN_EOF_EN_Pos = 0x14
	// Bit mask of LEN_EOF_EN field.
	UHCI_CONF0_LEN_EOF_EN_Msk = 0x100000
	// Bit LEN_EOF_EN.
	UHCI_CONF0_LEN_EOF_EN = 0x100000
	// Position of UART_IDLE_EOF_EN field.
	UHCI_CONF0_UART_IDLE_EOF_EN_Pos = 0x13
	// Bit mask of UART_IDLE_EOF_EN field.
	UHCI_CONF0_UART_IDLE_EOF_EN_Msk = 0x80000
	// Bit UART_IDLE_EOF_EN.
	UHCI_CONF0_UART_IDLE_EOF_EN = 0x80000
	// Position of CRC_REC_EN field.
	UHCI_CONF0_CRC_REC_EN_Pos = 0x12
	// Bit mask of CRC_REC_EN field.
	UHCI_CONF0_CRC_REC_EN_Msk = 0x40000
	// Bit CRC_REC_EN.
	UHCI_CONF0_CRC_REC_EN = 0x40000
	// Position of HEAD_EN field.
	UHCI_CONF0_HEAD_EN_Pos = 0x11
	// Bit mask of HEAD_EN field.
	UHCI_CONF0_HEAD_EN_Msk = 0x20000
	// Bit HEAD_EN.
	UHCI_CONF0_HEAD_EN = 0x20000
	// Position of SEPER_EN field.
	UHCI_CONF0_SEPER_EN_Pos = 0x10
	// Bit mask of SEPER_EN field.
	UHCI_CONF0_SEPER_EN_Msk = 0x10000
	// Bit SEPER_EN.
	UHCI_CONF0_SEPER_EN = 0x10000
	// Position of MEM_TRANS_EN field.
	UHCI_CONF0_MEM_TRANS_EN_Pos = 0xf
	// Bit mask of MEM_TRANS_EN field.
	UHCI_CONF0_MEM_TRANS_EN_Msk = 0x8000
	// Bit MEM_TRANS_EN.
	UHCI_CONF0_MEM_TRANS_EN = 0x8000
	// Position of OUT_DATA_BURST_EN field.
	UHCI_CONF0_OUT_DATA_BURST_EN_Pos = 0xe
	// Bit mask of OUT_DATA_BURST_EN field.
	UHCI_CONF0_OUT_DATA_BURST_EN_Msk = 0x4000
	// Bit OUT_DATA_BURST_EN.
	UHCI_CONF0_OUT_DATA_BURST_EN = 0x4000
	// Position of INDSCR_BURST_EN field.
	UHCI_CONF0_INDSCR_BURST_EN_Pos = 0xd
	// Bit mask of INDSCR_BURST_EN field.
	UHCI_CONF0_INDSCR_BURST_EN_Msk = 0x2000
	// Bit INDSCR_BURST_EN.
	UHCI_CONF0_INDSCR_BURST_EN = 0x2000
	// Position of OUTDSCR_BURST_EN field.
	UHCI_CONF0_OUTDSCR_BURST_EN_Pos = 0xc
	// Bit mask of OUTDSCR_BURST_EN field.
	UHCI_CONF0_OUTDSCR_BURST_EN_Msk = 0x1000
	// Bit OUTDSCR_BURST_EN.
	UHCI_CONF0_OUTDSCR_BURST_EN = 0x1000
	// Position of UART2_CE field.
	UHCI_CONF0_UART2_CE_Pos = 0xb
	// Bit mask of UART2_CE field.
	UHCI_CONF0_UART2_CE_Msk = 0x800
	// Bit UART2_CE.
	UHCI_CONF0_UART2_CE = 0x800
	// Position of UART1_CE field.
	UHCI_CONF0_UART1_CE_Pos = 0xa
	// Bit mask of UART1_CE field.
	UHCI_CONF0_UART1_CE_Msk = 0x400
	// Bit UART1_CE.
	UHCI_CONF0_UART1_CE = 0x400
	// Position of UART0_CE field.
	UHCI_CONF0_UART0_CE_Pos = 0x9
	// Bit mask of UART0_CE field.
	UHCI_CONF0_UART0_CE_Msk = 0x200
	// Bit UART0_CE.
	UHCI_CONF0_UART0_CE = 0x200
	// Position of OUT_EOF_MODE field.
	UHCI_CONF0_OUT_EOF_MODE_Pos = 0x8
	// Bit mask of OUT_EOF_MODE field.
	UHCI_CONF0_OUT_EOF_MODE_Msk = 0x100
	// Bit OUT_EOF_MODE.
	UHCI_CONF0_OUT_EOF_MODE = 0x100
	// Position of OUT_NO_RESTART_CLR field.
	UHCI_CONF0_OUT_NO_RESTART_CLR_Pos = 0x7
	// Bit mask of OUT_NO_RESTART_CLR field.
	UHCI_CONF0_OUT_NO_RESTART_CLR_Msk = 0x80
	// Bit OUT_NO_RESTART_CLR.
	UHCI_CONF0_OUT_NO_RESTART_CLR = 0x80
	// Position of OUT_AUTO_WRBACK field.
	UHCI_CONF0_OUT_AUTO_WRBACK_Pos = 0x6
	// Bit mask of OUT_AUTO_WRBACK field.
	UHCI_CONF0_OUT_AUTO_WRBACK_Msk = 0x40
	// Bit OUT_AUTO_WRBACK.
	UHCI_CONF0_OUT_AUTO_WRBACK = 0x40
	// Position of OUT_LOOP_TEST field.
	UHCI_CONF0_OUT_LOOP_TEST_Pos = 0x5
	// Bit mask of OUT_LOOP_TEST field.
	UHCI_CONF0_OUT_LOOP_TEST_Msk = 0x20
	// Bit OUT_LOOP_TEST.
	UHCI_CONF0_OUT_LOOP_TEST = 0x20
	// Position of IN_LOOP_TEST field.
	UHCI_CONF0_IN_LOOP_TEST_Pos = 0x4
	// Bit mask of IN_LOOP_TEST field.
	UHCI_CONF0_IN_LOOP_TEST_Msk = 0x10
	// Bit IN_LOOP_TEST.
	UHCI_CONF0_IN_LOOP_TEST = 0x10
	// Position of AHBM_RST field.
	UHCI_CONF0_AHBM_RST_Pos = 0x3
	// Bit mask of AHBM_RST field.
	UHCI_CONF0_AHBM_RST_Msk = 0x8
	// Bit AHBM_RST.
	UHCI_CONF0_AHBM_RST = 0x8
	// Position of AHBM_FIFO_RST field.
	UHCI_CONF0_AHBM_FIFO_RST_Pos = 0x2
	// Bit mask of AHBM_FIFO_RST field.
	UHCI_CONF0_AHBM_FIFO_RST_Msk = 0x4
	// Bit AHBM_FIFO_RST.
	UHCI_CONF0_AHBM_FIFO_RST = 0x4
	// Position of OUT_RST field.
	UHCI_CONF0_OUT_RST_Pos = 0x1
	// Bit mask of OUT_RST field.
	UHCI_CONF0_OUT_RST_Msk = 0x2
	// Bit OUT_RST.
	UHCI_CONF0_OUT_RST = 0x2
	// Position of IN_RST field.
	UHCI_CONF0_IN_RST_Pos = 0x0
	// Bit mask of IN_RST field.
	UHCI_CONF0_IN_RST_Msk = 0x1
	// Bit IN_RST.
	UHCI_CONF0_IN_RST = 0x1

	// INT_RAW: UHCI_INT_RAW
	// Position of DMA_INFIFO_FULL_WM_INT_RAW field.
	UHCI_INT_RAW_DMA_INFIFO_FULL_WM_INT_RAW_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_RAW field.
	UHCI_INT_RAW_DMA_INFIFO_FULL_WM_INT_RAW_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_RAW.
	UHCI_INT_RAW_DMA_INFIFO_FULL_WM_INT_RAW = 0x10000
	// Position of SEND_A_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_A_Q_INT_RAW_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_A_Q_INT_RAW_Msk = 0x8000
	// Bit SEND_A_Q_INT_RAW.
	UHCI_INT_RAW_SEND_A_Q_INT_RAW = 0x8000
	// Position of SEND_S_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_S_Q_INT_RAW_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_RAW field.
	UHCI_INT_RAW_SEND_S_Q_INT_RAW_Msk = 0x4000
	// Bit SEND_S_Q_INT_RAW.
	UHCI_INT_RAW_SEND_S_Q_INT_RAW = 0x4000
	// Position of OUT_TOTAL_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_RAW.
	UHCI_INT_RAW_OUT_TOTAL_EOF_INT_RAW = 0x2000
	// Position of OUTLINK_EOF_ERR_INT_RAW field.
	UHCI_INT_RAW_OUTLINK_EOF_ERR_INT_RAW_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_RAW field.
	UHCI_INT_RAW_OUTLINK_EOF_ERR_INT_RAW_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_RAW.
	UHCI_INT_RAW_OUTLINK_EOF_ERR_INT_RAW = 0x1000
	// Position of IN_DSCR_EMPTY_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_RAW.
	UHCI_INT_RAW_IN_DSCR_EMPTY_INT_RAW = 0x800
	// Position of OUT_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_OUT_DSCR_ERR_INT_RAW_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_OUT_DSCR_ERR_INT_RAW_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_RAW.
	UHCI_INT_RAW_OUT_DSCR_ERR_INT_RAW = 0x400
	// Position of IN_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_ERR_INT_RAW_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_RAW field.
	UHCI_INT_RAW_IN_DSCR_ERR_INT_RAW_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_RAW.
	UHCI_INT_RAW_IN_DSCR_ERR_INT_RAW = 0x200
	// Position of OUT_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_EOF_INT_RAW_Pos = 0x8
	// Bit mask of OUT_EOF_INT_RAW field.
	UHCI_INT_RAW_OUT_EOF_INT_RAW_Msk = 0x100
	// Bit OUT_EOF_INT_RAW.
	UHCI_INT_RAW_OUT_EOF_INT_RAW = 0x100
	// Position of OUT_DONE_INT_RAW field.
	UHCI_INT_RAW_OUT_DONE_INT_RAW_Pos = 0x7
	// Bit mask of OUT_DONE_INT_RAW field.
	UHCI_INT_RAW_OUT_DONE_INT_RAW_Msk = 0x80
	// Bit OUT_DONE_INT_RAW.
	UHCI_INT_RAW_OUT_DONE_INT_RAW = 0x80
	// Position of IN_ERR_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_ERR_EOF_INT_RAW_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_ERR_EOF_INT_RAW_Msk = 0x40
	// Bit IN_ERR_EOF_INT_RAW.
	UHCI_INT_RAW_IN_ERR_EOF_INT_RAW = 0x40
	// Position of IN_SUC_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_SUC_EOF_INT_RAW_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_RAW field.
	UHCI_INT_RAW_IN_SUC_EOF_INT_RAW_Msk = 0x20
	// Bit IN_SUC_EOF_INT_RAW.
	UHCI_INT_RAW_IN_SUC_EOF_INT_RAW = 0x20
	// Position of IN_DONE_INT_RAW field.
	UHCI_INT_RAW_IN_DONE_INT_RAW_Pos = 0x4
	// Bit mask of IN_DONE_INT_RAW field.
	UHCI_INT_RAW_IN_DONE_INT_RAW_Msk = 0x10
	// Bit IN_DONE_INT_RAW.
	UHCI_INT_RAW_IN_DONE_INT_RAW = 0x10
	// Position of TX_HUNG_INT_RAW field.
	UHCI_INT_RAW_TX_HUNG_INT_RAW_Pos = 0x3
	// Bit mask of TX_HUNG_INT_RAW field.
	UHCI_INT_RAW_TX_HUNG_INT_RAW_Msk = 0x8
	// Bit TX_HUNG_INT_RAW.
	UHCI_INT_RAW_TX_HUNG_INT_RAW = 0x8
	// Position of RX_HUNG_INT_RAW field.
	UHCI_INT_RAW_RX_HUNG_INT_RAW_Pos = 0x2
	// Bit mask of RX_HUNG_INT_RAW field.
	UHCI_INT_RAW_RX_HUNG_INT_RAW_Msk = 0x4
	// Bit RX_HUNG_INT_RAW.
	UHCI_INT_RAW_RX_HUNG_INT_RAW = 0x4
	// Position of TX_START_INT_RAW field.
	UHCI_INT_RAW_TX_START_INT_RAW_Pos = 0x1
	// Bit mask of TX_START_INT_RAW field.
	UHCI_INT_RAW_TX_START_INT_RAW_Msk = 0x2
	// Bit TX_START_INT_RAW.
	UHCI_INT_RAW_TX_START_INT_RAW = 0x2
	// Position of RX_START_INT_RAW field.
	UHCI_INT_RAW_RX_START_INT_RAW_Pos = 0x0
	// Bit mask of RX_START_INT_RAW field.
	UHCI_INT_RAW_RX_START_INT_RAW_Msk = 0x1
	// Bit RX_START_INT_RAW.
	UHCI_INT_RAW_RX_START_INT_RAW = 0x1

	// INT_ST: UHCI_INT_ST
	// Position of DMA_INFIFO_FULL_WM_INT_ST field.
	UHCI_INT_ST_DMA_INFIFO_FULL_WM_INT_ST_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_ST field.
	UHCI_INT_ST_DMA_INFIFO_FULL_WM_INT_ST_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_ST.
	UHCI_INT_ST_DMA_INFIFO_FULL_WM_INT_ST = 0x10000
	// Position of SEND_A_Q_INT_ST field.
	UHCI_INT_ST_SEND_A_Q_INT_ST_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_ST field.
	UHCI_INT_ST_SEND_A_Q_INT_ST_Msk = 0x8000
	// Bit SEND_A_Q_INT_ST.
	UHCI_INT_ST_SEND_A_Q_INT_ST = 0x8000
	// Position of SEND_S_Q_INT_ST field.
	UHCI_INT_ST_SEND_S_Q_INT_ST_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_ST field.
	UHCI_INT_ST_SEND_S_Q_INT_ST_Msk = 0x4000
	// Bit SEND_S_Q_INT_ST.
	UHCI_INT_ST_SEND_S_Q_INT_ST = 0x4000
	// Position of OUT_TOTAL_EOF_INT_ST field.
	UHCI_INT_ST_OUT_TOTAL_EOF_INT_ST_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_ST field.
	UHCI_INT_ST_OUT_TOTAL_EOF_INT_ST_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_ST.
	UHCI_INT_ST_OUT_TOTAL_EOF_INT_ST = 0x2000
	// Position of OUTLINK_EOF_ERR_INT_ST field.
	UHCI_INT_ST_OUTLINK_EOF_ERR_INT_ST_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_ST field.
	UHCI_INT_ST_OUTLINK_EOF_ERR_INT_ST_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_ST.
	UHCI_INT_ST_OUTLINK_EOF_ERR_INT_ST = 0x1000
	// Position of IN_DSCR_EMPTY_INT_ST field.
	UHCI_INT_ST_IN_DSCR_EMPTY_INT_ST_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_ST field.
	UHCI_INT_ST_IN_DSCR_EMPTY_INT_ST_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_ST.
	UHCI_INT_ST_IN_DSCR_EMPTY_INT_ST = 0x800
	// Position of OUT_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_OUT_DSCR_ERR_INT_ST_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_OUT_DSCR_ERR_INT_ST_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_ST.
	UHCI_INT_ST_OUT_DSCR_ERR_INT_ST = 0x400
	// Position of IN_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_IN_DSCR_ERR_INT_ST_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_ST field.
	UHCI_INT_ST_IN_DSCR_ERR_INT_ST_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_ST.
	UHCI_INT_ST_IN_DSCR_ERR_INT_ST = 0x200
	// Position of OUT_EOF_INT_ST field.
	UHCI_INT_ST_OUT_EOF_INT_ST_Pos = 0x8
	// Bit mask of OUT_EOF_INT_ST field.
	UHCI_INT_ST_OUT_EOF_INT_ST_Msk = 0x100
	// Bit OUT_EOF_INT_ST.
	UHCI_INT_ST_OUT_EOF_INT_ST = 0x100
	// Position of OUT_DONE_INT_ST field.
	UHCI_INT_ST_OUT_DONE_INT_ST_Pos = 0x7
	// Bit mask of OUT_DONE_INT_ST field.
	UHCI_INT_ST_OUT_DONE_INT_ST_Msk = 0x80
	// Bit OUT_DONE_INT_ST.
	UHCI_INT_ST_OUT_DONE_INT_ST = 0x80
	// Position of IN_ERR_EOF_INT_ST field.
	UHCI_INT_ST_IN_ERR_EOF_INT_ST_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_ST field.
	UHCI_INT_ST_IN_ERR_EOF_INT_ST_Msk = 0x40
	// Bit IN_ERR_EOF_INT_ST.
	UHCI_INT_ST_IN_ERR_EOF_INT_ST = 0x40
	// Position of IN_SUC_EOF_INT_ST field.
	UHCI_INT_ST_IN_SUC_EOF_INT_ST_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ST field.
	UHCI_INT_ST_IN_SUC_EOF_INT_ST_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ST.
	UHCI_INT_ST_IN_SUC_EOF_INT_ST = 0x20
	// Position of IN_DONE_INT_ST field.
	UHCI_INT_ST_IN_DONE_INT_ST_Pos = 0x4
	// Bit mask of IN_DONE_INT_ST field.
	UHCI_INT_ST_IN_DONE_INT_ST_Msk = 0x10
	// Bit IN_DONE_INT_ST.
	UHCI_INT_ST_IN_DONE_INT_ST = 0x10
	// Position of TX_HUNG_INT_ST field.
	UHCI_INT_ST_TX_HUNG_INT_ST_Pos = 0x3
	// Bit mask of TX_HUNG_INT_ST field.
	UHCI_INT_ST_TX_HUNG_INT_ST_Msk = 0x8
	// Bit TX_HUNG_INT_ST.
	UHCI_INT_ST_TX_HUNG_INT_ST = 0x8
	// Position of RX_HUNG_INT_ST field.
	UHCI_INT_ST_RX_HUNG_INT_ST_Pos = 0x2
	// Bit mask of RX_HUNG_INT_ST field.
	UHCI_INT_ST_RX_HUNG_INT_ST_Msk = 0x4
	// Bit RX_HUNG_INT_ST.
	UHCI_INT_ST_RX_HUNG_INT_ST = 0x4
	// Position of TX_START_INT_ST field.
	UHCI_INT_ST_TX_START_INT_ST_Pos = 0x1
	// Bit mask of TX_START_INT_ST field.
	UHCI_INT_ST_TX_START_INT_ST_Msk = 0x2
	// Bit TX_START_INT_ST.
	UHCI_INT_ST_TX_START_INT_ST = 0x2
	// Position of RX_START_INT_ST field.
	UHCI_INT_ST_RX_START_INT_ST_Pos = 0x0
	// Bit mask of RX_START_INT_ST field.
	UHCI_INT_ST_RX_START_INT_ST_Msk = 0x1
	// Bit RX_START_INT_ST.
	UHCI_INT_ST_RX_START_INT_ST = 0x1

	// INT_ENA: UHCI_INT_ENA
	// Position of DMA_INFIFO_FULL_WM_INT_ENA field.
	UHCI_INT_ENA_DMA_INFIFO_FULL_WM_INT_ENA_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_ENA field.
	UHCI_INT_ENA_DMA_INFIFO_FULL_WM_INT_ENA_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_ENA.
	UHCI_INT_ENA_DMA_INFIFO_FULL_WM_INT_ENA = 0x10000
	// Position of SEND_A_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_A_Q_INT_ENA_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_A_Q_INT_ENA_Msk = 0x8000
	// Bit SEND_A_Q_INT_ENA.
	UHCI_INT_ENA_SEND_A_Q_INT_ENA = 0x8000
	// Position of SEND_S_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_S_Q_INT_ENA_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_ENA field.
	UHCI_INT_ENA_SEND_S_Q_INT_ENA_Msk = 0x4000
	// Bit SEND_S_Q_INT_ENA.
	UHCI_INT_ENA_SEND_S_Q_INT_ENA = 0x4000
	// Position of OUT_TOTAL_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_ENA.
	UHCI_INT_ENA_OUT_TOTAL_EOF_INT_ENA = 0x2000
	// Position of OUTLINK_EOF_ERR_INT_ENA field.
	UHCI_INT_ENA_OUTLINK_EOF_ERR_INT_ENA_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_ENA field.
	UHCI_INT_ENA_OUTLINK_EOF_ERR_INT_ENA_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_ENA.
	UHCI_INT_ENA_OUTLINK_EOF_ERR_INT_ENA = 0x1000
	// Position of IN_DSCR_EMPTY_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_ENA.
	UHCI_INT_ENA_IN_DSCR_EMPTY_INT_ENA = 0x800
	// Position of OUT_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_OUT_DSCR_ERR_INT_ENA_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_OUT_DSCR_ERR_INT_ENA_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_ENA.
	UHCI_INT_ENA_OUT_DSCR_ERR_INT_ENA = 0x400
	// Position of IN_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_ERR_INT_ENA_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_ENA field.
	UHCI_INT_ENA_IN_DSCR_ERR_INT_ENA_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_ENA.
	UHCI_INT_ENA_IN_DSCR_ERR_INT_ENA = 0x200
	// Position of OUT_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_EOF_INT_ENA_Pos = 0x8
	// Bit mask of OUT_EOF_INT_ENA field.
	UHCI_INT_ENA_OUT_EOF_INT_ENA_Msk = 0x100
	// Bit OUT_EOF_INT_ENA.
	UHCI_INT_ENA_OUT_EOF_INT_ENA = 0x100
	// Position of OUT_DONE_INT_ENA field.
	UHCI_INT_ENA_OUT_DONE_INT_ENA_Pos = 0x7
	// Bit mask of OUT_DONE_INT_ENA field.
	UHCI_INT_ENA_OUT_DONE_INT_ENA_Msk = 0x80
	// Bit OUT_DONE_INT_ENA.
	UHCI_INT_ENA_OUT_DONE_INT_ENA = 0x80
	// Position of IN_ERR_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_ERR_EOF_INT_ENA_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_ERR_EOF_INT_ENA_Msk = 0x40
	// Bit IN_ERR_EOF_INT_ENA.
	UHCI_INT_ENA_IN_ERR_EOF_INT_ENA = 0x40
	// Position of IN_SUC_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_SUC_EOF_INT_ENA_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_ENA field.
	UHCI_INT_ENA_IN_SUC_EOF_INT_ENA_Msk = 0x20
	// Bit IN_SUC_EOF_INT_ENA.
	UHCI_INT_ENA_IN_SUC_EOF_INT_ENA = 0x20
	// Position of IN_DONE_INT_ENA field.
	UHCI_INT_ENA_IN_DONE_INT_ENA_Pos = 0x4
	// Bit mask of IN_DONE_INT_ENA field.
	UHCI_INT_ENA_IN_DONE_INT_ENA_Msk = 0x10
	// Bit IN_DONE_INT_ENA.
	UHCI_INT_ENA_IN_DONE_INT_ENA = 0x10
	// Position of TX_HUNG_INT_ENA field.
	UHCI_INT_ENA_TX_HUNG_INT_ENA_Pos = 0x3
	// Bit mask of TX_HUNG_INT_ENA field.
	UHCI_INT_ENA_TX_HUNG_INT_ENA_Msk = 0x8
	// Bit TX_HUNG_INT_ENA.
	UHCI_INT_ENA_TX_HUNG_INT_ENA = 0x8
	// Position of RX_HUNG_INT_ENA field.
	UHCI_INT_ENA_RX_HUNG_INT_ENA_Pos = 0x2
	// Bit mask of RX_HUNG_INT_ENA field.
	UHCI_INT_ENA_RX_HUNG_INT_ENA_Msk = 0x4
	// Bit RX_HUNG_INT_ENA.
	UHCI_INT_ENA_RX_HUNG_INT_ENA = 0x4
	// Position of TX_START_INT_ENA field.
	UHCI_INT_ENA_TX_START_INT_ENA_Pos = 0x1
	// Bit mask of TX_START_INT_ENA field.
	UHCI_INT_ENA_TX_START_INT_ENA_Msk = 0x2
	// Bit TX_START_INT_ENA.
	UHCI_INT_ENA_TX_START_INT_ENA = 0x2
	// Position of RX_START_INT_ENA field.
	UHCI_INT_ENA_RX_START_INT_ENA_Pos = 0x0
	// Bit mask of RX_START_INT_ENA field.
	UHCI_INT_ENA_RX_START_INT_ENA_Msk = 0x1
	// Bit RX_START_INT_ENA.
	UHCI_INT_ENA_RX_START_INT_ENA = 0x1

	// INT_CLR: UHCI_INT_CLR
	// Position of DMA_INFIFO_FULL_WM_INT_CLR field.
	UHCI_INT_CLR_DMA_INFIFO_FULL_WM_INT_CLR_Pos = 0x10
	// Bit mask of DMA_INFIFO_FULL_WM_INT_CLR field.
	UHCI_INT_CLR_DMA_INFIFO_FULL_WM_INT_CLR_Msk = 0x10000
	// Bit DMA_INFIFO_FULL_WM_INT_CLR.
	UHCI_INT_CLR_DMA_INFIFO_FULL_WM_INT_CLR = 0x10000
	// Position of SEND_A_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_A_Q_INT_CLR_Pos = 0xf
	// Bit mask of SEND_A_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_A_Q_INT_CLR_Msk = 0x8000
	// Bit SEND_A_Q_INT_CLR.
	UHCI_INT_CLR_SEND_A_Q_INT_CLR = 0x8000
	// Position of SEND_S_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_S_Q_INT_CLR_Pos = 0xe
	// Bit mask of SEND_S_Q_INT_CLR field.
	UHCI_INT_CLR_SEND_S_Q_INT_CLR_Msk = 0x4000
	// Bit SEND_S_Q_INT_CLR.
	UHCI_INT_CLR_SEND_S_Q_INT_CLR = 0x4000
	// Position of OUT_TOTAL_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Pos = 0xd
	// Bit mask of OUT_TOTAL_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Msk = 0x2000
	// Bit OUT_TOTAL_EOF_INT_CLR.
	UHCI_INT_CLR_OUT_TOTAL_EOF_INT_CLR = 0x2000
	// Position of OUTLINK_EOF_ERR_INT_CLR field.
	UHCI_INT_CLR_OUTLINK_EOF_ERR_INT_CLR_Pos = 0xc
	// Bit mask of OUTLINK_EOF_ERR_INT_CLR field.
	UHCI_INT_CLR_OUTLINK_EOF_ERR_INT_CLR_Msk = 0x1000
	// Bit OUTLINK_EOF_ERR_INT_CLR.
	UHCI_INT_CLR_OUTLINK_EOF_ERR_INT_CLR = 0x1000
	// Position of IN_DSCR_EMPTY_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Pos = 0xb
	// Bit mask of IN_DSCR_EMPTY_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Msk = 0x800
	// Bit IN_DSCR_EMPTY_INT_CLR.
	UHCI_INT_CLR_IN_DSCR_EMPTY_INT_CLR = 0x800
	// Position of OUT_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_OUT_DSCR_ERR_INT_CLR_Pos = 0xa
	// Bit mask of OUT_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_OUT_DSCR_ERR_INT_CLR_Msk = 0x400
	// Bit OUT_DSCR_ERR_INT_CLR.
	UHCI_INT_CLR_OUT_DSCR_ERR_INT_CLR = 0x400
	// Position of IN_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_ERR_INT_CLR_Pos = 0x9
	// Bit mask of IN_DSCR_ERR_INT_CLR field.
	UHCI_INT_CLR_IN_DSCR_ERR_INT_CLR_Msk = 0x200
	// Bit IN_DSCR_ERR_INT_CLR.
	UHCI_INT_CLR_IN_DSCR_ERR_INT_CLR = 0x200
	// Position of OUT_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_EOF_INT_CLR_Pos = 0x8
	// Bit mask of OUT_EOF_INT_CLR field.
	UHCI_INT_CLR_OUT_EOF_INT_CLR_Msk = 0x100
	// Bit OUT_EOF_INT_CLR.
	UHCI_INT_CLR_OUT_EOF_INT_CLR = 0x100
	// Position of OUT_DONE_INT_CLR field.
	UHCI_INT_CLR_OUT_DONE_INT_CLR_Pos = 0x7
	// Bit mask of OUT_DONE_INT_CLR field.
	UHCI_INT_CLR_OUT_DONE_INT_CLR_Msk = 0x80
	// Bit OUT_DONE_INT_CLR.
	UHCI_INT_CLR_OUT_DONE_INT_CLR = 0x80
	// Position of IN_ERR_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_ERR_EOF_INT_CLR_Pos = 0x6
	// Bit mask of IN_ERR_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_ERR_EOF_INT_CLR_Msk = 0x40
	// Bit IN_ERR_EOF_INT_CLR.
	UHCI_INT_CLR_IN_ERR_EOF_INT_CLR = 0x40
	// Position of IN_SUC_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_SUC_EOF_INT_CLR_Pos = 0x5
	// Bit mask of IN_SUC_EOF_INT_CLR field.
	UHCI_INT_CLR_IN_SUC_EOF_INT_CLR_Msk = 0x20
	// Bit IN_SUC_EOF_INT_CLR.
	UHCI_INT_CLR_IN_SUC_EOF_INT_CLR = 0x20
	// Position of IN_DONE_INT_CLR field.
	UHCI_INT_CLR_IN_DONE_INT_CLR_Pos = 0x4
	// Bit mask of IN_DONE_INT_CLR field.
	UHCI_INT_CLR_IN_DONE_INT_CLR_Msk = 0x10
	// Bit IN_DONE_INT_CLR.
	UHCI_INT_CLR_IN_DONE_INT_CLR = 0x10
	// Position of TX_HUNG_INT_CLR field.
	UHCI_INT_CLR_TX_HUNG_INT_CLR_Pos = 0x3
	// Bit mask of TX_HUNG_INT_CLR field.
	UHCI_INT_CLR_TX_HUNG_INT_CLR_Msk = 0x8
	// Bit TX_HUNG_INT_CLR.
	UHCI_INT_CLR_TX_HUNG_INT_CLR = 0x8
	// Position of RX_HUNG_INT_CLR field.
	UHCI_INT_CLR_RX_HUNG_INT_CLR_Pos = 0x2
	// Bit mask of RX_HUNG_INT_CLR field.
	UHCI_INT_CLR_RX_HUNG_INT_CLR_Msk = 0x4
	// Bit RX_HUNG_INT_CLR.
	UHCI_INT_CLR_RX_HUNG_INT_CLR = 0x4
	// Position of TX_START_INT_CLR field.
	UHCI_INT_CLR_TX_START_INT_CLR_Pos = 0x1
	// Bit mask of TX_START_INT_CLR field.
	UHCI_INT_CLR_TX_START_INT_CLR_Msk = 0x2
	// Bit TX_START_INT_CLR.
	UHCI_INT_CLR_TX_START_INT_CLR = 0x2
	// Position of RX_START_INT_CLR field.
	UHCI_INT_CLR_RX_START_INT_CLR_Pos = 0x0
	// Bit mask of RX_START_INT_CLR field.
	UHCI_INT_CLR_RX_START_INT_CLR_Msk = 0x1
	// Bit RX_START_INT_CLR.
	UHCI_INT_CLR_RX_START_INT_CLR = 0x1

	// DMA_OUT_STATUS: UHCI_DMA_OUT_STATUS
	// Position of OUT_EMPTY field.
	UHCI_DMA_OUT_STATUS_OUT_EMPTY_Pos = 0x1
	// Bit mask of OUT_EMPTY field.
	UHCI_DMA_OUT_STATUS_OUT_EMPTY_Msk = 0x2
	// Bit OUT_EMPTY.
	UHCI_DMA_OUT_STATUS_OUT_EMPTY = 0x2
	// Position of OUT_FULL field.
	UHCI_DMA_OUT_STATUS_OUT_FULL_Pos = 0x0
	// Bit mask of OUT_FULL field.
	UHCI_DMA_OUT_STATUS_OUT_FULL_Msk = 0x1
	// Bit OUT_FULL.
	UHCI_DMA_OUT_STATUS_OUT_FULL = 0x1

	// DMA_OUT_PUSH: UHCI_DMA_OUT_PUSH
	// Position of OUTFIFO_PUSH field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_PUSH_Pos = 0x10
	// Bit mask of OUTFIFO_PUSH field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_PUSH_Msk = 0x10000
	// Bit OUTFIFO_PUSH.
	UHCI_DMA_OUT_PUSH_OUTFIFO_PUSH = 0x10000
	// Position of OUTFIFO_WDATA field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_WDATA_Pos = 0x0
	// Bit mask of OUTFIFO_WDATA field.
	UHCI_DMA_OUT_PUSH_OUTFIFO_WDATA_Msk = 0x1ff

	// DMA_IN_STATUS: UHCI_DMA_IN_STATUS
	// Position of RX_ERR_CAUSE field.
	UHCI_DMA_IN_STATUS_RX_ERR_CAUSE_Pos = 0x4
	// Bit mask of RX_ERR_CAUSE field.
	UHCI_DMA_IN_STATUS_RX_ERR_CAUSE_Msk = 0x70
	// Position of IN_EMPTY field.
	UHCI_DMA_IN_STATUS_IN_EMPTY_Pos = 0x1
	// Bit mask of IN_EMPTY field.
	UHCI_DMA_IN_STATUS_IN_EMPTY_Msk = 0x2
	// Bit IN_EMPTY.
	UHCI_DMA_IN_STATUS_IN_EMPTY = 0x2
	// Position of IN_FULL field.
	UHCI_DMA_IN_STATUS_IN_FULL_Pos = 0x0
	// Bit mask of IN_FULL field.
	UHCI_DMA_IN_STATUS_IN_FULL_Msk = 0x1
	// Bit IN_FULL.
	UHCI_DMA_IN_STATUS_IN_FULL = 0x1

	// DMA_IN_POP: UHCI_DMA_IN_POP
	// Position of INFIFO_POP field.
	UHCI_DMA_IN_POP_INFIFO_POP_Pos = 0x10
	// Bit mask of INFIFO_POP field.
	UHCI_DMA_IN_POP_INFIFO_POP_Msk = 0x10000
	// Bit INFIFO_POP.
	UHCI_DMA_IN_POP_INFIFO_POP = 0x10000
	// Position of INFIFO_RDATA field.
	UHCI_DMA_IN_POP_INFIFO_RDATA_Pos = 0x0
	// Bit mask of INFIFO_RDATA field.
	UHCI_DMA_IN_POP_INFIFO_RDATA_Msk = 0xfff

	// DMA_OUT_LINK: UHCI_DMA_OUT_LINK
	// Position of OUTLINK_PARK field.
	UHCI_DMA_OUT_LINK_OUTLINK_PARK_Pos = 0x1f
	// Bit mask of OUTLINK_PARK field.
	UHCI_DMA_OUT_LINK_OUTLINK_PARK_Msk = 0x80000000
	// Bit OUTLINK_PARK.
	UHCI_DMA_OUT_LINK_OUTLINK_PARK = 0x80000000
	// Position of OUTLINK_RESTART field.
	UHCI_DMA_OUT_LINK_OUTLINK_RESTART_Pos = 0x1e
	// Bit mask of OUTLINK_RESTART field.
	UHCI_DMA_OUT_LINK_OUTLINK_RESTART_Msk = 0x40000000
	// Bit OUTLINK_RESTART.
	UHCI_DMA_OUT_LINK_OUTLINK_RESTART = 0x40000000
	// Position of OUTLINK_START field.
	UHCI_DMA_OUT_LINK_OUTLINK_START_Pos = 0x1d
	// Bit mask of OUTLINK_START field.
	UHCI_DMA_OUT_LINK_OUTLINK_START_Msk = 0x20000000
	// Bit OUTLINK_START.
	UHCI_DMA_OUT_LINK_OUTLINK_START = 0x20000000
	// Position of OUTLINK_STOP field.
	UHCI_DMA_OUT_LINK_OUTLINK_STOP_Pos = 0x1c
	// Bit mask of OUTLINK_STOP field.
	UHCI_DMA_OUT_LINK_OUTLINK_STOP_Msk = 0x10000000
	// Bit OUTLINK_STOP.
	UHCI_DMA_OUT_LINK_OUTLINK_STOP = 0x10000000
	// Position of OUTLINK_ADDR field.
	UHCI_DMA_OUT_LINK_OUTLINK_ADDR_Pos = 0x0
	// Bit mask of OUTLINK_ADDR field.
	UHCI_DMA_OUT_LINK_OUTLINK_ADDR_Msk = 0xfffff

	// DMA_IN_LINK: UHCI_DMA_IN_LINK
	// Position of INLINK_PARK field.
	UHCI_DMA_IN_LINK_INLINK_PARK_Pos = 0x1f
	// Bit mask of INLINK_PARK field.
	UHCI_DMA_IN_LINK_INLINK_PARK_Msk = 0x80000000
	// Bit INLINK_PARK.
	UHCI_DMA_IN_LINK_INLINK_PARK = 0x80000000
	// Position of INLINK_RESTART field.
	UHCI_DMA_IN_LINK_INLINK_RESTART_Pos = 0x1e
	// Bit mask of INLINK_RESTART field.
	UHCI_DMA_IN_LINK_INLINK_RESTART_Msk = 0x40000000
	// Bit INLINK_RESTART.
	UHCI_DMA_IN_LINK_INLINK_RESTART = 0x40000000
	// Position of INLINK_START field.
	UHCI_DMA_IN_LINK_INLINK_START_Pos = 0x1d
	// Bit mask of INLINK_START field.
	UHCI_DMA_IN_LINK_INLINK_START_Msk = 0x20000000
	// Bit INLINK_START.
	UHCI_DMA_IN_LINK_INLINK_START = 0x20000000
	// Position of INLINK_STOP field.
	UHCI_DMA_IN_LINK_INLINK_STOP_Pos = 0x1c
	// Bit mask of INLINK_STOP field.
	UHCI_DMA_IN_LINK_INLINK_STOP_Msk = 0x10000000
	// Bit INLINK_STOP.
	UHCI_DMA_IN_LINK_INLINK_STOP = 0x10000000
	// Position of INLINK_AUTO_RET field.
	UHCI_DMA_IN_LINK_INLINK_AUTO_RET_Pos = 0x14
	// Bit mask of INLINK_AUTO_RET field.
	UHCI_DMA_IN_LINK_INLINK_AUTO_RET_Msk = 0x100000
	// Bit INLINK_AUTO_RET.
	UHCI_DMA_IN_LINK_INLINK_AUTO_RET = 0x100000
	// Position of INLINK_ADDR field.
	UHCI_DMA_IN_LINK_INLINK_ADDR_Pos = 0x0
	// Bit mask of INLINK_ADDR field.
	UHCI_DMA_IN_LINK_INLINK_ADDR_Msk = 0xfffff

	// CONF1: UHCI_CONF1
	// Position of DMA_INFIFO_FULL_THRS field.
	UHCI_CONF1_DMA_INFIFO_FULL_THRS_Pos = 0x9
	// Bit mask of DMA_INFIFO_FULL_THRS field.
	UHCI_CONF1_DMA_INFIFO_FULL_THRS_Msk = 0x1ffe00
	// Position of SW_START field.
	UHCI_CONF1_SW_START_Pos = 0x8
	// Bit mask of SW_START field.
	UHCI_CONF1_SW_START_Msk = 0x100
	// Bit SW_START.
	UHCI_CONF1_SW_START = 0x100
	// Position of WAIT_SW_START field.
	UHCI_CONF1_WAIT_SW_START_Pos = 0x7
	// Bit mask of WAIT_SW_START field.
	UHCI_CONF1_WAIT_SW_START_Msk = 0x80
	// Bit WAIT_SW_START.
	UHCI_CONF1_WAIT_SW_START = 0x80
	// Position of CHECK_OWNER field.
	UHCI_CONF1_CHECK_OWNER_Pos = 0x6
	// Bit mask of CHECK_OWNER field.
	UHCI_CONF1_CHECK_OWNER_Msk = 0x40
	// Bit CHECK_OWNER.
	UHCI_CONF1_CHECK_OWNER = 0x40
	// Position of TX_ACK_NUM_RE field.
	UHCI_CONF1_TX_ACK_NUM_RE_Pos = 0x5
	// Bit mask of TX_ACK_NUM_RE field.
	UHCI_CONF1_TX_ACK_NUM_RE_Msk = 0x20
	// Bit TX_ACK_NUM_RE.
	UHCI_CONF1_TX_ACK_NUM_RE = 0x20
	// Position of TX_CHECK_SUM_RE field.
	UHCI_CONF1_TX_CHECK_SUM_RE_Pos = 0x4
	// Bit mask of TX_CHECK_SUM_RE field.
	UHCI_CONF1_TX_CHECK_SUM_RE_Msk = 0x10
	// Bit TX_CHECK_SUM_RE.
	UHCI_CONF1_TX_CHECK_SUM_RE = 0x10
	// Position of SAVE_HEAD field.
	UHCI_CONF1_SAVE_HEAD_Pos = 0x3
	// Bit mask of SAVE_HEAD field.
	UHCI_CONF1_SAVE_HEAD_Msk = 0x8
	// Bit SAVE_HEAD.
	UHCI_CONF1_SAVE_HEAD = 0x8
	// Position of CRC_DISABLE field.
	UHCI_CONF1_CRC_DISABLE_Pos = 0x2
	// Bit mask of CRC_DISABLE field.
	UHCI_CONF1_CRC_DISABLE_Msk = 0x4
	// Bit CRC_DISABLE.
	UHCI_CONF1_CRC_DISABLE = 0x4
	// Position of CHECK_SEQ_EN field.
	UHCI_CONF1_CHECK_SEQ_EN_Pos = 0x1
	// Bit mask of CHECK_SEQ_EN field.
	UHCI_CONF1_CHECK_SEQ_EN_Msk = 0x2
	// Bit CHECK_SEQ_EN.
	UHCI_CONF1_CHECK_SEQ_EN = 0x2
	// Position of CHECK_SUM_EN field.
	UHCI_CONF1_CHECK_SUM_EN_Pos = 0x0
	// Bit mask of CHECK_SUM_EN field.
	UHCI_CONF1_CHECK_SUM_EN_Msk = 0x1
	// Bit CHECK_SUM_EN.
	UHCI_CONF1_CHECK_SUM_EN = 0x1

	// STATE0: UHCI_STATE0
	// Position of STATE0 field.
	UHCI_STATE0_STATE0_Pos = 0x0
	// Bit mask of STATE0 field.
	UHCI_STATE0_STATE0_Msk = 0xffffffff

	// STATE1: UHCI_STATE1
	// Position of STATE1 field.
	UHCI_STATE1_STATE1_Pos = 0x0
	// Bit mask of STATE1 field.
	UHCI_STATE1_STATE1_Msk = 0xffffffff

	// DMA_OUT_EOF_DES_ADDR: UHCI_DMA_OUT_EOF_DES_ADDR
	// Position of OUT_EOF_DES_ADDR field.
	UHCI_DMA_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_DES_ADDR field.
	UHCI_DMA_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Msk = 0xffffffff

	// DMA_IN_SUC_EOF_DES_ADDR: UHCI_DMA_IN_SUC_EOF_DES_ADDR
	// Position of IN_SUC_EOF_DES_ADDR field.
	UHCI_DMA_IN_SUC_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of IN_SUC_EOF_DES_ADDR field.
	UHCI_DMA_IN_SUC_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// DMA_IN_ERR_EOF_DES_ADDR: UHCI_DMA_IN_ERR_EOF_DES_ADDR
	// Position of IN_ERR_EOF_DES_ADDR field.
	UHCI_DMA_IN_ERR_EOF_DES_ADDR_IN_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of IN_ERR_EOF_DES_ADDR field.
	UHCI_DMA_IN_ERR_EOF_DES_ADDR_IN_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// DMA_OUT_EOF_BFR_DES_ADDR: UHCI_DMA_OUT_EOF_BFR_DES_ADDR
	// Position of OUT_EOF_BFR_DES_ADDR field.
	UHCI_DMA_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_BFR_DES_ADDR field.
	UHCI_DMA_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// AHB_TEST: UHCI_AHB_TEST
	// Position of AHB_TESTADDR field.
	UHCI_AHB_TEST_AHB_TESTADDR_Pos = 0x4
	// Bit mask of AHB_TESTADDR field.
	UHCI_AHB_TEST_AHB_TESTADDR_Msk = 0x30
	// Position of AHB_TESTMODE field.
	UHCI_AHB_TEST_AHB_TESTMODE_Pos = 0x0
	// Bit mask of AHB_TESTMODE field.
	UHCI_AHB_TEST_AHB_TESTMODE_Msk = 0x7

	// DMA_IN_DSCR: UHCI_DMA_IN_DSCR
	// Position of INLINK_DSCR field.
	UHCI_DMA_IN_DSCR_INLINK_DSCR_Pos = 0x0
	// Bit mask of INLINK_DSCR field.
	UHCI_DMA_IN_DSCR_INLINK_DSCR_Msk = 0xffffffff

	// DMA_IN_DSCR_BF0: UHCI_DMA_IN_DSCR_BF0
	// Position of INLINK_DSCR_BF0 field.
	UHCI_DMA_IN_DSCR_BF0_INLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF0 field.
	UHCI_DMA_IN_DSCR_BF0_INLINK_DSCR_BF0_Msk = 0xffffffff

	// DMA_IN_DSCR_BF1: UHCI_DMA_IN_DSCR_BF1
	// Position of INLINK_DSCR_BF1 field.
	UHCI_DMA_IN_DSCR_BF1_INLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF1 field.
	UHCI_DMA_IN_DSCR_BF1_INLINK_DSCR_BF1_Msk = 0xffffffff

	// DMA_OUT_DSCR: UHCI_DMA_OUT_DSCR
	// Position of OUTLINK_DSCR field.
	UHCI_DMA_OUT_DSCR_OUTLINK_DSCR_Pos = 0x0
	// Bit mask of OUTLINK_DSCR field.
	UHCI_DMA_OUT_DSCR_OUTLINK_DSCR_Msk = 0xffffffff

	// DMA_OUT_DSCR_BF0: UHCI_DMA_OUT_DSCR_BF0
	// Position of OUTLINK_DSCR_BF0 field.
	UHCI_DMA_OUT_DSCR_BF0_OUTLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF0 field.
	UHCI_DMA_OUT_DSCR_BF0_OUTLINK_DSCR_BF0_Msk = 0xffffffff

	// DMA_OUT_DSCR_BF1: UHCI_DMA_OUT_DSCR_BF1
	// Position of OUTLINK_DSCR_BF1 field.
	UHCI_DMA_OUT_DSCR_BF1_OUTLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF1 field.
	UHCI_DMA_OUT_DSCR_BF1_OUTLINK_DSCR_BF1_Msk = 0xffffffff

	// ESCAPE_CONF: UHCI_ESCAPE_CONF
	// Position of RX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_13_ESC_EN_Pos = 0x7
	// Bit mask of RX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_13_ESC_EN_Msk = 0x80
	// Bit RX_13_ESC_EN.
	UHCI_ESCAPE_CONF_RX_13_ESC_EN = 0x80
	// Position of RX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_11_ESC_EN_Pos = 0x6
	// Bit mask of RX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_11_ESC_EN_Msk = 0x40
	// Bit RX_11_ESC_EN.
	UHCI_ESCAPE_CONF_RX_11_ESC_EN = 0x40
	// Position of RX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_DB_ESC_EN_Pos = 0x5
	// Bit mask of RX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_DB_ESC_EN_Msk = 0x20
	// Bit RX_DB_ESC_EN.
	UHCI_ESCAPE_CONF_RX_DB_ESC_EN = 0x20
	// Position of RX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_C0_ESC_EN_Pos = 0x4
	// Bit mask of RX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_RX_C0_ESC_EN_Msk = 0x10
	// Bit RX_C0_ESC_EN.
	UHCI_ESCAPE_CONF_RX_C0_ESC_EN = 0x10
	// Position of TX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_13_ESC_EN_Pos = 0x3
	// Bit mask of TX_13_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_13_ESC_EN_Msk = 0x8
	// Bit TX_13_ESC_EN.
	UHCI_ESCAPE_CONF_TX_13_ESC_EN = 0x8
	// Position of TX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_11_ESC_EN_Pos = 0x2
	// Bit mask of TX_11_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_11_ESC_EN_Msk = 0x4
	// Bit TX_11_ESC_EN.
	UHCI_ESCAPE_CONF_TX_11_ESC_EN = 0x4
	// Position of TX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_DB_ESC_EN_Pos = 0x1
	// Bit mask of TX_DB_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_DB_ESC_EN_Msk = 0x2
	// Bit TX_DB_ESC_EN.
	UHCI_ESCAPE_CONF_TX_DB_ESC_EN = 0x2
	// Position of TX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_C0_ESC_EN_Pos = 0x0
	// Bit mask of TX_C0_ESC_EN field.
	UHCI_ESCAPE_CONF_TX_C0_ESC_EN_Msk = 0x1
	// Bit TX_C0_ESC_EN.
	UHCI_ESCAPE_CONF_TX_C0_ESC_EN = 0x1

	// HUNG_CONF: UHCI_HUNG_CONF
	// Position of RXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_ENA_Pos = 0x17
	// Bit mask of RXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_ENA_Msk = 0x800000
	// Bit RXFIFO_TIMEOUT_ENA.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_ENA = 0x800000
	// Position of RXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_SHIFT_Pos = 0x14
	// Bit mask of RXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_SHIFT_Msk = 0x700000
	// Position of RXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_Pos = 0xc
	// Bit mask of RXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_RXFIFO_TIMEOUT_Msk = 0xff000
	// Position of TXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_ENA_Pos = 0xb
	// Bit mask of TXFIFO_TIMEOUT_ENA field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_ENA_Msk = 0x800
	// Bit TXFIFO_TIMEOUT_ENA.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_ENA = 0x800
	// Position of TXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_SHIFT_Pos = 0x8
	// Bit mask of TXFIFO_TIMEOUT_SHIFT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_SHIFT_Msk = 0x700
	// Position of TXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_Pos = 0x0
	// Bit mask of TXFIFO_TIMEOUT field.
	UHCI_HUNG_CONF_TXFIFO_TIMEOUT_Msk = 0xff

	// RX_HEAD: UHCI_RX_HEAD
	// Position of RX_HEAD field.
	UHCI_RX_HEAD_RX_HEAD_Pos = 0x0
	// Bit mask of RX_HEAD field.
	UHCI_RX_HEAD_RX_HEAD_Msk = 0xffffffff

	// QUICK_SENT: UHCI_QUICK_SENT
	// Position of ALWAYS_SEND_EN field.
	UHCI_QUICK_SENT_ALWAYS_SEND_EN_Pos = 0x7
	// Bit mask of ALWAYS_SEND_EN field.
	UHCI_QUICK_SENT_ALWAYS_SEND_EN_Msk = 0x80
	// Bit ALWAYS_SEND_EN.
	UHCI_QUICK_SENT_ALWAYS_SEND_EN = 0x80
	// Position of ALWAYS_SEND_NUM field.
	UHCI_QUICK_SENT_ALWAYS_SEND_NUM_Pos = 0x4
	// Bit mask of ALWAYS_SEND_NUM field.
	UHCI_QUICK_SENT_ALWAYS_SEND_NUM_Msk = 0x70
	// Position of SINGLE_SEND_EN field.
	UHCI_QUICK_SENT_SINGLE_SEND_EN_Pos = 0x3
	// Bit mask of SINGLE_SEND_EN field.
	UHCI_QUICK_SENT_SINGLE_SEND_EN_Msk = 0x8
	// Bit SINGLE_SEND_EN.
	UHCI_QUICK_SENT_SINGLE_SEND_EN = 0x8
	// Position of SINGLE_SEND_NUM field.
	UHCI_QUICK_SENT_SINGLE_SEND_NUM_Pos = 0x0
	// Bit mask of SINGLE_SEND_NUM field.
	UHCI_QUICK_SENT_SINGLE_SEND_NUM_Msk = 0x7

	// Q0_WORD0: UHCI_Q0_WORD0
	// Position of SEND_Q0_WORD0 field.
	UHCI_Q0_WORD0_SEND_Q0_WORD0_Pos = 0x0
	// Bit mask of SEND_Q0_WORD0 field.
	UHCI_Q0_WORD0_SEND_Q0_WORD0_Msk = 0xffffffff

	// Q0_WORD1: UHCI_Q0_WORD1
	// Position of SEND_Q0_WORD1 field.
	UHCI_Q0_WORD1_SEND_Q0_WORD1_Pos = 0x0
	// Bit mask of SEND_Q0_WORD1 field.
	UHCI_Q0_WORD1_SEND_Q0_WORD1_Msk = 0xffffffff

	// Q1_WORD0: UHCI_Q1_WORD0
	// Position of SEND_Q1_WORD0 field.
	UHCI_Q1_WORD0_SEND_Q1_WORD0_Pos = 0x0
	// Bit mask of SEND_Q1_WORD0 field.
	UHCI_Q1_WORD0_SEND_Q1_WORD0_Msk = 0xffffffff

	// Q1_WORD1: UHCI_Q1_WORD1
	// Position of SEND_Q1_WORD1 field.
	UHCI_Q1_WORD1_SEND_Q1_WORD1_Pos = 0x0
	// Bit mask of SEND_Q1_WORD1 field.
	UHCI_Q1_WORD1_SEND_Q1_WORD1_Msk = 0xffffffff

	// Q2_WORD0: UHCI_Q2_WORD0
	// Position of SEND_Q2_WORD0 field.
	UHCI_Q2_WORD0_SEND_Q2_WORD0_Pos = 0x0
	// Bit mask of SEND_Q2_WORD0 field.
	UHCI_Q2_WORD0_SEND_Q2_WORD0_Msk = 0xffffffff

	// Q2_WORD1: UHCI_Q2_WORD1
	// Position of SEND_Q2_WORD1 field.
	UHCI_Q2_WORD1_SEND_Q2_WORD1_Pos = 0x0
	// Bit mask of SEND_Q2_WORD1 field.
	UHCI_Q2_WORD1_SEND_Q2_WORD1_Msk = 0xffffffff

	// Q3_WORD0: UHCI_Q3_WORD0
	// Position of SEND_Q3_WORD0 field.
	UHCI_Q3_WORD0_SEND_Q3_WORD0_Pos = 0x0
	// Bit mask of SEND_Q3_WORD0 field.
	UHCI_Q3_WORD0_SEND_Q3_WORD0_Msk = 0xffffffff

	// Q3_WORD1: UHCI_Q3_WORD1
	// Position of SEND_Q3_WORD1 field.
	UHCI_Q3_WORD1_SEND_Q3_WORD1_Pos = 0x0
	// Bit mask of SEND_Q3_WORD1 field.
	UHCI_Q3_WORD1_SEND_Q3_WORD1_Msk = 0xffffffff

	// Q4_WORD0: UHCI_Q4_WORD0
	// Position of SEND_Q4_WORD0 field.
	UHCI_Q4_WORD0_SEND_Q4_WORD0_Pos = 0x0
	// Bit mask of SEND_Q4_WORD0 field.
	UHCI_Q4_WORD0_SEND_Q4_WORD0_Msk = 0xffffffff

	// Q4_WORD1: UHCI_Q4_WORD1
	// Position of SEND_Q4_WORD1 field.
	UHCI_Q4_WORD1_SEND_Q4_WORD1_Pos = 0x0
	// Bit mask of SEND_Q4_WORD1 field.
	UHCI_Q4_WORD1_SEND_Q4_WORD1_Msk = 0xffffffff

	// Q5_WORD0: UHCI_Q5_WORD0
	// Position of SEND_Q5_WORD0 field.
	UHCI_Q5_WORD0_SEND_Q5_WORD0_Pos = 0x0
	// Bit mask of SEND_Q5_WORD0 field.
	UHCI_Q5_WORD0_SEND_Q5_WORD0_Msk = 0xffffffff

	// Q5_WORD1: UHCI_Q5_WORD1
	// Position of SEND_Q5_WORD1 field.
	UHCI_Q5_WORD1_SEND_Q5_WORD1_Pos = 0x0
	// Bit mask of SEND_Q5_WORD1 field.
	UHCI_Q5_WORD1_SEND_Q5_WORD1_Msk = 0xffffffff

	// Q6_WORD0: UHCI_Q6_WORD0
	// Position of SEND_Q6_WORD0 field.
	UHCI_Q6_WORD0_SEND_Q6_WORD0_Pos = 0x0
	// Bit mask of SEND_Q6_WORD0 field.
	UHCI_Q6_WORD0_SEND_Q6_WORD0_Msk = 0xffffffff

	// Q6_WORD1: UHCI_Q6_WORD1
	// Position of SEND_Q6_WORD1 field.
	UHCI_Q6_WORD1_SEND_Q6_WORD1_Pos = 0x0
	// Bit mask of SEND_Q6_WORD1 field.
	UHCI_Q6_WORD1_SEND_Q6_WORD1_Msk = 0xffffffff

	// ESC_CONF0: UHCI_ESC_CONF0
	// Position of SEPER_ESC_CHAR1 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR1_Pos = 0x10
	// Bit mask of SEPER_ESC_CHAR1 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR1_Msk = 0xff0000
	// Position of SEPER_ESC_CHAR0 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR0_Pos = 0x8
	// Bit mask of SEPER_ESC_CHAR0 field.
	UHCI_ESC_CONF0_SEPER_ESC_CHAR0_Msk = 0xff00
	// Position of SEPER_CHAR field.
	UHCI_ESC_CONF0_SEPER_CHAR_Pos = 0x0
	// Bit mask of SEPER_CHAR field.
	UHCI_ESC_CONF0_SEPER_CHAR_Msk = 0xff

	// ESC_CONF1: UHCI_ESC_CONF1
	// Position of ESC_SEQ0_CHAR1 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR1_Pos = 0x10
	// Bit mask of ESC_SEQ0_CHAR1 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR1_Msk = 0xff0000
	// Position of ESC_SEQ0_CHAR0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR0_Pos = 0x8
	// Bit mask of ESC_SEQ0_CHAR0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_CHAR0_Msk = 0xff00
	// Position of ESC_SEQ0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_Pos = 0x0
	// Bit mask of ESC_SEQ0 field.
	UHCI_ESC_CONF1_ESC_SEQ0_Msk = 0xff

	// ESC_CONF2: UHCI_ESC_CONF2
	// Position of ESC_SEQ1_CHAR1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR1_Pos = 0x10
	// Bit mask of ESC_SEQ1_CHAR1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR1_Msk = 0xff0000
	// Position of ESC_SEQ1_CHAR0 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR0_Pos = 0x8
	// Bit mask of ESC_SEQ1_CHAR0 field.
	UHCI_ESC_CONF2_ESC_SEQ1_CHAR0_Msk = 0xff00
	// Position of ESC_SEQ1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_Pos = 0x0
	// Bit mask of ESC_SEQ1 field.
	UHCI_ESC_CONF2_ESC_SEQ1_Msk = 0xff

	// ESC_CONF3: UHCI_ESC_CONF3
	// Position of ESC_SEQ2_CHAR1 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR1_Pos = 0x10
	// Bit mask of ESC_SEQ2_CHAR1 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR1_Msk = 0xff0000
	// Position of ESC_SEQ2_CHAR0 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR0_Pos = 0x8
	// Bit mask of ESC_SEQ2_CHAR0 field.
	UHCI_ESC_CONF3_ESC_SEQ2_CHAR0_Msk = 0xff00
	// Position of ESC_SEQ2 field.
	UHCI_ESC_CONF3_ESC_SEQ2_Pos = 0x0
	// Bit mask of ESC_SEQ2 field.
	UHCI_ESC_CONF3_ESC_SEQ2_Msk = 0xff

	// PKT_THRES: UHCI_PKT_THRES
	// Position of PKT_THRS field.
	UHCI_PKT_THRES_PKT_THRS_Pos = 0x0
	// Bit mask of PKT_THRS field.
	UHCI_PKT_THRES_PKT_THRS_Msk = 0x1fff

	// DATE: UHCI_DATE
	// Position of DATE field.
	UHCI_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	UHCI_DATE_DATE_Msk = 0xffffffff
)

// Constants for SLCHOST
const (
	// HOST_SLCHOST_FUNC2_0: HOST_SLCHOST_FUNC2_0
	// Position of HOST_SLC_FUNC2_INT field.
	SLCHOST_HOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT_Pos = 0x18
	// Bit mask of HOST_SLC_FUNC2_INT field.
	SLCHOST_HOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT_Msk = 0x1000000
	// Bit HOST_SLC_FUNC2_INT.
	SLCHOST_HOST_SLCHOST_FUNC2_0_HOST_SLC_FUNC2_INT = 0x1000000

	// HOST_SLCHOST_FUNC2_1: HOST_SLCHOST_FUNC2_1
	// Position of HOST_SLC_FUNC2_INT_EN field.
	SLCHOST_HOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN_Pos = 0x0
	// Bit mask of HOST_SLC_FUNC2_INT_EN field.
	SLCHOST_HOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN_Msk = 0x1
	// Bit HOST_SLC_FUNC2_INT_EN.
	SLCHOST_HOST_SLCHOST_FUNC2_1_HOST_SLC_FUNC2_INT_EN = 0x1

	// HOST_SLCHOST_FUNC2_2: HOST_SLCHOST_FUNC2_2
	// Position of HOST_SLC_FUNC1_MDSTAT field.
	SLCHOST_HOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT_Pos = 0x0
	// Bit mask of HOST_SLC_FUNC1_MDSTAT field.
	SLCHOST_HOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT_Msk = 0x1
	// Bit HOST_SLC_FUNC1_MDSTAT.
	SLCHOST_HOST_SLCHOST_FUNC2_2_HOST_SLC_FUNC1_MDSTAT = 0x1

	// HOST_SLCHOST_GPIO_STATUS0: HOST_SLCHOST_GPIO_STATUS0
	// Position of HOST_GPIO_SDIO_INT0 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS0_HOST_GPIO_SDIO_INT0_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_INT0 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS0_HOST_GPIO_SDIO_INT0_Msk = 0xffffffff

	// HOST_SLCHOST_GPIO_STATUS1: HOST_SLCHOST_GPIO_STATUS1
	// Position of HOST_GPIO_SDIO_INT1 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_INT1 field.
	SLCHOST_HOST_SLCHOST_GPIO_STATUS1_HOST_GPIO_SDIO_INT1_Msk = 0xff

	// HOST_SLCHOST_GPIO_IN0: HOST_SLCHOST_GPIO_IN0
	// Position of HOST_GPIO_SDIO_IN0 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN0_HOST_GPIO_SDIO_IN0_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_IN0 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN0_HOST_GPIO_SDIO_IN0_Msk = 0xffffffff

	// HOST_SLCHOST_GPIO_IN1: HOST_SLCHOST_GPIO_IN1
	// Position of HOST_GPIO_SDIO_IN1 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1_Pos = 0x0
	// Bit mask of HOST_GPIO_SDIO_IN1 field.
	SLCHOST_HOST_SLCHOST_GPIO_IN1_HOST_GPIO_SDIO_IN1_Msk = 0xff

	// HOST_SLC0HOST_TOKEN_RDATA: HOST_SLC0HOST_TOKEN_RDATA
	// Position of HOST_SLC0_RX_PF_EOF field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF_Pos = 0x1c
	// Bit mask of HOST_SLC0_RX_PF_EOF field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_EOF_Msk = 0xf0000000
	// Position of HOST_HOSTSLC0_TOKEN1 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1_Pos = 0x10
	// Bit mask of HOST_HOSTSLC0_TOKEN1 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_HOSTSLC0_TOKEN1_Msk = 0xfff0000
	// Position of HOST_SLC0_RX_PF_VALID field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID_Pos = 0xc
	// Bit mask of HOST_SLC0_RX_PF_VALID field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID_Msk = 0x1000
	// Bit HOST_SLC0_RX_PF_VALID.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_RX_PF_VALID = 0x1000
	// Position of HOST_SLC0_TOKEN0 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0_Pos = 0x0
	// Bit mask of HOST_SLC0_TOKEN0 field.
	SLCHOST_HOST_SLC0HOST_TOKEN_RDATA_HOST_SLC0_TOKEN0_Msk = 0xfff

	// HOST_SLC0_HOST_PF: HOST_SLC0_HOST_PF
	// Position of HOST_SLC0_PF_DATA field.
	SLCHOST_HOST_SLC0_HOST_PF_HOST_SLC0_PF_DATA_Pos = 0x0
	// Bit mask of HOST_SLC0_PF_DATA field.
	SLCHOST_HOST_SLC0_HOST_PF_HOST_SLC0_PF_DATA_Msk = 0xffffffff

	// HOST_SLC1_HOST_PF: HOST_SLC1_HOST_PF
	// Position of HOST_SLC1_PF_DATA field.
	SLCHOST_HOST_SLC1_HOST_PF_HOST_SLC1_PF_DATA_Pos = 0x0
	// Bit mask of HOST_SLC1_PF_DATA field.
	SLCHOST_HOST_SLC1_HOST_PF_HOST_SLC1_PF_DATA_Msk = 0xffffffff

	// HOST_SLC0HOST_INT_RAW: HOST_SLC0HOST_INT_RAW
	// Position of HOST_GPIO_SDIO_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_GPIO_SDIO_INT_RAW = 0x2000000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_HOST_RD_RETRY_INT_RAW = 0x1000000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_NEW_PACKET_INT_RAW = 0x800000
	// Position of HOST_SLC0_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT3_INT_RAW = 0x400000
	// Position of HOST_SLC0_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT2_INT_RAW = 0x200000
	// Position of HOST_SLC0_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT1_INT_RAW = 0x100000
	// Position of HOST_SLC0_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_EXT_BIT0_INT_RAW = 0x80000
	// Position of HOST_SLC0_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_PF_VALID_INT_RAW = 0x40000
	// Position of HOST_SLC0_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TX_OVF_INT_RAW = 0x20000
	// Position of HOST_SLC0_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_RX_UDF_INT_RAW = 0x10000
	// Position of HOST_SLC0HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_TX_START_INT_RAW = 0x8000
	// Position of HOST_SLC0HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_START_INT_RAW = 0x4000
	// Position of HOST_SLC0HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_EOF_INT_RAW = 0x2000
	// Position of HOST_SLC0HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0HOST_RX_SOF_INT_RAW = 0x1000
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_0TO1_INT_RAW = 0x800
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_0TO1_INT_RAW = 0x400
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN1_1TO0_INT_RAW = 0x200
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOKEN0_1TO0_INT_RAW = 0x100
	// Position of HOST_SLC0_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT7_INT_RAW = 0x80
	// Position of HOST_SLC0_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT6_INT_RAW = 0x40
	// Position of HOST_SLC0_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT5_INT_RAW = 0x20
	// Position of HOST_SLC0_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT4_INT_RAW = 0x10
	// Position of HOST_SLC0_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT3_INT_RAW = 0x8
	// Position of HOST_SLC0_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT2_INT_RAW = 0x4
	// Position of HOST_SLC0_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT1_INT_RAW = 0x2
	// Position of HOST_SLC0_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_RAW.
	SLCHOST_HOST_SLC0HOST_INT_RAW_HOST_SLC0_TOHOST_BIT0_INT_RAW = 0x1

	// HOST_SLC1HOST_INT_RAW: HOST_SLC1HOST_INT_RAW
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW = 0x2000000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_HOST_RD_RETRY_INT_RAW = 0x1000000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW = 0x800000
	// Position of HOST_SLC1_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT3_INT_RAW = 0x400000
	// Position of HOST_SLC1_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT2_INT_RAW = 0x200000
	// Position of HOST_SLC1_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT1_INT_RAW = 0x100000
	// Position of HOST_SLC1_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_EXT_BIT0_INT_RAW = 0x80000
	// Position of HOST_SLC1_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_PF_VALID_INT_RAW = 0x40000
	// Position of HOST_SLC1_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TX_OVF_INT_RAW = 0x20000
	// Position of HOST_SLC1_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_RX_UDF_INT_RAW = 0x10000
	// Position of HOST_SLC1HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_TX_START_INT_RAW = 0x8000
	// Position of HOST_SLC1HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_START_INT_RAW = 0x4000
	// Position of HOST_SLC1HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_EOF_INT_RAW = 0x2000
	// Position of HOST_SLC1HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1HOST_RX_SOF_INT_RAW = 0x1000
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_0TO1_INT_RAW = 0x800
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_0TO1_INT_RAW = 0x400
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN1_1TO0_INT_RAW = 0x200
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOKEN0_1TO0_INT_RAW = 0x100
	// Position of HOST_SLC1_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT7_INT_RAW = 0x80
	// Position of HOST_SLC1_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT6_INT_RAW = 0x40
	// Position of HOST_SLC1_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT5_INT_RAW = 0x20
	// Position of HOST_SLC1_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT4_INT_RAW = 0x10
	// Position of HOST_SLC1_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT3_INT_RAW = 0x8
	// Position of HOST_SLC1_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT2_INT_RAW = 0x4
	// Position of HOST_SLC1_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT1_INT_RAW = 0x2
	// Position of HOST_SLC1_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_RAW field.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_RAW.
	SLCHOST_HOST_SLC1HOST_INT_RAW_HOST_SLC1_TOHOST_BIT0_INT_RAW = 0x1

	// HOST_SLC0HOST_INT_ST: HOST_SLC0HOST_INT_ST
	// Position of HOST_GPIO_SDIO_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_GPIO_SDIO_INT_ST = 0x2000000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_HOST_RD_RETRY_INT_ST = 0x1000000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_NEW_PACKET_INT_ST = 0x800000
	// Position of HOST_SLC0_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT3_INT_ST = 0x400000
	// Position of HOST_SLC0_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT2_INT_ST = 0x200000
	// Position of HOST_SLC0_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT1_INT_ST = 0x100000
	// Position of HOST_SLC0_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_EXT_BIT0_INT_ST = 0x80000
	// Position of HOST_SLC0_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_PF_VALID_INT_ST = 0x40000
	// Position of HOST_SLC0_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TX_OVF_INT_ST = 0x20000
	// Position of HOST_SLC0_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_RX_UDF_INT_ST = 0x10000
	// Position of HOST_SLC0HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_TX_START_INT_ST = 0x8000
	// Position of HOST_SLC0HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_START_INT_ST = 0x4000
	// Position of HOST_SLC0HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_EOF_INT_ST = 0x2000
	// Position of HOST_SLC0HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0HOST_RX_SOF_INT_ST = 0x1000
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_0TO1_INT_ST = 0x800
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_0TO1_INT_ST = 0x400
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN1_1TO0_INT_ST = 0x200
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOKEN0_1TO0_INT_ST = 0x100
	// Position of HOST_SLC0_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT7_INT_ST = 0x80
	// Position of HOST_SLC0_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT6_INT_ST = 0x40
	// Position of HOST_SLC0_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT5_INT_ST = 0x20
	// Position of HOST_SLC0_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT4_INT_ST = 0x10
	// Position of HOST_SLC0_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT3_INT_ST = 0x8
	// Position of HOST_SLC0_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT2_INT_ST = 0x4
	// Position of HOST_SLC0_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT1_INT_ST = 0x2
	// Position of HOST_SLC0_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_ST.
	SLCHOST_HOST_SLC0HOST_INT_ST_HOST_SLC0_TOHOST_BIT0_INT_ST = 0x1

	// HOST_SLC1HOST_INT_ST: HOST_SLC1HOST_INT_ST
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_BT_RX_NEW_PACKET_INT_ST = 0x2000000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_HOST_RD_RETRY_INT_ST = 0x1000000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST = 0x800000
	// Position of HOST_SLC1_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT3_INT_ST = 0x400000
	// Position of HOST_SLC1_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT2_INT_ST = 0x200000
	// Position of HOST_SLC1_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT1_INT_ST = 0x100000
	// Position of HOST_SLC1_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_EXT_BIT0_INT_ST = 0x80000
	// Position of HOST_SLC1_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_PF_VALID_INT_ST = 0x40000
	// Position of HOST_SLC1_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TX_OVF_INT_ST = 0x20000
	// Position of HOST_SLC1_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_RX_UDF_INT_ST = 0x10000
	// Position of HOST_SLC1HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_TX_START_INT_ST = 0x8000
	// Position of HOST_SLC1HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_START_INT_ST = 0x4000
	// Position of HOST_SLC1HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_EOF_INT_ST = 0x2000
	// Position of HOST_SLC1HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1HOST_RX_SOF_INT_ST = 0x1000
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_0TO1_INT_ST = 0x800
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_0TO1_INT_ST = 0x400
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN1_1TO0_INT_ST = 0x200
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOKEN0_1TO0_INT_ST = 0x100
	// Position of HOST_SLC1_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT7_INT_ST = 0x80
	// Position of HOST_SLC1_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT6_INT_ST = 0x40
	// Position of HOST_SLC1_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT5_INT_ST = 0x20
	// Position of HOST_SLC1_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT4_INT_ST = 0x10
	// Position of HOST_SLC1_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT3_INT_ST = 0x8
	// Position of HOST_SLC1_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT2_INT_ST = 0x4
	// Position of HOST_SLC1_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT1_INT_ST = 0x2
	// Position of HOST_SLC1_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_ST field.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_ST.
	SLCHOST_HOST_SLC1HOST_INT_ST_HOST_SLC1_TOHOST_BIT0_INT_ST = 0x1

	// HOST_SLCHOST_PKT_LEN: HOST_SLCHOST_PKT_LEN
	// Position of HOST_HOSTSLC0_LEN_CHECK field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK_Pos = 0x14
	// Bit mask of HOST_HOSTSLC0_LEN_CHECK field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_CHECK_Msk = 0xfff00000
	// Position of HOST_HOSTSLC0_LEN field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN field.
	SLCHOST_HOST_SLCHOST_PKT_LEN_HOST_HOSTSLC0_LEN_Msk = 0xfffff

	// HOST_SLCHOST_STATE_W0: HOST_SLCHOST_STATE_W0
	// Position of HOST_SLCHOST_STATE3 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3_Pos = 0x18
	// Bit mask of HOST_SLCHOST_STATE3 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE3_Msk = 0xff000000
	// Position of HOST_SLCHOST_STATE2 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2_Pos = 0x10
	// Bit mask of HOST_SLCHOST_STATE2 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE2_Msk = 0xff0000
	// Position of HOST_SLCHOST_STATE1 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1_Pos = 0x8
	// Bit mask of HOST_SLCHOST_STATE1 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE1_Msk = 0xff00
	// Position of HOST_SLCHOST_STATE0 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0_Pos = 0x0
	// Bit mask of HOST_SLCHOST_STATE0 field.
	SLCHOST_HOST_SLCHOST_STATE_W0_HOST_SLCHOST_STATE0_Msk = 0xff

	// HOST_SLCHOST_STATE_W1: HOST_SLCHOST_STATE_W1
	// Position of HOST_SLCHOST_STATE7 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7_Pos = 0x18
	// Bit mask of HOST_SLCHOST_STATE7 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE7_Msk = 0xff000000
	// Position of HOST_SLCHOST_STATE6 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6_Pos = 0x10
	// Bit mask of HOST_SLCHOST_STATE6 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE6_Msk = 0xff0000
	// Position of HOST_SLCHOST_STATE5 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5_Pos = 0x8
	// Bit mask of HOST_SLCHOST_STATE5 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE5_Msk = 0xff00
	// Position of HOST_SLCHOST_STATE4 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4_Pos = 0x0
	// Bit mask of HOST_SLCHOST_STATE4 field.
	SLCHOST_HOST_SLCHOST_STATE_W1_HOST_SLCHOST_STATE4_Msk = 0xff

	// HOST_SLCHOST_CONF_W0: HOST_SLCHOST_CONF_W0
	// Position of HOST_SLCHOST_CONF3 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF3 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF3_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF2 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF2 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF2_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF1 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF1 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF1_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF0 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF0 field.
	SLCHOST_HOST_SLCHOST_CONF_W0_HOST_SLCHOST_CONF0_Msk = 0xff

	// HOST_SLCHOST_CONF_W1: HOST_SLCHOST_CONF_W1
	// Position of HOST_SLCHOST_CONF7 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF7 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF7_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF6 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF6 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF6_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF5 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF5 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF5_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF4 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF4 field.
	SLCHOST_HOST_SLCHOST_CONF_W1_HOST_SLCHOST_CONF4_Msk = 0xff

	// HOST_SLCHOST_CONF_W2: HOST_SLCHOST_CONF_W2
	// Position of HOST_SLCHOST_CONF11 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF11 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF11_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF10 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF10 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF10_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF9 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF9 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF9_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF8 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF8 field.
	SLCHOST_HOST_SLCHOST_CONF_W2_HOST_SLCHOST_CONF8_Msk = 0xff

	// HOST_SLCHOST_CONF_W3: HOST_SLCHOST_CONF_W3
	// Position of HOST_SLCHOST_CONF15 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF15 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF15_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF14 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF14 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF14_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF13 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF13 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF13_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF12 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF12 field.
	SLCHOST_HOST_SLCHOST_CONF_W3_HOST_SLCHOST_CONF12_Msk = 0xff

	// HOST_SLCHOST_CONF_W4: HOST_SLCHOST_CONF_W4
	// Position of HOST_SLCHOST_CONF19 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF19 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF19_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF18 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF18 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF18_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF17 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF17 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF17_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF16 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF16 field.
	SLCHOST_HOST_SLCHOST_CONF_W4_HOST_SLCHOST_CONF16_Msk = 0xff

	// HOST_SLCHOST_CONF_W5: HOST_SLCHOST_CONF_W5
	// Position of HOST_SLCHOST_CONF23 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF23 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF23_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF22 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF22 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF22_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF21 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF21 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF21_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF20 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF20 field.
	SLCHOST_HOST_SLCHOST_CONF_W5_HOST_SLCHOST_CONF20_Msk = 0xff

	// HOST_SLCHOST_CONF_W6: HOST_SLCHOST_CONF_W6
	// Position of HOST_SLCHOST_CONF27 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF27 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF27_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF26 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF26 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF26_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF25 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF25 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF25_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF24 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF24 field.
	SLCHOST_HOST_SLCHOST_CONF_W6_HOST_SLCHOST_CONF24_Msk = 0xff

	// HOST_SLCHOST_CONF_W7: HOST_SLCHOST_CONF_W7
	// Position of HOST_SLCHOST_CONF31 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF31 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF31_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF30 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF30 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF30_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF29 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF29 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF29_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF28 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF28 field.
	SLCHOST_HOST_SLCHOST_CONF_W7_HOST_SLCHOST_CONF28_Msk = 0xff

	// HOST_SLCHOST_PKT_LEN0: HOST_SLCHOST_PKT_LEN0
	// Position of HOST_HOSTSLC0_LEN0 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN0 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN0_HOST_HOSTSLC0_LEN0_Msk = 0xfffff

	// HOST_SLCHOST_PKT_LEN1: HOST_SLCHOST_PKT_LEN1
	// Position of HOST_HOSTSLC0_LEN1 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN1 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN1_HOST_HOSTSLC0_LEN1_Msk = 0xfffff

	// HOST_SLCHOST_PKT_LEN2: HOST_SLCHOST_PKT_LEN2
	// Position of HOST_HOSTSLC0_LEN2 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2_Pos = 0x0
	// Bit mask of HOST_HOSTSLC0_LEN2 field.
	SLCHOST_HOST_SLCHOST_PKT_LEN2_HOST_HOSTSLC0_LEN2_Msk = 0xfffff

	// HOST_SLCHOST_CONF_W8: HOST_SLCHOST_CONF_W8
	// Position of HOST_SLCHOST_CONF35 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF35 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF35_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF34 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF34 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF34_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF33 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF33 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF33_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF32 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF32 field.
	SLCHOST_HOST_SLCHOST_CONF_W8_HOST_SLCHOST_CONF32_Msk = 0xff

	// HOST_SLCHOST_CONF_W9: HOST_SLCHOST_CONF_W9
	// Position of HOST_SLCHOST_CONF39 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF39 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF39_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF38 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF38 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF38_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF37 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF37 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF37_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF36 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF36 field.
	SLCHOST_HOST_SLCHOST_CONF_W9_HOST_SLCHOST_CONF36_Msk = 0xff

	// HOST_SLCHOST_CONF_W10: HOST_SLCHOST_CONF_W10
	// Position of HOST_SLCHOST_CONF43 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF43 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF43_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF42 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF42 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF42_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF41 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF41 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF41_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF40 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF40 field.
	SLCHOST_HOST_SLCHOST_CONF_W10_HOST_SLCHOST_CONF40_Msk = 0xff

	// HOST_SLCHOST_CONF_W11: HOST_SLCHOST_CONF_W11
	// Position of HOST_SLCHOST_CONF47 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF47 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF47_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF46 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF46 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF46_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF45 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF45 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF45_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF44 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF44 field.
	SLCHOST_HOST_SLCHOST_CONF_W11_HOST_SLCHOST_CONF44_Msk = 0xff

	// HOST_SLCHOST_CONF_W12: HOST_SLCHOST_CONF_W12
	// Position of HOST_SLCHOST_CONF51 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF51 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF51_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF50 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF50 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF50_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF49 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF49 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF49_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF48 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF48 field.
	SLCHOST_HOST_SLCHOST_CONF_W12_HOST_SLCHOST_CONF48_Msk = 0xff

	// HOST_SLCHOST_CONF_W13: HOST_SLCHOST_CONF_W13
	// Position of HOST_SLCHOST_CONF55 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF55 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF55_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF54 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF54 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF54_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF53 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF53 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF53_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF52 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF52 field.
	SLCHOST_HOST_SLCHOST_CONF_W13_HOST_SLCHOST_CONF52_Msk = 0xff

	// HOST_SLCHOST_CONF_W14: HOST_SLCHOST_CONF_W14
	// Position of HOST_SLCHOST_CONF59 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF59 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF59_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF58 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF58 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF58_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF57 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF57 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF57_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF56 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF56 field.
	SLCHOST_HOST_SLCHOST_CONF_W14_HOST_SLCHOST_CONF56_Msk = 0xff

	// HOST_SLCHOST_CONF_W15: HOST_SLCHOST_CONF_W15
	// Position of HOST_SLCHOST_CONF63 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63_Pos = 0x18
	// Bit mask of HOST_SLCHOST_CONF63 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF63_Msk = 0xff000000
	// Position of HOST_SLCHOST_CONF62 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62_Pos = 0x10
	// Bit mask of HOST_SLCHOST_CONF62 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF62_Msk = 0xff0000
	// Position of HOST_SLCHOST_CONF61 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61_Pos = 0x8
	// Bit mask of HOST_SLCHOST_CONF61 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF61_Msk = 0xff00
	// Position of HOST_SLCHOST_CONF60 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CONF60 field.
	SLCHOST_HOST_SLCHOST_CONF_W15_HOST_SLCHOST_CONF60_Msk = 0xff

	// HOST_SLCHOST_CHECK_SUM0: HOST_SLCHOST_CHECK_SUM0
	// Position of HOST_SLCHOST_CHECK_SUM0 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM0_HOST_SLCHOST_CHECK_SUM0_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CHECK_SUM0 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM0_HOST_SLCHOST_CHECK_SUM0_Msk = 0xffffffff

	// HOST_SLCHOST_CHECK_SUM1: HOST_SLCHOST_CHECK_SUM1
	// Position of HOST_SLCHOST_CHECK_SUM1 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM1_HOST_SLCHOST_CHECK_SUM1_Pos = 0x0
	// Bit mask of HOST_SLCHOST_CHECK_SUM1 field.
	SLCHOST_HOST_SLCHOST_CHECK_SUM1_HOST_SLCHOST_CHECK_SUM1_Msk = 0xffffffff

	// HOST_SLC1HOST_TOKEN_RDATA: HOST_SLC1HOST_TOKEN_RDATA
	// Position of HOST_SLC1_RX_PF_EOF field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF_Pos = 0x1c
	// Bit mask of HOST_SLC1_RX_PF_EOF field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_EOF_Msk = 0xf0000000
	// Position of HOST_HOSTSLC1_TOKEN1 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1_Pos = 0x10
	// Bit mask of HOST_HOSTSLC1_TOKEN1 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_HOSTSLC1_TOKEN1_Msk = 0xfff0000
	// Position of HOST_SLC1_RX_PF_VALID field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID_Pos = 0xc
	// Bit mask of HOST_SLC1_RX_PF_VALID field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID_Msk = 0x1000
	// Bit HOST_SLC1_RX_PF_VALID.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_RX_PF_VALID = 0x1000
	// Position of HOST_SLC1_TOKEN0 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0_Pos = 0x0
	// Bit mask of HOST_SLC1_TOKEN0 field.
	SLCHOST_HOST_SLC1HOST_TOKEN_RDATA_HOST_SLC1_TOKEN0_Msk = 0xfff

	// HOST_SLC0HOST_TOKEN_WDATA: HOST_SLC0HOST_TOKEN_WDATA
	// Position of HOST_SLC0HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD_Pos = 0x10
	// Bit mask of HOST_SLC0HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN1_WD_Msk = 0xfff0000
	// Position of HOST_SLC0HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC0HOST_TOKEN_WDATA_HOST_SLC0HOST_TOKEN0_WD_Msk = 0xfff

	// HOST_SLC1HOST_TOKEN_WDATA: HOST_SLC1HOST_TOKEN_WDATA
	// Position of HOST_SLC1HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD_Pos = 0x10
	// Bit mask of HOST_SLC1HOST_TOKEN1_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN1_WD_Msk = 0xfff0000
	// Position of HOST_SLC1HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD_Pos = 0x0
	// Bit mask of HOST_SLC1HOST_TOKEN0_WD field.
	SLCHOST_HOST_SLC1HOST_TOKEN_WDATA_HOST_SLC1HOST_TOKEN0_WD_Msk = 0xfff

	// HOST_SLCHOST_TOKEN_CON: HOST_SLCHOST_TOKEN_CON
	// Position of HOST_SLC0HOST_LEN_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR_Pos = 0x8
	// Bit mask of HOST_SLC0HOST_LEN_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR_Msk = 0x100
	// Bit HOST_SLC0HOST_LEN_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_LEN_WR = 0x100
	// Position of HOST_SLC1HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR_Pos = 0x7
	// Bit mask of HOST_SLC1HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR_Msk = 0x80
	// Bit HOST_SLC1HOST_TOKEN1_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_WR = 0x80
	// Position of HOST_SLC1HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR_Pos = 0x6
	// Bit mask of HOST_SLC1HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR_Msk = 0x40
	// Bit HOST_SLC1HOST_TOKEN0_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_WR = 0x40
	// Position of HOST_SLC1HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC_Pos = 0x5
	// Bit mask of HOST_SLC1HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC_Msk = 0x20
	// Bit HOST_SLC1HOST_TOKEN1_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN1_DEC = 0x20
	// Position of HOST_SLC1HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC_Pos = 0x4
	// Bit mask of HOST_SLC1HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC_Msk = 0x10
	// Bit HOST_SLC1HOST_TOKEN0_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC1HOST_TOKEN0_DEC = 0x10
	// Position of HOST_SLC0HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR_Pos = 0x3
	// Bit mask of HOST_SLC0HOST_TOKEN1_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR_Msk = 0x8
	// Bit HOST_SLC0HOST_TOKEN1_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_WR = 0x8
	// Position of HOST_SLC0HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR_Pos = 0x2
	// Bit mask of HOST_SLC0HOST_TOKEN0_WR field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR_Msk = 0x4
	// Bit HOST_SLC0HOST_TOKEN0_WR.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_WR = 0x4
	// Position of HOST_SLC0HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC_Pos = 0x1
	// Bit mask of HOST_SLC0HOST_TOKEN1_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC_Msk = 0x2
	// Bit HOST_SLC0HOST_TOKEN1_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN1_DEC = 0x2
	// Position of HOST_SLC0HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_TOKEN0_DEC field.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC_Msk = 0x1
	// Bit HOST_SLC0HOST_TOKEN0_DEC.
	SLCHOST_HOST_SLCHOST_TOKEN_CON_HOST_SLC0HOST_TOKEN0_DEC = 0x1

	// HOST_SLC0HOST_INT_CLR: HOST_SLC0HOST_INT_CLR
	// Position of HOST_GPIO_SDIO_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_GPIO_SDIO_INT_CLR = 0x2000000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_HOST_RD_RETRY_INT_CLR = 0x1000000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_NEW_PACKET_INT_CLR = 0x800000
	// Position of HOST_SLC0_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT3_INT_CLR = 0x400000
	// Position of HOST_SLC0_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT2_INT_CLR = 0x200000
	// Position of HOST_SLC0_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT1_INT_CLR = 0x100000
	// Position of HOST_SLC0_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_EXT_BIT0_INT_CLR = 0x80000
	// Position of HOST_SLC0_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_PF_VALID_INT_CLR = 0x40000
	// Position of HOST_SLC0_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TX_OVF_INT_CLR = 0x20000
	// Position of HOST_SLC0_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_RX_UDF_INT_CLR = 0x10000
	// Position of HOST_SLC0HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_TX_START_INT_CLR = 0x8000
	// Position of HOST_SLC0HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_START_INT_CLR = 0x4000
	// Position of HOST_SLC0HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_EOF_INT_CLR = 0x2000
	// Position of HOST_SLC0HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0HOST_RX_SOF_INT_CLR = 0x1000
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_0TO1_INT_CLR = 0x800
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_0TO1_INT_CLR = 0x400
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN1_1TO0_INT_CLR = 0x200
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOKEN0_1TO0_INT_CLR = 0x100
	// Position of HOST_SLC0_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT7_INT_CLR = 0x80
	// Position of HOST_SLC0_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT6_INT_CLR = 0x40
	// Position of HOST_SLC0_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT5_INT_CLR = 0x20
	// Position of HOST_SLC0_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT4_INT_CLR = 0x10
	// Position of HOST_SLC0_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT3_INT_CLR = 0x8
	// Position of HOST_SLC0_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT2_INT_CLR = 0x4
	// Position of HOST_SLC0_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT1_INT_CLR = 0x2
	// Position of HOST_SLC0_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_CLR.
	SLCHOST_HOST_SLC0HOST_INT_CLR_HOST_SLC0_TOHOST_BIT0_INT_CLR = 0x1

	// HOST_SLC1HOST_INT_CLR: HOST_SLC1HOST_INT_CLR
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR = 0x2000000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_HOST_RD_RETRY_INT_CLR = 0x1000000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR = 0x800000
	// Position of HOST_SLC1_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT3_INT_CLR = 0x400000
	// Position of HOST_SLC1_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT2_INT_CLR = 0x200000
	// Position of HOST_SLC1_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT1_INT_CLR = 0x100000
	// Position of HOST_SLC1_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_EXT_BIT0_INT_CLR = 0x80000
	// Position of HOST_SLC1_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_PF_VALID_INT_CLR = 0x40000
	// Position of HOST_SLC1_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TX_OVF_INT_CLR = 0x20000
	// Position of HOST_SLC1_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_RX_UDF_INT_CLR = 0x10000
	// Position of HOST_SLC1HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_TX_START_INT_CLR = 0x8000
	// Position of HOST_SLC1HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_START_INT_CLR = 0x4000
	// Position of HOST_SLC1HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_EOF_INT_CLR = 0x2000
	// Position of HOST_SLC1HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1HOST_RX_SOF_INT_CLR = 0x1000
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_0TO1_INT_CLR = 0x800
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_0TO1_INT_CLR = 0x400
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN1_1TO0_INT_CLR = 0x200
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOKEN0_1TO0_INT_CLR = 0x100
	// Position of HOST_SLC1_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT7_INT_CLR = 0x80
	// Position of HOST_SLC1_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT6_INT_CLR = 0x40
	// Position of HOST_SLC1_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT5_INT_CLR = 0x20
	// Position of HOST_SLC1_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT4_INT_CLR = 0x10
	// Position of HOST_SLC1_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT3_INT_CLR = 0x8
	// Position of HOST_SLC1_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT2_INT_CLR = 0x4
	// Position of HOST_SLC1_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT1_INT_CLR = 0x2
	// Position of HOST_SLC1_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_CLR field.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_CLR.
	SLCHOST_HOST_SLC1HOST_INT_CLR_HOST_SLC1_TOHOST_BIT0_INT_CLR = 0x1

	// HOST_SLC0HOST_FUNC1_INT_ENA: HOST_SLC0HOST_FUNC1_INT_ENA
	// Position of HOST_FN1_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN1_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN1_GPIO_SDIO_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_GPIO_SDIO_INT_ENA = 0x2000000
	// Position of HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN1_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN1_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN1_SLC0_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN1_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN1_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN1_SLC0_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN1_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN1_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN1_SLC0_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN1_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN1_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN1_SLC0_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN1_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN1_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN1_SLC0_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN1_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN1_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN1_SLC0_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN1_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN1_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN1_SLC0_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN1_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN1_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN1_SLC0HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN1_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN1_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN1_SLC0HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN1_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN1_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN1_SLC0HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN1_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN1_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN1_SLC0HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC1_INT_ENA_HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA = 0x1

	// HOST_SLC1HOST_FUNC1_INT_ENA: HOST_SLC1HOST_FUNC1_INT_ENA
	// Position of HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA = 0x2000000
	// Position of HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN1_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN1_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN1_SLC1_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN1_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN1_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN1_SLC1_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN1_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN1_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN1_SLC1_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN1_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN1_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN1_SLC1_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN1_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN1_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN1_SLC1_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN1_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN1_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN1_SLC1_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN1_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN1_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN1_SLC1_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN1_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN1_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN1_SLC1HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN1_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN1_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN1_SLC1HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN1_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN1_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN1_SLC1HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN1_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN1_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN1_SLC1HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC1_INT_ENA_HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA = 0x1

	// HOST_SLC0HOST_FUNC2_INT_ENA: HOST_SLC0HOST_FUNC2_INT_ENA
	// Position of HOST_FN2_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN2_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN2_GPIO_SDIO_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_GPIO_SDIO_INT_ENA = 0x2000000
	// Position of HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN2_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN2_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN2_SLC0_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN2_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN2_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN2_SLC0_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN2_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN2_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN2_SLC0_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN2_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN2_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN2_SLC0_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN2_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN2_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN2_SLC0_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN2_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN2_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN2_SLC0_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN2_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN2_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN2_SLC0_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN2_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN2_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN2_SLC0HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN2_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN2_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN2_SLC0HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN2_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN2_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN2_SLC0HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN2_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN2_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN2_SLC0HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_FUNC2_INT_ENA_HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA = 0x1

	// HOST_SLC1HOST_FUNC2_INT_ENA: HOST_SLC1HOST_FUNC2_INT_ENA
	// Position of HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA_Pos = 0x19
	// Bit mask of HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA_Msk = 0x2000000
	// Bit HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA = 0x2000000
	// Position of HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_FN2_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_FN2_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_FN2_SLC1_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_FN2_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_FN2_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_FN2_SLC1_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_FN2_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_FN2_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_FN2_SLC1_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_FN2_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_FN2_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_FN2_SLC1_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_FN2_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_FN2_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_FN2_SLC1_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_FN2_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_FN2_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_FN2_SLC1_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_FN2_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_FN2_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_FN2_SLC1_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_FN2_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_FN2_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_FN2_SLC1HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_FN2_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_FN2_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_FN2_SLC1HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_FN2_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_FN2_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_FN2_SLC1HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_FN2_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_FN2_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_FN2_SLC1HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_FUNC2_INT_ENA_HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA = 0x1

	// HOST_SLC0HOST_INT_ENA: HOST_SLC0HOST_INT_ENA
	// Position of HOST_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_GPIO_SDIO_INT_ENA = 0x2000000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC0HOST_INT_ENA_HOST_SLC0_TOHOST_BIT0_INT_ENA = 0x1

	// HOST_SLC1HOST_INT_ENA: HOST_SLC1HOST_INT_ENA
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA = 0x2000000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_HOST_RD_RETRY_INT_ENA = 0x1000000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = 0x800000
	// Position of HOST_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT3_INT_ENA = 0x400000
	// Position of HOST_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT2_INT_ENA = 0x200000
	// Position of HOST_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT1_INT_ENA = 0x100000
	// Position of HOST_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_EXT_BIT0_INT_ENA = 0x80000
	// Position of HOST_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_PF_VALID_INT_ENA = 0x40000
	// Position of HOST_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TX_OVF_INT_ENA = 0x20000
	// Position of HOST_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_RX_UDF_INT_ENA = 0x10000
	// Position of HOST_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_TX_START_INT_ENA = 0x8000
	// Position of HOST_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_START_INT_ENA = 0x4000
	// Position of HOST_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_EOF_INT_ENA = 0x2000
	// Position of HOST_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1HOST_RX_SOF_INT_ENA = 0x1000
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_0TO1_INT_ENA = 0x800
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_0TO1_INT_ENA = 0x400
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN1_1TO0_INT_ENA = 0x200
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOKEN0_1TO0_INT_ENA = 0x100
	// Position of HOST_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT7_INT_ENA = 0x80
	// Position of HOST_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT6_INT_ENA = 0x40
	// Position of HOST_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT5_INT_ENA = 0x20
	// Position of HOST_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT4_INT_ENA = 0x10
	// Position of HOST_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT3_INT_ENA = 0x8
	// Position of HOST_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT2_INT_ENA = 0x4
	// Position of HOST_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT1_INT_ENA = 0x2
	// Position of HOST_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_ENA field.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_ENA.
	SLCHOST_HOST_SLC1HOST_INT_ENA_HOST_SLC1_TOHOST_BIT0_INT_ENA = 0x1

	// HOST_SLC0HOST_RX_INFOR: HOST_SLC0HOST_RX_INFOR
	// Position of HOST_SLC0HOST_RX_INFOR field.
	SLCHOST_HOST_SLC0HOST_RX_INFOR_HOST_SLC0HOST_RX_INFOR_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_RX_INFOR field.
	SLCHOST_HOST_SLC0HOST_RX_INFOR_HOST_SLC0HOST_RX_INFOR_Msk = 0xfffff

	// HOST_SLC1HOST_RX_INFOR: HOST_SLC1HOST_RX_INFOR
	// Position of HOST_SLC1HOST_RX_INFOR field.
	SLCHOST_HOST_SLC1HOST_RX_INFOR_HOST_SLC1HOST_RX_INFOR_Pos = 0x0
	// Bit mask of HOST_SLC1HOST_RX_INFOR field.
	SLCHOST_HOST_SLC1HOST_RX_INFOR_HOST_SLC1HOST_RX_INFOR_Msk = 0xfffff

	// HOST_SLC0HOST_LEN_WD: HOST_SLC0HOST_LEN_WD
	// Position of HOST_SLC0HOST_LEN_WD field.
	SLCHOST_HOST_SLC0HOST_LEN_WD_HOST_SLC0HOST_LEN_WD_Pos = 0x0
	// Bit mask of HOST_SLC0HOST_LEN_WD field.
	SLCHOST_HOST_SLC0HOST_LEN_WD_HOST_SLC0HOST_LEN_WD_Msk = 0xffffffff

	// HOST_SLC_APBWIN_WDATA: HOST_SLC_APBWIN_WDATA
	// Position of HOST_SLC_APBWIN_WDATA field.
	SLCHOST_HOST_SLC_APBWIN_WDATA_HOST_SLC_APBWIN_WDATA_Pos = 0x0
	// Bit mask of HOST_SLC_APBWIN_WDATA field.
	SLCHOST_HOST_SLC_APBWIN_WDATA_HOST_SLC_APBWIN_WDATA_Msk = 0xffffffff

	// HOST_SLC_APBWIN_CONF: HOST_SLC_APBWIN_CONF
	// Position of HOST_SLC_APBWIN_START field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START_Pos = 0x1d
	// Bit mask of HOST_SLC_APBWIN_START field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START_Msk = 0x20000000
	// Bit HOST_SLC_APBWIN_START.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_START = 0x20000000
	// Position of HOST_SLC_APBWIN_WR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR_Pos = 0x1c
	// Bit mask of HOST_SLC_APBWIN_WR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR_Msk = 0x10000000
	// Bit HOST_SLC_APBWIN_WR.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_WR = 0x10000000
	// Position of HOST_SLC_APBWIN_ADDR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR_Pos = 0x0
	// Bit mask of HOST_SLC_APBWIN_ADDR field.
	SLCHOST_HOST_SLC_APBWIN_CONF_HOST_SLC_APBWIN_ADDR_Msk = 0xfffffff

	// HOST_SLC_APBWIN_RDATA: HOST_SLC_APBWIN_RDATA
	// Position of HOST_SLC_APBWIN_RDATA field.
	SLCHOST_HOST_SLC_APBWIN_RDATA_HOST_SLC_APBWIN_RDATA_Pos = 0x0
	// Bit mask of HOST_SLC_APBWIN_RDATA field.
	SLCHOST_HOST_SLC_APBWIN_RDATA_HOST_SLC_APBWIN_RDATA_Msk = 0xffffffff

	// HOST_SLCHOST_RDCLR0: HOST_SLCHOST_RDCLR0
	// Position of HOST_SLCHOST_SLC0_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR_Pos = 0x9
	// Bit mask of HOST_SLCHOST_SLC0_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT6_CLRADDR_Msk = 0x3fe00
	// Position of HOST_SLCHOST_SLC0_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR_Pos = 0x0
	// Bit mask of HOST_SLCHOST_SLC0_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR0_HOST_SLCHOST_SLC0_BIT7_CLRADDR_Msk = 0x1ff

	// HOST_SLCHOST_RDCLR1: HOST_SLCHOST_RDCLR1
	// Position of HOST_SLCHOST_SLC1_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR_Pos = 0x9
	// Bit mask of HOST_SLCHOST_SLC1_BIT6_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT6_CLRADDR_Msk = 0x3fe00
	// Position of HOST_SLCHOST_SLC1_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR_Pos = 0x0
	// Bit mask of HOST_SLCHOST_SLC1_BIT7_CLRADDR field.
	SLCHOST_HOST_SLCHOST_RDCLR1_HOST_SLCHOST_SLC1_BIT7_CLRADDR_Msk = 0x1ff

	// HOST_SLC0HOST_INT_ENA1: HOST_SLC0HOST_INT_ENA1
	// Position of HOST_GPIO_SDIO_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1_Pos = 0x19
	// Bit mask of HOST_GPIO_SDIO_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1_Msk = 0x2000000
	// Bit HOST_GPIO_SDIO_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_GPIO_SDIO_INT_ENA1 = 0x2000000
	// Position of HOST_SLC0_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1_Pos = 0x18
	// Bit mask of HOST_SLC0_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1_Msk = 0x1000000
	// Bit HOST_SLC0_HOST_RD_RETRY_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_HOST_RD_RETRY_INT_ENA1 = 0x1000000
	// Position of HOST_SLC0_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1_Pos = 0x17
	// Bit mask of HOST_SLC0_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1_Msk = 0x800000
	// Bit HOST_SLC0_RX_NEW_PACKET_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_NEW_PACKET_INT_ENA1 = 0x800000
	// Position of HOST_SLC0_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1_Pos = 0x16
	// Bit mask of HOST_SLC0_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1_Msk = 0x400000
	// Bit HOST_SLC0_EXT_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT3_INT_ENA1 = 0x400000
	// Position of HOST_SLC0_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1_Pos = 0x15
	// Bit mask of HOST_SLC0_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1_Msk = 0x200000
	// Bit HOST_SLC0_EXT_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT2_INT_ENA1 = 0x200000
	// Position of HOST_SLC0_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1_Pos = 0x14
	// Bit mask of HOST_SLC0_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1_Msk = 0x100000
	// Bit HOST_SLC0_EXT_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT1_INT_ENA1 = 0x100000
	// Position of HOST_SLC0_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1_Pos = 0x13
	// Bit mask of HOST_SLC0_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1_Msk = 0x80000
	// Bit HOST_SLC0_EXT_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_EXT_BIT0_INT_ENA1 = 0x80000
	// Position of HOST_SLC0_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1_Pos = 0x12
	// Bit mask of HOST_SLC0_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1_Msk = 0x40000
	// Bit HOST_SLC0_RX_PF_VALID_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_PF_VALID_INT_ENA1 = 0x40000
	// Position of HOST_SLC0_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1_Pos = 0x11
	// Bit mask of HOST_SLC0_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1_Msk = 0x20000
	// Bit HOST_SLC0_TX_OVF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TX_OVF_INT_ENA1 = 0x20000
	// Position of HOST_SLC0_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1_Pos = 0x10
	// Bit mask of HOST_SLC0_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1_Msk = 0x10000
	// Bit HOST_SLC0_RX_UDF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_RX_UDF_INT_ENA1 = 0x10000
	// Position of HOST_SLC0HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1_Pos = 0xf
	// Bit mask of HOST_SLC0HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1_Msk = 0x8000
	// Bit HOST_SLC0HOST_TX_START_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_TX_START_INT_ENA1 = 0x8000
	// Position of HOST_SLC0HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1_Pos = 0xe
	// Bit mask of HOST_SLC0HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1_Msk = 0x4000
	// Bit HOST_SLC0HOST_RX_START_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_START_INT_ENA1 = 0x4000
	// Position of HOST_SLC0HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1_Pos = 0xd
	// Bit mask of HOST_SLC0HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1_Msk = 0x2000
	// Bit HOST_SLC0HOST_RX_EOF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_EOF_INT_ENA1 = 0x2000
	// Position of HOST_SLC0HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1_Pos = 0xc
	// Bit mask of HOST_SLC0HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1_Msk = 0x1000
	// Bit HOST_SLC0HOST_RX_SOF_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0HOST_RX_SOF_INT_ENA1 = 0x1000
	// Position of HOST_SLC0_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1_Pos = 0xb
	// Bit mask of HOST_SLC0_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1_Msk = 0x800
	// Bit HOST_SLC0_TOKEN1_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_0TO1_INT_ENA1 = 0x800
	// Position of HOST_SLC0_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1_Pos = 0xa
	// Bit mask of HOST_SLC0_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1_Msk = 0x400
	// Bit HOST_SLC0_TOKEN0_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_0TO1_INT_ENA1 = 0x400
	// Position of HOST_SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1_Pos = 0x9
	// Bit mask of HOST_SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1_Msk = 0x200
	// Bit HOST_SLC0_TOKEN1_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN1_1TO0_INT_ENA1 = 0x200
	// Position of HOST_SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1_Pos = 0x8
	// Bit mask of HOST_SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1_Msk = 0x100
	// Bit HOST_SLC0_TOKEN0_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOKEN0_1TO0_INT_ENA1 = 0x100
	// Position of HOST_SLC0_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1_Pos = 0x7
	// Bit mask of HOST_SLC0_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1_Msk = 0x80
	// Bit HOST_SLC0_TOHOST_BIT7_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT7_INT_ENA1 = 0x80
	// Position of HOST_SLC0_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1_Pos = 0x6
	// Bit mask of HOST_SLC0_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1_Msk = 0x40
	// Bit HOST_SLC0_TOHOST_BIT6_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT6_INT_ENA1 = 0x40
	// Position of HOST_SLC0_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1_Pos = 0x5
	// Bit mask of HOST_SLC0_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1_Msk = 0x20
	// Bit HOST_SLC0_TOHOST_BIT5_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT5_INT_ENA1 = 0x20
	// Position of HOST_SLC0_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1_Pos = 0x4
	// Bit mask of HOST_SLC0_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1_Msk = 0x10
	// Bit HOST_SLC0_TOHOST_BIT4_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT4_INT_ENA1 = 0x10
	// Position of HOST_SLC0_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1_Pos = 0x3
	// Bit mask of HOST_SLC0_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1_Msk = 0x8
	// Bit HOST_SLC0_TOHOST_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT3_INT_ENA1 = 0x8
	// Position of HOST_SLC0_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1_Pos = 0x2
	// Bit mask of HOST_SLC0_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1_Msk = 0x4
	// Bit HOST_SLC0_TOHOST_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT2_INT_ENA1 = 0x4
	// Position of HOST_SLC0_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1_Pos = 0x1
	// Bit mask of HOST_SLC0_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1_Msk = 0x2
	// Bit HOST_SLC0_TOHOST_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT1_INT_ENA1 = 0x2
	// Position of HOST_SLC0_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1_Pos = 0x0
	// Bit mask of HOST_SLC0_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1_Msk = 0x1
	// Bit HOST_SLC0_TOHOST_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC0HOST_INT_ENA1_HOST_SLC0_TOHOST_BIT0_INT_ENA1 = 0x1

	// HOST_SLC1HOST_INT_ENA1: HOST_SLC1HOST_INT_ENA1
	// Position of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1_Pos = 0x19
	// Bit mask of HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1_Msk = 0x2000000
	// Bit HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1 = 0x2000000
	// Position of HOST_SLC1_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1_Pos = 0x18
	// Bit mask of HOST_SLC1_HOST_RD_RETRY_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1_Msk = 0x1000000
	// Bit HOST_SLC1_HOST_RD_RETRY_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_HOST_RD_RETRY_INT_ENA1 = 0x1000000
	// Position of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1_Pos = 0x17
	// Bit mask of HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1_Msk = 0x800000
	// Bit HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1 = 0x800000
	// Position of HOST_SLC1_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1_Pos = 0x16
	// Bit mask of HOST_SLC1_EXT_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1_Msk = 0x400000
	// Bit HOST_SLC1_EXT_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT3_INT_ENA1 = 0x400000
	// Position of HOST_SLC1_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1_Pos = 0x15
	// Bit mask of HOST_SLC1_EXT_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1_Msk = 0x200000
	// Bit HOST_SLC1_EXT_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT2_INT_ENA1 = 0x200000
	// Position of HOST_SLC1_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1_Pos = 0x14
	// Bit mask of HOST_SLC1_EXT_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1_Msk = 0x100000
	// Bit HOST_SLC1_EXT_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT1_INT_ENA1 = 0x100000
	// Position of HOST_SLC1_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1_Pos = 0x13
	// Bit mask of HOST_SLC1_EXT_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1_Msk = 0x80000
	// Bit HOST_SLC1_EXT_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_EXT_BIT0_INT_ENA1 = 0x80000
	// Position of HOST_SLC1_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1_Pos = 0x12
	// Bit mask of HOST_SLC1_RX_PF_VALID_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1_Msk = 0x40000
	// Bit HOST_SLC1_RX_PF_VALID_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_PF_VALID_INT_ENA1 = 0x40000
	// Position of HOST_SLC1_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1_Pos = 0x11
	// Bit mask of HOST_SLC1_TX_OVF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1_Msk = 0x20000
	// Bit HOST_SLC1_TX_OVF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TX_OVF_INT_ENA1 = 0x20000
	// Position of HOST_SLC1_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1_Pos = 0x10
	// Bit mask of HOST_SLC1_RX_UDF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1_Msk = 0x10000
	// Bit HOST_SLC1_RX_UDF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_RX_UDF_INT_ENA1 = 0x10000
	// Position of HOST_SLC1HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1_Pos = 0xf
	// Bit mask of HOST_SLC1HOST_TX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1_Msk = 0x8000
	// Bit HOST_SLC1HOST_TX_START_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_TX_START_INT_ENA1 = 0x8000
	// Position of HOST_SLC1HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1_Pos = 0xe
	// Bit mask of HOST_SLC1HOST_RX_START_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1_Msk = 0x4000
	// Bit HOST_SLC1HOST_RX_START_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_START_INT_ENA1 = 0x4000
	// Position of HOST_SLC1HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1_Pos = 0xd
	// Bit mask of HOST_SLC1HOST_RX_EOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1_Msk = 0x2000
	// Bit HOST_SLC1HOST_RX_EOF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_EOF_INT_ENA1 = 0x2000
	// Position of HOST_SLC1HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1_Pos = 0xc
	// Bit mask of HOST_SLC1HOST_RX_SOF_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1_Msk = 0x1000
	// Bit HOST_SLC1HOST_RX_SOF_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1HOST_RX_SOF_INT_ENA1 = 0x1000
	// Position of HOST_SLC1_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1_Pos = 0xb
	// Bit mask of HOST_SLC1_TOKEN1_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1_Msk = 0x800
	// Bit HOST_SLC1_TOKEN1_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_0TO1_INT_ENA1 = 0x800
	// Position of HOST_SLC1_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1_Pos = 0xa
	// Bit mask of HOST_SLC1_TOKEN0_0TO1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1_Msk = 0x400
	// Bit HOST_SLC1_TOKEN0_0TO1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_0TO1_INT_ENA1 = 0x400
	// Position of HOST_SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1_Pos = 0x9
	// Bit mask of HOST_SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1_Msk = 0x200
	// Bit HOST_SLC1_TOKEN1_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN1_1TO0_INT_ENA1 = 0x200
	// Position of HOST_SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1_Pos = 0x8
	// Bit mask of HOST_SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1_Msk = 0x100
	// Bit HOST_SLC1_TOKEN0_1TO0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOKEN0_1TO0_INT_ENA1 = 0x100
	// Position of HOST_SLC1_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1_Pos = 0x7
	// Bit mask of HOST_SLC1_TOHOST_BIT7_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1_Msk = 0x80
	// Bit HOST_SLC1_TOHOST_BIT7_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT7_INT_ENA1 = 0x80
	// Position of HOST_SLC1_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1_Pos = 0x6
	// Bit mask of HOST_SLC1_TOHOST_BIT6_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1_Msk = 0x40
	// Bit HOST_SLC1_TOHOST_BIT6_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT6_INT_ENA1 = 0x40
	// Position of HOST_SLC1_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1_Pos = 0x5
	// Bit mask of HOST_SLC1_TOHOST_BIT5_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1_Msk = 0x20
	// Bit HOST_SLC1_TOHOST_BIT5_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT5_INT_ENA1 = 0x20
	// Position of HOST_SLC1_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1_Pos = 0x4
	// Bit mask of HOST_SLC1_TOHOST_BIT4_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1_Msk = 0x10
	// Bit HOST_SLC1_TOHOST_BIT4_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT4_INT_ENA1 = 0x10
	// Position of HOST_SLC1_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1_Pos = 0x3
	// Bit mask of HOST_SLC1_TOHOST_BIT3_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1_Msk = 0x8
	// Bit HOST_SLC1_TOHOST_BIT3_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT3_INT_ENA1 = 0x8
	// Position of HOST_SLC1_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1_Pos = 0x2
	// Bit mask of HOST_SLC1_TOHOST_BIT2_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1_Msk = 0x4
	// Bit HOST_SLC1_TOHOST_BIT2_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT2_INT_ENA1 = 0x4
	// Position of HOST_SLC1_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1_Pos = 0x1
	// Bit mask of HOST_SLC1_TOHOST_BIT1_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1_Msk = 0x2
	// Bit HOST_SLC1_TOHOST_BIT1_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT1_INT_ENA1 = 0x2
	// Position of HOST_SLC1_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1_Pos = 0x0
	// Bit mask of HOST_SLC1_TOHOST_BIT0_INT_ENA1 field.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1_Msk = 0x1
	// Bit HOST_SLC1_TOHOST_BIT0_INT_ENA1.
	SLCHOST_HOST_SLC1HOST_INT_ENA1_HOST_SLC1_TOHOST_BIT0_INT_ENA1 = 0x1

	// HOST_SLCHOSTDATE: HOST_SLCHOSTDATE
	// Position of HOST_SLCHOST_DATE field.
	SLCHOST_HOST_SLCHOSTDATE_HOST_SLCHOST_DATE_Pos = 0x0
	// Bit mask of HOST_SLCHOST_DATE field.
	SLCHOST_HOST_SLCHOSTDATE_HOST_SLCHOST_DATE_Msk = 0xffffffff

	// HOST_SLCHOSTID: HOST_SLCHOSTID
	// Position of HOST_SLCHOST_ID field.
	SLCHOST_HOST_SLCHOSTID_HOST_SLCHOST_ID_Pos = 0x0
	// Bit mask of HOST_SLCHOST_ID field.
	SLCHOST_HOST_SLCHOSTID_HOST_SLCHOST_ID_Msk = 0xffffffff

	// HOST_SLCHOST_CONF: HOST_SLCHOST_CONF
	// Position of HOST_HSPEED_CON_EN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_HSPEED_CON_EN_Pos = 0x1b
	// Bit mask of HOST_HSPEED_CON_EN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_HSPEED_CON_EN_Msk = 0x8000000
	// Bit HOST_HSPEED_CON_EN.
	SLCHOST_HOST_SLCHOST_CONF_HOST_HSPEED_CON_EN = 0x8000000
	// Position of HOST_SDIO_PAD_PULLUP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP_Pos = 0x1a
	// Bit mask of HOST_SDIO_PAD_PULLUP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP_Msk = 0x4000000
	// Bit HOST_SDIO_PAD_PULLUP.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO_PAD_PULLUP = 0x4000000
	// Position of HOST_SDIO20_INT_DELAY field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY_Pos = 0x19
	// Bit mask of HOST_SDIO20_INT_DELAY field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY_Msk = 0x2000000
	// Bit HOST_SDIO20_INT_DELAY.
	SLCHOST_HOST_SLCHOST_CONF_HOST_SDIO20_INT_DELAY = 0x2000000
	// Position of HOST_FRC_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_QUICK_IN_Pos = 0x14
	// Bit mask of HOST_FRC_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_QUICK_IN_Msk = 0x1f00000
	// Position of HOST_FRC_POS_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_POS_SAMP_Pos = 0xf
	// Bit mask of HOST_FRC_POS_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_POS_SAMP_Msk = 0xf8000
	// Position of HOST_FRC_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP_Pos = 0xa
	// Bit mask of HOST_FRC_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_NEG_SAMP_Msk = 0x7c00
	// Position of HOST_FRC_SDIO20 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO20_Pos = 0x5
	// Bit mask of HOST_FRC_SDIO20 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO20_Msk = 0x3e0
	// Position of HOST_FRC_SDIO11 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO11_Pos = 0x0
	// Bit mask of HOST_FRC_SDIO11 field.
	SLCHOST_HOST_SLCHOST_CONF_HOST_FRC_SDIO11_Msk = 0x1f

	// HOST_SLCHOST_INF_ST: HOST_SLCHOST_INF_ST
	// Position of HOST_SDIO_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN_Pos = 0xa
	// Bit mask of HOST_SDIO_QUICK_IN field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_QUICK_IN_Msk = 0x7c00
	// Position of HOST_SDIO_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP_Pos = 0x5
	// Bit mask of HOST_SDIO_NEG_SAMP field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO_NEG_SAMP_Msk = 0x3e0
	// Position of HOST_SDIO20_MODE field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO20_MODE_Pos = 0x0
	// Bit mask of HOST_SDIO20_MODE field.
	SLCHOST_HOST_SLCHOST_INF_ST_HOST_SDIO20_MODE_Msk = 0x1f
)

// Constants for SLC
const (
	// CONF0: SLC_CONF0
	// Position of SLC1_TOKEN_SEL field.
	SLC_CONF0_SLC1_TOKEN_SEL_Pos = 0x1f
	// Bit mask of SLC1_TOKEN_SEL field.
	SLC_CONF0_SLC1_TOKEN_SEL_Msk = 0x80000000
	// Bit SLC1_TOKEN_SEL.
	SLC_CONF0_SLC1_TOKEN_SEL = 0x80000000
	// Position of SLC1_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC1_TOKEN_AUTO_CLR_Pos = 0x1e
	// Bit mask of SLC1_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC1_TOKEN_AUTO_CLR_Msk = 0x40000000
	// Bit SLC1_TOKEN_AUTO_CLR.
	SLC_CONF0_SLC1_TOKEN_AUTO_CLR = 0x40000000
	// Position of SLC1_TXDATA_BURST_EN field.
	SLC_CONF0_SLC1_TXDATA_BURST_EN_Pos = 0x1d
	// Bit mask of SLC1_TXDATA_BURST_EN field.
	SLC_CONF0_SLC1_TXDATA_BURST_EN_Msk = 0x20000000
	// Bit SLC1_TXDATA_BURST_EN.
	SLC_CONF0_SLC1_TXDATA_BURST_EN = 0x20000000
	// Position of SLC1_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_TXDSCR_BURST_EN_Pos = 0x1c
	// Bit mask of SLC1_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_TXDSCR_BURST_EN_Msk = 0x10000000
	// Bit SLC1_TXDSCR_BURST_EN.
	SLC_CONF0_SLC1_TXDSCR_BURST_EN = 0x10000000
	// Position of SLC1_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_TXLINK_AUTO_RET_Pos = 0x1b
	// Bit mask of SLC1_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_TXLINK_AUTO_RET_Msk = 0x8000000
	// Bit SLC1_TXLINK_AUTO_RET.
	SLC_CONF0_SLC1_TXLINK_AUTO_RET = 0x8000000
	// Position of SLC1_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_RXLINK_AUTO_RET_Pos = 0x1a
	// Bit mask of SLC1_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC1_RXLINK_AUTO_RET_Msk = 0x4000000
	// Bit SLC1_RXLINK_AUTO_RET.
	SLC_CONF0_SLC1_RXLINK_AUTO_RET = 0x4000000
	// Position of SLC1_RXDATA_BURST_EN field.
	SLC_CONF0_SLC1_RXDATA_BURST_EN_Pos = 0x19
	// Bit mask of SLC1_RXDATA_BURST_EN field.
	SLC_CONF0_SLC1_RXDATA_BURST_EN_Msk = 0x2000000
	// Bit SLC1_RXDATA_BURST_EN.
	SLC_CONF0_SLC1_RXDATA_BURST_EN = 0x2000000
	// Position of SLC1_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_RXDSCR_BURST_EN_Pos = 0x18
	// Bit mask of SLC1_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC1_RXDSCR_BURST_EN_Msk = 0x1000000
	// Bit SLC1_RXDSCR_BURST_EN.
	SLC_CONF0_SLC1_RXDSCR_BURST_EN = 0x1000000
	// Position of SLC1_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC1_RX_NO_RESTART_CLR_Pos = 0x17
	// Bit mask of SLC1_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC1_RX_NO_RESTART_CLR_Msk = 0x800000
	// Bit SLC1_RX_NO_RESTART_CLR.
	SLC_CONF0_SLC1_RX_NO_RESTART_CLR = 0x800000
	// Position of SLC1_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC1_RX_AUTO_WRBACK_Pos = 0x16
	// Bit mask of SLC1_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC1_RX_AUTO_WRBACK_Msk = 0x400000
	// Bit SLC1_RX_AUTO_WRBACK.
	SLC_CONF0_SLC1_RX_AUTO_WRBACK = 0x400000
	// Position of SLC1_RX_LOOP_TEST field.
	SLC_CONF0_SLC1_RX_LOOP_TEST_Pos = 0x15
	// Bit mask of SLC1_RX_LOOP_TEST field.
	SLC_CONF0_SLC1_RX_LOOP_TEST_Msk = 0x200000
	// Bit SLC1_RX_LOOP_TEST.
	SLC_CONF0_SLC1_RX_LOOP_TEST = 0x200000
	// Position of SLC1_TX_LOOP_TEST field.
	SLC_CONF0_SLC1_TX_LOOP_TEST_Pos = 0x14
	// Bit mask of SLC1_TX_LOOP_TEST field.
	SLC_CONF0_SLC1_TX_LOOP_TEST_Msk = 0x100000
	// Bit SLC1_TX_LOOP_TEST.
	SLC_CONF0_SLC1_TX_LOOP_TEST = 0x100000
	// Position of SLC1_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC1_WR_RETRY_MASK_EN_Pos = 0x13
	// Bit mask of SLC1_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC1_WR_RETRY_MASK_EN_Msk = 0x80000
	// Bit SLC1_WR_RETRY_MASK_EN.
	SLC_CONF0_SLC1_WR_RETRY_MASK_EN = 0x80000
	// Position of SLC0_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC0_WR_RETRY_MASK_EN_Pos = 0x12
	// Bit mask of SLC0_WR_RETRY_MASK_EN field.
	SLC_CONF0_SLC0_WR_RETRY_MASK_EN_Msk = 0x40000
	// Bit SLC0_WR_RETRY_MASK_EN.
	SLC_CONF0_SLC0_WR_RETRY_MASK_EN = 0x40000
	// Position of SLC1_RX_RST field.
	SLC_CONF0_SLC1_RX_RST_Pos = 0x11
	// Bit mask of SLC1_RX_RST field.
	SLC_CONF0_SLC1_RX_RST_Msk = 0x20000
	// Bit SLC1_RX_RST.
	SLC_CONF0_SLC1_RX_RST = 0x20000
	// Position of SLC1_TX_RST field.
	SLC_CONF0_SLC1_TX_RST_Pos = 0x10
	// Bit mask of SLC1_TX_RST field.
	SLC_CONF0_SLC1_TX_RST_Msk = 0x10000
	// Bit SLC1_TX_RST.
	SLC_CONF0_SLC1_TX_RST = 0x10000
	// Position of SLC0_TOKEN_SEL field.
	SLC_CONF0_SLC0_TOKEN_SEL_Pos = 0xf
	// Bit mask of SLC0_TOKEN_SEL field.
	SLC_CONF0_SLC0_TOKEN_SEL_Msk = 0x8000
	// Bit SLC0_TOKEN_SEL.
	SLC_CONF0_SLC0_TOKEN_SEL = 0x8000
	// Position of SLC0_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC0_TOKEN_AUTO_CLR_Pos = 0xe
	// Bit mask of SLC0_TOKEN_AUTO_CLR field.
	SLC_CONF0_SLC0_TOKEN_AUTO_CLR_Msk = 0x4000
	// Bit SLC0_TOKEN_AUTO_CLR.
	SLC_CONF0_SLC0_TOKEN_AUTO_CLR = 0x4000
	// Position of SLC0_TXDATA_BURST_EN field.
	SLC_CONF0_SLC0_TXDATA_BURST_EN_Pos = 0xd
	// Bit mask of SLC0_TXDATA_BURST_EN field.
	SLC_CONF0_SLC0_TXDATA_BURST_EN_Msk = 0x2000
	// Bit SLC0_TXDATA_BURST_EN.
	SLC_CONF0_SLC0_TXDATA_BURST_EN = 0x2000
	// Position of SLC0_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_TXDSCR_BURST_EN_Pos = 0xc
	// Bit mask of SLC0_TXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_TXDSCR_BURST_EN_Msk = 0x1000
	// Bit SLC0_TXDSCR_BURST_EN.
	SLC_CONF0_SLC0_TXDSCR_BURST_EN = 0x1000
	// Position of SLC0_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_TXLINK_AUTO_RET_Pos = 0xb
	// Bit mask of SLC0_TXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_TXLINK_AUTO_RET_Msk = 0x800
	// Bit SLC0_TXLINK_AUTO_RET.
	SLC_CONF0_SLC0_TXLINK_AUTO_RET = 0x800
	// Position of SLC0_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_RXLINK_AUTO_RET_Pos = 0xa
	// Bit mask of SLC0_RXLINK_AUTO_RET field.
	SLC_CONF0_SLC0_RXLINK_AUTO_RET_Msk = 0x400
	// Bit SLC0_RXLINK_AUTO_RET.
	SLC_CONF0_SLC0_RXLINK_AUTO_RET = 0x400
	// Position of SLC0_RXDATA_BURST_EN field.
	SLC_CONF0_SLC0_RXDATA_BURST_EN_Pos = 0x9
	// Bit mask of SLC0_RXDATA_BURST_EN field.
	SLC_CONF0_SLC0_RXDATA_BURST_EN_Msk = 0x200
	// Bit SLC0_RXDATA_BURST_EN.
	SLC_CONF0_SLC0_RXDATA_BURST_EN = 0x200
	// Position of SLC0_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_RXDSCR_BURST_EN_Pos = 0x8
	// Bit mask of SLC0_RXDSCR_BURST_EN field.
	SLC_CONF0_SLC0_RXDSCR_BURST_EN_Msk = 0x100
	// Bit SLC0_RXDSCR_BURST_EN.
	SLC_CONF0_SLC0_RXDSCR_BURST_EN = 0x100
	// Position of SLC0_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC0_RX_NO_RESTART_CLR_Pos = 0x7
	// Bit mask of SLC0_RX_NO_RESTART_CLR field.
	SLC_CONF0_SLC0_RX_NO_RESTART_CLR_Msk = 0x80
	// Bit SLC0_RX_NO_RESTART_CLR.
	SLC_CONF0_SLC0_RX_NO_RESTART_CLR = 0x80
	// Position of SLC0_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC0_RX_AUTO_WRBACK_Pos = 0x6
	// Bit mask of SLC0_RX_AUTO_WRBACK field.
	SLC_CONF0_SLC0_RX_AUTO_WRBACK_Msk = 0x40
	// Bit SLC0_RX_AUTO_WRBACK.
	SLC_CONF0_SLC0_RX_AUTO_WRBACK = 0x40
	// Position of SLC0_RX_LOOP_TEST field.
	SLC_CONF0_SLC0_RX_LOOP_TEST_Pos = 0x5
	// Bit mask of SLC0_RX_LOOP_TEST field.
	SLC_CONF0_SLC0_RX_LOOP_TEST_Msk = 0x20
	// Bit SLC0_RX_LOOP_TEST.
	SLC_CONF0_SLC0_RX_LOOP_TEST = 0x20
	// Position of SLC0_TX_LOOP_TEST field.
	SLC_CONF0_SLC0_TX_LOOP_TEST_Pos = 0x4
	// Bit mask of SLC0_TX_LOOP_TEST field.
	SLC_CONF0_SLC0_TX_LOOP_TEST_Msk = 0x10
	// Bit SLC0_TX_LOOP_TEST.
	SLC_CONF0_SLC0_TX_LOOP_TEST = 0x10
	// Position of AHBM_RST field.
	SLC_CONF0_AHBM_RST_Pos = 0x3
	// Bit mask of AHBM_RST field.
	SLC_CONF0_AHBM_RST_Msk = 0x8
	// Bit AHBM_RST.
	SLC_CONF0_AHBM_RST = 0x8
	// Position of AHBM_FIFO_RST field.
	SLC_CONF0_AHBM_FIFO_RST_Pos = 0x2
	// Bit mask of AHBM_FIFO_RST field.
	SLC_CONF0_AHBM_FIFO_RST_Msk = 0x4
	// Bit AHBM_FIFO_RST.
	SLC_CONF0_AHBM_FIFO_RST = 0x4
	// Position of SLC0_RX_RST field.
	SLC_CONF0_SLC0_RX_RST_Pos = 0x1
	// Bit mask of SLC0_RX_RST field.
	SLC_CONF0_SLC0_RX_RST_Msk = 0x2
	// Bit SLC0_RX_RST.
	SLC_CONF0_SLC0_RX_RST = 0x2
	// Position of SLC0_TX_RST field.
	SLC_CONF0_SLC0_TX_RST_Pos = 0x0
	// Bit mask of SLC0_TX_RST field.
	SLC_CONF0_SLC0_TX_RST_Msk = 0x1
	// Bit SLC0_TX_RST.
	SLC_CONF0_SLC0_TX_RST = 0x1

	// _0INT_RAW: SLC_0INT_RAW
	// Position of SLC0_RX_QUICK_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_QUICK_EOF_INT_RAW = 0x4000000
	// Position of CMD_DTC_INT_RAW field.
	SLC__0INT_RAW_CMD_DTC_INT_RAW_Pos = 0x19
	// Bit mask of CMD_DTC_INT_RAW field.
	SLC__0INT_RAW_CMD_DTC_INT_RAW_Msk = 0x2000000
	// Bit CMD_DTC_INT_RAW.
	SLC__0INT_RAW_CMD_DTC_INT_RAW = 0x2000000
	// Position of SLC0_TX_ERR_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_ERR_EOF_INT_RAW = 0x1000000
	// Position of SLC0_WR_RETRY_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_RAW.
	SLC__0INT_RAW_SLC0_WR_RETRY_DONE_INT_RAW = 0x800000
	// Position of SLC0_HOST_RD_ACK_INT_RAW field.
	SLC__0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_RAW field.
	SLC__0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_RAW.
	SLC__0INT_RAW_SLC0_HOST_RD_ACK_INT_RAW = 0x400000
	// Position of SLC0_TX_DSCR_EMPTY_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_DSCR_EMPTY_INT_RAW = 0x200000
	// Position of SLC0_RX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_DSCR_ERR_INT_RAW = 0x100000
	// Position of SLC0_TX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_DSCR_ERR_INT_RAW = 0x80000
	// Position of SLC0_TOHOST_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOHOST_INT_RAW_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOHOST_INT_RAW_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_RAW.
	SLC__0INT_RAW_SLC0_TOHOST_INT_RAW = 0x40000
	// Position of SLC0_RX_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_EOF_INT_RAW_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_EOF_INT_RAW_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_EOF_INT_RAW = 0x20000
	// Position of SLC0_RX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DONE_INT_RAW_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_DONE_INT_RAW_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_DONE_INT_RAW = 0x10000
	// Position of SLC0_TX_SUC_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_SUC_EOF_INT_RAW = 0x8000
	// Position of SLC0_TX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DONE_INT_RAW_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_DONE_INT_RAW_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_DONE_INT_RAW = 0x4000
	// Position of SLC0_TOKEN1_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_RAW.
	SLC__0INT_RAW_SLC0_TOKEN1_1TO0_INT_RAW = 0x2000
	// Position of SLC0_TOKEN0_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_RAW field.
	SLC__0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_RAW.
	SLC__0INT_RAW_SLC0_TOKEN0_1TO0_INT_RAW = 0x1000
	// Position of SLC0_TX_OVF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_OVF_INT_RAW_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_OVF_INT_RAW_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_OVF_INT_RAW = 0x800
	// Position of SLC0_RX_UDF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_UDF_INT_RAW_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_UDF_INT_RAW_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_UDF_INT_RAW = 0x400
	// Position of SLC0_TX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_START_INT_RAW_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_TX_START_INT_RAW_Msk = 0x200
	// Bit SLC0_TX_START_INT_RAW.
	SLC__0INT_RAW_SLC0_TX_START_INT_RAW = 0x200
	// Position of SLC0_RX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_START_INT_RAW_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_RAW field.
	SLC__0INT_RAW_SLC0_RX_START_INT_RAW_Msk = 0x100
	// Bit SLC0_RX_START_INT_RAW.
	SLC__0INT_RAW_SLC0_RX_START_INT_RAW = 0x100
	// Position of FRHOST_BIT7_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT7_INT_RAW_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT7_INT_RAW_Msk = 0x80
	// Bit FRHOST_BIT7_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT7_INT_RAW = 0x80
	// Position of FRHOST_BIT6_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT6_INT_RAW_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT6_INT_RAW_Msk = 0x40
	// Bit FRHOST_BIT6_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT6_INT_RAW = 0x40
	// Position of FRHOST_BIT5_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT5_INT_RAW_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT5_INT_RAW_Msk = 0x20
	// Bit FRHOST_BIT5_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT5_INT_RAW = 0x20
	// Position of FRHOST_BIT4_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT4_INT_RAW_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT4_INT_RAW_Msk = 0x10
	// Bit FRHOST_BIT4_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT4_INT_RAW = 0x10
	// Position of FRHOST_BIT3_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT3_INT_RAW_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT3_INT_RAW_Msk = 0x8
	// Bit FRHOST_BIT3_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT3_INT_RAW = 0x8
	// Position of FRHOST_BIT2_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT2_INT_RAW_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT2_INT_RAW_Msk = 0x4
	// Bit FRHOST_BIT2_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT2_INT_RAW = 0x4
	// Position of FRHOST_BIT1_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT1_INT_RAW_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT1_INT_RAW_Msk = 0x2
	// Bit FRHOST_BIT1_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT1_INT_RAW = 0x2
	// Position of FRHOST_BIT0_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT0_INT_RAW_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_RAW field.
	SLC__0INT_RAW_FRHOST_BIT0_INT_RAW_Msk = 0x1
	// Bit FRHOST_BIT0_INT_RAW.
	SLC__0INT_RAW_FRHOST_BIT0_INT_RAW = 0x1

	// _0INT_ST: SLC_0INT_ST
	// Position of SLC0_RX_QUICK_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_QUICK_EOF_INT_ST_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_QUICK_EOF_INT_ST_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ST.
	SLC__0INT_ST_SLC0_RX_QUICK_EOF_INT_ST = 0x4000000
	// Position of CMD_DTC_INT_ST field.
	SLC__0INT_ST_CMD_DTC_INT_ST_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ST field.
	SLC__0INT_ST_CMD_DTC_INT_ST_Msk = 0x2000000
	// Bit CMD_DTC_INT_ST.
	SLC__0INT_ST_CMD_DTC_INT_ST = 0x2000000
	// Position of SLC0_TX_ERR_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_ERR_EOF_INT_ST_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_ERR_EOF_INT_ST_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ST.
	SLC__0INT_ST_SLC0_TX_ERR_EOF_INT_ST = 0x1000000
	// Position of SLC0_WR_RETRY_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_WR_RETRY_DONE_INT_ST_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_WR_RETRY_DONE_INT_ST_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ST.
	SLC__0INT_ST_SLC0_WR_RETRY_DONE_INT_ST = 0x800000
	// Position of SLC0_HOST_RD_ACK_INT_ST field.
	SLC__0INT_ST_SLC0_HOST_RD_ACK_INT_ST_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ST field.
	SLC__0INT_ST_SLC0_HOST_RD_ACK_INT_ST_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ST.
	SLC__0INT_ST_SLC0_HOST_RD_ACK_INT_ST = 0x400000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ST.
	SLC__0INT_ST_SLC0_TX_DSCR_EMPTY_INT_ST = 0x200000
	// Position of SLC0_RX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DSCR_ERR_INT_ST_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DSCR_ERR_INT_ST_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ST.
	SLC__0INT_ST_SLC0_RX_DSCR_ERR_INT_ST = 0x100000
	// Position of SLC0_TX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_ERR_INT_ST_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DSCR_ERR_INT_ST_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ST.
	SLC__0INT_ST_SLC0_TX_DSCR_ERR_INT_ST = 0x80000
	// Position of SLC0_TOHOST_INT_ST field.
	SLC__0INT_ST_SLC0_TOHOST_INT_ST_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ST field.
	SLC__0INT_ST_SLC0_TOHOST_INT_ST_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ST.
	SLC__0INT_ST_SLC0_TOHOST_INT_ST = 0x40000
	// Position of SLC0_RX_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_EOF_INT_ST_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_EOF_INT_ST_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ST.
	SLC__0INT_ST_SLC0_RX_EOF_INT_ST = 0x20000
	// Position of SLC0_RX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DONE_INT_ST_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_RX_DONE_INT_ST_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ST.
	SLC__0INT_ST_SLC0_RX_DONE_INT_ST = 0x10000
	// Position of SLC0_TX_SUC_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_SUC_EOF_INT_ST_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_SUC_EOF_INT_ST_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ST.
	SLC__0INT_ST_SLC0_TX_SUC_EOF_INT_ST = 0x8000
	// Position of SLC0_TX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DONE_INT_ST_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ST field.
	SLC__0INT_ST_SLC0_TX_DONE_INT_ST_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ST.
	SLC__0INT_ST_SLC0_TX_DONE_INT_ST = 0x4000
	// Position of SLC0_TOKEN1_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN1_1TO0_INT_ST_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN1_1TO0_INT_ST_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ST.
	SLC__0INT_ST_SLC0_TOKEN1_1TO0_INT_ST = 0x2000
	// Position of SLC0_TOKEN0_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN0_1TO0_INT_ST_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ST field.
	SLC__0INT_ST_SLC0_TOKEN0_1TO0_INT_ST_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ST.
	SLC__0INT_ST_SLC0_TOKEN0_1TO0_INT_ST = 0x1000
	// Position of SLC0_TX_OVF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_OVF_INT_ST_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ST field.
	SLC__0INT_ST_SLC0_TX_OVF_INT_ST_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ST.
	SLC__0INT_ST_SLC0_TX_OVF_INT_ST = 0x800
	// Position of SLC0_RX_UDF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_UDF_INT_ST_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ST field.
	SLC__0INT_ST_SLC0_RX_UDF_INT_ST_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ST.
	SLC__0INT_ST_SLC0_RX_UDF_INT_ST = 0x400
	// Position of SLC0_TX_START_INT_ST field.
	SLC__0INT_ST_SLC0_TX_START_INT_ST_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ST field.
	SLC__0INT_ST_SLC0_TX_START_INT_ST_Msk = 0x200
	// Bit SLC0_TX_START_INT_ST.
	SLC__0INT_ST_SLC0_TX_START_INT_ST = 0x200
	// Position of SLC0_RX_START_INT_ST field.
	SLC__0INT_ST_SLC0_RX_START_INT_ST_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ST field.
	SLC__0INT_ST_SLC0_RX_START_INT_ST_Msk = 0x100
	// Bit SLC0_RX_START_INT_ST.
	SLC__0INT_ST_SLC0_RX_START_INT_ST = 0x100
	// Position of FRHOST_BIT7_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT7_INT_ST_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT7_INT_ST_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ST.
	SLC__0INT_ST_FRHOST_BIT7_INT_ST = 0x80
	// Position of FRHOST_BIT6_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT6_INT_ST_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT6_INT_ST_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ST.
	SLC__0INT_ST_FRHOST_BIT6_INT_ST = 0x40
	// Position of FRHOST_BIT5_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT5_INT_ST_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT5_INT_ST_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ST.
	SLC__0INT_ST_FRHOST_BIT5_INT_ST = 0x20
	// Position of FRHOST_BIT4_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT4_INT_ST_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT4_INT_ST_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ST.
	SLC__0INT_ST_FRHOST_BIT4_INT_ST = 0x10
	// Position of FRHOST_BIT3_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT3_INT_ST_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT3_INT_ST_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ST.
	SLC__0INT_ST_FRHOST_BIT3_INT_ST = 0x8
	// Position of FRHOST_BIT2_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT2_INT_ST_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT2_INT_ST_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ST.
	SLC__0INT_ST_FRHOST_BIT2_INT_ST = 0x4
	// Position of FRHOST_BIT1_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT1_INT_ST_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT1_INT_ST_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ST.
	SLC__0INT_ST_FRHOST_BIT1_INT_ST = 0x2
	// Position of FRHOST_BIT0_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT0_INT_ST_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ST field.
	SLC__0INT_ST_FRHOST_BIT0_INT_ST_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ST.
	SLC__0INT_ST_FRHOST_BIT0_INT_ST = 0x1

	// _0INT_ENA: SLC_0INT_ENA
	// Position of SLC0_RX_QUICK_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_QUICK_EOF_INT_ENA = 0x4000000
	// Position of CMD_DTC_INT_ENA field.
	SLC__0INT_ENA_CMD_DTC_INT_ENA_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ENA field.
	SLC__0INT_ENA_CMD_DTC_INT_ENA_Msk = 0x2000000
	// Bit CMD_DTC_INT_ENA.
	SLC__0INT_ENA_CMD_DTC_INT_ENA = 0x2000000
	// Position of SLC0_TX_ERR_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_ERR_EOF_INT_ENA = 0x1000000
	// Position of SLC0_WR_RETRY_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ENA.
	SLC__0INT_ENA_SLC0_WR_RETRY_DONE_INT_ENA = 0x800000
	// Position of SLC0_HOST_RD_ACK_INT_ENA field.
	SLC__0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ENA field.
	SLC__0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ENA.
	SLC__0INT_ENA_SLC0_HOST_RD_ACK_INT_ENA = 0x400000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_DSCR_EMPTY_INT_ENA = 0x200000
	// Position of SLC0_RX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_DSCR_ERR_INT_ENA = 0x100000
	// Position of SLC0_TX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_DSCR_ERR_INT_ENA = 0x80000
	// Position of SLC0_TOHOST_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOHOST_INT_ENA_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOHOST_INT_ENA_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ENA.
	SLC__0INT_ENA_SLC0_TOHOST_INT_ENA = 0x40000
	// Position of SLC0_RX_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_EOF_INT_ENA_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_EOF_INT_ENA_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_EOF_INT_ENA = 0x20000
	// Position of SLC0_RX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DONE_INT_ENA_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_DONE_INT_ENA_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_DONE_INT_ENA = 0x10000
	// Position of SLC0_TX_SUC_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_SUC_EOF_INT_ENA = 0x8000
	// Position of SLC0_TX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DONE_INT_ENA_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_DONE_INT_ENA_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_DONE_INT_ENA = 0x4000
	// Position of SLC0_TOKEN1_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ENA.
	SLC__0INT_ENA_SLC0_TOKEN1_1TO0_INT_ENA = 0x2000
	// Position of SLC0_TOKEN0_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ENA field.
	SLC__0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ENA.
	SLC__0INT_ENA_SLC0_TOKEN0_1TO0_INT_ENA = 0x1000
	// Position of SLC0_TX_OVF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_OVF_INT_ENA_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_OVF_INT_ENA_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_OVF_INT_ENA = 0x800
	// Position of SLC0_RX_UDF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_UDF_INT_ENA_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_UDF_INT_ENA_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_UDF_INT_ENA = 0x400
	// Position of SLC0_TX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_START_INT_ENA_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_TX_START_INT_ENA_Msk = 0x200
	// Bit SLC0_TX_START_INT_ENA.
	SLC__0INT_ENA_SLC0_TX_START_INT_ENA = 0x200
	// Position of SLC0_RX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_START_INT_ENA_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ENA field.
	SLC__0INT_ENA_SLC0_RX_START_INT_ENA_Msk = 0x100
	// Bit SLC0_RX_START_INT_ENA.
	SLC__0INT_ENA_SLC0_RX_START_INT_ENA = 0x100
	// Position of FRHOST_BIT7_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT7_INT_ENA_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT7_INT_ENA_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT7_INT_ENA = 0x80
	// Position of FRHOST_BIT6_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT6_INT_ENA_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT6_INT_ENA_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT6_INT_ENA = 0x40
	// Position of FRHOST_BIT5_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT5_INT_ENA_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT5_INT_ENA_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT5_INT_ENA = 0x20
	// Position of FRHOST_BIT4_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT4_INT_ENA_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT4_INT_ENA_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT4_INT_ENA = 0x10
	// Position of FRHOST_BIT3_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT3_INT_ENA_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT3_INT_ENA_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT3_INT_ENA = 0x8
	// Position of FRHOST_BIT2_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT2_INT_ENA_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT2_INT_ENA_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT2_INT_ENA = 0x4
	// Position of FRHOST_BIT1_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT1_INT_ENA_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT1_INT_ENA_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT1_INT_ENA = 0x2
	// Position of FRHOST_BIT0_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT0_INT_ENA_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ENA field.
	SLC__0INT_ENA_FRHOST_BIT0_INT_ENA_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ENA.
	SLC__0INT_ENA_FRHOST_BIT0_INT_ENA = 0x1

	// _0INT_CLR: SLC_0INT_CLR
	// Position of SLC0_RX_QUICK_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_QUICK_EOF_INT_CLR = 0x4000000
	// Position of CMD_DTC_INT_CLR field.
	SLC__0INT_CLR_CMD_DTC_INT_CLR_Pos = 0x19
	// Bit mask of CMD_DTC_INT_CLR field.
	SLC__0INT_CLR_CMD_DTC_INT_CLR_Msk = 0x2000000
	// Bit CMD_DTC_INT_CLR.
	SLC__0INT_CLR_CMD_DTC_INT_CLR = 0x2000000
	// Position of SLC0_TX_ERR_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_ERR_EOF_INT_CLR = 0x1000000
	// Position of SLC0_WR_RETRY_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_CLR.
	SLC__0INT_CLR_SLC0_WR_RETRY_DONE_INT_CLR = 0x800000
	// Position of SLC0_HOST_RD_ACK_INT_CLR field.
	SLC__0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_CLR field.
	SLC__0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_CLR.
	SLC__0INT_CLR_SLC0_HOST_RD_ACK_INT_CLR = 0x400000
	// Position of SLC0_TX_DSCR_EMPTY_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_DSCR_EMPTY_INT_CLR = 0x200000
	// Position of SLC0_RX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_DSCR_ERR_INT_CLR = 0x100000
	// Position of SLC0_TX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_DSCR_ERR_INT_CLR = 0x80000
	// Position of SLC0_TOHOST_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOHOST_INT_CLR_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOHOST_INT_CLR_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_CLR.
	SLC__0INT_CLR_SLC0_TOHOST_INT_CLR = 0x40000
	// Position of SLC0_RX_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_EOF_INT_CLR_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_EOF_INT_CLR_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_EOF_INT_CLR = 0x20000
	// Position of SLC0_RX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DONE_INT_CLR_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_DONE_INT_CLR_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_DONE_INT_CLR = 0x10000
	// Position of SLC0_TX_SUC_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_SUC_EOF_INT_CLR = 0x8000
	// Position of SLC0_TX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DONE_INT_CLR_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_DONE_INT_CLR_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_DONE_INT_CLR = 0x4000
	// Position of SLC0_TOKEN1_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_CLR.
	SLC__0INT_CLR_SLC0_TOKEN1_1TO0_INT_CLR = 0x2000
	// Position of SLC0_TOKEN0_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_CLR field.
	SLC__0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_CLR.
	SLC__0INT_CLR_SLC0_TOKEN0_1TO0_INT_CLR = 0x1000
	// Position of SLC0_TX_OVF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_OVF_INT_CLR_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_OVF_INT_CLR_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_OVF_INT_CLR = 0x800
	// Position of SLC0_RX_UDF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_UDF_INT_CLR_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_UDF_INT_CLR_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_UDF_INT_CLR = 0x400
	// Position of SLC0_TX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_START_INT_CLR_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_TX_START_INT_CLR_Msk = 0x200
	// Bit SLC0_TX_START_INT_CLR.
	SLC__0INT_CLR_SLC0_TX_START_INT_CLR = 0x200
	// Position of SLC0_RX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_START_INT_CLR_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_CLR field.
	SLC__0INT_CLR_SLC0_RX_START_INT_CLR_Msk = 0x100
	// Bit SLC0_RX_START_INT_CLR.
	SLC__0INT_CLR_SLC0_RX_START_INT_CLR = 0x100
	// Position of FRHOST_BIT7_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT7_INT_CLR_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT7_INT_CLR_Msk = 0x80
	// Bit FRHOST_BIT7_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT7_INT_CLR = 0x80
	// Position of FRHOST_BIT6_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT6_INT_CLR_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT6_INT_CLR_Msk = 0x40
	// Bit FRHOST_BIT6_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT6_INT_CLR = 0x40
	// Position of FRHOST_BIT5_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT5_INT_CLR_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT5_INT_CLR_Msk = 0x20
	// Bit FRHOST_BIT5_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT5_INT_CLR = 0x20
	// Position of FRHOST_BIT4_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT4_INT_CLR_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT4_INT_CLR_Msk = 0x10
	// Bit FRHOST_BIT4_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT4_INT_CLR = 0x10
	// Position of FRHOST_BIT3_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT3_INT_CLR_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT3_INT_CLR_Msk = 0x8
	// Bit FRHOST_BIT3_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT3_INT_CLR = 0x8
	// Position of FRHOST_BIT2_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT2_INT_CLR_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT2_INT_CLR_Msk = 0x4
	// Bit FRHOST_BIT2_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT2_INT_CLR = 0x4
	// Position of FRHOST_BIT1_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT1_INT_CLR_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT1_INT_CLR_Msk = 0x2
	// Bit FRHOST_BIT1_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT1_INT_CLR = 0x2
	// Position of FRHOST_BIT0_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT0_INT_CLR_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_CLR field.
	SLC__0INT_CLR_FRHOST_BIT0_INT_CLR_Msk = 0x1
	// Bit FRHOST_BIT0_INT_CLR.
	SLC__0INT_CLR_FRHOST_BIT0_INT_CLR = 0x1

	// _1INT_RAW: SLC_1INT_RAW
	// Position of SLC1_TX_ERR_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_ERR_EOF_INT_RAW = 0x1000000
	// Position of SLC1_WR_RETRY_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_RAW.
	SLC__1INT_RAW_SLC1_WR_RETRY_DONE_INT_RAW = 0x800000
	// Position of SLC1_HOST_RD_ACK_INT_RAW field.
	SLC__1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_RAW field.
	SLC__1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_RAW.
	SLC__1INT_RAW_SLC1_HOST_RD_ACK_INT_RAW = 0x400000
	// Position of SLC1_TX_DSCR_EMPTY_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_DSCR_EMPTY_INT_RAW = 0x200000
	// Position of SLC1_RX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_DSCR_ERR_INT_RAW = 0x100000
	// Position of SLC1_TX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_DSCR_ERR_INT_RAW = 0x80000
	// Position of SLC1_TOHOST_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOHOST_INT_RAW_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOHOST_INT_RAW_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_RAW.
	SLC__1INT_RAW_SLC1_TOHOST_INT_RAW = 0x40000
	// Position of SLC1_RX_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_EOF_INT_RAW_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_EOF_INT_RAW_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_EOF_INT_RAW = 0x20000
	// Position of SLC1_RX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DONE_INT_RAW_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_DONE_INT_RAW_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_DONE_INT_RAW = 0x10000
	// Position of SLC1_TX_SUC_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_SUC_EOF_INT_RAW = 0x8000
	// Position of SLC1_TX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DONE_INT_RAW_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_DONE_INT_RAW_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_DONE_INT_RAW = 0x4000
	// Position of SLC1_TOKEN1_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_RAW.
	SLC__1INT_RAW_SLC1_TOKEN1_1TO0_INT_RAW = 0x2000
	// Position of SLC1_TOKEN0_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_RAW field.
	SLC__1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_RAW.
	SLC__1INT_RAW_SLC1_TOKEN0_1TO0_INT_RAW = 0x1000
	// Position of SLC1_TX_OVF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_OVF_INT_RAW_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_OVF_INT_RAW_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_OVF_INT_RAW = 0x800
	// Position of SLC1_RX_UDF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_UDF_INT_RAW_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_UDF_INT_RAW_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_UDF_INT_RAW = 0x400
	// Position of SLC1_TX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_START_INT_RAW_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_TX_START_INT_RAW_Msk = 0x200
	// Bit SLC1_TX_START_INT_RAW.
	SLC__1INT_RAW_SLC1_TX_START_INT_RAW = 0x200
	// Position of SLC1_RX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_START_INT_RAW_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_RAW field.
	SLC__1INT_RAW_SLC1_RX_START_INT_RAW_Msk = 0x100
	// Bit SLC1_RX_START_INT_RAW.
	SLC__1INT_RAW_SLC1_RX_START_INT_RAW = 0x100
	// Position of FRHOST_BIT15_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT15_INT_RAW_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT15_INT_RAW_Msk = 0x80
	// Bit FRHOST_BIT15_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT15_INT_RAW = 0x80
	// Position of FRHOST_BIT14_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT14_INT_RAW_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT14_INT_RAW_Msk = 0x40
	// Bit FRHOST_BIT14_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT14_INT_RAW = 0x40
	// Position of FRHOST_BIT13_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT13_INT_RAW_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT13_INT_RAW_Msk = 0x20
	// Bit FRHOST_BIT13_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT13_INT_RAW = 0x20
	// Position of FRHOST_BIT12_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT12_INT_RAW_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT12_INT_RAW_Msk = 0x10
	// Bit FRHOST_BIT12_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT12_INT_RAW = 0x10
	// Position of FRHOST_BIT11_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT11_INT_RAW_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT11_INT_RAW_Msk = 0x8
	// Bit FRHOST_BIT11_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT11_INT_RAW = 0x8
	// Position of FRHOST_BIT10_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT10_INT_RAW_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT10_INT_RAW_Msk = 0x4
	// Bit FRHOST_BIT10_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT10_INT_RAW = 0x4
	// Position of FRHOST_BIT9_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT9_INT_RAW_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT9_INT_RAW_Msk = 0x2
	// Bit FRHOST_BIT9_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT9_INT_RAW = 0x2
	// Position of FRHOST_BIT8_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT8_INT_RAW_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_RAW field.
	SLC__1INT_RAW_FRHOST_BIT8_INT_RAW_Msk = 0x1
	// Bit FRHOST_BIT8_INT_RAW.
	SLC__1INT_RAW_FRHOST_BIT8_INT_RAW = 0x1

	// _1INT_ST: SLC_1INT_ST
	// Position of SLC1_TX_ERR_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_ERR_EOF_INT_ST_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_ERR_EOF_INT_ST_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ST.
	SLC__1INT_ST_SLC1_TX_ERR_EOF_INT_ST = 0x1000000
	// Position of SLC1_WR_RETRY_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_WR_RETRY_DONE_INT_ST_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_WR_RETRY_DONE_INT_ST_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ST.
	SLC__1INT_ST_SLC1_WR_RETRY_DONE_INT_ST = 0x800000
	// Position of SLC1_HOST_RD_ACK_INT_ST field.
	SLC__1INT_ST_SLC1_HOST_RD_ACK_INT_ST_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ST field.
	SLC__1INT_ST_SLC1_HOST_RD_ACK_INT_ST_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ST.
	SLC__1INT_ST_SLC1_HOST_RD_ACK_INT_ST = 0x400000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ST.
	SLC__1INT_ST_SLC1_TX_DSCR_EMPTY_INT_ST = 0x200000
	// Position of SLC1_RX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DSCR_ERR_INT_ST_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DSCR_ERR_INT_ST_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ST.
	SLC__1INT_ST_SLC1_RX_DSCR_ERR_INT_ST = 0x100000
	// Position of SLC1_TX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_ERR_INT_ST_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DSCR_ERR_INT_ST_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ST.
	SLC__1INT_ST_SLC1_TX_DSCR_ERR_INT_ST = 0x80000
	// Position of SLC1_TOHOST_INT_ST field.
	SLC__1INT_ST_SLC1_TOHOST_INT_ST_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ST field.
	SLC__1INT_ST_SLC1_TOHOST_INT_ST_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ST.
	SLC__1INT_ST_SLC1_TOHOST_INT_ST = 0x40000
	// Position of SLC1_RX_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_EOF_INT_ST_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_EOF_INT_ST_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ST.
	SLC__1INT_ST_SLC1_RX_EOF_INT_ST = 0x20000
	// Position of SLC1_RX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DONE_INT_ST_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_RX_DONE_INT_ST_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ST.
	SLC__1INT_ST_SLC1_RX_DONE_INT_ST = 0x10000
	// Position of SLC1_TX_SUC_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_SUC_EOF_INT_ST_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_SUC_EOF_INT_ST_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ST.
	SLC__1INT_ST_SLC1_TX_SUC_EOF_INT_ST = 0x8000
	// Position of SLC1_TX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DONE_INT_ST_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ST field.
	SLC__1INT_ST_SLC1_TX_DONE_INT_ST_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ST.
	SLC__1INT_ST_SLC1_TX_DONE_INT_ST = 0x4000
	// Position of SLC1_TOKEN1_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN1_1TO0_INT_ST_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN1_1TO0_INT_ST_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ST.
	SLC__1INT_ST_SLC1_TOKEN1_1TO0_INT_ST = 0x2000
	// Position of SLC1_TOKEN0_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN0_1TO0_INT_ST_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ST field.
	SLC__1INT_ST_SLC1_TOKEN0_1TO0_INT_ST_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ST.
	SLC__1INT_ST_SLC1_TOKEN0_1TO0_INT_ST = 0x1000
	// Position of SLC1_TX_OVF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_OVF_INT_ST_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ST field.
	SLC__1INT_ST_SLC1_TX_OVF_INT_ST_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ST.
	SLC__1INT_ST_SLC1_TX_OVF_INT_ST = 0x800
	// Position of SLC1_RX_UDF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_UDF_INT_ST_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ST field.
	SLC__1INT_ST_SLC1_RX_UDF_INT_ST_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ST.
	SLC__1INT_ST_SLC1_RX_UDF_INT_ST = 0x400
	// Position of SLC1_TX_START_INT_ST field.
	SLC__1INT_ST_SLC1_TX_START_INT_ST_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ST field.
	SLC__1INT_ST_SLC1_TX_START_INT_ST_Msk = 0x200
	// Bit SLC1_TX_START_INT_ST.
	SLC__1INT_ST_SLC1_TX_START_INT_ST = 0x200
	// Position of SLC1_RX_START_INT_ST field.
	SLC__1INT_ST_SLC1_RX_START_INT_ST_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ST field.
	SLC__1INT_ST_SLC1_RX_START_INT_ST_Msk = 0x100
	// Bit SLC1_RX_START_INT_ST.
	SLC__1INT_ST_SLC1_RX_START_INT_ST = 0x100
	// Position of FRHOST_BIT15_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT15_INT_ST_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT15_INT_ST_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ST.
	SLC__1INT_ST_FRHOST_BIT15_INT_ST = 0x80
	// Position of FRHOST_BIT14_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT14_INT_ST_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT14_INT_ST_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ST.
	SLC__1INT_ST_FRHOST_BIT14_INT_ST = 0x40
	// Position of FRHOST_BIT13_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT13_INT_ST_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT13_INT_ST_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ST.
	SLC__1INT_ST_FRHOST_BIT13_INT_ST = 0x20
	// Position of FRHOST_BIT12_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT12_INT_ST_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT12_INT_ST_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ST.
	SLC__1INT_ST_FRHOST_BIT12_INT_ST = 0x10
	// Position of FRHOST_BIT11_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT11_INT_ST_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT11_INT_ST_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ST.
	SLC__1INT_ST_FRHOST_BIT11_INT_ST = 0x8
	// Position of FRHOST_BIT10_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT10_INT_ST_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT10_INT_ST_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ST.
	SLC__1INT_ST_FRHOST_BIT10_INT_ST = 0x4
	// Position of FRHOST_BIT9_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT9_INT_ST_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT9_INT_ST_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ST.
	SLC__1INT_ST_FRHOST_BIT9_INT_ST = 0x2
	// Position of FRHOST_BIT8_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT8_INT_ST_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ST field.
	SLC__1INT_ST_FRHOST_BIT8_INT_ST_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ST.
	SLC__1INT_ST_FRHOST_BIT8_INT_ST = 0x1

	// _1INT_ENA: SLC_1INT_ENA
	// Position of SLC1_TX_ERR_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_ERR_EOF_INT_ENA = 0x1000000
	// Position of SLC1_WR_RETRY_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ENA.
	SLC__1INT_ENA_SLC1_WR_RETRY_DONE_INT_ENA = 0x800000
	// Position of SLC1_HOST_RD_ACK_INT_ENA field.
	SLC__1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ENA field.
	SLC__1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ENA.
	SLC__1INT_ENA_SLC1_HOST_RD_ACK_INT_ENA = 0x400000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_DSCR_EMPTY_INT_ENA = 0x200000
	// Position of SLC1_RX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_DSCR_ERR_INT_ENA = 0x100000
	// Position of SLC1_TX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_DSCR_ERR_INT_ENA = 0x80000
	// Position of SLC1_TOHOST_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOHOST_INT_ENA_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOHOST_INT_ENA_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ENA.
	SLC__1INT_ENA_SLC1_TOHOST_INT_ENA = 0x40000
	// Position of SLC1_RX_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_EOF_INT_ENA_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_EOF_INT_ENA_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_EOF_INT_ENA = 0x20000
	// Position of SLC1_RX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DONE_INT_ENA_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_DONE_INT_ENA_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_DONE_INT_ENA = 0x10000
	// Position of SLC1_TX_SUC_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_SUC_EOF_INT_ENA = 0x8000
	// Position of SLC1_TX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DONE_INT_ENA_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_DONE_INT_ENA_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_DONE_INT_ENA = 0x4000
	// Position of SLC1_TOKEN1_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ENA.
	SLC__1INT_ENA_SLC1_TOKEN1_1TO0_INT_ENA = 0x2000
	// Position of SLC1_TOKEN0_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ENA field.
	SLC__1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ENA.
	SLC__1INT_ENA_SLC1_TOKEN0_1TO0_INT_ENA = 0x1000
	// Position of SLC1_TX_OVF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_OVF_INT_ENA_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_OVF_INT_ENA_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_OVF_INT_ENA = 0x800
	// Position of SLC1_RX_UDF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_UDF_INT_ENA_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_UDF_INT_ENA_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_UDF_INT_ENA = 0x400
	// Position of SLC1_TX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_START_INT_ENA_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_TX_START_INT_ENA_Msk = 0x200
	// Bit SLC1_TX_START_INT_ENA.
	SLC__1INT_ENA_SLC1_TX_START_INT_ENA = 0x200
	// Position of SLC1_RX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_START_INT_ENA_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ENA field.
	SLC__1INT_ENA_SLC1_RX_START_INT_ENA_Msk = 0x100
	// Bit SLC1_RX_START_INT_ENA.
	SLC__1INT_ENA_SLC1_RX_START_INT_ENA = 0x100
	// Position of FRHOST_BIT15_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT15_INT_ENA_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT15_INT_ENA_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT15_INT_ENA = 0x80
	// Position of FRHOST_BIT14_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT14_INT_ENA_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT14_INT_ENA_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT14_INT_ENA = 0x40
	// Position of FRHOST_BIT13_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT13_INT_ENA_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT13_INT_ENA_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT13_INT_ENA = 0x20
	// Position of FRHOST_BIT12_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT12_INT_ENA_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT12_INT_ENA_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT12_INT_ENA = 0x10
	// Position of FRHOST_BIT11_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT11_INT_ENA_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT11_INT_ENA_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT11_INT_ENA = 0x8
	// Position of FRHOST_BIT10_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT10_INT_ENA_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT10_INT_ENA_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT10_INT_ENA = 0x4
	// Position of FRHOST_BIT9_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT9_INT_ENA_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT9_INT_ENA_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT9_INT_ENA = 0x2
	// Position of FRHOST_BIT8_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT8_INT_ENA_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ENA field.
	SLC__1INT_ENA_FRHOST_BIT8_INT_ENA_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ENA.
	SLC__1INT_ENA_FRHOST_BIT8_INT_ENA = 0x1

	// _1INT_CLR: SLC_1INT_CLR
	// Position of SLC1_TX_ERR_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_ERR_EOF_INT_CLR = 0x1000000
	// Position of SLC1_WR_RETRY_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_CLR.
	SLC__1INT_CLR_SLC1_WR_RETRY_DONE_INT_CLR = 0x800000
	// Position of SLC1_HOST_RD_ACK_INT_CLR field.
	SLC__1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_CLR field.
	SLC__1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_CLR.
	SLC__1INT_CLR_SLC1_HOST_RD_ACK_INT_CLR = 0x400000
	// Position of SLC1_TX_DSCR_EMPTY_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_DSCR_EMPTY_INT_CLR = 0x200000
	// Position of SLC1_RX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_DSCR_ERR_INT_CLR = 0x100000
	// Position of SLC1_TX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_DSCR_ERR_INT_CLR = 0x80000
	// Position of SLC1_TOHOST_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOHOST_INT_CLR_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOHOST_INT_CLR_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_CLR.
	SLC__1INT_CLR_SLC1_TOHOST_INT_CLR = 0x40000
	// Position of SLC1_RX_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_EOF_INT_CLR_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_EOF_INT_CLR_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_EOF_INT_CLR = 0x20000
	// Position of SLC1_RX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DONE_INT_CLR_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_DONE_INT_CLR_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_DONE_INT_CLR = 0x10000
	// Position of SLC1_TX_SUC_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_SUC_EOF_INT_CLR = 0x8000
	// Position of SLC1_TX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DONE_INT_CLR_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_DONE_INT_CLR_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_DONE_INT_CLR = 0x4000
	// Position of SLC1_TOKEN1_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_CLR.
	SLC__1INT_CLR_SLC1_TOKEN1_1TO0_INT_CLR = 0x2000
	// Position of SLC1_TOKEN0_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_CLR field.
	SLC__1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_CLR.
	SLC__1INT_CLR_SLC1_TOKEN0_1TO0_INT_CLR = 0x1000
	// Position of SLC1_TX_OVF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_OVF_INT_CLR_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_OVF_INT_CLR_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_OVF_INT_CLR = 0x800
	// Position of SLC1_RX_UDF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_UDF_INT_CLR_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_UDF_INT_CLR_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_UDF_INT_CLR = 0x400
	// Position of SLC1_TX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_START_INT_CLR_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_TX_START_INT_CLR_Msk = 0x200
	// Bit SLC1_TX_START_INT_CLR.
	SLC__1INT_CLR_SLC1_TX_START_INT_CLR = 0x200
	// Position of SLC1_RX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_START_INT_CLR_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_CLR field.
	SLC__1INT_CLR_SLC1_RX_START_INT_CLR_Msk = 0x100
	// Bit SLC1_RX_START_INT_CLR.
	SLC__1INT_CLR_SLC1_RX_START_INT_CLR = 0x100
	// Position of FRHOST_BIT15_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT15_INT_CLR_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT15_INT_CLR_Msk = 0x80
	// Bit FRHOST_BIT15_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT15_INT_CLR = 0x80
	// Position of FRHOST_BIT14_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT14_INT_CLR_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT14_INT_CLR_Msk = 0x40
	// Bit FRHOST_BIT14_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT14_INT_CLR = 0x40
	// Position of FRHOST_BIT13_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT13_INT_CLR_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT13_INT_CLR_Msk = 0x20
	// Bit FRHOST_BIT13_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT13_INT_CLR = 0x20
	// Position of FRHOST_BIT12_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT12_INT_CLR_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT12_INT_CLR_Msk = 0x10
	// Bit FRHOST_BIT12_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT12_INT_CLR = 0x10
	// Position of FRHOST_BIT11_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT11_INT_CLR_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT11_INT_CLR_Msk = 0x8
	// Bit FRHOST_BIT11_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT11_INT_CLR = 0x8
	// Position of FRHOST_BIT10_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT10_INT_CLR_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT10_INT_CLR_Msk = 0x4
	// Bit FRHOST_BIT10_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT10_INT_CLR = 0x4
	// Position of FRHOST_BIT9_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT9_INT_CLR_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT9_INT_CLR_Msk = 0x2
	// Bit FRHOST_BIT9_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT9_INT_CLR = 0x2
	// Position of FRHOST_BIT8_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT8_INT_CLR_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_CLR field.
	SLC__1INT_CLR_FRHOST_BIT8_INT_CLR_Msk = 0x1
	// Bit FRHOST_BIT8_INT_CLR.
	SLC__1INT_CLR_FRHOST_BIT8_INT_CLR = 0x1

	// RX_STATUS: SLC_RX_STATUS
	// Position of SLC1_RX_EMPTY field.
	SLC_RX_STATUS_SLC1_RX_EMPTY_Pos = 0x11
	// Bit mask of SLC1_RX_EMPTY field.
	SLC_RX_STATUS_SLC1_RX_EMPTY_Msk = 0x20000
	// Bit SLC1_RX_EMPTY.
	SLC_RX_STATUS_SLC1_RX_EMPTY = 0x20000
	// Position of SLC1_RX_FULL field.
	SLC_RX_STATUS_SLC1_RX_FULL_Pos = 0x10
	// Bit mask of SLC1_RX_FULL field.
	SLC_RX_STATUS_SLC1_RX_FULL_Msk = 0x10000
	// Bit SLC1_RX_FULL.
	SLC_RX_STATUS_SLC1_RX_FULL = 0x10000
	// Position of SLC0_RX_EMPTY field.
	SLC_RX_STATUS_SLC0_RX_EMPTY_Pos = 0x1
	// Bit mask of SLC0_RX_EMPTY field.
	SLC_RX_STATUS_SLC0_RX_EMPTY_Msk = 0x2
	// Bit SLC0_RX_EMPTY.
	SLC_RX_STATUS_SLC0_RX_EMPTY = 0x2
	// Position of SLC0_RX_FULL field.
	SLC_RX_STATUS_SLC0_RX_FULL_Pos = 0x0
	// Bit mask of SLC0_RX_FULL field.
	SLC_RX_STATUS_SLC0_RX_FULL_Msk = 0x1
	// Bit SLC0_RX_FULL.
	SLC_RX_STATUS_SLC0_RX_FULL = 0x1

	// _0RXFIFO_PUSH: SLC_0RXFIFO_PUSH
	// Position of SLC0_RXFIFO_PUSH field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_PUSH_Pos = 0x10
	// Bit mask of SLC0_RXFIFO_PUSH field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_PUSH_Msk = 0x10000
	// Bit SLC0_RXFIFO_PUSH.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_PUSH = 0x10000
	// Position of SLC0_RXFIFO_WDATA field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_WDATA_Pos = 0x0
	// Bit mask of SLC0_RXFIFO_WDATA field.
	SLC__0RXFIFO_PUSH_SLC0_RXFIFO_WDATA_Msk = 0x1ff

	// _1RXFIFO_PUSH: SLC_1RXFIFO_PUSH
	// Position of SLC1_RXFIFO_PUSH field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_PUSH_Pos = 0x10
	// Bit mask of SLC1_RXFIFO_PUSH field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_PUSH_Msk = 0x10000
	// Bit SLC1_RXFIFO_PUSH.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_PUSH = 0x10000
	// Position of SLC1_RXFIFO_WDATA field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_WDATA_Pos = 0x0
	// Bit mask of SLC1_RXFIFO_WDATA field.
	SLC__1RXFIFO_PUSH_SLC1_RXFIFO_WDATA_Msk = 0x1ff

	// TX_STATUS: SLC_TX_STATUS
	// Position of SLC1_TX_EMPTY field.
	SLC_TX_STATUS_SLC1_TX_EMPTY_Pos = 0x11
	// Bit mask of SLC1_TX_EMPTY field.
	SLC_TX_STATUS_SLC1_TX_EMPTY_Msk = 0x20000
	// Bit SLC1_TX_EMPTY.
	SLC_TX_STATUS_SLC1_TX_EMPTY = 0x20000
	// Position of SLC1_TX_FULL field.
	SLC_TX_STATUS_SLC1_TX_FULL_Pos = 0x10
	// Bit mask of SLC1_TX_FULL field.
	SLC_TX_STATUS_SLC1_TX_FULL_Msk = 0x10000
	// Bit SLC1_TX_FULL.
	SLC_TX_STATUS_SLC1_TX_FULL = 0x10000
	// Position of SLC0_TX_EMPTY field.
	SLC_TX_STATUS_SLC0_TX_EMPTY_Pos = 0x1
	// Bit mask of SLC0_TX_EMPTY field.
	SLC_TX_STATUS_SLC0_TX_EMPTY_Msk = 0x2
	// Bit SLC0_TX_EMPTY.
	SLC_TX_STATUS_SLC0_TX_EMPTY = 0x2
	// Position of SLC0_TX_FULL field.
	SLC_TX_STATUS_SLC0_TX_FULL_Pos = 0x0
	// Bit mask of SLC0_TX_FULL field.
	SLC_TX_STATUS_SLC0_TX_FULL_Msk = 0x1
	// Bit SLC0_TX_FULL.
	SLC_TX_STATUS_SLC0_TX_FULL = 0x1

	// _0TXFIFO_POP: SLC_0TXFIFO_POP
	// Position of SLC0_TXFIFO_POP field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_POP_Pos = 0x10
	// Bit mask of SLC0_TXFIFO_POP field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_POP_Msk = 0x10000
	// Bit SLC0_TXFIFO_POP.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_POP = 0x10000
	// Position of SLC0_TXFIFO_RDATA field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_RDATA_Pos = 0x0
	// Bit mask of SLC0_TXFIFO_RDATA field.
	SLC__0TXFIFO_POP_SLC0_TXFIFO_RDATA_Msk = 0x7ff

	// _1TXFIFO_POP: SLC_1TXFIFO_POP
	// Position of SLC1_TXFIFO_POP field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_POP_Pos = 0x10
	// Bit mask of SLC1_TXFIFO_POP field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_POP_Msk = 0x10000
	// Bit SLC1_TXFIFO_POP.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_POP = 0x10000
	// Position of SLC1_TXFIFO_RDATA field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_RDATA_Pos = 0x0
	// Bit mask of SLC1_TXFIFO_RDATA field.
	SLC__1TXFIFO_POP_SLC1_TXFIFO_RDATA_Msk = 0x7ff

	// _0RX_LINK: SLC_0RX_LINK
	// Position of SLC0_RXLINK_PARK field.
	SLC__0RX_LINK_SLC0_RXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC0_RXLINK_PARK field.
	SLC__0RX_LINK_SLC0_RXLINK_PARK_Msk = 0x80000000
	// Bit SLC0_RXLINK_PARK.
	SLC__0RX_LINK_SLC0_RXLINK_PARK = 0x80000000
	// Position of SLC0_RXLINK_RESTART field.
	SLC__0RX_LINK_SLC0_RXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC0_RXLINK_RESTART field.
	SLC__0RX_LINK_SLC0_RXLINK_RESTART_Msk = 0x40000000
	// Bit SLC0_RXLINK_RESTART.
	SLC__0RX_LINK_SLC0_RXLINK_RESTART = 0x40000000
	// Position of SLC0_RXLINK_START field.
	SLC__0RX_LINK_SLC0_RXLINK_START_Pos = 0x1d
	// Bit mask of SLC0_RXLINK_START field.
	SLC__0RX_LINK_SLC0_RXLINK_START_Msk = 0x20000000
	// Bit SLC0_RXLINK_START.
	SLC__0RX_LINK_SLC0_RXLINK_START = 0x20000000
	// Position of SLC0_RXLINK_STOP field.
	SLC__0RX_LINK_SLC0_RXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC0_RXLINK_STOP field.
	SLC__0RX_LINK_SLC0_RXLINK_STOP_Msk = 0x10000000
	// Bit SLC0_RXLINK_STOP.
	SLC__0RX_LINK_SLC0_RXLINK_STOP = 0x10000000
	// Position of SLC0_RXLINK_ADDR field.
	SLC__0RX_LINK_SLC0_RXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC0_RXLINK_ADDR field.
	SLC__0RX_LINK_SLC0_RXLINK_ADDR_Msk = 0xfffff

	// _0TX_LINK: SLC_0TX_LINK
	// Position of SLC0_TXLINK_PARK field.
	SLC__0TX_LINK_SLC0_TXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC0_TXLINK_PARK field.
	SLC__0TX_LINK_SLC0_TXLINK_PARK_Msk = 0x80000000
	// Bit SLC0_TXLINK_PARK.
	SLC__0TX_LINK_SLC0_TXLINK_PARK = 0x80000000
	// Position of SLC0_TXLINK_RESTART field.
	SLC__0TX_LINK_SLC0_TXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC0_TXLINK_RESTART field.
	SLC__0TX_LINK_SLC0_TXLINK_RESTART_Msk = 0x40000000
	// Bit SLC0_TXLINK_RESTART.
	SLC__0TX_LINK_SLC0_TXLINK_RESTART = 0x40000000
	// Position of SLC0_TXLINK_START field.
	SLC__0TX_LINK_SLC0_TXLINK_START_Pos = 0x1d
	// Bit mask of SLC0_TXLINK_START field.
	SLC__0TX_LINK_SLC0_TXLINK_START_Msk = 0x20000000
	// Bit SLC0_TXLINK_START.
	SLC__0TX_LINK_SLC0_TXLINK_START = 0x20000000
	// Position of SLC0_TXLINK_STOP field.
	SLC__0TX_LINK_SLC0_TXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC0_TXLINK_STOP field.
	SLC__0TX_LINK_SLC0_TXLINK_STOP_Msk = 0x10000000
	// Bit SLC0_TXLINK_STOP.
	SLC__0TX_LINK_SLC0_TXLINK_STOP = 0x10000000
	// Position of SLC0_TXLINK_ADDR field.
	SLC__0TX_LINK_SLC0_TXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC0_TXLINK_ADDR field.
	SLC__0TX_LINK_SLC0_TXLINK_ADDR_Msk = 0xfffff

	// _1RX_LINK: SLC_1RX_LINK
	// Position of SLC1_RXLINK_PARK field.
	SLC__1RX_LINK_SLC1_RXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC1_RXLINK_PARK field.
	SLC__1RX_LINK_SLC1_RXLINK_PARK_Msk = 0x80000000
	// Bit SLC1_RXLINK_PARK.
	SLC__1RX_LINK_SLC1_RXLINK_PARK = 0x80000000
	// Position of SLC1_RXLINK_RESTART field.
	SLC__1RX_LINK_SLC1_RXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC1_RXLINK_RESTART field.
	SLC__1RX_LINK_SLC1_RXLINK_RESTART_Msk = 0x40000000
	// Bit SLC1_RXLINK_RESTART.
	SLC__1RX_LINK_SLC1_RXLINK_RESTART = 0x40000000
	// Position of SLC1_RXLINK_START field.
	SLC__1RX_LINK_SLC1_RXLINK_START_Pos = 0x1d
	// Bit mask of SLC1_RXLINK_START field.
	SLC__1RX_LINK_SLC1_RXLINK_START_Msk = 0x20000000
	// Bit SLC1_RXLINK_START.
	SLC__1RX_LINK_SLC1_RXLINK_START = 0x20000000
	// Position of SLC1_RXLINK_STOP field.
	SLC__1RX_LINK_SLC1_RXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC1_RXLINK_STOP field.
	SLC__1RX_LINK_SLC1_RXLINK_STOP_Msk = 0x10000000
	// Bit SLC1_RXLINK_STOP.
	SLC__1RX_LINK_SLC1_RXLINK_STOP = 0x10000000
	// Position of SLC1_BT_PACKET field.
	SLC__1RX_LINK_SLC1_BT_PACKET_Pos = 0x14
	// Bit mask of SLC1_BT_PACKET field.
	SLC__1RX_LINK_SLC1_BT_PACKET_Msk = 0x100000
	// Bit SLC1_BT_PACKET.
	SLC__1RX_LINK_SLC1_BT_PACKET = 0x100000
	// Position of SLC1_RXLINK_ADDR field.
	SLC__1RX_LINK_SLC1_RXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC1_RXLINK_ADDR field.
	SLC__1RX_LINK_SLC1_RXLINK_ADDR_Msk = 0xfffff

	// _1TX_LINK: SLC_1TX_LINK
	// Position of SLC1_TXLINK_PARK field.
	SLC__1TX_LINK_SLC1_TXLINK_PARK_Pos = 0x1f
	// Bit mask of SLC1_TXLINK_PARK field.
	SLC__1TX_LINK_SLC1_TXLINK_PARK_Msk = 0x80000000
	// Bit SLC1_TXLINK_PARK.
	SLC__1TX_LINK_SLC1_TXLINK_PARK = 0x80000000
	// Position of SLC1_TXLINK_RESTART field.
	SLC__1TX_LINK_SLC1_TXLINK_RESTART_Pos = 0x1e
	// Bit mask of SLC1_TXLINK_RESTART field.
	SLC__1TX_LINK_SLC1_TXLINK_RESTART_Msk = 0x40000000
	// Bit SLC1_TXLINK_RESTART.
	SLC__1TX_LINK_SLC1_TXLINK_RESTART = 0x40000000
	// Position of SLC1_TXLINK_START field.
	SLC__1TX_LINK_SLC1_TXLINK_START_Pos = 0x1d
	// Bit mask of SLC1_TXLINK_START field.
	SLC__1TX_LINK_SLC1_TXLINK_START_Msk = 0x20000000
	// Bit SLC1_TXLINK_START.
	SLC__1TX_LINK_SLC1_TXLINK_START = 0x20000000
	// Position of SLC1_TXLINK_STOP field.
	SLC__1TX_LINK_SLC1_TXLINK_STOP_Pos = 0x1c
	// Bit mask of SLC1_TXLINK_STOP field.
	SLC__1TX_LINK_SLC1_TXLINK_STOP_Msk = 0x10000000
	// Bit SLC1_TXLINK_STOP.
	SLC__1TX_LINK_SLC1_TXLINK_STOP = 0x10000000
	// Position of SLC1_TXLINK_ADDR field.
	SLC__1TX_LINK_SLC1_TXLINK_ADDR_Pos = 0x0
	// Bit mask of SLC1_TXLINK_ADDR field.
	SLC__1TX_LINK_SLC1_TXLINK_ADDR_Msk = 0xfffff

	// INTVEC_TOHOST: SLC_INTVEC_TOHOST
	// Position of SLC1_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC1_TOHOST_INTVEC_Pos = 0x10
	// Bit mask of SLC1_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC1_TOHOST_INTVEC_Msk = 0xff0000
	// Position of SLC0_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC0_TOHOST_INTVEC_Pos = 0x0
	// Bit mask of SLC0_TOHOST_INTVEC field.
	SLC_INTVEC_TOHOST_SLC0_TOHOST_INTVEC_Msk = 0xff

	// _0TOKEN0: SLC_0TOKEN0
	// Position of SLC0_TOKEN0 field.
	SLC__0TOKEN0_SLC0_TOKEN0_Pos = 0x10
	// Bit mask of SLC0_TOKEN0 field.
	SLC__0TOKEN0_SLC0_TOKEN0_Msk = 0xfff0000
	// Position of SLC0_TOKEN0_INC_MORE field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_MORE_Pos = 0xe
	// Bit mask of SLC0_TOKEN0_INC_MORE field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_MORE_Msk = 0x4000
	// Bit SLC0_TOKEN0_INC_MORE.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_MORE = 0x4000
	// Position of SLC0_TOKEN0_INC field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_Pos = 0xd
	// Bit mask of SLC0_TOKEN0_INC field.
	SLC__0TOKEN0_SLC0_TOKEN0_INC_Msk = 0x2000
	// Bit SLC0_TOKEN0_INC.
	SLC__0TOKEN0_SLC0_TOKEN0_INC = 0x2000
	// Position of SLC0_TOKEN0_WR field.
	SLC__0TOKEN0_SLC0_TOKEN0_WR_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_WR field.
	SLC__0TOKEN0_SLC0_TOKEN0_WR_Msk = 0x1000
	// Bit SLC0_TOKEN0_WR.
	SLC__0TOKEN0_SLC0_TOKEN0_WR = 0x1000
	// Position of SLC0_TOKEN0_WDATA field.
	SLC__0TOKEN0_SLC0_TOKEN0_WDATA_Pos = 0x0
	// Bit mask of SLC0_TOKEN0_WDATA field.
	SLC__0TOKEN0_SLC0_TOKEN0_WDATA_Msk = 0xfff

	// _0TOKEN1: SLC_0TOKEN1
	// Position of SLC0_TOKEN1 field.
	SLC__0TOKEN1_SLC0_TOKEN1_Pos = 0x10
	// Bit mask of SLC0_TOKEN1 field.
	SLC__0TOKEN1_SLC0_TOKEN1_Msk = 0xfff0000
	// Position of SLC0_TOKEN1_INC_MORE field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_MORE_Pos = 0xe
	// Bit mask of SLC0_TOKEN1_INC_MORE field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_MORE_Msk = 0x4000
	// Bit SLC0_TOKEN1_INC_MORE.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_MORE = 0x4000
	// Position of SLC0_TOKEN1_INC field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_INC field.
	SLC__0TOKEN1_SLC0_TOKEN1_INC_Msk = 0x2000
	// Bit SLC0_TOKEN1_INC.
	SLC__0TOKEN1_SLC0_TOKEN1_INC = 0x2000
	// Position of SLC0_TOKEN1_WR field.
	SLC__0TOKEN1_SLC0_TOKEN1_WR_Pos = 0xc
	// Bit mask of SLC0_TOKEN1_WR field.
	SLC__0TOKEN1_SLC0_TOKEN1_WR_Msk = 0x1000
	// Bit SLC0_TOKEN1_WR.
	SLC__0TOKEN1_SLC0_TOKEN1_WR = 0x1000
	// Position of SLC0_TOKEN1_WDATA field.
	SLC__0TOKEN1_SLC0_TOKEN1_WDATA_Pos = 0x0
	// Bit mask of SLC0_TOKEN1_WDATA field.
	SLC__0TOKEN1_SLC0_TOKEN1_WDATA_Msk = 0xfff

	// _1TOKEN0: SLC_1TOKEN0
	// Position of SLC1_TOKEN0 field.
	SLC__1TOKEN0_SLC1_TOKEN0_Pos = 0x10
	// Bit mask of SLC1_TOKEN0 field.
	SLC__1TOKEN0_SLC1_TOKEN0_Msk = 0xfff0000
	// Position of SLC1_TOKEN0_INC_MORE field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_MORE_Pos = 0xe
	// Bit mask of SLC1_TOKEN0_INC_MORE field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_MORE_Msk = 0x4000
	// Bit SLC1_TOKEN0_INC_MORE.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_MORE = 0x4000
	// Position of SLC1_TOKEN0_INC field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_Pos = 0xd
	// Bit mask of SLC1_TOKEN0_INC field.
	SLC__1TOKEN0_SLC1_TOKEN0_INC_Msk = 0x2000
	// Bit SLC1_TOKEN0_INC.
	SLC__1TOKEN0_SLC1_TOKEN0_INC = 0x2000
	// Position of SLC1_TOKEN0_WR field.
	SLC__1TOKEN0_SLC1_TOKEN0_WR_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_WR field.
	SLC__1TOKEN0_SLC1_TOKEN0_WR_Msk = 0x1000
	// Bit SLC1_TOKEN0_WR.
	SLC__1TOKEN0_SLC1_TOKEN0_WR = 0x1000
	// Position of SLC1_TOKEN0_WDATA field.
	SLC__1TOKEN0_SLC1_TOKEN0_WDATA_Pos = 0x0
	// Bit mask of SLC1_TOKEN0_WDATA field.
	SLC__1TOKEN0_SLC1_TOKEN0_WDATA_Msk = 0xfff

	// _1TOKEN1: SLC_1TOKEN1
	// Position of SLC1_TOKEN1 field.
	SLC__1TOKEN1_SLC1_TOKEN1_Pos = 0x10
	// Bit mask of SLC1_TOKEN1 field.
	SLC__1TOKEN1_SLC1_TOKEN1_Msk = 0xfff0000
	// Position of SLC1_TOKEN1_INC_MORE field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_MORE_Pos = 0xe
	// Bit mask of SLC1_TOKEN1_INC_MORE field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_MORE_Msk = 0x4000
	// Bit SLC1_TOKEN1_INC_MORE.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_MORE = 0x4000
	// Position of SLC1_TOKEN1_INC field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_INC field.
	SLC__1TOKEN1_SLC1_TOKEN1_INC_Msk = 0x2000
	// Bit SLC1_TOKEN1_INC.
	SLC__1TOKEN1_SLC1_TOKEN1_INC = 0x2000
	// Position of SLC1_TOKEN1_WR field.
	SLC__1TOKEN1_SLC1_TOKEN1_WR_Pos = 0xc
	// Bit mask of SLC1_TOKEN1_WR field.
	SLC__1TOKEN1_SLC1_TOKEN1_WR_Msk = 0x1000
	// Bit SLC1_TOKEN1_WR.
	SLC__1TOKEN1_SLC1_TOKEN1_WR = 0x1000
	// Position of SLC1_TOKEN1_WDATA field.
	SLC__1TOKEN1_SLC1_TOKEN1_WDATA_Pos = 0x0
	// Bit mask of SLC1_TOKEN1_WDATA field.
	SLC__1TOKEN1_SLC1_TOKEN1_WDATA_Msk = 0xfff

	// CONF1: SLC_CONF1
	// Position of CLK_EN field.
	SLC_CONF1_CLK_EN_Pos = 0x16
	// Bit mask of CLK_EN field.
	SLC_CONF1_CLK_EN_Msk = 0x400000
	// Bit CLK_EN.
	SLC_CONF1_CLK_EN = 0x400000
	// Position of SLC1_RX_STITCH_EN field.
	SLC_CONF1_SLC1_RX_STITCH_EN_Pos = 0x15
	// Bit mask of SLC1_RX_STITCH_EN field.
	SLC_CONF1_SLC1_RX_STITCH_EN_Msk = 0x200000
	// Bit SLC1_RX_STITCH_EN.
	SLC_CONF1_SLC1_RX_STITCH_EN = 0x200000
	// Position of SLC1_TX_STITCH_EN field.
	SLC_CONF1_SLC1_TX_STITCH_EN_Pos = 0x14
	// Bit mask of SLC1_TX_STITCH_EN field.
	SLC_CONF1_SLC1_TX_STITCH_EN_Msk = 0x100000
	// Bit SLC1_TX_STITCH_EN.
	SLC_CONF1_SLC1_TX_STITCH_EN = 0x100000
	// Position of HOST_INT_LEVEL_SEL field.
	SLC_CONF1_HOST_INT_LEVEL_SEL_Pos = 0x13
	// Bit mask of HOST_INT_LEVEL_SEL field.
	SLC_CONF1_HOST_INT_LEVEL_SEL_Msk = 0x80000
	// Bit HOST_INT_LEVEL_SEL.
	SLC_CONF1_HOST_INT_LEVEL_SEL = 0x80000
	// Position of SLC1_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_RX_CHECK_SUM_EN_Pos = 0x12
	// Bit mask of SLC1_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_RX_CHECK_SUM_EN_Msk = 0x40000
	// Bit SLC1_RX_CHECK_SUM_EN.
	SLC_CONF1_SLC1_RX_CHECK_SUM_EN = 0x40000
	// Position of SLC1_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_TX_CHECK_SUM_EN_Pos = 0x11
	// Bit mask of SLC1_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC1_TX_CHECK_SUM_EN_Msk = 0x20000
	// Bit SLC1_TX_CHECK_SUM_EN.
	SLC_CONF1_SLC1_TX_CHECK_SUM_EN = 0x20000
	// Position of SLC1_CHECK_OWNER field.
	SLC_CONF1_SLC1_CHECK_OWNER_Pos = 0x10
	// Bit mask of SLC1_CHECK_OWNER field.
	SLC_CONF1_SLC1_CHECK_OWNER_Msk = 0x10000
	// Bit SLC1_CHECK_OWNER.
	SLC_CONF1_SLC1_CHECK_OWNER = 0x10000
	// Position of SLC0_RX_STITCH_EN field.
	SLC_CONF1_SLC0_RX_STITCH_EN_Pos = 0x6
	// Bit mask of SLC0_RX_STITCH_EN field.
	SLC_CONF1_SLC0_RX_STITCH_EN_Msk = 0x40
	// Bit SLC0_RX_STITCH_EN.
	SLC_CONF1_SLC0_RX_STITCH_EN = 0x40
	// Position of SLC0_TX_STITCH_EN field.
	SLC_CONF1_SLC0_TX_STITCH_EN_Pos = 0x5
	// Bit mask of SLC0_TX_STITCH_EN field.
	SLC_CONF1_SLC0_TX_STITCH_EN_Msk = 0x20
	// Bit SLC0_TX_STITCH_EN.
	SLC_CONF1_SLC0_TX_STITCH_EN = 0x20
	// Position of SLC0_LEN_AUTO_CLR field.
	SLC_CONF1_SLC0_LEN_AUTO_CLR_Pos = 0x4
	// Bit mask of SLC0_LEN_AUTO_CLR field.
	SLC_CONF1_SLC0_LEN_AUTO_CLR_Msk = 0x10
	// Bit SLC0_LEN_AUTO_CLR.
	SLC_CONF1_SLC0_LEN_AUTO_CLR = 0x10
	// Position of CMD_HOLD_EN field.
	SLC_CONF1_CMD_HOLD_EN_Pos = 0x3
	// Bit mask of CMD_HOLD_EN field.
	SLC_CONF1_CMD_HOLD_EN_Msk = 0x8
	// Bit CMD_HOLD_EN.
	SLC_CONF1_CMD_HOLD_EN = 0x8
	// Position of SLC0_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_RX_CHECK_SUM_EN_Pos = 0x2
	// Bit mask of SLC0_RX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_RX_CHECK_SUM_EN_Msk = 0x4
	// Bit SLC0_RX_CHECK_SUM_EN.
	SLC_CONF1_SLC0_RX_CHECK_SUM_EN = 0x4
	// Position of SLC0_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_TX_CHECK_SUM_EN_Pos = 0x1
	// Bit mask of SLC0_TX_CHECK_SUM_EN field.
	SLC_CONF1_SLC0_TX_CHECK_SUM_EN_Msk = 0x2
	// Bit SLC0_TX_CHECK_SUM_EN.
	SLC_CONF1_SLC0_TX_CHECK_SUM_EN = 0x2
	// Position of SLC0_CHECK_OWNER field.
	SLC_CONF1_SLC0_CHECK_OWNER_Pos = 0x0
	// Bit mask of SLC0_CHECK_OWNER field.
	SLC_CONF1_SLC0_CHECK_OWNER_Msk = 0x1
	// Bit SLC0_CHECK_OWNER.
	SLC_CONF1_SLC0_CHECK_OWNER = 0x1

	// _0_STATE0: SLC_0_STATE0
	// Position of SLC0_STATE0 field.
	SLC__0_STATE0_SLC0_STATE0_Pos = 0x0
	// Bit mask of SLC0_STATE0 field.
	SLC__0_STATE0_SLC0_STATE0_Msk = 0xffffffff

	// _0_STATE1: SLC_0_STATE1
	// Position of SLC0_STATE1 field.
	SLC__0_STATE1_SLC0_STATE1_Pos = 0x0
	// Bit mask of SLC0_STATE1 field.
	SLC__0_STATE1_SLC0_STATE1_Msk = 0xffffffff

	// _1_STATE0: SLC_1_STATE0
	// Position of SLC1_STATE0 field.
	SLC__1_STATE0_SLC1_STATE0_Pos = 0x0
	// Bit mask of SLC1_STATE0 field.
	SLC__1_STATE0_SLC1_STATE0_Msk = 0xffffffff

	// _1_STATE1: SLC_1_STATE1
	// Position of SLC1_STATE1 field.
	SLC__1_STATE1_SLC1_STATE1_Pos = 0x0
	// Bit mask of SLC1_STATE1 field.
	SLC__1_STATE1_SLC1_STATE1_Msk = 0xffffffff

	// BRIDGE_CONF: SLC_BRIDGE_CONF
	// Position of TX_PUSH_IDLE_NUM field.
	SLC_BRIDGE_CONF_TX_PUSH_IDLE_NUM_Pos = 0x10
	// Bit mask of TX_PUSH_IDLE_NUM field.
	SLC_BRIDGE_CONF_TX_PUSH_IDLE_NUM_Msk = 0xffff0000
	// Position of SLC1_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC1_TX_DUMMY_MODE_Pos = 0xe
	// Bit mask of SLC1_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC1_TX_DUMMY_MODE_Msk = 0x4000
	// Bit SLC1_TX_DUMMY_MODE.
	SLC_BRIDGE_CONF_SLC1_TX_DUMMY_MODE = 0x4000
	// Position of HDA_MAP_128K field.
	SLC_BRIDGE_CONF_HDA_MAP_128K_Pos = 0xd
	// Bit mask of HDA_MAP_128K field.
	SLC_BRIDGE_CONF_HDA_MAP_128K_Msk = 0x2000
	// Bit HDA_MAP_128K.
	SLC_BRIDGE_CONF_HDA_MAP_128K = 0x2000
	// Position of SLC0_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC0_TX_DUMMY_MODE_Pos = 0xc
	// Bit mask of SLC0_TX_DUMMY_MODE field.
	SLC_BRIDGE_CONF_SLC0_TX_DUMMY_MODE_Msk = 0x1000
	// Bit SLC0_TX_DUMMY_MODE.
	SLC_BRIDGE_CONF_SLC0_TX_DUMMY_MODE = 0x1000
	// Position of FIFO_MAP_ENA field.
	SLC_BRIDGE_CONF_FIFO_MAP_ENA_Pos = 0x8
	// Bit mask of FIFO_MAP_ENA field.
	SLC_BRIDGE_CONF_FIFO_MAP_ENA_Msk = 0xf00
	// Position of TXEOF_ENA field.
	SLC_BRIDGE_CONF_TXEOF_ENA_Pos = 0x0
	// Bit mask of TXEOF_ENA field.
	SLC_BRIDGE_CONF_TXEOF_ENA_Msk = 0x3f

	// _0_TO_EOF_DES_ADDR: SLC_0_TO_EOF_DES_ADDR
	// Position of SLC0_TO_EOF_DES_ADDR field.
	SLC__0_TO_EOF_DES_ADDR_SLC0_TO_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TO_EOF_DES_ADDR field.
	SLC__0_TO_EOF_DES_ADDR_SLC0_TO_EOF_DES_ADDR_Msk = 0xffffffff

	// _0_TX_EOF_DES_ADDR: SLC_0_TX_EOF_DES_ADDR
	// Position of SLC0_TX_SUC_EOF_DES_ADDR field.
	SLC__0_TX_EOF_DES_ADDR_SLC0_TX_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_SUC_EOF_DES_ADDR field.
	SLC__0_TX_EOF_DES_ADDR_SLC0_TX_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// _0_TO_EOF_BFR_DES_ADDR: SLC_0_TO_EOF_BFR_DES_ADDR
	// Position of SLC0_TO_EOF_BFR_DES_ADDR field.
	SLC__0_TO_EOF_BFR_DES_ADDR_SLC0_TO_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TO_EOF_BFR_DES_ADDR field.
	SLC__0_TO_EOF_BFR_DES_ADDR_SLC0_TO_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// _1_TO_EOF_DES_ADDR: SLC_1_TO_EOF_DES_ADDR
	// Position of SLC1_TO_EOF_DES_ADDR field.
	SLC__1_TO_EOF_DES_ADDR_SLC1_TO_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TO_EOF_DES_ADDR field.
	SLC__1_TO_EOF_DES_ADDR_SLC1_TO_EOF_DES_ADDR_Msk = 0xffffffff

	// _1_TX_EOF_DES_ADDR: SLC_1_TX_EOF_DES_ADDR
	// Position of SLC1_TX_SUC_EOF_DES_ADDR field.
	SLC__1_TX_EOF_DES_ADDR_SLC1_TX_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TX_SUC_EOF_DES_ADDR field.
	SLC__1_TX_EOF_DES_ADDR_SLC1_TX_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// _1_TO_EOF_BFR_DES_ADDR: SLC_1_TO_EOF_BFR_DES_ADDR
	// Position of SLC1_TO_EOF_BFR_DES_ADDR field.
	SLC__1_TO_EOF_BFR_DES_ADDR_SLC1_TO_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TO_EOF_BFR_DES_ADDR field.
	SLC__1_TO_EOF_BFR_DES_ADDR_SLC1_TO_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// AHB_TEST: SLC_AHB_TEST
	// Position of AHB_TESTADDR field.
	SLC_AHB_TEST_AHB_TESTADDR_Pos = 0x4
	// Bit mask of AHB_TESTADDR field.
	SLC_AHB_TEST_AHB_TESTADDR_Msk = 0x30
	// Position of AHB_TESTMODE field.
	SLC_AHB_TEST_AHB_TESTMODE_Pos = 0x0
	// Bit mask of AHB_TESTMODE field.
	SLC_AHB_TEST_AHB_TESTMODE_Msk = 0x7

	// SDIO_ST: SLC_SDIO_ST
	// Position of FUNC2_ACC_STATE field.
	SLC_SDIO_ST_FUNC2_ACC_STATE_Pos = 0x18
	// Bit mask of FUNC2_ACC_STATE field.
	SLC_SDIO_ST_FUNC2_ACC_STATE_Msk = 0x1f000000
	// Position of FUNC1_ACC_STATE field.
	SLC_SDIO_ST_FUNC1_ACC_STATE_Pos = 0x10
	// Bit mask of FUNC1_ACC_STATE field.
	SLC_SDIO_ST_FUNC1_ACC_STATE_Msk = 0x1f0000
	// Position of BUS_ST field.
	SLC_SDIO_ST_BUS_ST_Pos = 0xc
	// Bit mask of BUS_ST field.
	SLC_SDIO_ST_BUS_ST_Msk = 0x7000
	// Position of SDIO_WAKEUP field.
	SLC_SDIO_ST_SDIO_WAKEUP_Pos = 0x8
	// Bit mask of SDIO_WAKEUP field.
	SLC_SDIO_ST_SDIO_WAKEUP_Msk = 0x100
	// Bit SDIO_WAKEUP.
	SLC_SDIO_ST_SDIO_WAKEUP = 0x100
	// Position of FUNC_ST field.
	SLC_SDIO_ST_FUNC_ST_Pos = 0x4
	// Bit mask of FUNC_ST field.
	SLC_SDIO_ST_FUNC_ST_Msk = 0xf0
	// Position of CMD_ST field.
	SLC_SDIO_ST_CMD_ST_Pos = 0x0
	// Bit mask of CMD_ST field.
	SLC_SDIO_ST_CMD_ST_Msk = 0x7

	// RX_DSCR_CONF: SLC_RX_DSCR_CONF
	// Position of SLC1_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD_Pos = 0x15
	// Bit mask of SLC1_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC1_RD_RETRY_THRESHOLD_Msk = 0xffe00000
	// Position of SLC1_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_EN_Pos = 0x14
	// Bit mask of SLC1_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_EN_Msk = 0x100000
	// Bit SLC1_RX_FILL_EN.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_EN = 0x100000
	// Position of SLC1_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_EOF_MODE_Pos = 0x13
	// Bit mask of SLC1_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_EOF_MODE_Msk = 0x80000
	// Bit SLC1_RX_EOF_MODE.
	SLC_RX_DSCR_CONF_SLC1_RX_EOF_MODE = 0x80000
	// Position of SLC1_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_MODE_Pos = 0x12
	// Bit mask of SLC1_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_MODE_Msk = 0x40000
	// Bit SLC1_RX_FILL_MODE.
	SLC_RX_DSCR_CONF_SLC1_RX_FILL_MODE = 0x40000
	// Position of SLC1_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_INFOR_NO_REPLACE_Pos = 0x11
	// Bit mask of SLC1_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_INFOR_NO_REPLACE_Msk = 0x20000
	// Bit SLC1_INFOR_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC1_INFOR_NO_REPLACE = 0x20000
	// Position of SLC1_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE_Pos = 0x10
	// Bit mask of SLC1_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE_Msk = 0x10000
	// Bit SLC1_TOKEN_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC1_TOKEN_NO_REPLACE = 0x10000
	// Position of SLC0_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD_Pos = 0x5
	// Bit mask of SLC0_RD_RETRY_THRESHOLD field.
	SLC_RX_DSCR_CONF_SLC0_RD_RETRY_THRESHOLD_Msk = 0xffe0
	// Position of SLC0_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_EN_Pos = 0x4
	// Bit mask of SLC0_RX_FILL_EN field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_EN_Msk = 0x10
	// Bit SLC0_RX_FILL_EN.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_EN = 0x10
	// Position of SLC0_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_EOF_MODE_Pos = 0x3
	// Bit mask of SLC0_RX_EOF_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_EOF_MODE_Msk = 0x8
	// Bit SLC0_RX_EOF_MODE.
	SLC_RX_DSCR_CONF_SLC0_RX_EOF_MODE = 0x8
	// Position of SLC0_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_MODE_Pos = 0x2
	// Bit mask of SLC0_RX_FILL_MODE field.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_MODE_Msk = 0x4
	// Bit SLC0_RX_FILL_MODE.
	SLC_RX_DSCR_CONF_SLC0_RX_FILL_MODE = 0x4
	// Position of SLC0_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_INFOR_NO_REPLACE_Pos = 0x1
	// Bit mask of SLC0_INFOR_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_INFOR_NO_REPLACE_Msk = 0x2
	// Bit SLC0_INFOR_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC0_INFOR_NO_REPLACE = 0x2
	// Position of SLC0_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE_Pos = 0x0
	// Bit mask of SLC0_TOKEN_NO_REPLACE field.
	SLC_RX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE_Msk = 0x1
	// Bit SLC0_TOKEN_NO_REPLACE.
	SLC_RX_DSCR_CONF_SLC0_TOKEN_NO_REPLACE = 0x1

	// _0_TXLINK_DSCR: SLC_0_TXLINK_DSCR
	// Position of SLC0_TXLINK_DSCR field.
	SLC__0_TXLINK_DSCR_SLC0_TXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC0_TXLINK_DSCR field.
	SLC__0_TXLINK_DSCR_SLC0_TXLINK_DSCR_Msk = 0xffffffff

	// _0_TXLINK_DSCR_BF0: SLC_0_TXLINK_DSCR_BF0
	// Position of SLC0_TXLINK_DSCR_BF0 field.
	SLC__0_TXLINK_DSCR_BF0_SLC0_TXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC0_TXLINK_DSCR_BF0 field.
	SLC__0_TXLINK_DSCR_BF0_SLC0_TXLINK_DSCR_BF0_Msk = 0xffffffff

	// _0_TXLINK_DSCR_BF1: SLC_0_TXLINK_DSCR_BF1
	// Position of SLC0_TXLINK_DSCR_BF1 field.
	SLC__0_TXLINK_DSCR_BF1_SLC0_TXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC0_TXLINK_DSCR_BF1 field.
	SLC__0_TXLINK_DSCR_BF1_SLC0_TXLINK_DSCR_BF1_Msk = 0xffffffff

	// _0_RXLINK_DSCR: SLC_0_RXLINK_DSCR
	// Position of SLC0_RXLINK_DSCR field.
	SLC__0_RXLINK_DSCR_SLC0_RXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC0_RXLINK_DSCR field.
	SLC__0_RXLINK_DSCR_SLC0_RXLINK_DSCR_Msk = 0xffffffff

	// _0_RXLINK_DSCR_BF0: SLC_0_RXLINK_DSCR_BF0
	// Position of SLC0_RXLINK_DSCR_BF0 field.
	SLC__0_RXLINK_DSCR_BF0_SLC0_RXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC0_RXLINK_DSCR_BF0 field.
	SLC__0_RXLINK_DSCR_BF0_SLC0_RXLINK_DSCR_BF0_Msk = 0xffffffff

	// _0_RXLINK_DSCR_BF1: SLC_0_RXLINK_DSCR_BF1
	// Position of SLC0_RXLINK_DSCR_BF1 field.
	SLC__0_RXLINK_DSCR_BF1_SLC0_RXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC0_RXLINK_DSCR_BF1 field.
	SLC__0_RXLINK_DSCR_BF1_SLC0_RXLINK_DSCR_BF1_Msk = 0xffffffff

	// _1_TXLINK_DSCR: SLC_1_TXLINK_DSCR
	// Position of SLC1_TXLINK_DSCR field.
	SLC__1_TXLINK_DSCR_SLC1_TXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC1_TXLINK_DSCR field.
	SLC__1_TXLINK_DSCR_SLC1_TXLINK_DSCR_Msk = 0xffffffff

	// _1_TXLINK_DSCR_BF0: SLC_1_TXLINK_DSCR_BF0
	// Position of SLC1_TXLINK_DSCR_BF0 field.
	SLC__1_TXLINK_DSCR_BF0_SLC1_TXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC1_TXLINK_DSCR_BF0 field.
	SLC__1_TXLINK_DSCR_BF0_SLC1_TXLINK_DSCR_BF0_Msk = 0xffffffff

	// _1_TXLINK_DSCR_BF1: SLC_1_TXLINK_DSCR_BF1
	// Position of SLC1_TXLINK_DSCR_BF1 field.
	SLC__1_TXLINK_DSCR_BF1_SLC1_TXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC1_TXLINK_DSCR_BF1 field.
	SLC__1_TXLINK_DSCR_BF1_SLC1_TXLINK_DSCR_BF1_Msk = 0xffffffff

	// _1_RXLINK_DSCR: SLC_1_RXLINK_DSCR
	// Position of SLC1_RXLINK_DSCR field.
	SLC__1_RXLINK_DSCR_SLC1_RXLINK_DSCR_Pos = 0x0
	// Bit mask of SLC1_RXLINK_DSCR field.
	SLC__1_RXLINK_DSCR_SLC1_RXLINK_DSCR_Msk = 0xffffffff

	// _1_RXLINK_DSCR_BF0: SLC_1_RXLINK_DSCR_BF0
	// Position of SLC1_RXLINK_DSCR_BF0 field.
	SLC__1_RXLINK_DSCR_BF0_SLC1_RXLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of SLC1_RXLINK_DSCR_BF0 field.
	SLC__1_RXLINK_DSCR_BF0_SLC1_RXLINK_DSCR_BF0_Msk = 0xffffffff

	// _1_RXLINK_DSCR_BF1: SLC_1_RXLINK_DSCR_BF1
	// Position of SLC1_RXLINK_DSCR_BF1 field.
	SLC__1_RXLINK_DSCR_BF1_SLC1_RXLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of SLC1_RXLINK_DSCR_BF1 field.
	SLC__1_RXLINK_DSCR_BF1_SLC1_RXLINK_DSCR_BF1_Msk = 0xffffffff

	// _0_TX_ERREOF_DES_ADDR: SLC_0_TX_ERREOF_DES_ADDR
	// Position of SLC0_TX_ERR_EOF_DES_ADDR field.
	SLC__0_TX_ERREOF_DES_ADDR_SLC0_TX_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_ERR_EOF_DES_ADDR field.
	SLC__0_TX_ERREOF_DES_ADDR_SLC0_TX_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// _1_TX_ERREOF_DES_ADDR: SLC_1_TX_ERREOF_DES_ADDR
	// Position of SLC1_TX_ERR_EOF_DES_ADDR field.
	SLC__1_TX_ERREOF_DES_ADDR_SLC1_TX_ERR_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of SLC1_TX_ERR_EOF_DES_ADDR field.
	SLC__1_TX_ERREOF_DES_ADDR_SLC1_TX_ERR_EOF_DES_ADDR_Msk = 0xffffffff

	// TOKEN_LAT: SLC_TOKEN_LAT
	// Position of SLC1_TOKEN field.
	SLC_TOKEN_LAT_SLC1_TOKEN_Pos = 0x10
	// Bit mask of SLC1_TOKEN field.
	SLC_TOKEN_LAT_SLC1_TOKEN_Msk = 0xfff0000
	// Position of SLC0_TOKEN field.
	SLC_TOKEN_LAT_SLC0_TOKEN_Pos = 0x0
	// Bit mask of SLC0_TOKEN field.
	SLC_TOKEN_LAT_SLC0_TOKEN_Msk = 0xfff

	// TX_DSCR_CONF: SLC_TX_DSCR_CONF
	// Position of WR_RETRY_THRESHOLD field.
	SLC_TX_DSCR_CONF_WR_RETRY_THRESHOLD_Pos = 0x0
	// Bit mask of WR_RETRY_THRESHOLD field.
	SLC_TX_DSCR_CONF_WR_RETRY_THRESHOLD_Msk = 0x7ff

	// CMD_INFOR0: SLC_CMD_INFOR0
	// Position of CMD_CONTENT0 field.
	SLC_CMD_INFOR0_CMD_CONTENT0_Pos = 0x0
	// Bit mask of CMD_CONTENT0 field.
	SLC_CMD_INFOR0_CMD_CONTENT0_Msk = 0xffffffff

	// CMD_INFOR1: SLC_CMD_INFOR1
	// Position of CMD_CONTENT1 field.
	SLC_CMD_INFOR1_CMD_CONTENT1_Pos = 0x0
	// Bit mask of CMD_CONTENT1 field.
	SLC_CMD_INFOR1_CMD_CONTENT1_Msk = 0xffffffff

	// _0_LEN_CONF: SLC_0_LEN_CONF
	// Position of SLC0_TX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_TX_NEW_PKT_IND_Pos = 0x1c
	// Bit mask of SLC0_TX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_TX_NEW_PKT_IND_Msk = 0x10000000
	// Bit SLC0_TX_NEW_PKT_IND.
	SLC__0_LEN_CONF_SLC0_TX_NEW_PKT_IND = 0x10000000
	// Position of SLC0_RX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_RX_NEW_PKT_IND_Pos = 0x1b
	// Bit mask of SLC0_RX_NEW_PKT_IND field.
	SLC__0_LEN_CONF_SLC0_RX_NEW_PKT_IND_Msk = 0x8000000
	// Bit SLC0_RX_NEW_PKT_IND.
	SLC__0_LEN_CONF_SLC0_RX_NEW_PKT_IND = 0x8000000
	// Position of SLC0_TX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_TX_GET_USED_DSCR_Pos = 0x1a
	// Bit mask of SLC0_TX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_TX_GET_USED_DSCR_Msk = 0x4000000
	// Bit SLC0_TX_GET_USED_DSCR.
	SLC__0_LEN_CONF_SLC0_TX_GET_USED_DSCR = 0x4000000
	// Position of SLC0_RX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_RX_GET_USED_DSCR_Pos = 0x19
	// Bit mask of SLC0_RX_GET_USED_DSCR field.
	SLC__0_LEN_CONF_SLC0_RX_GET_USED_DSCR_Msk = 0x2000000
	// Bit SLC0_RX_GET_USED_DSCR.
	SLC__0_LEN_CONF_SLC0_RX_GET_USED_DSCR = 0x2000000
	// Position of SLC0_TX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN_Pos = 0x18
	// Bit mask of SLC0_TX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN_Msk = 0x1000000
	// Bit SLC0_TX_PACKET_LOAD_EN.
	SLC__0_LEN_CONF_SLC0_TX_PACKET_LOAD_EN = 0x1000000
	// Position of SLC0_RX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN_Pos = 0x17
	// Bit mask of SLC0_RX_PACKET_LOAD_EN field.
	SLC__0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN_Msk = 0x800000
	// Bit SLC0_RX_PACKET_LOAD_EN.
	SLC__0_LEN_CONF_SLC0_RX_PACKET_LOAD_EN = 0x800000
	// Position of SLC0_LEN_INC_MORE field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_MORE_Pos = 0x16
	// Bit mask of SLC0_LEN_INC_MORE field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_MORE_Msk = 0x400000
	// Bit SLC0_LEN_INC_MORE.
	SLC__0_LEN_CONF_SLC0_LEN_INC_MORE = 0x400000
	// Position of SLC0_LEN_INC field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_Pos = 0x15
	// Bit mask of SLC0_LEN_INC field.
	SLC__0_LEN_CONF_SLC0_LEN_INC_Msk = 0x200000
	// Bit SLC0_LEN_INC.
	SLC__0_LEN_CONF_SLC0_LEN_INC = 0x200000
	// Position of SLC0_LEN_WR field.
	SLC__0_LEN_CONF_SLC0_LEN_WR_Pos = 0x14
	// Bit mask of SLC0_LEN_WR field.
	SLC__0_LEN_CONF_SLC0_LEN_WR_Msk = 0x100000
	// Bit SLC0_LEN_WR.
	SLC__0_LEN_CONF_SLC0_LEN_WR = 0x100000
	// Position of SLC0_LEN_WDATA field.
	SLC__0_LEN_CONF_SLC0_LEN_WDATA_Pos = 0x0
	// Bit mask of SLC0_LEN_WDATA field.
	SLC__0_LEN_CONF_SLC0_LEN_WDATA_Msk = 0xfffff

	// _0_LENGTH: SLC_0_LENGTH
	// Position of SLC0_LEN field.
	SLC__0_LENGTH_SLC0_LEN_Pos = 0x0
	// Bit mask of SLC0_LEN field.
	SLC__0_LENGTH_SLC0_LEN_Msk = 0xfffff

	// _0_TXPKT_H_DSCR: SLC_0_TXPKT_H_DSCR
	// Position of SLC0_TX_PKT_H_DSCR_ADDR field.
	SLC__0_TXPKT_H_DSCR_SLC0_TX_PKT_H_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_H_DSCR_ADDR field.
	SLC__0_TXPKT_H_DSCR_SLC0_TX_PKT_H_DSCR_ADDR_Msk = 0xffffffff

	// _0_TXPKT_E_DSCR: SLC_0_TXPKT_E_DSCR
	// Position of SLC0_TX_PKT_E_DSCR_ADDR field.
	SLC__0_TXPKT_E_DSCR_SLC0_TX_PKT_E_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_E_DSCR_ADDR field.
	SLC__0_TXPKT_E_DSCR_SLC0_TX_PKT_E_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKT_H_DSCR: SLC_0_RXPKT_H_DSCR
	// Position of SLC0_RX_PKT_H_DSCR_ADDR field.
	SLC__0_RXPKT_H_DSCR_SLC0_RX_PKT_H_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_H_DSCR_ADDR field.
	SLC__0_RXPKT_H_DSCR_SLC0_RX_PKT_H_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKT_E_DSCR: SLC_0_RXPKT_E_DSCR
	// Position of SLC0_RX_PKT_E_DSCR_ADDR field.
	SLC__0_RXPKT_E_DSCR_SLC0_RX_PKT_E_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_E_DSCR_ADDR field.
	SLC__0_RXPKT_E_DSCR_SLC0_RX_PKT_E_DSCR_ADDR_Msk = 0xffffffff

	// _0_TXPKTU_H_DSCR: SLC_0_TXPKTU_H_DSCR
	// Position of SLC0_TX_PKT_START_DSCR_ADDR field.
	SLC__0_TXPKTU_H_DSCR_SLC0_TX_PKT_START_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_START_DSCR_ADDR field.
	SLC__0_TXPKTU_H_DSCR_SLC0_TX_PKT_START_DSCR_ADDR_Msk = 0xffffffff

	// _0_TXPKTU_E_DSCR: SLC_0_TXPKTU_E_DSCR
	// Position of SLC0_TX_PKT_END_DSCR_ADDR field.
	SLC__0_TXPKTU_E_DSCR_SLC0_TX_PKT_END_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_TX_PKT_END_DSCR_ADDR field.
	SLC__0_TXPKTU_E_DSCR_SLC0_TX_PKT_END_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKTU_H_DSCR: SLC_0_RXPKTU_H_DSCR
	// Position of SLC0_RX_PKT_START_DSCR_ADDR field.
	SLC__0_RXPKTU_H_DSCR_SLC0_RX_PKT_START_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_START_DSCR_ADDR field.
	SLC__0_RXPKTU_H_DSCR_SLC0_RX_PKT_START_DSCR_ADDR_Msk = 0xffffffff

	// _0_RXPKTU_E_DSCR: SLC_0_RXPKTU_E_DSCR
	// Position of SLC0_RX_PKT_END_DSCR_ADDR field.
	SLC__0_RXPKTU_E_DSCR_SLC0_RX_PKT_END_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PKT_END_DSCR_ADDR field.
	SLC__0_RXPKTU_E_DSCR_SLC0_RX_PKT_END_DSCR_ADDR_Msk = 0xffffffff

	// SEQ_POSITION: SLC_SEQ_POSITION
	// Position of SLC1_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC1_SEQ_POSITION_Pos = 0x8
	// Bit mask of SLC1_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC1_SEQ_POSITION_Msk = 0xff00
	// Position of SLC0_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC0_SEQ_POSITION_Pos = 0x0
	// Bit mask of SLC0_SEQ_POSITION field.
	SLC_SEQ_POSITION_SLC0_SEQ_POSITION_Msk = 0xff

	// _0_DSCR_REC_CONF: SLC_0_DSCR_REC_CONF
	// Position of SLC0_RX_DSCR_REC_LIM field.
	SLC__0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM_Pos = 0x0
	// Bit mask of SLC0_RX_DSCR_REC_LIM field.
	SLC__0_DSCR_REC_CONF_SLC0_RX_DSCR_REC_LIM_Msk = 0x3ff

	// SDIO_CRC_ST0: SLC_SDIO_CRC_ST0
	// Position of DAT3_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT3_CRC_ERR_CNT_Pos = 0x18
	// Bit mask of DAT3_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT3_CRC_ERR_CNT_Msk = 0xff000000
	// Position of DAT2_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT2_CRC_ERR_CNT_Pos = 0x10
	// Bit mask of DAT2_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT2_CRC_ERR_CNT_Msk = 0xff0000
	// Position of DAT1_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT1_CRC_ERR_CNT_Pos = 0x8
	// Bit mask of DAT1_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT1_CRC_ERR_CNT_Msk = 0xff00
	// Position of DAT0_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT0_CRC_ERR_CNT_Pos = 0x0
	// Bit mask of DAT0_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST0_DAT0_CRC_ERR_CNT_Msk = 0xff

	// SDIO_CRC_ST1: SLC_SDIO_CRC_ST1
	// Position of ERR_CNT_CLR field.
	SLC_SDIO_CRC_ST1_ERR_CNT_CLR_Pos = 0x1f
	// Bit mask of ERR_CNT_CLR field.
	SLC_SDIO_CRC_ST1_ERR_CNT_CLR_Msk = 0x80000000
	// Bit ERR_CNT_CLR.
	SLC_SDIO_CRC_ST1_ERR_CNT_CLR = 0x80000000
	// Position of CMD_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST1_CMD_CRC_ERR_CNT_Pos = 0x0
	// Bit mask of CMD_CRC_ERR_CNT field.
	SLC_SDIO_CRC_ST1_CMD_CRC_ERR_CNT_Msk = 0xff

	// _0_EOF_START_DES: SLC_0_EOF_START_DES
	// Position of SLC0_EOF_START_DES_ADDR field.
	SLC__0_EOF_START_DES_SLC0_EOF_START_DES_ADDR_Pos = 0x0
	// Bit mask of SLC0_EOF_START_DES_ADDR field.
	SLC__0_EOF_START_DES_SLC0_EOF_START_DES_ADDR_Msk = 0xffffffff

	// _0_PUSH_DSCR_ADDR: SLC_0_PUSH_DSCR_ADDR
	// Position of SLC0_RX_PUSH_DSCR_ADDR field.
	SLC__0_PUSH_DSCR_ADDR_SLC0_RX_PUSH_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_PUSH_DSCR_ADDR field.
	SLC__0_PUSH_DSCR_ADDR_SLC0_RX_PUSH_DSCR_ADDR_Msk = 0xffffffff

	// _0_DONE_DSCR_ADDR: SLC_0_DONE_DSCR_ADDR
	// Position of SLC0_RX_DONE_DSCR_ADDR field.
	SLC__0_DONE_DSCR_ADDR_SLC0_RX_DONE_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_RX_DONE_DSCR_ADDR field.
	SLC__0_DONE_DSCR_ADDR_SLC0_RX_DONE_DSCR_ADDR_Msk = 0xffffffff

	// _0_SUB_START_DES: SLC_0_SUB_START_DES
	// Position of SLC0_SUB_PAC_START_DSCR_ADDR field.
	SLC__0_SUB_START_DES_SLC0_SUB_PAC_START_DSCR_ADDR_Pos = 0x0
	// Bit mask of SLC0_SUB_PAC_START_DSCR_ADDR field.
	SLC__0_SUB_START_DES_SLC0_SUB_PAC_START_DSCR_ADDR_Msk = 0xffffffff

	// _0_DSCR_CNT: SLC_0_DSCR_CNT
	// Position of SLC0_RX_GET_EOF_OCC field.
	SLC__0_DSCR_CNT_SLC0_RX_GET_EOF_OCC_Pos = 0x10
	// Bit mask of SLC0_RX_GET_EOF_OCC field.
	SLC__0_DSCR_CNT_SLC0_RX_GET_EOF_OCC_Msk = 0x10000
	// Bit SLC0_RX_GET_EOF_OCC.
	SLC__0_DSCR_CNT_SLC0_RX_GET_EOF_OCC = 0x10000
	// Position of SLC0_RX_DSCR_CNT_LAT field.
	SLC__0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT_Pos = 0x0
	// Bit mask of SLC0_RX_DSCR_CNT_LAT field.
	SLC__0_DSCR_CNT_SLC0_RX_DSCR_CNT_LAT_Msk = 0x3ff

	// _0_LEN_LIM_CONF: SLC_0_LEN_LIM_CONF
	// Position of SLC0_LEN_LIM field.
	SLC__0_LEN_LIM_CONF_SLC0_LEN_LIM_Pos = 0x0
	// Bit mask of SLC0_LEN_LIM field.
	SLC__0_LEN_LIM_CONF_SLC0_LEN_LIM_Msk = 0xfffff

	// _0INT_ST1: SLC_0INT_ST1
	// Position of SLC0_RX_QUICK_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_QUICK_EOF_INT_ST1 = 0x4000000
	// Position of CMD_DTC_INT_ST1 field.
	SLC__0INT_ST1_CMD_DTC_INT_ST1_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ST1 field.
	SLC__0INT_ST1_CMD_DTC_INT_ST1_Msk = 0x2000000
	// Bit CMD_DTC_INT_ST1.
	SLC__0INT_ST1_CMD_DTC_INT_ST1 = 0x2000000
	// Position of SLC0_TX_ERR_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_ERR_EOF_INT_ST1 = 0x1000000
	// Position of SLC0_WR_RETRY_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ST1.
	SLC__0INT_ST1_SLC0_WR_RETRY_DONE_INT_ST1 = 0x800000
	// Position of SLC0_HOST_RD_ACK_INT_ST1 field.
	SLC__0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ST1 field.
	SLC__0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ST1.
	SLC__0INT_ST1_SLC0_HOST_RD_ACK_INT_ST1 = 0x400000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_DSCR_EMPTY_INT_ST1 = 0x200000
	// Position of SLC0_RX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_DSCR_ERR_INT_ST1 = 0x100000
	// Position of SLC0_TX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_DSCR_ERR_INT_ST1 = 0x80000
	// Position of SLC0_TOHOST_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOHOST_INT_ST1_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOHOST_INT_ST1_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ST1.
	SLC__0INT_ST1_SLC0_TOHOST_INT_ST1 = 0x40000
	// Position of SLC0_RX_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_EOF_INT_ST1_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_EOF_INT_ST1_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_EOF_INT_ST1 = 0x20000
	// Position of SLC0_RX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DONE_INT_ST1_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_DONE_INT_ST1_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_DONE_INT_ST1 = 0x10000
	// Position of SLC0_TX_SUC_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_SUC_EOF_INT_ST1 = 0x8000
	// Position of SLC0_TX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DONE_INT_ST1_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_DONE_INT_ST1_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_DONE_INT_ST1 = 0x4000
	// Position of SLC0_TOKEN1_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ST1.
	SLC__0INT_ST1_SLC0_TOKEN1_1TO0_INT_ST1 = 0x2000
	// Position of SLC0_TOKEN0_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ST1.
	SLC__0INT_ST1_SLC0_TOKEN0_1TO0_INT_ST1 = 0x1000
	// Position of SLC0_TX_OVF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_OVF_INT_ST1_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_OVF_INT_ST1_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_OVF_INT_ST1 = 0x800
	// Position of SLC0_RX_UDF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_UDF_INT_ST1_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_UDF_INT_ST1_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_UDF_INT_ST1 = 0x400
	// Position of SLC0_TX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_START_INT_ST1_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_TX_START_INT_ST1_Msk = 0x200
	// Bit SLC0_TX_START_INT_ST1.
	SLC__0INT_ST1_SLC0_TX_START_INT_ST1 = 0x200
	// Position of SLC0_RX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_START_INT_ST1_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ST1 field.
	SLC__0INT_ST1_SLC0_RX_START_INT_ST1_Msk = 0x100
	// Bit SLC0_RX_START_INT_ST1.
	SLC__0INT_ST1_SLC0_RX_START_INT_ST1 = 0x100
	// Position of FRHOST_BIT7_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT7_INT_ST1_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT7_INT_ST1_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT7_INT_ST1 = 0x80
	// Position of FRHOST_BIT6_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT6_INT_ST1_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT6_INT_ST1_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT6_INT_ST1 = 0x40
	// Position of FRHOST_BIT5_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT5_INT_ST1_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT5_INT_ST1_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT5_INT_ST1 = 0x20
	// Position of FRHOST_BIT4_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT4_INT_ST1_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT4_INT_ST1_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT4_INT_ST1 = 0x10
	// Position of FRHOST_BIT3_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT3_INT_ST1_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT3_INT_ST1_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT3_INT_ST1 = 0x8
	// Position of FRHOST_BIT2_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT2_INT_ST1_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT2_INT_ST1_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT2_INT_ST1 = 0x4
	// Position of FRHOST_BIT1_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT1_INT_ST1_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT1_INT_ST1_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT1_INT_ST1 = 0x2
	// Position of FRHOST_BIT0_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT0_INT_ST1_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ST1 field.
	SLC__0INT_ST1_FRHOST_BIT0_INT_ST1_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ST1.
	SLC__0INT_ST1_FRHOST_BIT0_INT_ST1 = 0x1

	// _0INT_ENA1: SLC_0INT_ENA1
	// Position of SLC0_RX_QUICK_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1_Pos = 0x1a
	// Bit mask of SLC0_RX_QUICK_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1_Msk = 0x4000000
	// Bit SLC0_RX_QUICK_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_QUICK_EOF_INT_ENA1 = 0x4000000
	// Position of CMD_DTC_INT_ENA1 field.
	SLC__0INT_ENA1_CMD_DTC_INT_ENA1_Pos = 0x19
	// Bit mask of CMD_DTC_INT_ENA1 field.
	SLC__0INT_ENA1_CMD_DTC_INT_ENA1_Msk = 0x2000000
	// Bit CMD_DTC_INT_ENA1.
	SLC__0INT_ENA1_CMD_DTC_INT_ENA1 = 0x2000000
	// Position of SLC0_TX_ERR_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1_Pos = 0x18
	// Bit mask of SLC0_TX_ERR_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1_Msk = 0x1000000
	// Bit SLC0_TX_ERR_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_ERR_EOF_INT_ENA1 = 0x1000000
	// Position of SLC0_WR_RETRY_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1_Pos = 0x17
	// Bit mask of SLC0_WR_RETRY_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1_Msk = 0x800000
	// Bit SLC0_WR_RETRY_DONE_INT_ENA1.
	SLC__0INT_ENA1_SLC0_WR_RETRY_DONE_INT_ENA1 = 0x800000
	// Position of SLC0_HOST_RD_ACK_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1_Pos = 0x16
	// Bit mask of SLC0_HOST_RD_ACK_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1_Msk = 0x400000
	// Bit SLC0_HOST_RD_ACK_INT_ENA1.
	SLC__0INT_ENA1_SLC0_HOST_RD_ACK_INT_ENA1 = 0x400000
	// Position of SLC0_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1_Pos = 0x15
	// Bit mask of SLC0_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1_Msk = 0x200000
	// Bit SLC0_TX_DSCR_EMPTY_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_DSCR_EMPTY_INT_ENA1 = 0x200000
	// Position of SLC0_RX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1_Pos = 0x14
	// Bit mask of SLC0_RX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1_Msk = 0x100000
	// Bit SLC0_RX_DSCR_ERR_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_DSCR_ERR_INT_ENA1 = 0x100000
	// Position of SLC0_TX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1_Pos = 0x13
	// Bit mask of SLC0_TX_DSCR_ERR_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1_Msk = 0x80000
	// Bit SLC0_TX_DSCR_ERR_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_DSCR_ERR_INT_ENA1 = 0x80000
	// Position of SLC0_TOHOST_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOHOST_INT_ENA1_Pos = 0x12
	// Bit mask of SLC0_TOHOST_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOHOST_INT_ENA1_Msk = 0x40000
	// Bit SLC0_TOHOST_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TOHOST_INT_ENA1 = 0x40000
	// Position of SLC0_RX_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_EOF_INT_ENA1_Pos = 0x11
	// Bit mask of SLC0_RX_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_EOF_INT_ENA1_Msk = 0x20000
	// Bit SLC0_RX_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_EOF_INT_ENA1 = 0x20000
	// Position of SLC0_RX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DONE_INT_ENA1_Pos = 0x10
	// Bit mask of SLC0_RX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_DONE_INT_ENA1_Msk = 0x10000
	// Bit SLC0_RX_DONE_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_DONE_INT_ENA1 = 0x10000
	// Position of SLC0_TX_SUC_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1_Pos = 0xf
	// Bit mask of SLC0_TX_SUC_EOF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1_Msk = 0x8000
	// Bit SLC0_TX_SUC_EOF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_SUC_EOF_INT_ENA1 = 0x8000
	// Position of SLC0_TX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DONE_INT_ENA1_Pos = 0xe
	// Bit mask of SLC0_TX_DONE_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_DONE_INT_ENA1_Msk = 0x4000
	// Bit SLC0_TX_DONE_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_DONE_INT_ENA1 = 0x4000
	// Position of SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1_Pos = 0xd
	// Bit mask of SLC0_TOKEN1_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1_Msk = 0x2000
	// Bit SLC0_TOKEN1_1TO0_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TOKEN1_1TO0_INT_ENA1 = 0x2000
	// Position of SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1_Pos = 0xc
	// Bit mask of SLC0_TOKEN0_1TO0_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1_Msk = 0x1000
	// Bit SLC0_TOKEN0_1TO0_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TOKEN0_1TO0_INT_ENA1 = 0x1000
	// Position of SLC0_TX_OVF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_OVF_INT_ENA1_Pos = 0xb
	// Bit mask of SLC0_TX_OVF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_OVF_INT_ENA1_Msk = 0x800
	// Bit SLC0_TX_OVF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_OVF_INT_ENA1 = 0x800
	// Position of SLC0_RX_UDF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_UDF_INT_ENA1_Pos = 0xa
	// Bit mask of SLC0_RX_UDF_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_UDF_INT_ENA1_Msk = 0x400
	// Bit SLC0_RX_UDF_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_UDF_INT_ENA1 = 0x400
	// Position of SLC0_TX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_START_INT_ENA1_Pos = 0x9
	// Bit mask of SLC0_TX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_TX_START_INT_ENA1_Msk = 0x200
	// Bit SLC0_TX_START_INT_ENA1.
	SLC__0INT_ENA1_SLC0_TX_START_INT_ENA1 = 0x200
	// Position of SLC0_RX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_START_INT_ENA1_Pos = 0x8
	// Bit mask of SLC0_RX_START_INT_ENA1 field.
	SLC__0INT_ENA1_SLC0_RX_START_INT_ENA1_Msk = 0x100
	// Bit SLC0_RX_START_INT_ENA1.
	SLC__0INT_ENA1_SLC0_RX_START_INT_ENA1 = 0x100
	// Position of FRHOST_BIT7_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT7_INT_ENA1_Pos = 0x7
	// Bit mask of FRHOST_BIT7_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT7_INT_ENA1_Msk = 0x80
	// Bit FRHOST_BIT7_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT7_INT_ENA1 = 0x80
	// Position of FRHOST_BIT6_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT6_INT_ENA1_Pos = 0x6
	// Bit mask of FRHOST_BIT6_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT6_INT_ENA1_Msk = 0x40
	// Bit FRHOST_BIT6_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT6_INT_ENA1 = 0x40
	// Position of FRHOST_BIT5_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT5_INT_ENA1_Pos = 0x5
	// Bit mask of FRHOST_BIT5_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT5_INT_ENA1_Msk = 0x20
	// Bit FRHOST_BIT5_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT5_INT_ENA1 = 0x20
	// Position of FRHOST_BIT4_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT4_INT_ENA1_Pos = 0x4
	// Bit mask of FRHOST_BIT4_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT4_INT_ENA1_Msk = 0x10
	// Bit FRHOST_BIT4_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT4_INT_ENA1 = 0x10
	// Position of FRHOST_BIT3_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT3_INT_ENA1_Pos = 0x3
	// Bit mask of FRHOST_BIT3_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT3_INT_ENA1_Msk = 0x8
	// Bit FRHOST_BIT3_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT3_INT_ENA1 = 0x8
	// Position of FRHOST_BIT2_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT2_INT_ENA1_Pos = 0x2
	// Bit mask of FRHOST_BIT2_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT2_INT_ENA1_Msk = 0x4
	// Bit FRHOST_BIT2_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT2_INT_ENA1 = 0x4
	// Position of FRHOST_BIT1_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT1_INT_ENA1_Pos = 0x1
	// Bit mask of FRHOST_BIT1_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT1_INT_ENA1_Msk = 0x2
	// Bit FRHOST_BIT1_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT1_INT_ENA1 = 0x2
	// Position of FRHOST_BIT0_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT0_INT_ENA1_Pos = 0x0
	// Bit mask of FRHOST_BIT0_INT_ENA1 field.
	SLC__0INT_ENA1_FRHOST_BIT0_INT_ENA1_Msk = 0x1
	// Bit FRHOST_BIT0_INT_ENA1.
	SLC__0INT_ENA1_FRHOST_BIT0_INT_ENA1 = 0x1

	// _1INT_ST1: SLC_1INT_ST1
	// Position of SLC1_TX_ERR_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_ERR_EOF_INT_ST1 = 0x1000000
	// Position of SLC1_WR_RETRY_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ST1.
	SLC__1INT_ST1_SLC1_WR_RETRY_DONE_INT_ST1 = 0x800000
	// Position of SLC1_HOST_RD_ACK_INT_ST1 field.
	SLC__1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ST1 field.
	SLC__1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ST1.
	SLC__1INT_ST1_SLC1_HOST_RD_ACK_INT_ST1 = 0x400000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_DSCR_EMPTY_INT_ST1 = 0x200000
	// Position of SLC1_RX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_DSCR_ERR_INT_ST1 = 0x100000
	// Position of SLC1_TX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_DSCR_ERR_INT_ST1 = 0x80000
	// Position of SLC1_TOHOST_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOHOST_INT_ST1_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOHOST_INT_ST1_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ST1.
	SLC__1INT_ST1_SLC1_TOHOST_INT_ST1 = 0x40000
	// Position of SLC1_RX_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_EOF_INT_ST1_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_EOF_INT_ST1_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_EOF_INT_ST1 = 0x20000
	// Position of SLC1_RX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DONE_INT_ST1_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_DONE_INT_ST1_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_DONE_INT_ST1 = 0x10000
	// Position of SLC1_TX_SUC_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_SUC_EOF_INT_ST1 = 0x8000
	// Position of SLC1_TX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DONE_INT_ST1_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_DONE_INT_ST1_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_DONE_INT_ST1 = 0x4000
	// Position of SLC1_TOKEN1_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ST1.
	SLC__1INT_ST1_SLC1_TOKEN1_1TO0_INT_ST1 = 0x2000
	// Position of SLC1_TOKEN0_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ST1.
	SLC__1INT_ST1_SLC1_TOKEN0_1TO0_INT_ST1 = 0x1000
	// Position of SLC1_TX_OVF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_OVF_INT_ST1_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_OVF_INT_ST1_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_OVF_INT_ST1 = 0x800
	// Position of SLC1_RX_UDF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_UDF_INT_ST1_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_UDF_INT_ST1_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_UDF_INT_ST1 = 0x400
	// Position of SLC1_TX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_START_INT_ST1_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_TX_START_INT_ST1_Msk = 0x200
	// Bit SLC1_TX_START_INT_ST1.
	SLC__1INT_ST1_SLC1_TX_START_INT_ST1 = 0x200
	// Position of SLC1_RX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_START_INT_ST1_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ST1 field.
	SLC__1INT_ST1_SLC1_RX_START_INT_ST1_Msk = 0x100
	// Bit SLC1_RX_START_INT_ST1.
	SLC__1INT_ST1_SLC1_RX_START_INT_ST1 = 0x100
	// Position of FRHOST_BIT15_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT15_INT_ST1_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT15_INT_ST1_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT15_INT_ST1 = 0x80
	// Position of FRHOST_BIT14_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT14_INT_ST1_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT14_INT_ST1_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT14_INT_ST1 = 0x40
	// Position of FRHOST_BIT13_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT13_INT_ST1_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT13_INT_ST1_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT13_INT_ST1 = 0x20
	// Position of FRHOST_BIT12_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT12_INT_ST1_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT12_INT_ST1_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT12_INT_ST1 = 0x10
	// Position of FRHOST_BIT11_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT11_INT_ST1_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT11_INT_ST1_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT11_INT_ST1 = 0x8
	// Position of FRHOST_BIT10_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT10_INT_ST1_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT10_INT_ST1_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT10_INT_ST1 = 0x4
	// Position of FRHOST_BIT9_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT9_INT_ST1_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT9_INT_ST1_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT9_INT_ST1 = 0x2
	// Position of FRHOST_BIT8_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT8_INT_ST1_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ST1 field.
	SLC__1INT_ST1_FRHOST_BIT8_INT_ST1_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ST1.
	SLC__1INT_ST1_FRHOST_BIT8_INT_ST1 = 0x1

	// _1INT_ENA1: SLC_1INT_ENA1
	// Position of SLC1_TX_ERR_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1_Pos = 0x18
	// Bit mask of SLC1_TX_ERR_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1_Msk = 0x1000000
	// Bit SLC1_TX_ERR_EOF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_ERR_EOF_INT_ENA1 = 0x1000000
	// Position of SLC1_WR_RETRY_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1_Pos = 0x17
	// Bit mask of SLC1_WR_RETRY_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1_Msk = 0x800000
	// Bit SLC1_WR_RETRY_DONE_INT_ENA1.
	SLC__1INT_ENA1_SLC1_WR_RETRY_DONE_INT_ENA1 = 0x800000
	// Position of SLC1_HOST_RD_ACK_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1_Pos = 0x16
	// Bit mask of SLC1_HOST_RD_ACK_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1_Msk = 0x400000
	// Bit SLC1_HOST_RD_ACK_INT_ENA1.
	SLC__1INT_ENA1_SLC1_HOST_RD_ACK_INT_ENA1 = 0x400000
	// Position of SLC1_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1_Pos = 0x15
	// Bit mask of SLC1_TX_DSCR_EMPTY_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1_Msk = 0x200000
	// Bit SLC1_TX_DSCR_EMPTY_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_DSCR_EMPTY_INT_ENA1 = 0x200000
	// Position of SLC1_RX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1_Pos = 0x14
	// Bit mask of SLC1_RX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1_Msk = 0x100000
	// Bit SLC1_RX_DSCR_ERR_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_DSCR_ERR_INT_ENA1 = 0x100000
	// Position of SLC1_TX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1_Pos = 0x13
	// Bit mask of SLC1_TX_DSCR_ERR_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1_Msk = 0x80000
	// Bit SLC1_TX_DSCR_ERR_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_DSCR_ERR_INT_ENA1 = 0x80000
	// Position of SLC1_TOHOST_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOHOST_INT_ENA1_Pos = 0x12
	// Bit mask of SLC1_TOHOST_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOHOST_INT_ENA1_Msk = 0x40000
	// Bit SLC1_TOHOST_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TOHOST_INT_ENA1 = 0x40000
	// Position of SLC1_RX_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_EOF_INT_ENA1_Pos = 0x11
	// Bit mask of SLC1_RX_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_EOF_INT_ENA1_Msk = 0x20000
	// Bit SLC1_RX_EOF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_EOF_INT_ENA1 = 0x20000
	// Position of SLC1_RX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DONE_INT_ENA1_Pos = 0x10
	// Bit mask of SLC1_RX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_DONE_INT_ENA1_Msk = 0x10000
	// Bit SLC1_RX_DONE_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_DONE_INT_ENA1 = 0x10000
	// Position of SLC1_TX_SUC_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1_Pos = 0xf
	// Bit mask of SLC1_TX_SUC_EOF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1_Msk = 0x8000
	// Bit SLC1_TX_SUC_EOF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_SUC_EOF_INT_ENA1 = 0x8000
	// Position of SLC1_TX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DONE_INT_ENA1_Pos = 0xe
	// Bit mask of SLC1_TX_DONE_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_DONE_INT_ENA1_Msk = 0x4000
	// Bit SLC1_TX_DONE_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_DONE_INT_ENA1 = 0x4000
	// Position of SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1_Pos = 0xd
	// Bit mask of SLC1_TOKEN1_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1_Msk = 0x2000
	// Bit SLC1_TOKEN1_1TO0_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TOKEN1_1TO0_INT_ENA1 = 0x2000
	// Position of SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1_Pos = 0xc
	// Bit mask of SLC1_TOKEN0_1TO0_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1_Msk = 0x1000
	// Bit SLC1_TOKEN0_1TO0_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TOKEN0_1TO0_INT_ENA1 = 0x1000
	// Position of SLC1_TX_OVF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_OVF_INT_ENA1_Pos = 0xb
	// Bit mask of SLC1_TX_OVF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_OVF_INT_ENA1_Msk = 0x800
	// Bit SLC1_TX_OVF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_OVF_INT_ENA1 = 0x800
	// Position of SLC1_RX_UDF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_UDF_INT_ENA1_Pos = 0xa
	// Bit mask of SLC1_RX_UDF_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_UDF_INT_ENA1_Msk = 0x400
	// Bit SLC1_RX_UDF_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_UDF_INT_ENA1 = 0x400
	// Position of SLC1_TX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_START_INT_ENA1_Pos = 0x9
	// Bit mask of SLC1_TX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_TX_START_INT_ENA1_Msk = 0x200
	// Bit SLC1_TX_START_INT_ENA1.
	SLC__1INT_ENA1_SLC1_TX_START_INT_ENA1 = 0x200
	// Position of SLC1_RX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_START_INT_ENA1_Pos = 0x8
	// Bit mask of SLC1_RX_START_INT_ENA1 field.
	SLC__1INT_ENA1_SLC1_RX_START_INT_ENA1_Msk = 0x100
	// Bit SLC1_RX_START_INT_ENA1.
	SLC__1INT_ENA1_SLC1_RX_START_INT_ENA1 = 0x100
	// Position of FRHOST_BIT15_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT15_INT_ENA1_Pos = 0x7
	// Bit mask of FRHOST_BIT15_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT15_INT_ENA1_Msk = 0x80
	// Bit FRHOST_BIT15_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT15_INT_ENA1 = 0x80
	// Position of FRHOST_BIT14_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT14_INT_ENA1_Pos = 0x6
	// Bit mask of FRHOST_BIT14_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT14_INT_ENA1_Msk = 0x40
	// Bit FRHOST_BIT14_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT14_INT_ENA1 = 0x40
	// Position of FRHOST_BIT13_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT13_INT_ENA1_Pos = 0x5
	// Bit mask of FRHOST_BIT13_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT13_INT_ENA1_Msk = 0x20
	// Bit FRHOST_BIT13_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT13_INT_ENA1 = 0x20
	// Position of FRHOST_BIT12_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT12_INT_ENA1_Pos = 0x4
	// Bit mask of FRHOST_BIT12_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT12_INT_ENA1_Msk = 0x10
	// Bit FRHOST_BIT12_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT12_INT_ENA1 = 0x10
	// Position of FRHOST_BIT11_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT11_INT_ENA1_Pos = 0x3
	// Bit mask of FRHOST_BIT11_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT11_INT_ENA1_Msk = 0x8
	// Bit FRHOST_BIT11_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT11_INT_ENA1 = 0x8
	// Position of FRHOST_BIT10_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT10_INT_ENA1_Pos = 0x2
	// Bit mask of FRHOST_BIT10_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT10_INT_ENA1_Msk = 0x4
	// Bit FRHOST_BIT10_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT10_INT_ENA1 = 0x4
	// Position of FRHOST_BIT9_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT9_INT_ENA1_Pos = 0x1
	// Bit mask of FRHOST_BIT9_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT9_INT_ENA1_Msk = 0x2
	// Bit FRHOST_BIT9_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT9_INT_ENA1 = 0x2
	// Position of FRHOST_BIT8_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT8_INT_ENA1_Pos = 0x0
	// Bit mask of FRHOST_BIT8_INT_ENA1 field.
	SLC__1INT_ENA1_FRHOST_BIT8_INT_ENA1_Msk = 0x1
	// Bit FRHOST_BIT8_INT_ENA1.
	SLC__1INT_ENA1_FRHOST_BIT8_INT_ENA1 = 0x1

	// DATE: SLC_DATE
	// Position of DATE field.
	SLC_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	SLC_DATE_DATE_Msk = 0xffffffff

	// ID: SLC_ID
	// Position of ID field.
	SLC_ID_ID_Pos = 0x0
	// Bit mask of ID field.
	SLC_ID_ID_Msk = 0xffffffff
)

// Constants for RTCMEM0
const ()

// Constants for SHA
const ()

// Constants for RTCCNTL
const (
	// OPTIONS0: RTC_CNTL_OPTIONS0
	// Position of SW_SYS_RST field.
	RTCCNTL_OPTIONS0_SW_SYS_RST_Pos = 0x1f
	// Bit mask of SW_SYS_RST field.
	RTCCNTL_OPTIONS0_SW_SYS_RST_Msk = 0x80000000
	// Bit SW_SYS_RST.
	RTCCNTL_OPTIONS0_SW_SYS_RST = 0x80000000
	// Position of DG_WRAP_FORCE_NORST field.
	RTCCNTL_OPTIONS0_DG_WRAP_FORCE_NORST_Pos = 0x1e
	// Bit mask of DG_WRAP_FORCE_NORST field.
	RTCCNTL_OPTIONS0_DG_WRAP_FORCE_NORST_Msk = 0x40000000
	// Bit DG_WRAP_FORCE_NORST.
	RTCCNTL_OPTIONS0_DG_WRAP_FORCE_NORST = 0x40000000
	// Position of DG_WRAP_FORCE_RST field.
	RTCCNTL_OPTIONS0_DG_WRAP_FORCE_RST_Pos = 0x1d
	// Bit mask of DG_WRAP_FORCE_RST field.
	RTCCNTL_OPTIONS0_DG_WRAP_FORCE_RST_Msk = 0x20000000
	// Bit DG_WRAP_FORCE_RST.
	RTCCNTL_OPTIONS0_DG_WRAP_FORCE_RST = 0x20000000
	// Position of ANALOG_FORCE_NOISO field.
	RTCCNTL_OPTIONS0_ANALOG_FORCE_NOISO_Pos = 0x1c
	// Bit mask of ANALOG_FORCE_NOISO field.
	RTCCNTL_OPTIONS0_ANALOG_FORCE_NOISO_Msk = 0x10000000
	// Bit ANALOG_FORCE_NOISO.
	RTCCNTL_OPTIONS0_ANALOG_FORCE_NOISO = 0x10000000
	// Position of PLL_FORCE_NOISO field.
	RTCCNTL_OPTIONS0_PLL_FORCE_NOISO_Pos = 0x1b
	// Bit mask of PLL_FORCE_NOISO field.
	RTCCNTL_OPTIONS0_PLL_FORCE_NOISO_Msk = 0x8000000
	// Bit PLL_FORCE_NOISO.
	RTCCNTL_OPTIONS0_PLL_FORCE_NOISO = 0x8000000
	// Position of XTL_FORCE_NOISO field.
	RTCCNTL_OPTIONS0_XTL_FORCE_NOISO_Pos = 0x1a
	// Bit mask of XTL_FORCE_NOISO field.
	RTCCNTL_OPTIONS0_XTL_FORCE_NOISO_Msk = 0x4000000
	// Bit XTL_FORCE_NOISO.
	RTCCNTL_OPTIONS0_XTL_FORCE_NOISO = 0x4000000
	// Position of ANALOG_FORCE_ISO field.
	RTCCNTL_OPTIONS0_ANALOG_FORCE_ISO_Pos = 0x19
	// Bit mask of ANALOG_FORCE_ISO field.
	RTCCNTL_OPTIONS0_ANALOG_FORCE_ISO_Msk = 0x2000000
	// Bit ANALOG_FORCE_ISO.
	RTCCNTL_OPTIONS0_ANALOG_FORCE_ISO = 0x2000000
	// Position of PLL_FORCE_ISO field.
	RTCCNTL_OPTIONS0_PLL_FORCE_ISO_Pos = 0x18
	// Bit mask of PLL_FORCE_ISO field.
	RTCCNTL_OPTIONS0_PLL_FORCE_ISO_Msk = 0x1000000
	// Bit PLL_FORCE_ISO.
	RTCCNTL_OPTIONS0_PLL_FORCE_ISO = 0x1000000
	// Position of XTL_FORCE_ISO field.
	RTCCNTL_OPTIONS0_XTL_FORCE_ISO_Pos = 0x17
	// Bit mask of XTL_FORCE_ISO field.
	RTCCNTL_OPTIONS0_XTL_FORCE_ISO_Msk = 0x800000
	// Bit XTL_FORCE_ISO.
	RTCCNTL_OPTIONS0_XTL_FORCE_ISO = 0x800000
	// Position of BIAS_CORE_FORCE_PU field.
	RTCCNTL_OPTIONS0_BIAS_CORE_FORCE_PU_Pos = 0x16
	// Bit mask of BIAS_CORE_FORCE_PU field.
	RTCCNTL_OPTIONS0_BIAS_CORE_FORCE_PU_Msk = 0x400000
	// Bit BIAS_CORE_FORCE_PU.
	RTCCNTL_OPTIONS0_BIAS_CORE_FORCE_PU = 0x400000
	// Position of BIAS_CORE_FORCE_PD field.
	RTCCNTL_OPTIONS0_BIAS_CORE_FORCE_PD_Pos = 0x15
	// Bit mask of BIAS_CORE_FORCE_PD field.
	RTCCNTL_OPTIONS0_BIAS_CORE_FORCE_PD_Msk = 0x200000
	// Bit BIAS_CORE_FORCE_PD.
	RTCCNTL_OPTIONS0_BIAS_CORE_FORCE_PD = 0x200000
	// Position of BIAS_CORE_FOLW_8M field.
	RTCCNTL_OPTIONS0_BIAS_CORE_FOLW_8M_Pos = 0x14
	// Bit mask of BIAS_CORE_FOLW_8M field.
	RTCCNTL_OPTIONS0_BIAS_CORE_FOLW_8M_Msk = 0x100000
	// Bit BIAS_CORE_FOLW_8M.
	RTCCNTL_OPTIONS0_BIAS_CORE_FOLW_8M = 0x100000
	// Position of BIAS_I2C_FORCE_PU field.
	RTCCNTL_OPTIONS0_BIAS_I2C_FORCE_PU_Pos = 0x13
	// Bit mask of BIAS_I2C_FORCE_PU field.
	RTCCNTL_OPTIONS0_BIAS_I2C_FORCE_PU_Msk = 0x80000
	// Bit BIAS_I2C_FORCE_PU.
	RTCCNTL_OPTIONS0_BIAS_I2C_FORCE_PU = 0x80000
	// Position of BIAS_I2C_FORCE_PD field.
	RTCCNTL_OPTIONS0_BIAS_I2C_FORCE_PD_Pos = 0x12
	// Bit mask of BIAS_I2C_FORCE_PD field.
	RTCCNTL_OPTIONS0_BIAS_I2C_FORCE_PD_Msk = 0x40000
	// Bit BIAS_I2C_FORCE_PD.
	RTCCNTL_OPTIONS0_BIAS_I2C_FORCE_PD = 0x40000
	// Position of BIAS_I2C_FOLW_8M field.
	RTCCNTL_OPTIONS0_BIAS_I2C_FOLW_8M_Pos = 0x11
	// Bit mask of BIAS_I2C_FOLW_8M field.
	RTCCNTL_OPTIONS0_BIAS_I2C_FOLW_8M_Msk = 0x20000
	// Bit BIAS_I2C_FOLW_8M.
	RTCCNTL_OPTIONS0_BIAS_I2C_FOLW_8M = 0x20000
	// Position of BIAS_FORCE_NOSLEEP field.
	RTCCNTL_OPTIONS0_BIAS_FORCE_NOSLEEP_Pos = 0x10
	// Bit mask of BIAS_FORCE_NOSLEEP field.
	RTCCNTL_OPTIONS0_BIAS_FORCE_NOSLEEP_Msk = 0x10000
	// Bit BIAS_FORCE_NOSLEEP.
	RTCCNTL_OPTIONS0_BIAS_FORCE_NOSLEEP = 0x10000
	// Position of BIAS_FORCE_SLEEP field.
	RTCCNTL_OPTIONS0_BIAS_FORCE_SLEEP_Pos = 0xf
	// Bit mask of BIAS_FORCE_SLEEP field.
	RTCCNTL_OPTIONS0_BIAS_FORCE_SLEEP_Msk = 0x8000
	// Bit BIAS_FORCE_SLEEP.
	RTCCNTL_OPTIONS0_BIAS_FORCE_SLEEP = 0x8000
	// Position of BIAS_SLEEP_FOLW_8M field.
	RTCCNTL_OPTIONS0_BIAS_SLEEP_FOLW_8M_Pos = 0xe
	// Bit mask of BIAS_SLEEP_FOLW_8M field.
	RTCCNTL_OPTIONS0_BIAS_SLEEP_FOLW_8M_Msk = 0x4000
	// Bit BIAS_SLEEP_FOLW_8M.
	RTCCNTL_OPTIONS0_BIAS_SLEEP_FOLW_8M = 0x4000
	// Position of XTL_FORCE_PU field.
	RTCCNTL_OPTIONS0_XTL_FORCE_PU_Pos = 0xd
	// Bit mask of XTL_FORCE_PU field.
	RTCCNTL_OPTIONS0_XTL_FORCE_PU_Msk = 0x2000
	// Bit XTL_FORCE_PU.
	RTCCNTL_OPTIONS0_XTL_FORCE_PU = 0x2000
	// Position of XTL_FORCE_PD field.
	RTCCNTL_OPTIONS0_XTL_FORCE_PD_Pos = 0xc
	// Bit mask of XTL_FORCE_PD field.
	RTCCNTL_OPTIONS0_XTL_FORCE_PD_Msk = 0x1000
	// Bit XTL_FORCE_PD.
	RTCCNTL_OPTIONS0_XTL_FORCE_PD = 0x1000
	// Position of BBPLL_FORCE_PU field.
	RTCCNTL_OPTIONS0_BBPLL_FORCE_PU_Pos = 0xb
	// Bit mask of BBPLL_FORCE_PU field.
	RTCCNTL_OPTIONS0_BBPLL_FORCE_PU_Msk = 0x800
	// Bit BBPLL_FORCE_PU.
	RTCCNTL_OPTIONS0_BBPLL_FORCE_PU = 0x800
	// Position of BBPLL_FORCE_PD field.
	RTCCNTL_OPTIONS0_BBPLL_FORCE_PD_Pos = 0xa
	// Bit mask of BBPLL_FORCE_PD field.
	RTCCNTL_OPTIONS0_BBPLL_FORCE_PD_Msk = 0x400
	// Bit BBPLL_FORCE_PD.
	RTCCNTL_OPTIONS0_BBPLL_FORCE_PD = 0x400
	// Position of BBPLL_I2C_FORCE_PU field.
	RTCCNTL_OPTIONS0_BBPLL_I2C_FORCE_PU_Pos = 0x9
	// Bit mask of BBPLL_I2C_FORCE_PU field.
	RTCCNTL_OPTIONS0_BBPLL_I2C_FORCE_PU_Msk = 0x200
	// Bit BBPLL_I2C_FORCE_PU.
	RTCCNTL_OPTIONS0_BBPLL_I2C_FORCE_PU = 0x200
	// Position of BBPLL_I2C_FORCE_PD field.
	RTCCNTL_OPTIONS0_BBPLL_I2C_FORCE_PD_Pos = 0x8
	// Bit mask of BBPLL_I2C_FORCE_PD field.
	RTCCNTL_OPTIONS0_BBPLL_I2C_FORCE_PD_Msk = 0x100
	// Bit BBPLL_I2C_FORCE_PD.
	RTCCNTL_OPTIONS0_BBPLL_I2C_FORCE_PD = 0x100
	// Position of BB_I2C_FORCE_PU field.
	RTCCNTL_OPTIONS0_BB_I2C_FORCE_PU_Pos = 0x7
	// Bit mask of BB_I2C_FORCE_PU field.
	RTCCNTL_OPTIONS0_BB_I2C_FORCE_PU_Msk = 0x80
	// Bit BB_I2C_FORCE_PU.
	RTCCNTL_OPTIONS0_BB_I2C_FORCE_PU = 0x80
	// Position of BB_I2C_FORCE_PD field.
	RTCCNTL_OPTIONS0_BB_I2C_FORCE_PD_Pos = 0x6
	// Bit mask of BB_I2C_FORCE_PD field.
	RTCCNTL_OPTIONS0_BB_I2C_FORCE_PD_Msk = 0x40
	// Bit BB_I2C_FORCE_PD.
	RTCCNTL_OPTIONS0_BB_I2C_FORCE_PD = 0x40
	// Position of SW_PROCPU_RST field.
	RTCCNTL_OPTIONS0_SW_PROCPU_RST_Pos = 0x5
	// Bit mask of SW_PROCPU_RST field.
	RTCCNTL_OPTIONS0_SW_PROCPU_RST_Msk = 0x20
	// Bit SW_PROCPU_RST.
	RTCCNTL_OPTIONS0_SW_PROCPU_RST = 0x20
	// Position of SW_APPCPU_RST field.
	RTCCNTL_OPTIONS0_SW_APPCPU_RST_Pos = 0x4
	// Bit mask of SW_APPCPU_RST field.
	RTCCNTL_OPTIONS0_SW_APPCPU_RST_Msk = 0x10
	// Bit SW_APPCPU_RST.
	RTCCNTL_OPTIONS0_SW_APPCPU_RST = 0x10
	// Position of SW_STALL_PROCPU_C0 field.
	RTCCNTL_OPTIONS0_SW_STALL_PROCPU_C0_Pos = 0x2
	// Bit mask of SW_STALL_PROCPU_C0 field.
	RTCCNTL_OPTIONS0_SW_STALL_PROCPU_C0_Msk = 0xc
	// Position of SW_STALL_APPCPU_C0 field.
	RTCCNTL_OPTIONS0_SW_STALL_APPCPU_C0_Pos = 0x0
	// Bit mask of SW_STALL_APPCPU_C0 field.
	RTCCNTL_OPTIONS0_SW_STALL_APPCPU_C0_Msk = 0x3

	// SLP_TIMER0: RTC_CNTL_SLP_TIMER0
	// Position of SLP_VAL_LO field.
	RTCCNTL_SLP_TIMER0_SLP_VAL_LO_Pos = 0x0
	// Bit mask of SLP_VAL_LO field.
	RTCCNTL_SLP_TIMER0_SLP_VAL_LO_Msk = 0xffffffff

	// SLP_TIMER1: RTC_CNTL_SLP_TIMER1
	// Position of MAIN_TIMER_ALARM_EN field.
	RTCCNTL_SLP_TIMER1_MAIN_TIMER_ALARM_EN_Pos = 0x10
	// Bit mask of MAIN_TIMER_ALARM_EN field.
	RTCCNTL_SLP_TIMER1_MAIN_TIMER_ALARM_EN_Msk = 0x10000
	// Bit MAIN_TIMER_ALARM_EN.
	RTCCNTL_SLP_TIMER1_MAIN_TIMER_ALARM_EN = 0x10000
	// Position of SLP_VAL_HI field.
	RTCCNTL_SLP_TIMER1_SLP_VAL_HI_Pos = 0x0
	// Bit mask of SLP_VAL_HI field.
	RTCCNTL_SLP_TIMER1_SLP_VAL_HI_Msk = 0xffff

	// TIME_UPDATE: RTC_CNTL_TIME_UPDATE
	// Position of TIME_UPDATE field.
	RTCCNTL_TIME_UPDATE_TIME_UPDATE_Pos = 0x1f
	// Bit mask of TIME_UPDATE field.
	RTCCNTL_TIME_UPDATE_TIME_UPDATE_Msk = 0x80000000
	// Bit TIME_UPDATE.
	RTCCNTL_TIME_UPDATE_TIME_UPDATE = 0x80000000
	// Position of TIME_VALID field.
	RTCCNTL_TIME_UPDATE_TIME_VALID_Pos = 0x1e
	// Bit mask of TIME_VALID field.
	RTCCNTL_TIME_UPDATE_TIME_VALID_Msk = 0x40000000
	// Bit TIME_VALID.
	RTCCNTL_TIME_UPDATE_TIME_VALID = 0x40000000

	// TIME0: RTC_CNTL_TIME0
	// Position of TIME_LO field.
	RTCCNTL_TIME0_TIME_LO_Pos = 0x0
	// Bit mask of TIME_LO field.
	RTCCNTL_TIME0_TIME_LO_Msk = 0xffffffff

	// TIME1: RTC_CNTL_TIME1
	// Position of TIME_HI field.
	RTCCNTL_TIME1_TIME_HI_Pos = 0x0
	// Bit mask of TIME_HI field.
	RTCCNTL_TIME1_TIME_HI_Msk = 0xffff

	// STATE0: RTC_CNTL_STATE0
	// Position of SLEEP_EN field.
	RTCCNTL_STATE0_SLEEP_EN_Pos = 0x1f
	// Bit mask of SLEEP_EN field.
	RTCCNTL_STATE0_SLEEP_EN_Msk = 0x80000000
	// Bit SLEEP_EN.
	RTCCNTL_STATE0_SLEEP_EN = 0x80000000
	// Position of SLP_REJECT field.
	RTCCNTL_STATE0_SLP_REJECT_Pos = 0x1e
	// Bit mask of SLP_REJECT field.
	RTCCNTL_STATE0_SLP_REJECT_Msk = 0x40000000
	// Bit SLP_REJECT.
	RTCCNTL_STATE0_SLP_REJECT = 0x40000000
	// Position of SLP_WAKEUP field.
	RTCCNTL_STATE0_SLP_WAKEUP_Pos = 0x1d
	// Bit mask of SLP_WAKEUP field.
	RTCCNTL_STATE0_SLP_WAKEUP_Msk = 0x20000000
	// Bit SLP_WAKEUP.
	RTCCNTL_STATE0_SLP_WAKEUP = 0x20000000
	// Position of SDIO_ACTIVE_IND field.
	RTCCNTL_STATE0_SDIO_ACTIVE_IND_Pos = 0x1c
	// Bit mask of SDIO_ACTIVE_IND field.
	RTCCNTL_STATE0_SDIO_ACTIVE_IND_Msk = 0x10000000
	// Bit SDIO_ACTIVE_IND.
	RTCCNTL_STATE0_SDIO_ACTIVE_IND = 0x10000000
	// Position of ULP_CP_SLP_TIMER_EN field.
	RTCCNTL_STATE0_ULP_CP_SLP_TIMER_EN_Pos = 0x18
	// Bit mask of ULP_CP_SLP_TIMER_EN field.
	RTCCNTL_STATE0_ULP_CP_SLP_TIMER_EN_Msk = 0x1000000
	// Bit ULP_CP_SLP_TIMER_EN.
	RTCCNTL_STATE0_ULP_CP_SLP_TIMER_EN = 0x1000000
	// Position of TOUCH_SLP_TIMER_EN field.
	RTCCNTL_STATE0_TOUCH_SLP_TIMER_EN_Pos = 0x17
	// Bit mask of TOUCH_SLP_TIMER_EN field.
	RTCCNTL_STATE0_TOUCH_SLP_TIMER_EN_Msk = 0x800000
	// Bit TOUCH_SLP_TIMER_EN.
	RTCCNTL_STATE0_TOUCH_SLP_TIMER_EN = 0x800000
	// Position of APB2RTC_BRIDGE_SEL field.
	RTCCNTL_STATE0_APB2RTC_BRIDGE_SEL_Pos = 0x16
	// Bit mask of APB2RTC_BRIDGE_SEL field.
	RTCCNTL_STATE0_APB2RTC_BRIDGE_SEL_Msk = 0x400000
	// Bit APB2RTC_BRIDGE_SEL.
	RTCCNTL_STATE0_APB2RTC_BRIDGE_SEL = 0x400000
	// Position of ULP_CP_WAKEUP_FORCE_EN field.
	RTCCNTL_STATE0_ULP_CP_WAKEUP_FORCE_EN_Pos = 0x15
	// Bit mask of ULP_CP_WAKEUP_FORCE_EN field.
	RTCCNTL_STATE0_ULP_CP_WAKEUP_FORCE_EN_Msk = 0x200000
	// Bit ULP_CP_WAKEUP_FORCE_EN.
	RTCCNTL_STATE0_ULP_CP_WAKEUP_FORCE_EN = 0x200000
	// Position of TOUCH_WAKEUP_FORCE_EN field.
	RTCCNTL_STATE0_TOUCH_WAKEUP_FORCE_EN_Pos = 0x14
	// Bit mask of TOUCH_WAKEUP_FORCE_EN field.
	RTCCNTL_STATE0_TOUCH_WAKEUP_FORCE_EN_Msk = 0x100000
	// Bit TOUCH_WAKEUP_FORCE_EN.
	RTCCNTL_STATE0_TOUCH_WAKEUP_FORCE_EN = 0x100000

	// TIMER1: RTC_CNTL_TIMER1
	// Position of PLL_BUF_WAIT field.
	RTCCNTL_TIMER1_PLL_BUF_WAIT_Pos = 0x18
	// Bit mask of PLL_BUF_WAIT field.
	RTCCNTL_TIMER1_PLL_BUF_WAIT_Msk = 0xff000000
	// Position of XTL_BUF_WAIT field.
	RTCCNTL_TIMER1_XTL_BUF_WAIT_Pos = 0xe
	// Bit mask of XTL_BUF_WAIT field.
	RTCCNTL_TIMER1_XTL_BUF_WAIT_Msk = 0xffc000
	// Position of CK8M_WAIT field.
	RTCCNTL_TIMER1_CK8M_WAIT_Pos = 0x6
	// Bit mask of CK8M_WAIT field.
	RTCCNTL_TIMER1_CK8M_WAIT_Msk = 0x3fc0
	// Position of CPU_STALL_WAIT field.
	RTCCNTL_TIMER1_CPU_STALL_WAIT_Pos = 0x1
	// Bit mask of CPU_STALL_WAIT field.
	RTCCNTL_TIMER1_CPU_STALL_WAIT_Msk = 0x3e
	// Position of CPU_STALL_EN field.
	RTCCNTL_TIMER1_CPU_STALL_EN_Pos = 0x0
	// Bit mask of CPU_STALL_EN field.
	RTCCNTL_TIMER1_CPU_STALL_EN_Msk = 0x1
	// Bit CPU_STALL_EN.
	RTCCNTL_TIMER1_CPU_STALL_EN = 0x1

	// TIMER2: RTC_CNTL_TIMER2
	// Position of MIN_TIME_CK8M_OFF field.
	RTCCNTL_TIMER2_MIN_TIME_CK8M_OFF_Pos = 0x18
	// Bit mask of MIN_TIME_CK8M_OFF field.
	RTCCNTL_TIMER2_MIN_TIME_CK8M_OFF_Msk = 0xff000000
	// Position of ULPCP_TOUCH_START_WAIT field.
	RTCCNTL_TIMER2_ULPCP_TOUCH_START_WAIT_Pos = 0xf
	// Bit mask of ULPCP_TOUCH_START_WAIT field.
	RTCCNTL_TIMER2_ULPCP_TOUCH_START_WAIT_Msk = 0xff8000

	// TIMER3: RTC_CNTL_TIMER3
	// Position of ROM_RAM_POWERUP_TIMER field.
	RTCCNTL_TIMER3_ROM_RAM_POWERUP_TIMER_Pos = 0x19
	// Bit mask of ROM_RAM_POWERUP_TIMER field.
	RTCCNTL_TIMER3_ROM_RAM_POWERUP_TIMER_Msk = 0xfe000000
	// Position of ROM_RAM_WAIT_TIMER field.
	RTCCNTL_TIMER3_ROM_RAM_WAIT_TIMER_Pos = 0x10
	// Bit mask of ROM_RAM_WAIT_TIMER field.
	RTCCNTL_TIMER3_ROM_RAM_WAIT_TIMER_Msk = 0x1ff0000
	// Position of WIFI_POWERUP_TIMER field.
	RTCCNTL_TIMER3_WIFI_POWERUP_TIMER_Pos = 0x9
	// Bit mask of WIFI_POWERUP_TIMER field.
	RTCCNTL_TIMER3_WIFI_POWERUP_TIMER_Msk = 0xfe00
	// Position of WIFI_WAIT_TIMER field.
	RTCCNTL_TIMER3_WIFI_WAIT_TIMER_Pos = 0x0
	// Bit mask of WIFI_WAIT_TIMER field.
	RTCCNTL_TIMER3_WIFI_WAIT_TIMER_Msk = 0x1ff

	// TIMER4: RTC_CNTL_TIMER4
	// Position of DG_WRAP_POWERUP_TIMER field.
	RTCCNTL_TIMER4_DG_WRAP_POWERUP_TIMER_Pos = 0x19
	// Bit mask of DG_WRAP_POWERUP_TIMER field.
	RTCCNTL_TIMER4_DG_WRAP_POWERUP_TIMER_Msk = 0xfe000000
	// Position of DG_WRAP_WAIT_TIMER field.
	RTCCNTL_TIMER4_DG_WRAP_WAIT_TIMER_Pos = 0x10
	// Bit mask of DG_WRAP_WAIT_TIMER field.
	RTCCNTL_TIMER4_DG_WRAP_WAIT_TIMER_Msk = 0x1ff0000
	// Position of POWERUP_TIMER field.
	RTCCNTL_TIMER4_POWERUP_TIMER_Pos = 0x9
	// Bit mask of POWERUP_TIMER field.
	RTCCNTL_TIMER4_POWERUP_TIMER_Msk = 0xfe00
	// Position of WAIT_TIMER field.
	RTCCNTL_TIMER4_WAIT_TIMER_Pos = 0x0
	// Bit mask of WAIT_TIMER field.
	RTCCNTL_TIMER4_WAIT_TIMER_Msk = 0x1ff

	// TIMER5: RTC_CNTL_TIMER5
	// Position of RTCMEM_POWERUP_TIMER field.
	RTCCNTL_TIMER5_RTCMEM_POWERUP_TIMER_Pos = 0x19
	// Bit mask of RTCMEM_POWERUP_TIMER field.
	RTCCNTL_TIMER5_RTCMEM_POWERUP_TIMER_Msk = 0xfe000000
	// Position of RTCMEM_WAIT_TIMER field.
	RTCCNTL_TIMER5_RTCMEM_WAIT_TIMER_Pos = 0x10
	// Bit mask of RTCMEM_WAIT_TIMER field.
	RTCCNTL_TIMER5_RTCMEM_WAIT_TIMER_Msk = 0x1ff0000
	// Position of MIN_SLP_VAL field.
	RTCCNTL_TIMER5_MIN_SLP_VAL_Pos = 0x8
	// Bit mask of MIN_SLP_VAL field.
	RTCCNTL_TIMER5_MIN_SLP_VAL_Msk = 0xff00
	// Position of ULP_CP_SUBTIMER_PREDIV field.
	RTCCNTL_TIMER5_ULP_CP_SUBTIMER_PREDIV_Pos = 0x0
	// Bit mask of ULP_CP_SUBTIMER_PREDIV field.
	RTCCNTL_TIMER5_ULP_CP_SUBTIMER_PREDIV_Msk = 0xff

	// ANA_CONF: RTC_CNTL_ANA_CONF
	// Position of PLL_I2C_PU field.
	RTCCNTL_ANA_CONF_PLL_I2C_PU_Pos = 0x1f
	// Bit mask of PLL_I2C_PU field.
	RTCCNTL_ANA_CONF_PLL_I2C_PU_Msk = 0x80000000
	// Bit PLL_I2C_PU.
	RTCCNTL_ANA_CONF_PLL_I2C_PU = 0x80000000
	// Position of CKGEN_I2C_PU field.
	RTCCNTL_ANA_CONF_CKGEN_I2C_PU_Pos = 0x1e
	// Bit mask of CKGEN_I2C_PU field.
	RTCCNTL_ANA_CONF_CKGEN_I2C_PU_Msk = 0x40000000
	// Bit CKGEN_I2C_PU.
	RTCCNTL_ANA_CONF_CKGEN_I2C_PU = 0x40000000
	// Position of RFRX_PBUS_PU field.
	RTCCNTL_ANA_CONF_RFRX_PBUS_PU_Pos = 0x1c
	// Bit mask of RFRX_PBUS_PU field.
	RTCCNTL_ANA_CONF_RFRX_PBUS_PU_Msk = 0x10000000
	// Bit RFRX_PBUS_PU.
	RTCCNTL_ANA_CONF_RFRX_PBUS_PU = 0x10000000
	// Position of TXRF_I2C_PU field.
	RTCCNTL_ANA_CONF_TXRF_I2C_PU_Pos = 0x1b
	// Bit mask of TXRF_I2C_PU field.
	RTCCNTL_ANA_CONF_TXRF_I2C_PU_Msk = 0x8000000
	// Bit TXRF_I2C_PU.
	RTCCNTL_ANA_CONF_TXRF_I2C_PU = 0x8000000
	// Position of PVTMON_PU field.
	RTCCNTL_ANA_CONF_PVTMON_PU_Pos = 0x1a
	// Bit mask of PVTMON_PU field.
	RTCCNTL_ANA_CONF_PVTMON_PU_Msk = 0x4000000
	// Bit PVTMON_PU.
	RTCCNTL_ANA_CONF_PVTMON_PU = 0x4000000
	// Position of BBPLL_CAL_SLP_START field.
	RTCCNTL_ANA_CONF_BBPLL_CAL_SLP_START_Pos = 0x19
	// Bit mask of BBPLL_CAL_SLP_START field.
	RTCCNTL_ANA_CONF_BBPLL_CAL_SLP_START_Msk = 0x2000000
	// Bit BBPLL_CAL_SLP_START.
	RTCCNTL_ANA_CONF_BBPLL_CAL_SLP_START = 0x2000000
	// Position of PLLA_FORCE_PU field.
	RTCCNTL_ANA_CONF_PLLA_FORCE_PU_Pos = 0x18
	// Bit mask of PLLA_FORCE_PU field.
	RTCCNTL_ANA_CONF_PLLA_FORCE_PU_Msk = 0x1000000
	// Bit PLLA_FORCE_PU.
	RTCCNTL_ANA_CONF_PLLA_FORCE_PU = 0x1000000
	// Position of PLLA_FORCE_PD field.
	RTCCNTL_ANA_CONF_PLLA_FORCE_PD_Pos = 0x17
	// Bit mask of PLLA_FORCE_PD field.
	RTCCNTL_ANA_CONF_PLLA_FORCE_PD_Msk = 0x800000
	// Bit PLLA_FORCE_PD.
	RTCCNTL_ANA_CONF_PLLA_FORCE_PD = 0x800000

	// RESET_STATE: RTC_CNTL_RESET_STATE
	// Position of PROCPU_STAT_VECTOR_SEL field.
	RTCCNTL_RESET_STATE_PROCPU_STAT_VECTOR_SEL_Pos = 0xd
	// Bit mask of PROCPU_STAT_VECTOR_SEL field.
	RTCCNTL_RESET_STATE_PROCPU_STAT_VECTOR_SEL_Msk = 0x2000
	// Bit PROCPU_STAT_VECTOR_SEL.
	RTCCNTL_RESET_STATE_PROCPU_STAT_VECTOR_SEL = 0x2000
	// Position of APPCPU_STAT_VECTOR_SEL field.
	RTCCNTL_RESET_STATE_APPCPU_STAT_VECTOR_SEL_Pos = 0xc
	// Bit mask of APPCPU_STAT_VECTOR_SEL field.
	RTCCNTL_RESET_STATE_APPCPU_STAT_VECTOR_SEL_Msk = 0x1000
	// Bit APPCPU_STAT_VECTOR_SEL.
	RTCCNTL_RESET_STATE_APPCPU_STAT_VECTOR_SEL = 0x1000
	// Position of RESET_CAUSE_APPCPU field.
	RTCCNTL_RESET_STATE_RESET_CAUSE_APPCPU_Pos = 0x6
	// Bit mask of RESET_CAUSE_APPCPU field.
	RTCCNTL_RESET_STATE_RESET_CAUSE_APPCPU_Msk = 0xfc0
	// Position of RESET_CAUSE_PROCPU field.
	RTCCNTL_RESET_STATE_RESET_CAUSE_PROCPU_Pos = 0x0
	// Bit mask of RESET_CAUSE_PROCPU field.
	RTCCNTL_RESET_STATE_RESET_CAUSE_PROCPU_Msk = 0x3f

	// WAKEUP_STATE: RTC_CNTL_WAKEUP_STATE
	// Position of GPIO_WAKEUP_FILTER field.
	RTCCNTL_WAKEUP_STATE_GPIO_WAKEUP_FILTER_Pos = 0x16
	// Bit mask of GPIO_WAKEUP_FILTER field.
	RTCCNTL_WAKEUP_STATE_GPIO_WAKEUP_FILTER_Msk = 0x400000
	// Bit GPIO_WAKEUP_FILTER.
	RTCCNTL_WAKEUP_STATE_GPIO_WAKEUP_FILTER = 0x400000
	// Position of WAKEUP_ENA field.
	RTCCNTL_WAKEUP_STATE_WAKEUP_ENA_Pos = 0xb
	// Bit mask of WAKEUP_ENA field.
	RTCCNTL_WAKEUP_STATE_WAKEUP_ENA_Msk = 0x3ff800
	// Position of WAKEUP_CAUSE field.
	RTCCNTL_WAKEUP_STATE_WAKEUP_CAUSE_Pos = 0x0
	// Bit mask of WAKEUP_CAUSE field.
	RTCCNTL_WAKEUP_STATE_WAKEUP_CAUSE_Msk = 0x7ff

	// INT_ENA: RTC_CNTL_INT_ENA
	// Position of MAIN_TIMER_INT_ENA field.
	RTCCNTL_INT_ENA_MAIN_TIMER_INT_ENA_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_ENA field.
	RTCCNTL_INT_ENA_MAIN_TIMER_INT_ENA_Msk = 0x100
	// Bit MAIN_TIMER_INT_ENA.
	RTCCNTL_INT_ENA_MAIN_TIMER_INT_ENA = 0x100
	// Position of BROWN_OUT_INT_ENA field.
	RTCCNTL_INT_ENA_BROWN_OUT_INT_ENA_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_ENA field.
	RTCCNTL_INT_ENA_BROWN_OUT_INT_ENA_Msk = 0x80
	// Bit BROWN_OUT_INT_ENA.
	RTCCNTL_INT_ENA_BROWN_OUT_INT_ENA = 0x80
	// Position of TOUCH_INT_ENA field.
	RTCCNTL_INT_ENA_TOUCH_INT_ENA_Pos = 0x6
	// Bit mask of TOUCH_INT_ENA field.
	RTCCNTL_INT_ENA_TOUCH_INT_ENA_Msk = 0x40
	// Bit TOUCH_INT_ENA.
	RTCCNTL_INT_ENA_TOUCH_INT_ENA = 0x40
	// Position of ULP_CP_INT_ENA field.
	RTCCNTL_INT_ENA_ULP_CP_INT_ENA_Pos = 0x5
	// Bit mask of ULP_CP_INT_ENA field.
	RTCCNTL_INT_ENA_ULP_CP_INT_ENA_Msk = 0x20
	// Bit ULP_CP_INT_ENA.
	RTCCNTL_INT_ENA_ULP_CP_INT_ENA = 0x20
	// Position of TIME_VALID_INT_ENA field.
	RTCCNTL_INT_ENA_TIME_VALID_INT_ENA_Pos = 0x4
	// Bit mask of TIME_VALID_INT_ENA field.
	RTCCNTL_INT_ENA_TIME_VALID_INT_ENA_Msk = 0x10
	// Bit TIME_VALID_INT_ENA.
	RTCCNTL_INT_ENA_TIME_VALID_INT_ENA = 0x10
	// Position of WDT_INT_ENA field.
	RTCCNTL_INT_ENA_WDT_INT_ENA_Pos = 0x3
	// Bit mask of WDT_INT_ENA field.
	RTCCNTL_INT_ENA_WDT_INT_ENA_Msk = 0x8
	// Bit WDT_INT_ENA.
	RTCCNTL_INT_ENA_WDT_INT_ENA = 0x8
	// Position of SDIO_IDLE_INT_ENA field.
	RTCCNTL_INT_ENA_SDIO_IDLE_INT_ENA_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_ENA field.
	RTCCNTL_INT_ENA_SDIO_IDLE_INT_ENA_Msk = 0x4
	// Bit SDIO_IDLE_INT_ENA.
	RTCCNTL_INT_ENA_SDIO_IDLE_INT_ENA = 0x4
	// Position of SLP_REJECT_INT_ENA field.
	RTCCNTL_INT_ENA_SLP_REJECT_INT_ENA_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_ENA field.
	RTCCNTL_INT_ENA_SLP_REJECT_INT_ENA_Msk = 0x2
	// Bit SLP_REJECT_INT_ENA.
	RTCCNTL_INT_ENA_SLP_REJECT_INT_ENA = 0x2
	// Position of SLP_WAKEUP_INT_ENA field.
	RTCCNTL_INT_ENA_SLP_WAKEUP_INT_ENA_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_ENA field.
	RTCCNTL_INT_ENA_SLP_WAKEUP_INT_ENA_Msk = 0x1
	// Bit SLP_WAKEUP_INT_ENA.
	RTCCNTL_INT_ENA_SLP_WAKEUP_INT_ENA = 0x1

	// INT_RAW: RTC_CNTL_INT_RAW
	// Position of MAIN_TIMER_INT_RAW field.
	RTCCNTL_INT_RAW_MAIN_TIMER_INT_RAW_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_RAW field.
	RTCCNTL_INT_RAW_MAIN_TIMER_INT_RAW_Msk = 0x100
	// Bit MAIN_TIMER_INT_RAW.
	RTCCNTL_INT_RAW_MAIN_TIMER_INT_RAW = 0x100
	// Position of BROWN_OUT_INT_RAW field.
	RTCCNTL_INT_RAW_BROWN_OUT_INT_RAW_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_RAW field.
	RTCCNTL_INT_RAW_BROWN_OUT_INT_RAW_Msk = 0x80
	// Bit BROWN_OUT_INT_RAW.
	RTCCNTL_INT_RAW_BROWN_OUT_INT_RAW = 0x80
	// Position of TOUCH_INT_RAW field.
	RTCCNTL_INT_RAW_TOUCH_INT_RAW_Pos = 0x6
	// Bit mask of TOUCH_INT_RAW field.
	RTCCNTL_INT_RAW_TOUCH_INT_RAW_Msk = 0x40
	// Bit TOUCH_INT_RAW.
	RTCCNTL_INT_RAW_TOUCH_INT_RAW = 0x40
	// Position of ULP_CP_INT_RAW field.
	RTCCNTL_INT_RAW_ULP_CP_INT_RAW_Pos = 0x5
	// Bit mask of ULP_CP_INT_RAW field.
	RTCCNTL_INT_RAW_ULP_CP_INT_RAW_Msk = 0x20
	// Bit ULP_CP_INT_RAW.
	RTCCNTL_INT_RAW_ULP_CP_INT_RAW = 0x20
	// Position of TIME_VALID_INT_RAW field.
	RTCCNTL_INT_RAW_TIME_VALID_INT_RAW_Pos = 0x4
	// Bit mask of TIME_VALID_INT_RAW field.
	RTCCNTL_INT_RAW_TIME_VALID_INT_RAW_Msk = 0x10
	// Bit TIME_VALID_INT_RAW.
	RTCCNTL_INT_RAW_TIME_VALID_INT_RAW = 0x10
	// Position of WDT_INT_RAW field.
	RTCCNTL_INT_RAW_WDT_INT_RAW_Pos = 0x3
	// Bit mask of WDT_INT_RAW field.
	RTCCNTL_INT_RAW_WDT_INT_RAW_Msk = 0x8
	// Bit WDT_INT_RAW.
	RTCCNTL_INT_RAW_WDT_INT_RAW = 0x8
	// Position of SDIO_IDLE_INT_RAW field.
	RTCCNTL_INT_RAW_SDIO_IDLE_INT_RAW_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_RAW field.
	RTCCNTL_INT_RAW_SDIO_IDLE_INT_RAW_Msk = 0x4
	// Bit SDIO_IDLE_INT_RAW.
	RTCCNTL_INT_RAW_SDIO_IDLE_INT_RAW = 0x4
	// Position of SLP_REJECT_INT_RAW field.
	RTCCNTL_INT_RAW_SLP_REJECT_INT_RAW_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_RAW field.
	RTCCNTL_INT_RAW_SLP_REJECT_INT_RAW_Msk = 0x2
	// Bit SLP_REJECT_INT_RAW.
	RTCCNTL_INT_RAW_SLP_REJECT_INT_RAW = 0x2
	// Position of SLP_WAKEUP_INT_RAW field.
	RTCCNTL_INT_RAW_SLP_WAKEUP_INT_RAW_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_RAW field.
	RTCCNTL_INT_RAW_SLP_WAKEUP_INT_RAW_Msk = 0x1
	// Bit SLP_WAKEUP_INT_RAW.
	RTCCNTL_INT_RAW_SLP_WAKEUP_INT_RAW = 0x1

	// INT_ST: RTC_CNTL_INT_ST
	// Position of MAIN_TIMER_INT_ST field.
	RTCCNTL_INT_ST_MAIN_TIMER_INT_ST_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_ST field.
	RTCCNTL_INT_ST_MAIN_TIMER_INT_ST_Msk = 0x100
	// Bit MAIN_TIMER_INT_ST.
	RTCCNTL_INT_ST_MAIN_TIMER_INT_ST = 0x100
	// Position of BROWN_OUT_INT_ST field.
	RTCCNTL_INT_ST_BROWN_OUT_INT_ST_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_ST field.
	RTCCNTL_INT_ST_BROWN_OUT_INT_ST_Msk = 0x80
	// Bit BROWN_OUT_INT_ST.
	RTCCNTL_INT_ST_BROWN_OUT_INT_ST = 0x80
	// Position of TOUCH_INT_ST field.
	RTCCNTL_INT_ST_TOUCH_INT_ST_Pos = 0x6
	// Bit mask of TOUCH_INT_ST field.
	RTCCNTL_INT_ST_TOUCH_INT_ST_Msk = 0x40
	// Bit TOUCH_INT_ST.
	RTCCNTL_INT_ST_TOUCH_INT_ST = 0x40
	// Position of SAR_INT_ST field.
	RTCCNTL_INT_ST_SAR_INT_ST_Pos = 0x5
	// Bit mask of SAR_INT_ST field.
	RTCCNTL_INT_ST_SAR_INT_ST_Msk = 0x20
	// Bit SAR_INT_ST.
	RTCCNTL_INT_ST_SAR_INT_ST = 0x20
	// Position of TIME_VALID_INT_ST field.
	RTCCNTL_INT_ST_TIME_VALID_INT_ST_Pos = 0x4
	// Bit mask of TIME_VALID_INT_ST field.
	RTCCNTL_INT_ST_TIME_VALID_INT_ST_Msk = 0x10
	// Bit TIME_VALID_INT_ST.
	RTCCNTL_INT_ST_TIME_VALID_INT_ST = 0x10
	// Position of WDT_INT_ST field.
	RTCCNTL_INT_ST_WDT_INT_ST_Pos = 0x3
	// Bit mask of WDT_INT_ST field.
	RTCCNTL_INT_ST_WDT_INT_ST_Msk = 0x8
	// Bit WDT_INT_ST.
	RTCCNTL_INT_ST_WDT_INT_ST = 0x8
	// Position of SDIO_IDLE_INT_ST field.
	RTCCNTL_INT_ST_SDIO_IDLE_INT_ST_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_ST field.
	RTCCNTL_INT_ST_SDIO_IDLE_INT_ST_Msk = 0x4
	// Bit SDIO_IDLE_INT_ST.
	RTCCNTL_INT_ST_SDIO_IDLE_INT_ST = 0x4
	// Position of SLP_REJECT_INT_ST field.
	RTCCNTL_INT_ST_SLP_REJECT_INT_ST_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_ST field.
	RTCCNTL_INT_ST_SLP_REJECT_INT_ST_Msk = 0x2
	// Bit SLP_REJECT_INT_ST.
	RTCCNTL_INT_ST_SLP_REJECT_INT_ST = 0x2
	// Position of SLP_WAKEUP_INT_ST field.
	RTCCNTL_INT_ST_SLP_WAKEUP_INT_ST_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_ST field.
	RTCCNTL_INT_ST_SLP_WAKEUP_INT_ST_Msk = 0x1
	// Bit SLP_WAKEUP_INT_ST.
	RTCCNTL_INT_ST_SLP_WAKEUP_INT_ST = 0x1

	// INT_CLR: RTC_CNTL_INT_CLR
	// Position of MAIN_TIMER_INT_CLR field.
	RTCCNTL_INT_CLR_MAIN_TIMER_INT_CLR_Pos = 0x8
	// Bit mask of MAIN_TIMER_INT_CLR field.
	RTCCNTL_INT_CLR_MAIN_TIMER_INT_CLR_Msk = 0x100
	// Bit MAIN_TIMER_INT_CLR.
	RTCCNTL_INT_CLR_MAIN_TIMER_INT_CLR = 0x100
	// Position of BROWN_OUT_INT_CLR field.
	RTCCNTL_INT_CLR_BROWN_OUT_INT_CLR_Pos = 0x7
	// Bit mask of BROWN_OUT_INT_CLR field.
	RTCCNTL_INT_CLR_BROWN_OUT_INT_CLR_Msk = 0x80
	// Bit BROWN_OUT_INT_CLR.
	RTCCNTL_INT_CLR_BROWN_OUT_INT_CLR = 0x80
	// Position of TOUCH_INT_CLR field.
	RTCCNTL_INT_CLR_TOUCH_INT_CLR_Pos = 0x6
	// Bit mask of TOUCH_INT_CLR field.
	RTCCNTL_INT_CLR_TOUCH_INT_CLR_Msk = 0x40
	// Bit TOUCH_INT_CLR.
	RTCCNTL_INT_CLR_TOUCH_INT_CLR = 0x40
	// Position of SAR_INT_CLR field.
	RTCCNTL_INT_CLR_SAR_INT_CLR_Pos = 0x5
	// Bit mask of SAR_INT_CLR field.
	RTCCNTL_INT_CLR_SAR_INT_CLR_Msk = 0x20
	// Bit SAR_INT_CLR.
	RTCCNTL_INT_CLR_SAR_INT_CLR = 0x20
	// Position of TIME_VALID_INT_CLR field.
	RTCCNTL_INT_CLR_TIME_VALID_INT_CLR_Pos = 0x4
	// Bit mask of TIME_VALID_INT_CLR field.
	RTCCNTL_INT_CLR_TIME_VALID_INT_CLR_Msk = 0x10
	// Bit TIME_VALID_INT_CLR.
	RTCCNTL_INT_CLR_TIME_VALID_INT_CLR = 0x10
	// Position of WDT_INT_CLR field.
	RTCCNTL_INT_CLR_WDT_INT_CLR_Pos = 0x3
	// Bit mask of WDT_INT_CLR field.
	RTCCNTL_INT_CLR_WDT_INT_CLR_Msk = 0x8
	// Bit WDT_INT_CLR.
	RTCCNTL_INT_CLR_WDT_INT_CLR = 0x8
	// Position of SDIO_IDLE_INT_CLR field.
	RTCCNTL_INT_CLR_SDIO_IDLE_INT_CLR_Pos = 0x2
	// Bit mask of SDIO_IDLE_INT_CLR field.
	RTCCNTL_INT_CLR_SDIO_IDLE_INT_CLR_Msk = 0x4
	// Bit SDIO_IDLE_INT_CLR.
	RTCCNTL_INT_CLR_SDIO_IDLE_INT_CLR = 0x4
	// Position of SLP_REJECT_INT_CLR field.
	RTCCNTL_INT_CLR_SLP_REJECT_INT_CLR_Pos = 0x1
	// Bit mask of SLP_REJECT_INT_CLR field.
	RTCCNTL_INT_CLR_SLP_REJECT_INT_CLR_Msk = 0x2
	// Bit SLP_REJECT_INT_CLR.
	RTCCNTL_INT_CLR_SLP_REJECT_INT_CLR = 0x2
	// Position of SLP_WAKEUP_INT_CLR field.
	RTCCNTL_INT_CLR_SLP_WAKEUP_INT_CLR_Pos = 0x0
	// Bit mask of SLP_WAKEUP_INT_CLR field.
	RTCCNTL_INT_CLR_SLP_WAKEUP_INT_CLR_Msk = 0x1
	// Bit SLP_WAKEUP_INT_CLR.
	RTCCNTL_INT_CLR_SLP_WAKEUP_INT_CLR = 0x1

	// STORE0: RTC_CNTL_STORE0
	// Position of SCRATCH0 field.
	RTCCNTL_STORE0_SCRATCH0_Pos = 0x0
	// Bit mask of SCRATCH0 field.
	RTCCNTL_STORE0_SCRATCH0_Msk = 0xffffffff

	// STORE1: RTC_CNTL_STORE1
	// Position of SCRATCH1 field.
	RTCCNTL_STORE1_SCRATCH1_Pos = 0x0
	// Bit mask of SCRATCH1 field.
	RTCCNTL_STORE1_SCRATCH1_Msk = 0xffffffff

	// STORE2: RTC_CNTL_STORE2
	// Position of SCRATCH2 field.
	RTCCNTL_STORE2_SCRATCH2_Pos = 0x0
	// Bit mask of SCRATCH2 field.
	RTCCNTL_STORE2_SCRATCH2_Msk = 0xffffffff

	// STORE3: RTC_CNTL_STORE3
	// Position of SCRATCH3 field.
	RTCCNTL_STORE3_SCRATCH3_Pos = 0x0
	// Bit mask of SCRATCH3 field.
	RTCCNTL_STORE3_SCRATCH3_Msk = 0xffffffff

	// EXT_XTL_CONF: RTC_CNTL_EXT_XTL_CONF
	// Position of XTL_EXT_CTR_EN field.
	RTCCNTL_EXT_XTL_CONF_XTL_EXT_CTR_EN_Pos = 0x1f
	// Bit mask of XTL_EXT_CTR_EN field.
	RTCCNTL_EXT_XTL_CONF_XTL_EXT_CTR_EN_Msk = 0x80000000
	// Bit XTL_EXT_CTR_EN.
	RTCCNTL_EXT_XTL_CONF_XTL_EXT_CTR_EN = 0x80000000
	// Position of XTL_EXT_CTR_LV field.
	RTCCNTL_EXT_XTL_CONF_XTL_EXT_CTR_LV_Pos = 0x1e
	// Bit mask of XTL_EXT_CTR_LV field.
	RTCCNTL_EXT_XTL_CONF_XTL_EXT_CTR_LV_Msk = 0x40000000
	// Bit XTL_EXT_CTR_LV.
	RTCCNTL_EXT_XTL_CONF_XTL_EXT_CTR_LV = 0x40000000

	// EXT_WAKEUP_CONF: RTC_CNTL_EXT_WAKEUP_CONF
	// Position of EXT_WAKEUP1_LV field.
	RTCCNTL_EXT_WAKEUP_CONF_EXT_WAKEUP1_LV_Pos = 0x1f
	// Bit mask of EXT_WAKEUP1_LV field.
	RTCCNTL_EXT_WAKEUP_CONF_EXT_WAKEUP1_LV_Msk = 0x80000000
	// Bit EXT_WAKEUP1_LV.
	RTCCNTL_EXT_WAKEUP_CONF_EXT_WAKEUP1_LV = 0x80000000
	// Position of EXT_WAKEUP0_LV field.
	RTCCNTL_EXT_WAKEUP_CONF_EXT_WAKEUP0_LV_Pos = 0x1e
	// Bit mask of EXT_WAKEUP0_LV field.
	RTCCNTL_EXT_WAKEUP_CONF_EXT_WAKEUP0_LV_Msk = 0x40000000
	// Bit EXT_WAKEUP0_LV.
	RTCCNTL_EXT_WAKEUP_CONF_EXT_WAKEUP0_LV = 0x40000000

	// SLP_REJECT_CONF: RTC_CNTL_SLP_REJECT_CONF
	// Position of REJECT_CAUSE field.
	RTCCNTL_SLP_REJECT_CONF_REJECT_CAUSE_Pos = 0x1c
	// Bit mask of REJECT_CAUSE field.
	RTCCNTL_SLP_REJECT_CONF_REJECT_CAUSE_Msk = 0xf0000000
	// Position of DEEP_SLP_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_DEEP_SLP_REJECT_EN_Pos = 0x1b
	// Bit mask of DEEP_SLP_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_DEEP_SLP_REJECT_EN_Msk = 0x8000000
	// Bit DEEP_SLP_REJECT_EN.
	RTCCNTL_SLP_REJECT_CONF_DEEP_SLP_REJECT_EN = 0x8000000
	// Position of LIGHT_SLP_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_LIGHT_SLP_REJECT_EN_Pos = 0x1a
	// Bit mask of LIGHT_SLP_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_LIGHT_SLP_REJECT_EN_Msk = 0x4000000
	// Bit LIGHT_SLP_REJECT_EN.
	RTCCNTL_SLP_REJECT_CONF_LIGHT_SLP_REJECT_EN = 0x4000000
	// Position of SDIO_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_SDIO_REJECT_EN_Pos = 0x19
	// Bit mask of SDIO_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_SDIO_REJECT_EN_Msk = 0x2000000
	// Bit SDIO_REJECT_EN.
	RTCCNTL_SLP_REJECT_CONF_SDIO_REJECT_EN = 0x2000000
	// Position of GPIO_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_GPIO_REJECT_EN_Pos = 0x18
	// Bit mask of GPIO_REJECT_EN field.
	RTCCNTL_SLP_REJECT_CONF_GPIO_REJECT_EN_Msk = 0x1000000
	// Bit GPIO_REJECT_EN.
	RTCCNTL_SLP_REJECT_CONF_GPIO_REJECT_EN = 0x1000000

	// CPU_PERIOD_CONF: RTC_CNTL_CPU_PERIOD_CONF
	// Position of CPUPERIOD_SEL field.
	RTCCNTL_CPU_PERIOD_CONF_CPUPERIOD_SEL_Pos = 0x1e
	// Bit mask of CPUPERIOD_SEL field.
	RTCCNTL_CPU_PERIOD_CONF_CPUPERIOD_SEL_Msk = 0xc0000000
	// Position of CPUSEL_CONF field.
	RTCCNTL_CPU_PERIOD_CONF_CPUSEL_CONF_Pos = 0x1d
	// Bit mask of CPUSEL_CONF field.
	RTCCNTL_CPU_PERIOD_CONF_CPUSEL_CONF_Msk = 0x20000000
	// Bit CPUSEL_CONF.
	RTCCNTL_CPU_PERIOD_CONF_CPUSEL_CONF = 0x20000000

	// SDIO_ACT_CONF: RTC_CNTL_SDIO_ACT_CONF
	// Position of SDIO_ACT_DNUM field.
	RTCCNTL_SDIO_ACT_CONF_SDIO_ACT_DNUM_Pos = 0x16
	// Bit mask of SDIO_ACT_DNUM field.
	RTCCNTL_SDIO_ACT_CONF_SDIO_ACT_DNUM_Msk = 0xffc00000

	// CLK_CONF: RTC_CNTL_CLK_CONF
	// Position of ANA_CLK_RTC_SEL field.
	RTCCNTL_CLK_CONF_ANA_CLK_RTC_SEL_Pos = 0x1e
	// Bit mask of ANA_CLK_RTC_SEL field.
	RTCCNTL_CLK_CONF_ANA_CLK_RTC_SEL_Msk = 0xc0000000
	// Select slow clock
	RTCCNTL_CLK_CONF_ANA_CLK_RTC_SEL_SLOW_CK = 0x0
	// Select XTAL_32K
	RTCCNTL_CLK_CONF_ANA_CLK_RTC_SEL_CK_XTAL_32K = 0x1
	// Internal 8 MHz RC oscillator, divided by 256
	RTCCNTL_CLK_CONF_ANA_CLK_RTC_SEL_CK8M_D256_OUT = 0x2
	// Position of FAST_CLK_RTC_SEL field.
	RTCCNTL_CLK_CONF_FAST_CLK_RTC_SEL_Pos = 0x1d
	// Bit mask of FAST_CLK_RTC_SEL field.
	RTCCNTL_CLK_CONF_FAST_CLK_RTC_SEL_Msk = 0x20000000
	// Bit FAST_CLK_RTC_SEL.
	RTCCNTL_CLK_CONF_FAST_CLK_RTC_SEL = 0x20000000
	// Select XTAL
	RTCCNTL_CLK_CONF_FAST_CLK_RTC_SEL_XTAL = 0x0
	// Select CK8M
	RTCCNTL_CLK_CONF_FAST_CLK_RTC_SEL_CK8M = 0x1
	// Position of SOC_CLK_SEL field.
	RTCCNTL_CLK_CONF_SOC_CLK_SEL_Pos = 0x1b
	// Bit mask of SOC_CLK_SEL field.
	RTCCNTL_CLK_CONF_SOC_CLK_SEL_Msk = 0x18000000
	// Select XTAL clock
	RTCCNTL_CLK_CONF_SOC_CLK_SEL_XTAL = 0x0
	// Select PLL clock
	RTCCNTL_CLK_CONF_SOC_CLK_SEL_PLL = 0x1
	// Select CK8M clock
	RTCCNTL_CLK_CONF_SOC_CLK_SEL_CK8M = 0x2
	// Select APLL clock
	RTCCNTL_CLK_CONF_SOC_CLK_SEL_APLL = 0x3
	// Position of CK8M_FORCE_PU field.
	RTCCNTL_CLK_CONF_CK8M_FORCE_PU_Pos = 0x1a
	// Bit mask of CK8M_FORCE_PU field.
	RTCCNTL_CLK_CONF_CK8M_FORCE_PU_Msk = 0x4000000
	// Bit CK8M_FORCE_PU.
	RTCCNTL_CLK_CONF_CK8M_FORCE_PU = 0x4000000
	// Don't force power up
	RTCCNTL_CLK_CONF_CK8M_FORCE_PU_Clear = 0x0
	// Force power up
	RTCCNTL_CLK_CONF_CK8M_FORCE_PU_Force = 0x1
	// Position of CK8M_FORCE_PD field.
	RTCCNTL_CLK_CONF_CK8M_FORCE_PD_Pos = 0x19
	// Bit mask of CK8M_FORCE_PD field.
	RTCCNTL_CLK_CONF_CK8M_FORCE_PD_Msk = 0x2000000
	// Bit CK8M_FORCE_PD.
	RTCCNTL_CLK_CONF_CK8M_FORCE_PD = 0x2000000
	// Don't force power down
	RTCCNTL_CLK_CONF_CK8M_FORCE_PD_Clear = 0x0
	// Force power down
	RTCCNTL_CLK_CONF_CK8M_FORCE_PD_Force = 0x1
	// Position of CK8M_DFREQ field.
	RTCCNTL_CLK_CONF_CK8M_DFREQ_Pos = 0x11
	// Bit mask of CK8M_DFREQ field.
	RTCCNTL_CLK_CONF_CK8M_DFREQ_Msk = 0x1fe0000
	// Position of CK8M_FORCE_NOGATING field.
	RTCCNTL_CLK_CONF_CK8M_FORCE_NOGATING_Pos = 0x10
	// Bit mask of CK8M_FORCE_NOGATING field.
	RTCCNTL_CLK_CONF_CK8M_FORCE_NOGATING_Msk = 0x10000
	// Bit CK8M_FORCE_NOGATING.
	RTCCNTL_CLK_CONF_CK8M_FORCE_NOGATING = 0x10000
	// Position of XTAL_FORCE_NOGATING field.
	RTCCNTL_CLK_CONF_XTAL_FORCE_NOGATING_Pos = 0xf
	// Bit mask of XTAL_FORCE_NOGATING field.
	RTCCNTL_CLK_CONF_XTAL_FORCE_NOGATING_Msk = 0x8000
	// Bit XTAL_FORCE_NOGATING.
	RTCCNTL_CLK_CONF_XTAL_FORCE_NOGATING = 0x8000
	// Position of CK8M_DIV_SEL field.
	RTCCNTL_CLK_CONF_CK8M_DIV_SEL_Pos = 0xc
	// Bit mask of CK8M_DIV_SEL field.
	RTCCNTL_CLK_CONF_CK8M_DIV_SEL_Msk = 0x7000
	// Position of CK8M_DFREQ_FORCE field.
	RTCCNTL_CLK_CONF_CK8M_DFREQ_FORCE_Pos = 0xb
	// Bit mask of CK8M_DFREQ_FORCE field.
	RTCCNTL_CLK_CONF_CK8M_DFREQ_FORCE_Msk = 0x800
	// Bit CK8M_DFREQ_FORCE.
	RTCCNTL_CLK_CONF_CK8M_DFREQ_FORCE = 0x800
	// Position of DIG_CLK8M_EN field.
	RTCCNTL_CLK_CONF_DIG_CLK8M_EN_Pos = 0xa
	// Bit mask of DIG_CLK8M_EN field.
	RTCCNTL_CLK_CONF_DIG_CLK8M_EN_Msk = 0x400
	// Bit DIG_CLK8M_EN.
	RTCCNTL_CLK_CONF_DIG_CLK8M_EN = 0x400
	// Disable CK8M
	RTCCNTL_CLK_CONF_DIG_CLK8M_EN_Disable = 0x0
	// Enable CK8M for digital core (no relation to RTC core)
	RTCCNTL_CLK_CONF_DIG_CLK8M_EN_Enable = 0x1
	// Position of DIG_CLK8M_D256_EN field.
	RTCCNTL_CLK_CONF_DIG_CLK8M_D256_EN_Pos = 0x9
	// Bit mask of DIG_CLK8M_D256_EN field.
	RTCCNTL_CLK_CONF_DIG_CLK8M_D256_EN_Msk = 0x200
	// Bit DIG_CLK8M_D256_EN.
	RTCCNTL_CLK_CONF_DIG_CLK8M_D256_EN = 0x200
	// Disable CK8M_D256_OUT
	RTCCNTL_CLK_CONF_DIG_CLK8M_D256_EN_Disable = 0x0
	// Enable CK8M_D256_OUT for digital core (no relation to RTC core)
	RTCCNTL_CLK_CONF_DIG_CLK8M_D256_EN_Enable = 0x1
	// Position of DIG_XTAL32K_EN field.
	RTCCNTL_CLK_CONF_DIG_XTAL32K_EN_Pos = 0x8
	// Bit mask of DIG_XTAL32K_EN field.
	RTCCNTL_CLK_CONF_DIG_XTAL32K_EN_Msk = 0x100
	// Bit DIG_XTAL32K_EN.
	RTCCNTL_CLK_CONF_DIG_XTAL32K_EN = 0x100
	// Disable CK_XTAL_32K
	RTCCNTL_CLK_CONF_DIG_XTAL32K_EN_Disable = 0x0
	// Enable CK_XTAL_32K for digital core(no relation to RTC core)
	RTCCNTL_CLK_CONF_DIG_XTAL32K_EN_Enable = 0x1
	// Position of ENB_CK8M_DIV field.
	RTCCNTL_CLK_CONF_ENB_CK8M_DIV_Pos = 0x7
	// Bit mask of ENB_CK8M_DIV field.
	RTCCNTL_CLK_CONF_ENB_CK8M_DIV_Msk = 0x80
	// Bit ENB_CK8M_DIV.
	RTCCNTL_CLK_CONF_ENB_CK8M_DIV = 0x80
	// Position of ENB_CK8M field.
	RTCCNTL_CLK_CONF_ENB_CK8M_Pos = 0x6
	// Bit mask of ENB_CK8M field.
	RTCCNTL_CLK_CONF_ENB_CK8M_Msk = 0x40
	// Bit ENB_CK8M.
	RTCCNTL_CLK_CONF_ENB_CK8M = 0x40
	// Position of CK8M_DIV field.
	RTCCNTL_CLK_CONF_CK8M_DIV_Pos = 0x4
	// Bit mask of CK8M_DIV field.
	RTCCNTL_CLK_CONF_CK8M_DIV_Msk = 0x30
	// div128
	RTCCNTL_CLK_CONF_CK8M_DIV_DIV128 = 0x0
	// div256
	RTCCNTL_CLK_CONF_CK8M_DIV_DIV256 = 0x1
	// div512
	RTCCNTL_CLK_CONF_CK8M_DIV_DIV512 = 0x2
	// div1024
	RTCCNTL_CLK_CONF_CK8M_DIV_DIV1024 = 0x3

	// SDIO_CONF: RTC_CNTL_SDIO_CONF
	// Position of XPD_SDIO_REG field.
	RTCCNTL_SDIO_CONF_XPD_SDIO_REG_Pos = 0x1f
	// Bit mask of XPD_SDIO_REG field.
	RTCCNTL_SDIO_CONF_XPD_SDIO_REG_Msk = 0x80000000
	// Bit XPD_SDIO_REG.
	RTCCNTL_SDIO_CONF_XPD_SDIO_REG = 0x80000000
	// Position of DREFH_SDIO field.
	RTCCNTL_SDIO_CONF_DREFH_SDIO_Pos = 0x1d
	// Bit mask of DREFH_SDIO field.
	RTCCNTL_SDIO_CONF_DREFH_SDIO_Msk = 0x60000000
	// Position of DREFM_SDIO field.
	RTCCNTL_SDIO_CONF_DREFM_SDIO_Pos = 0x1b
	// Bit mask of DREFM_SDIO field.
	RTCCNTL_SDIO_CONF_DREFM_SDIO_Msk = 0x18000000
	// Position of DREFL_SDIO field.
	RTCCNTL_SDIO_CONF_DREFL_SDIO_Pos = 0x19
	// Bit mask of DREFL_SDIO field.
	RTCCNTL_SDIO_CONF_DREFL_SDIO_Msk = 0x6000000
	// Position of REG1P8_READY field.
	RTCCNTL_SDIO_CONF_REG1P8_READY_Pos = 0x18
	// Bit mask of REG1P8_READY field.
	RTCCNTL_SDIO_CONF_REG1P8_READY_Msk = 0x1000000
	// Bit REG1P8_READY.
	RTCCNTL_SDIO_CONF_REG1P8_READY = 0x1000000
	// Position of SDIO_TIEH field.
	RTCCNTL_SDIO_CONF_SDIO_TIEH_Pos = 0x17
	// Bit mask of SDIO_TIEH field.
	RTCCNTL_SDIO_CONF_SDIO_TIEH_Msk = 0x800000
	// Bit SDIO_TIEH.
	RTCCNTL_SDIO_CONF_SDIO_TIEH = 0x800000
	// Position of SDIO_FORCE field.
	RTCCNTL_SDIO_CONF_SDIO_FORCE_Pos = 0x16
	// Bit mask of SDIO_FORCE field.
	RTCCNTL_SDIO_CONF_SDIO_FORCE_Msk = 0x400000
	// Bit SDIO_FORCE.
	RTCCNTL_SDIO_CONF_SDIO_FORCE = 0x400000
	// Position of SDIO_PD_EN field.
	RTCCNTL_SDIO_CONF_SDIO_PD_EN_Pos = 0x15
	// Bit mask of SDIO_PD_EN field.
	RTCCNTL_SDIO_CONF_SDIO_PD_EN_Msk = 0x200000
	// Bit SDIO_PD_EN.
	RTCCNTL_SDIO_CONF_SDIO_PD_EN = 0x200000

	// BIAS_CONF: RTC_CNTL_BIAS_CONF
	// Position of RST_BIAS_I2C field.
	RTCCNTL_BIAS_CONF_RST_BIAS_I2C_Pos = 0x1f
	// Bit mask of RST_BIAS_I2C field.
	RTCCNTL_BIAS_CONF_RST_BIAS_I2C_Msk = 0x80000000
	// Bit RST_BIAS_I2C.
	RTCCNTL_BIAS_CONF_RST_BIAS_I2C = 0x80000000
	// Position of DEC_HEARTBEAT_WIDTH field.
	RTCCNTL_BIAS_CONF_DEC_HEARTBEAT_WIDTH_Pos = 0x1e
	// Bit mask of DEC_HEARTBEAT_WIDTH field.
	RTCCNTL_BIAS_CONF_DEC_HEARTBEAT_WIDTH_Msk = 0x40000000
	// Bit DEC_HEARTBEAT_WIDTH.
	RTCCNTL_BIAS_CONF_DEC_HEARTBEAT_WIDTH = 0x40000000
	// Position of INC_HEARTBEAT_PERIOD field.
	RTCCNTL_BIAS_CONF_INC_HEARTBEAT_PERIOD_Pos = 0x1d
	// Bit mask of INC_HEARTBEAT_PERIOD field.
	RTCCNTL_BIAS_CONF_INC_HEARTBEAT_PERIOD_Msk = 0x20000000
	// Bit INC_HEARTBEAT_PERIOD.
	RTCCNTL_BIAS_CONF_INC_HEARTBEAT_PERIOD = 0x20000000
	// Position of DEC_HEARTBEAT_PERIOD field.
	RTCCNTL_BIAS_CONF_DEC_HEARTBEAT_PERIOD_Pos = 0x1c
	// Bit mask of DEC_HEARTBEAT_PERIOD field.
	RTCCNTL_BIAS_CONF_DEC_HEARTBEAT_PERIOD_Msk = 0x10000000
	// Bit DEC_HEARTBEAT_PERIOD.
	RTCCNTL_BIAS_CONF_DEC_HEARTBEAT_PERIOD = 0x10000000
	// Position of INC_HEARTBEAT_REFRESH field.
	RTCCNTL_BIAS_CONF_INC_HEARTBEAT_REFRESH_Pos = 0x1b
	// Bit mask of INC_HEARTBEAT_REFRESH field.
	RTCCNTL_BIAS_CONF_INC_HEARTBEAT_REFRESH_Msk = 0x8000000
	// Bit INC_HEARTBEAT_REFRESH.
	RTCCNTL_BIAS_CONF_INC_HEARTBEAT_REFRESH = 0x8000000
	// Position of ENB_SCK_XTAL field.
	RTCCNTL_BIAS_CONF_ENB_SCK_XTAL_Pos = 0x1a
	// Bit mask of ENB_SCK_XTAL field.
	RTCCNTL_BIAS_CONF_ENB_SCK_XTAL_Msk = 0x4000000
	// Bit ENB_SCK_XTAL.
	RTCCNTL_BIAS_CONF_ENB_SCK_XTAL = 0x4000000
	// Position of DBG_ATTEN field.
	RTCCNTL_BIAS_CONF_DBG_ATTEN_Pos = 0x18
	// Bit mask of DBG_ATTEN field.
	RTCCNTL_BIAS_CONF_DBG_ATTEN_Msk = 0x3000000
	// Position of FORCE_PU field.
	RTCCNTL_BIAS_CONF_FORCE_PU_Pos = 0x1f
	// Bit mask of FORCE_PU field.
	RTCCNTL_BIAS_CONF_FORCE_PU_Msk = 0x80000000
	// Bit FORCE_PU.
	RTCCNTL_BIAS_CONF_FORCE_PU = 0x80000000
	// Position of FORCE_PD field.
	RTCCNTL_BIAS_CONF_FORCE_PD_Pos = 0x1e
	// Bit mask of FORCE_PD field.
	RTCCNTL_BIAS_CONF_FORCE_PD_Msk = 0x40000000
	// Bit FORCE_PD.
	RTCCNTL_BIAS_CONF_FORCE_PD = 0x40000000
	// Position of DBOOST_FORCE_PU field.
	RTCCNTL_BIAS_CONF_DBOOST_FORCE_PU_Pos = 0x1d
	// Bit mask of DBOOST_FORCE_PU field.
	RTCCNTL_BIAS_CONF_DBOOST_FORCE_PU_Msk = 0x20000000
	// Bit DBOOST_FORCE_PU.
	RTCCNTL_BIAS_CONF_DBOOST_FORCE_PU = 0x20000000
	// Position of DBOOST_FORCE_PD field.
	RTCCNTL_BIAS_CONF_DBOOST_FORCE_PD_Pos = 0x1c
	// Bit mask of DBOOST_FORCE_PD field.
	RTCCNTL_BIAS_CONF_DBOOST_FORCE_PD_Msk = 0x10000000
	// Bit DBOOST_FORCE_PD.
	RTCCNTL_BIAS_CONF_DBOOST_FORCE_PD = 0x10000000
	// Position of DBIAS_WAK field.
	RTCCNTL_BIAS_CONF_DBIAS_WAK_Pos = 0x19
	// Bit mask of DBIAS_WAK field.
	RTCCNTL_BIAS_CONF_DBIAS_WAK_Msk = 0xe000000
	// Position of DBIAS_SLP field.
	RTCCNTL_BIAS_CONF_DBIAS_SLP_Pos = 0x16
	// Bit mask of DBIAS_SLP field.
	RTCCNTL_BIAS_CONF_DBIAS_SLP_Msk = 0x1c00000
	// Position of SCK_DCAP field.
	RTCCNTL_BIAS_CONF_SCK_DCAP_Pos = 0xe
	// Bit mask of SCK_DCAP field.
	RTCCNTL_BIAS_CONF_SCK_DCAP_Msk = 0x3fc000
	// Position of DIG_DBIAS_WAK field.
	RTCCNTL_BIAS_CONF_DIG_DBIAS_WAK_Pos = 0xb
	// Bit mask of DIG_DBIAS_WAK field.
	RTCCNTL_BIAS_CONF_DIG_DBIAS_WAK_Msk = 0x3800
	// Position of DIG_DBIAS_SLP field.
	RTCCNTL_BIAS_CONF_DIG_DBIAS_SLP_Pos = 0x8
	// Bit mask of DIG_DBIAS_SLP field.
	RTCCNTL_BIAS_CONF_DIG_DBIAS_SLP_Msk = 0x700
	// Position of SCK_DCAP_FORCE field.
	RTCCNTL_BIAS_CONF_SCK_DCAP_FORCE_Pos = 0x7
	// Bit mask of SCK_DCAP_FORCE field.
	RTCCNTL_BIAS_CONF_SCK_DCAP_FORCE_Msk = 0x80
	// Bit SCK_DCAP_FORCE.
	RTCCNTL_BIAS_CONF_SCK_DCAP_FORCE = 0x80

	// CNTL: RTC Control Register
	// Position of FORCE_PU field.
	RTCCNTL_CNTL_FORCE_PU_Pos = 0x1f
	// Bit mask of FORCE_PU field.
	RTCCNTL_CNTL_FORCE_PU_Msk = 0x80000000
	// Bit FORCE_PU.
	RTCCNTL_CNTL_FORCE_PU = 0x80000000
	// Position of FORCE_PD field.
	RTCCNTL_CNTL_FORCE_PD_Pos = 0x1e
	// Bit mask of FORCE_PD field.
	RTCCNTL_CNTL_FORCE_PD_Msk = 0x40000000
	// Bit FORCE_PD.
	RTCCNTL_CNTL_FORCE_PD = 0x40000000
	// Position of FORCE_DBOOST_PU field.
	RTCCNTL_CNTL_FORCE_DBOOST_PU_Pos = 0x1d
	// Bit mask of FORCE_DBOOST_PU field.
	RTCCNTL_CNTL_FORCE_DBOOST_PU_Msk = 0x20000000
	// Bit FORCE_DBOOST_PU.
	RTCCNTL_CNTL_FORCE_DBOOST_PU = 0x20000000
	// Position of FORCE_DBOOST_PD field.
	RTCCNTL_CNTL_FORCE_DBOOST_PD_Pos = 0x1c
	// Bit mask of FORCE_DBOOST_PD field.
	RTCCNTL_CNTL_FORCE_DBOOST_PD_Msk = 0x10000000
	// Bit FORCE_DBOOST_PD.
	RTCCNTL_CNTL_FORCE_DBOOST_PD = 0x10000000
	// Position of DBIAS_WAK field.
	RTCCNTL_CNTL_DBIAS_WAK_Pos = 0x19
	// Bit mask of DBIAS_WAK field.
	RTCCNTL_CNTL_DBIAS_WAK_Msk = 0xe000000
	// Core voltage 0.90V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_0V90 = 0x0
	// Core voltage 0.95V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_0V95 = 0x1
	// Core voltage 1.00V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_1V00 = 0x2
	// Core voltage 1.05V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_1V05 = 0x3
	// Core voltage 1.10V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_1V10 = 0x4
	// Core voltage 1.15V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_1V15 = 0x5
	// Core voltage 1.20V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_1V20 = 0x6
	// Core voltage 1.25V
	RTCCNTL_CNTL_DBIAS_WAK_BIAS_1V25 = 0x7
	// Position of DBIAS_SLP field.
	RTCCNTL_CNTL_DBIAS_SLP_Pos = 0x16
	// Bit mask of DBIAS_SLP field.
	RTCCNTL_CNTL_DBIAS_SLP_Msk = 0x1c00000
	// Core voltage 0.90V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_0V90 = 0x0
	// Core voltage 0.95V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_0V95 = 0x1
	// Core voltage 1.00V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_1V00 = 0x2
	// Core voltage 1.05V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_1V05 = 0x3
	// Core voltage 1.10V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_1V10 = 0x4
	// Core voltage 1.15V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_1V15 = 0x5
	// Core voltage 1.20V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_1V20 = 0x6
	// Core voltage 1.25V
	RTCCNTL_CNTL_DBIAS_SLP_BIAS_1V25 = 0x7
	// Position of SCK_DCAP field.
	RTCCNTL_CNTL_SCK_DCAP_Pos = 0xe
	// Bit mask of SCK_DCAP field.
	RTCCNTL_CNTL_SCK_DCAP_Msk = 0x3fc000
	// Position of DIG_DBIAS_WAK field.
	RTCCNTL_CNTL_DIG_DBIAS_WAK_Pos = 0xb
	// Bit mask of DIG_DBIAS_WAK field.
	RTCCNTL_CNTL_DIG_DBIAS_WAK_Msk = 0x3800
	// Core voltage 0.90V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_0V90 = 0x0
	// Core voltage 0.95V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_0V95 = 0x1
	// Core voltage 1.00V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_1V00 = 0x2
	// Core voltage 1.05V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_1V05 = 0x3
	// Core voltage 1.10V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_1V10 = 0x4
	// Core voltage 1.15V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_1V15 = 0x5
	// Core voltage 1.20V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_1V20 = 0x6
	// Core voltage 1.25V
	RTCCNTL_CNTL_DIG_DBIAS_WAK_BIAS_1V25 = 0x7
	// Position of DIG_DBIAS_SLP field.
	RTCCNTL_CNTL_DIG_DBIAS_SLP_Pos = 0x8
	// Bit mask of DIG_DBIAS_SLP field.
	RTCCNTL_CNTL_DIG_DBIAS_SLP_Msk = 0x700
	// Core voltage 0.90V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_0V90 = 0x0
	// Core voltage 0.95V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_0V95 = 0x1
	// Core voltage 1.00V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_1V00 = 0x2
	// Core voltage 1.05V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_1V05 = 0x3
	// Core voltage 1.10V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_1V10 = 0x4
	// Core voltage 1.15V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_1V15 = 0x5
	// Core voltage 1.20V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_1V20 = 0x6
	// Core voltage 1.25V
	RTCCNTL_CNTL_DIG_DBIAS_SLP_BIAS_1V25 = 0x7
	// Position of SCK_DCAP_FORCE field.
	RTCCNTL_CNTL_SCK_DCAP_FORCE_Pos = 0x7
	// Bit mask of SCK_DCAP_FORCE field.
	RTCCNTL_CNTL_SCK_DCAP_FORCE_Msk = 0x80
	// Bit SCK_DCAP_FORCE.
	RTCCNTL_CNTL_SCK_DCAP_FORCE = 0x80

	// PWC: RTC_CNTL_PWC
	// Position of PD_EN field.
	RTCCNTL_PWC_PD_EN_Pos = 0x14
	// Bit mask of PD_EN field.
	RTCCNTL_PWC_PD_EN_Msk = 0x100000
	// Bit PD_EN.
	RTCCNTL_PWC_PD_EN = 0x100000
	// Position of FORCE_PU field.
	RTCCNTL_PWC_FORCE_PU_Pos = 0x13
	// Bit mask of FORCE_PU field.
	RTCCNTL_PWC_FORCE_PU_Msk = 0x80000
	// Bit FORCE_PU.
	RTCCNTL_PWC_FORCE_PU = 0x80000
	// Position of FORCE_PD field.
	RTCCNTL_PWC_FORCE_PD_Pos = 0x12
	// Bit mask of FORCE_PD field.
	RTCCNTL_PWC_FORCE_PD_Msk = 0x40000
	// Bit FORCE_PD.
	RTCCNTL_PWC_FORCE_PD = 0x40000
	// Position of SLOWMEM_PD_EN field.
	RTCCNTL_PWC_SLOWMEM_PD_EN_Pos = 0x11
	// Bit mask of SLOWMEM_PD_EN field.
	RTCCNTL_PWC_SLOWMEM_PD_EN_Msk = 0x20000
	// Bit SLOWMEM_PD_EN.
	RTCCNTL_PWC_SLOWMEM_PD_EN = 0x20000
	// Position of SLOWMEM_FORCE_PU field.
	RTCCNTL_PWC_SLOWMEM_FORCE_PU_Pos = 0x10
	// Bit mask of SLOWMEM_FORCE_PU field.
	RTCCNTL_PWC_SLOWMEM_FORCE_PU_Msk = 0x10000
	// Bit SLOWMEM_FORCE_PU.
	RTCCNTL_PWC_SLOWMEM_FORCE_PU = 0x10000
	// Position of SLOWMEM_FORCE_PD field.
	RTCCNTL_PWC_SLOWMEM_FORCE_PD_Pos = 0xf
	// Bit mask of SLOWMEM_FORCE_PD field.
	RTCCNTL_PWC_SLOWMEM_FORCE_PD_Msk = 0x8000
	// Bit SLOWMEM_FORCE_PD.
	RTCCNTL_PWC_SLOWMEM_FORCE_PD = 0x8000
	// Position of FASTMEM_PD_EN field.
	RTCCNTL_PWC_FASTMEM_PD_EN_Pos = 0xe
	// Bit mask of FASTMEM_PD_EN field.
	RTCCNTL_PWC_FASTMEM_PD_EN_Msk = 0x4000
	// Bit FASTMEM_PD_EN.
	RTCCNTL_PWC_FASTMEM_PD_EN = 0x4000
	// Position of FASTMEM_FORCE_PU field.
	RTCCNTL_PWC_FASTMEM_FORCE_PU_Pos = 0xd
	// Bit mask of FASTMEM_FORCE_PU field.
	RTCCNTL_PWC_FASTMEM_FORCE_PU_Msk = 0x2000
	// Bit FASTMEM_FORCE_PU.
	RTCCNTL_PWC_FASTMEM_FORCE_PU = 0x2000
	// Position of FASTMEM_FORCE_PD field.
	RTCCNTL_PWC_FASTMEM_FORCE_PD_Pos = 0xc
	// Bit mask of FASTMEM_FORCE_PD field.
	RTCCNTL_PWC_FASTMEM_FORCE_PD_Msk = 0x1000
	// Bit FASTMEM_FORCE_PD.
	RTCCNTL_PWC_FASTMEM_FORCE_PD = 0x1000
	// Position of SLOWMEM_FORCE_LPU field.
	RTCCNTL_PWC_SLOWMEM_FORCE_LPU_Pos = 0xb
	// Bit mask of SLOWMEM_FORCE_LPU field.
	RTCCNTL_PWC_SLOWMEM_FORCE_LPU_Msk = 0x800
	// Bit SLOWMEM_FORCE_LPU.
	RTCCNTL_PWC_SLOWMEM_FORCE_LPU = 0x800
	// Position of SLOWMEM_FORCE_LPD field.
	RTCCNTL_PWC_SLOWMEM_FORCE_LPD_Pos = 0xa
	// Bit mask of SLOWMEM_FORCE_LPD field.
	RTCCNTL_PWC_SLOWMEM_FORCE_LPD_Msk = 0x400
	// Bit SLOWMEM_FORCE_LPD.
	RTCCNTL_PWC_SLOWMEM_FORCE_LPD = 0x400
	// Position of SLOWMEM_FOLW_CPU field.
	RTCCNTL_PWC_SLOWMEM_FOLW_CPU_Pos = 0x9
	// Bit mask of SLOWMEM_FOLW_CPU field.
	RTCCNTL_PWC_SLOWMEM_FOLW_CPU_Msk = 0x200
	// Bit SLOWMEM_FOLW_CPU.
	RTCCNTL_PWC_SLOWMEM_FOLW_CPU = 0x200
	// Position of FASTMEM_FORCE_LPU field.
	RTCCNTL_PWC_FASTMEM_FORCE_LPU_Pos = 0x8
	// Bit mask of FASTMEM_FORCE_LPU field.
	RTCCNTL_PWC_FASTMEM_FORCE_LPU_Msk = 0x100
	// Bit FASTMEM_FORCE_LPU.
	RTCCNTL_PWC_FASTMEM_FORCE_LPU = 0x100
	// Position of FASTMEM_FORCE_LPD field.
	RTCCNTL_PWC_FASTMEM_FORCE_LPD_Pos = 0x7
	// Bit mask of FASTMEM_FORCE_LPD field.
	RTCCNTL_PWC_FASTMEM_FORCE_LPD_Msk = 0x80
	// Bit FASTMEM_FORCE_LPD.
	RTCCNTL_PWC_FASTMEM_FORCE_LPD = 0x80
	// Position of FASTMEM_FOLW_CPU field.
	RTCCNTL_PWC_FASTMEM_FOLW_CPU_Pos = 0x6
	// Bit mask of FASTMEM_FOLW_CPU field.
	RTCCNTL_PWC_FASTMEM_FOLW_CPU_Msk = 0x40
	// Bit FASTMEM_FOLW_CPU.
	RTCCNTL_PWC_FASTMEM_FOLW_CPU = 0x40
	// Position of FORCE_NOISO field.
	RTCCNTL_PWC_FORCE_NOISO_Pos = 0x5
	// Bit mask of FORCE_NOISO field.
	RTCCNTL_PWC_FORCE_NOISO_Msk = 0x20
	// Bit FORCE_NOISO.
	RTCCNTL_PWC_FORCE_NOISO = 0x20
	// Position of FORCE_ISO field.
	RTCCNTL_PWC_FORCE_ISO_Pos = 0x4
	// Bit mask of FORCE_ISO field.
	RTCCNTL_PWC_FORCE_ISO_Msk = 0x10
	// Bit FORCE_ISO.
	RTCCNTL_PWC_FORCE_ISO = 0x10
	// Position of SLOWMEM_FORCE_ISO field.
	RTCCNTL_PWC_SLOWMEM_FORCE_ISO_Pos = 0x3
	// Bit mask of SLOWMEM_FORCE_ISO field.
	RTCCNTL_PWC_SLOWMEM_FORCE_ISO_Msk = 0x8
	// Bit SLOWMEM_FORCE_ISO.
	RTCCNTL_PWC_SLOWMEM_FORCE_ISO = 0x8
	// Position of SLOWMEM_FORCE_NOISO field.
	RTCCNTL_PWC_SLOWMEM_FORCE_NOISO_Pos = 0x2
	// Bit mask of SLOWMEM_FORCE_NOISO field.
	RTCCNTL_PWC_SLOWMEM_FORCE_NOISO_Msk = 0x4
	// Bit SLOWMEM_FORCE_NOISO.
	RTCCNTL_PWC_SLOWMEM_FORCE_NOISO = 0x4
	// Position of FASTMEM_FORCE_ISO field.
	RTCCNTL_PWC_FASTMEM_FORCE_ISO_Pos = 0x1
	// Bit mask of FASTMEM_FORCE_ISO field.
	RTCCNTL_PWC_FASTMEM_FORCE_ISO_Msk = 0x2
	// Bit FASTMEM_FORCE_ISO.
	RTCCNTL_PWC_FASTMEM_FORCE_ISO = 0x2
	// Position of FASTMEM_FORCE_NOISO field.
	RTCCNTL_PWC_FASTMEM_FORCE_NOISO_Pos = 0x0
	// Bit mask of FASTMEM_FORCE_NOISO field.
	RTCCNTL_PWC_FASTMEM_FORCE_NOISO_Msk = 0x1
	// Bit FASTMEM_FORCE_NOISO.
	RTCCNTL_PWC_FASTMEM_FORCE_NOISO = 0x1

	// DIG_PWC: RTC_CNTL_DIG_PWC
	// Position of DG_WRAP_PD_EN field.
	RTCCNTL_DIG_PWC_DG_WRAP_PD_EN_Pos = 0x1f
	// Bit mask of DG_WRAP_PD_EN field.
	RTCCNTL_DIG_PWC_DG_WRAP_PD_EN_Msk = 0x80000000
	// Bit DG_WRAP_PD_EN.
	RTCCNTL_DIG_PWC_DG_WRAP_PD_EN = 0x80000000
	// Position of WIFI_PD_EN field.
	RTCCNTL_DIG_PWC_WIFI_PD_EN_Pos = 0x1e
	// Bit mask of WIFI_PD_EN field.
	RTCCNTL_DIG_PWC_WIFI_PD_EN_Msk = 0x40000000
	// Bit WIFI_PD_EN.
	RTCCNTL_DIG_PWC_WIFI_PD_EN = 0x40000000
	// Position of INTER_RAM4_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM4_PD_EN_Pos = 0x1d
	// Bit mask of INTER_RAM4_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM4_PD_EN_Msk = 0x20000000
	// Bit INTER_RAM4_PD_EN.
	RTCCNTL_DIG_PWC_INTER_RAM4_PD_EN = 0x20000000
	// Position of INTER_RAM3_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM3_PD_EN_Pos = 0x1c
	// Bit mask of INTER_RAM3_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM3_PD_EN_Msk = 0x10000000
	// Bit INTER_RAM3_PD_EN.
	RTCCNTL_DIG_PWC_INTER_RAM3_PD_EN = 0x10000000
	// Position of INTER_RAM2_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM2_PD_EN_Pos = 0x1b
	// Bit mask of INTER_RAM2_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM2_PD_EN_Msk = 0x8000000
	// Bit INTER_RAM2_PD_EN.
	RTCCNTL_DIG_PWC_INTER_RAM2_PD_EN = 0x8000000
	// Position of INTER_RAM1_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM1_PD_EN_Pos = 0x1a
	// Bit mask of INTER_RAM1_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM1_PD_EN_Msk = 0x4000000
	// Bit INTER_RAM1_PD_EN.
	RTCCNTL_DIG_PWC_INTER_RAM1_PD_EN = 0x4000000
	// Position of INTER_RAM0_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM0_PD_EN_Pos = 0x19
	// Bit mask of INTER_RAM0_PD_EN field.
	RTCCNTL_DIG_PWC_INTER_RAM0_PD_EN_Msk = 0x2000000
	// Bit INTER_RAM0_PD_EN.
	RTCCNTL_DIG_PWC_INTER_RAM0_PD_EN = 0x2000000
	// Position of ROM0_PD_EN field.
	RTCCNTL_DIG_PWC_ROM0_PD_EN_Pos = 0x18
	// Bit mask of ROM0_PD_EN field.
	RTCCNTL_DIG_PWC_ROM0_PD_EN_Msk = 0x1000000
	// Bit ROM0_PD_EN.
	RTCCNTL_DIG_PWC_ROM0_PD_EN = 0x1000000
	// Position of DG_WRAP_FORCE_PU field.
	RTCCNTL_DIG_PWC_DG_WRAP_FORCE_PU_Pos = 0x14
	// Bit mask of DG_WRAP_FORCE_PU field.
	RTCCNTL_DIG_PWC_DG_WRAP_FORCE_PU_Msk = 0x100000
	// Bit DG_WRAP_FORCE_PU.
	RTCCNTL_DIG_PWC_DG_WRAP_FORCE_PU = 0x100000
	// Position of DG_WRAP_FORCE_PD field.
	RTCCNTL_DIG_PWC_DG_WRAP_FORCE_PD_Pos = 0x13
	// Bit mask of DG_WRAP_FORCE_PD field.
	RTCCNTL_DIG_PWC_DG_WRAP_FORCE_PD_Msk = 0x80000
	// Bit DG_WRAP_FORCE_PD.
	RTCCNTL_DIG_PWC_DG_WRAP_FORCE_PD = 0x80000
	// Position of WIFI_FORCE_PU field.
	RTCCNTL_DIG_PWC_WIFI_FORCE_PU_Pos = 0x12
	// Bit mask of WIFI_FORCE_PU field.
	RTCCNTL_DIG_PWC_WIFI_FORCE_PU_Msk = 0x40000
	// Bit WIFI_FORCE_PU.
	RTCCNTL_DIG_PWC_WIFI_FORCE_PU = 0x40000
	// Position of WIFI_FORCE_PD field.
	RTCCNTL_DIG_PWC_WIFI_FORCE_PD_Pos = 0x11
	// Bit mask of WIFI_FORCE_PD field.
	RTCCNTL_DIG_PWC_WIFI_FORCE_PD_Msk = 0x20000
	// Bit WIFI_FORCE_PD.
	RTCCNTL_DIG_PWC_WIFI_FORCE_PD = 0x20000
	// Position of INTER_RAM4_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM4_FORCE_PU_Pos = 0x10
	// Bit mask of INTER_RAM4_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM4_FORCE_PU_Msk = 0x10000
	// Bit INTER_RAM4_FORCE_PU.
	RTCCNTL_DIG_PWC_INTER_RAM4_FORCE_PU = 0x10000
	// Position of INTER_RAM4_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM4_FORCE_PD_Pos = 0xf
	// Bit mask of INTER_RAM4_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM4_FORCE_PD_Msk = 0x8000
	// Bit INTER_RAM4_FORCE_PD.
	RTCCNTL_DIG_PWC_INTER_RAM4_FORCE_PD = 0x8000
	// Position of INTER_RAM3_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM3_FORCE_PU_Pos = 0xe
	// Bit mask of INTER_RAM3_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM3_FORCE_PU_Msk = 0x4000
	// Bit INTER_RAM3_FORCE_PU.
	RTCCNTL_DIG_PWC_INTER_RAM3_FORCE_PU = 0x4000
	// Position of INTER_RAM3_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM3_FORCE_PD_Pos = 0xd
	// Bit mask of INTER_RAM3_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM3_FORCE_PD_Msk = 0x2000
	// Bit INTER_RAM3_FORCE_PD.
	RTCCNTL_DIG_PWC_INTER_RAM3_FORCE_PD = 0x2000
	// Position of INTER_RAM2_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM2_FORCE_PU_Pos = 0xc
	// Bit mask of INTER_RAM2_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM2_FORCE_PU_Msk = 0x1000
	// Bit INTER_RAM2_FORCE_PU.
	RTCCNTL_DIG_PWC_INTER_RAM2_FORCE_PU = 0x1000
	// Position of INTER_RAM2_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM2_FORCE_PD_Pos = 0xb
	// Bit mask of INTER_RAM2_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM2_FORCE_PD_Msk = 0x800
	// Bit INTER_RAM2_FORCE_PD.
	RTCCNTL_DIG_PWC_INTER_RAM2_FORCE_PD = 0x800
	// Position of INTER_RAM1_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM1_FORCE_PU_Pos = 0xa
	// Bit mask of INTER_RAM1_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM1_FORCE_PU_Msk = 0x400
	// Bit INTER_RAM1_FORCE_PU.
	RTCCNTL_DIG_PWC_INTER_RAM1_FORCE_PU = 0x400
	// Position of INTER_RAM1_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM1_FORCE_PD_Pos = 0x9
	// Bit mask of INTER_RAM1_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM1_FORCE_PD_Msk = 0x200
	// Bit INTER_RAM1_FORCE_PD.
	RTCCNTL_DIG_PWC_INTER_RAM1_FORCE_PD = 0x200
	// Position of INTER_RAM0_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM0_FORCE_PU_Pos = 0x8
	// Bit mask of INTER_RAM0_FORCE_PU field.
	RTCCNTL_DIG_PWC_INTER_RAM0_FORCE_PU_Msk = 0x100
	// Bit INTER_RAM0_FORCE_PU.
	RTCCNTL_DIG_PWC_INTER_RAM0_FORCE_PU = 0x100
	// Position of INTER_RAM0_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM0_FORCE_PD_Pos = 0x7
	// Bit mask of INTER_RAM0_FORCE_PD field.
	RTCCNTL_DIG_PWC_INTER_RAM0_FORCE_PD_Msk = 0x80
	// Bit INTER_RAM0_FORCE_PD.
	RTCCNTL_DIG_PWC_INTER_RAM0_FORCE_PD = 0x80
	// Position of ROM0_FORCE_PU field.
	RTCCNTL_DIG_PWC_ROM0_FORCE_PU_Pos = 0x6
	// Bit mask of ROM0_FORCE_PU field.
	RTCCNTL_DIG_PWC_ROM0_FORCE_PU_Msk = 0x40
	// Bit ROM0_FORCE_PU.
	RTCCNTL_DIG_PWC_ROM0_FORCE_PU = 0x40
	// Position of ROM0_FORCE_PD field.
	RTCCNTL_DIG_PWC_ROM0_FORCE_PD_Pos = 0x5
	// Bit mask of ROM0_FORCE_PD field.
	RTCCNTL_DIG_PWC_ROM0_FORCE_PD_Msk = 0x20
	// Bit ROM0_FORCE_PD.
	RTCCNTL_DIG_PWC_ROM0_FORCE_PD = 0x20
	// Position of LSLP_MEM_FORCE_PU field.
	RTCCNTL_DIG_PWC_LSLP_MEM_FORCE_PU_Pos = 0x4
	// Bit mask of LSLP_MEM_FORCE_PU field.
	RTCCNTL_DIG_PWC_LSLP_MEM_FORCE_PU_Msk = 0x10
	// Bit LSLP_MEM_FORCE_PU.
	RTCCNTL_DIG_PWC_LSLP_MEM_FORCE_PU = 0x10
	// Position of LSLP_MEM_FORCE_PD field.
	RTCCNTL_DIG_PWC_LSLP_MEM_FORCE_PD_Pos = 0x3
	// Bit mask of LSLP_MEM_FORCE_PD field.
	RTCCNTL_DIG_PWC_LSLP_MEM_FORCE_PD_Msk = 0x8
	// Bit LSLP_MEM_FORCE_PD.
	RTCCNTL_DIG_PWC_LSLP_MEM_FORCE_PD = 0x8

	// DIG_ISO: RTC_CNTL_DIG_ISO
	// Position of DG_WRAP_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_DG_WRAP_FORCE_NOISO_Pos = 0x1f
	// Bit mask of DG_WRAP_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_DG_WRAP_FORCE_NOISO_Msk = 0x80000000
	// Bit DG_WRAP_FORCE_NOISO.
	RTCCNTL_DIG_ISO_DG_WRAP_FORCE_NOISO = 0x80000000
	// Position of DG_WRAP_FORCE_ISO field.
	RTCCNTL_DIG_ISO_DG_WRAP_FORCE_ISO_Pos = 0x1e
	// Bit mask of DG_WRAP_FORCE_ISO field.
	RTCCNTL_DIG_ISO_DG_WRAP_FORCE_ISO_Msk = 0x40000000
	// Bit DG_WRAP_FORCE_ISO.
	RTCCNTL_DIG_ISO_DG_WRAP_FORCE_ISO = 0x40000000
	// Position of WIFI_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_WIFI_FORCE_NOISO_Pos = 0x1d
	// Bit mask of WIFI_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_WIFI_FORCE_NOISO_Msk = 0x20000000
	// Bit WIFI_FORCE_NOISO.
	RTCCNTL_DIG_ISO_WIFI_FORCE_NOISO = 0x20000000
	// Position of WIFI_FORCE_ISO field.
	RTCCNTL_DIG_ISO_WIFI_FORCE_ISO_Pos = 0x1c
	// Bit mask of WIFI_FORCE_ISO field.
	RTCCNTL_DIG_ISO_WIFI_FORCE_ISO_Msk = 0x10000000
	// Bit WIFI_FORCE_ISO.
	RTCCNTL_DIG_ISO_WIFI_FORCE_ISO = 0x10000000
	// Position of INTER_RAM4_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM4_FORCE_NOISO_Pos = 0x1b
	// Bit mask of INTER_RAM4_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM4_FORCE_NOISO_Msk = 0x8000000
	// Bit INTER_RAM4_FORCE_NOISO.
	RTCCNTL_DIG_ISO_INTER_RAM4_FORCE_NOISO = 0x8000000
	// Position of INTER_RAM4_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM4_FORCE_ISO_Pos = 0x1a
	// Bit mask of INTER_RAM4_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM4_FORCE_ISO_Msk = 0x4000000
	// Bit INTER_RAM4_FORCE_ISO.
	RTCCNTL_DIG_ISO_INTER_RAM4_FORCE_ISO = 0x4000000
	// Position of INTER_RAM3_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM3_FORCE_NOISO_Pos = 0x19
	// Bit mask of INTER_RAM3_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM3_FORCE_NOISO_Msk = 0x2000000
	// Bit INTER_RAM3_FORCE_NOISO.
	RTCCNTL_DIG_ISO_INTER_RAM3_FORCE_NOISO = 0x2000000
	// Position of INTER_RAM3_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM3_FORCE_ISO_Pos = 0x18
	// Bit mask of INTER_RAM3_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM3_FORCE_ISO_Msk = 0x1000000
	// Bit INTER_RAM3_FORCE_ISO.
	RTCCNTL_DIG_ISO_INTER_RAM3_FORCE_ISO = 0x1000000
	// Position of INTER_RAM2_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM2_FORCE_NOISO_Pos = 0x17
	// Bit mask of INTER_RAM2_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM2_FORCE_NOISO_Msk = 0x800000
	// Bit INTER_RAM2_FORCE_NOISO.
	RTCCNTL_DIG_ISO_INTER_RAM2_FORCE_NOISO = 0x800000
	// Position of INTER_RAM2_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM2_FORCE_ISO_Pos = 0x16
	// Bit mask of INTER_RAM2_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM2_FORCE_ISO_Msk = 0x400000
	// Bit INTER_RAM2_FORCE_ISO.
	RTCCNTL_DIG_ISO_INTER_RAM2_FORCE_ISO = 0x400000
	// Position of INTER_RAM1_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM1_FORCE_NOISO_Pos = 0x15
	// Bit mask of INTER_RAM1_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM1_FORCE_NOISO_Msk = 0x200000
	// Bit INTER_RAM1_FORCE_NOISO.
	RTCCNTL_DIG_ISO_INTER_RAM1_FORCE_NOISO = 0x200000
	// Position of INTER_RAM1_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM1_FORCE_ISO_Pos = 0x14
	// Bit mask of INTER_RAM1_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM1_FORCE_ISO_Msk = 0x100000
	// Bit INTER_RAM1_FORCE_ISO.
	RTCCNTL_DIG_ISO_INTER_RAM1_FORCE_ISO = 0x100000
	// Position of INTER_RAM0_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM0_FORCE_NOISO_Pos = 0x13
	// Bit mask of INTER_RAM0_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_INTER_RAM0_FORCE_NOISO_Msk = 0x80000
	// Bit INTER_RAM0_FORCE_NOISO.
	RTCCNTL_DIG_ISO_INTER_RAM0_FORCE_NOISO = 0x80000
	// Position of INTER_RAM0_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM0_FORCE_ISO_Pos = 0x12
	// Bit mask of INTER_RAM0_FORCE_ISO field.
	RTCCNTL_DIG_ISO_INTER_RAM0_FORCE_ISO_Msk = 0x40000
	// Bit INTER_RAM0_FORCE_ISO.
	RTCCNTL_DIG_ISO_INTER_RAM0_FORCE_ISO = 0x40000
	// Position of ROM0_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_ROM0_FORCE_NOISO_Pos = 0x11
	// Bit mask of ROM0_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_ROM0_FORCE_NOISO_Msk = 0x20000
	// Bit ROM0_FORCE_NOISO.
	RTCCNTL_DIG_ISO_ROM0_FORCE_NOISO = 0x20000
	// Position of ROM0_FORCE_ISO field.
	RTCCNTL_DIG_ISO_ROM0_FORCE_ISO_Pos = 0x10
	// Bit mask of ROM0_FORCE_ISO field.
	RTCCNTL_DIG_ISO_ROM0_FORCE_ISO_Msk = 0x10000
	// Bit ROM0_FORCE_ISO.
	RTCCNTL_DIG_ISO_ROM0_FORCE_ISO = 0x10000
	// Position of DG_PAD_FORCE_HOLD field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_HOLD_Pos = 0xf
	// Bit mask of DG_PAD_FORCE_HOLD field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_HOLD_Msk = 0x8000
	// Bit DG_PAD_FORCE_HOLD.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_HOLD = 0x8000
	// Position of DG_PAD_FORCE_UNHOLD field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_UNHOLD_Pos = 0xe
	// Bit mask of DG_PAD_FORCE_UNHOLD field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_UNHOLD_Msk = 0x4000
	// Bit DG_PAD_FORCE_UNHOLD.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_UNHOLD = 0x4000
	// Position of DG_PAD_FORCE_ISO field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_ISO_Pos = 0xd
	// Bit mask of DG_PAD_FORCE_ISO field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_ISO_Msk = 0x2000
	// Bit DG_PAD_FORCE_ISO.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_ISO = 0x2000
	// Position of DG_PAD_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_NOISO_Pos = 0xc
	// Bit mask of DG_PAD_FORCE_NOISO field.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_NOISO_Msk = 0x1000
	// Bit DG_PAD_FORCE_NOISO.
	RTCCNTL_DIG_ISO_DG_PAD_FORCE_NOISO = 0x1000
	// Position of DG_PAD_AUTOHOLD_EN field.
	RTCCNTL_DIG_ISO_DG_PAD_AUTOHOLD_EN_Pos = 0xb
	// Bit mask of DG_PAD_AUTOHOLD_EN field.
	RTCCNTL_DIG_ISO_DG_PAD_AUTOHOLD_EN_Msk = 0x800
	// Bit DG_PAD_AUTOHOLD_EN.
	RTCCNTL_DIG_ISO_DG_PAD_AUTOHOLD_EN = 0x800
	// Position of CLR_DG_PAD_AUTOHOLD field.
	RTCCNTL_DIG_ISO_CLR_DG_PAD_AUTOHOLD_Pos = 0xa
	// Bit mask of CLR_DG_PAD_AUTOHOLD field.
	RTCCNTL_DIG_ISO_CLR_DG_PAD_AUTOHOLD_Msk = 0x400
	// Bit CLR_DG_PAD_AUTOHOLD.
	RTCCNTL_DIG_ISO_CLR_DG_PAD_AUTOHOLD = 0x400
	// Position of DG_PAD_AUTOHOLD field.
	RTCCNTL_DIG_ISO_DG_PAD_AUTOHOLD_Pos = 0x9
	// Bit mask of DG_PAD_AUTOHOLD field.
	RTCCNTL_DIG_ISO_DG_PAD_AUTOHOLD_Msk = 0x200
	// Bit DG_PAD_AUTOHOLD.
	RTCCNTL_DIG_ISO_DG_PAD_AUTOHOLD = 0x200
	// Position of DIG_ISO_FORCE_ON field.
	RTCCNTL_DIG_ISO_DIG_ISO_FORCE_ON_Pos = 0x8
	// Bit mask of DIG_ISO_FORCE_ON field.
	RTCCNTL_DIG_ISO_DIG_ISO_FORCE_ON_Msk = 0x100
	// Bit DIG_ISO_FORCE_ON.
	RTCCNTL_DIG_ISO_DIG_ISO_FORCE_ON = 0x100
	// Position of DIG_ISO_FORCE_OFF field.
	RTCCNTL_DIG_ISO_DIG_ISO_FORCE_OFF_Pos = 0x7
	// Bit mask of DIG_ISO_FORCE_OFF field.
	RTCCNTL_DIG_ISO_DIG_ISO_FORCE_OFF_Msk = 0x80
	// Bit DIG_ISO_FORCE_OFF.
	RTCCNTL_DIG_ISO_DIG_ISO_FORCE_OFF = 0x80

	// WDTCONFIG0: RTC_CNTL_WDTCONFIG0
	// Position of WDT_EN field.
	RTCCNTL_WDTCONFIG0_WDT_EN_Pos = 0x1f
	// Bit mask of WDT_EN field.
	RTCCNTL_WDTCONFIG0_WDT_EN_Msk = 0x80000000
	// Bit WDT_EN.
	RTCCNTL_WDTCONFIG0_WDT_EN = 0x80000000
	// Position of WDT_STG0 field.
	RTCCNTL_WDTCONFIG0_WDT_STG0_Pos = 0x1c
	// Bit mask of WDT_STG0 field.
	RTCCNTL_WDTCONFIG0_WDT_STG0_Msk = 0x70000000
	// Disabled
	RTCCNTL_WDTCONFIG0_WDT_STG0_Disable = 0x0
	// Trigger an interrupt
	RTCCNTL_WDTCONFIG0_WDT_STG0_Interrupt = 0x1
	// Reset CPU core
	RTCCNTL_WDTCONFIG0_WDT_STG0_ResetCPU = 0x2
	// Reset System, but not RTC
	RTCCNTL_WDTCONFIG0_WDT_STG0_ResetSystem = 0x3
	// Reset System & RTC
	RTCCNTL_WDTCONFIG0_WDT_STG0_ResetRTC = 0x4
	// Position of WDT_STG1 field.
	RTCCNTL_WDTCONFIG0_WDT_STG1_Pos = 0x19
	// Bit mask of WDT_STG1 field.
	RTCCNTL_WDTCONFIG0_WDT_STG1_Msk = 0xe000000
	// Disabled
	RTCCNTL_WDTCONFIG0_WDT_STG1_Disable = 0x0
	// Trigger an interrupt
	RTCCNTL_WDTCONFIG0_WDT_STG1_Interrupt = 0x1
	// Reset CPU core
	RTCCNTL_WDTCONFIG0_WDT_STG1_ResetCPU = 0x2
	// Reset System, but not RTC
	RTCCNTL_WDTCONFIG0_WDT_STG1_ResetSystem = 0x3
	// Reset System & RTC
	RTCCNTL_WDTCONFIG0_WDT_STG1_ResetRTC = 0x4
	// Position of WDT_STG2 field.
	RTCCNTL_WDTCONFIG0_WDT_STG2_Pos = 0x16
	// Bit mask of WDT_STG2 field.
	RTCCNTL_WDTCONFIG0_WDT_STG2_Msk = 0x1c00000
	// Disabled
	RTCCNTL_WDTCONFIG0_WDT_STG2_Disable = 0x0
	// Trigger an interrupt
	RTCCNTL_WDTCONFIG0_WDT_STG2_Interrupt = 0x1
	// Reset CPU core
	RTCCNTL_WDTCONFIG0_WDT_STG2_ResetCPU = 0x2
	// Reset System, but not RTC
	RTCCNTL_WDTCONFIG0_WDT_STG2_ResetSystem = 0x3
	// Reset System & RTC
	RTCCNTL_WDTCONFIG0_WDT_STG2_ResetRTC = 0x4
	// Position of WDT_STG3 field.
	RTCCNTL_WDTCONFIG0_WDT_STG3_Pos = 0x13
	// Bit mask of WDT_STG3 field.
	RTCCNTL_WDTCONFIG0_WDT_STG3_Msk = 0x380000
	// Disabled
	RTCCNTL_WDTCONFIG0_WDT_STG3_Disable = 0x0
	// Trigger an interrupt
	RTCCNTL_WDTCONFIG0_WDT_STG3_Interrupt = 0x1
	// Reset CPU core
	RTCCNTL_WDTCONFIG0_WDT_STG3_ResetCPU = 0x2
	// Reset System, but not RTC
	RTCCNTL_WDTCONFIG0_WDT_STG3_ResetSystem = 0x3
	// Reset System & RTC
	RTCCNTL_WDTCONFIG0_WDT_STG3_ResetRTC = 0x4
	// Position of WDT_EDGE_INT_EN field.
	RTCCNTL_WDTCONFIG0_WDT_EDGE_INT_EN_Pos = 0x12
	// Bit mask of WDT_EDGE_INT_EN field.
	RTCCNTL_WDTCONFIG0_WDT_EDGE_INT_EN_Msk = 0x40000
	// Bit WDT_EDGE_INT_EN.
	RTCCNTL_WDTCONFIG0_WDT_EDGE_INT_EN = 0x40000
	// Position of WDT_LEVEL_INT_EN field.
	RTCCNTL_WDTCONFIG0_WDT_LEVEL_INT_EN_Pos = 0x11
	// Bit mask of WDT_LEVEL_INT_EN field.
	RTCCNTL_WDTCONFIG0_WDT_LEVEL_INT_EN_Msk = 0x20000
	// Bit WDT_LEVEL_INT_EN.
	RTCCNTL_WDTCONFIG0_WDT_LEVEL_INT_EN = 0x20000
	// Position of WDT_CPU_RESET_LENGTH field.
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Pos = 0xe
	// Bit mask of WDT_CPU_RESET_LENGTH field.
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Msk = 0x1c000
	// 100ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T100ns = 0x0
	// 200ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T200ns = 0x1
	// 300ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T300ns = 0x2
	// 400ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T400ns = 0x3
	// 500ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T500ns = 0x4
	// 800ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T800ns = 0x5
	// 1600ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T1600ns = 0x6
	// 3200ns
	RTCCNTL_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T3200ns = 0x7
	// Position of WDT_SYS_RESET_LENGTH field.
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Pos = 0xb
	// Bit mask of WDT_SYS_RESET_LENGTH field.
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Msk = 0x3800
	// 100ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T100ns = 0x0
	// 200ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T200ns = 0x1
	// 300ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T300ns = 0x2
	// 400ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T400ns = 0x3
	// 500ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T500ns = 0x4
	// 800ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T800ns = 0x5
	// 1600ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T1600ns = 0x6
	// 3200ns
	RTCCNTL_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T3200ns = 0x7
	// Position of WDT_FLASHBOOT_MOD_EN field.
	RTCCNTL_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Pos = 0xa
	// Bit mask of WDT_FLASHBOOT_MOD_EN field.
	RTCCNTL_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Msk = 0x400
	// Bit WDT_FLASHBOOT_MOD_EN.
	RTCCNTL_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN = 0x400
	// Position of WDT_PROCPU_RESET_EN field.
	RTCCNTL_WDTCONFIG0_WDT_PROCPU_RESET_EN_Pos = 0x9
	// Bit mask of WDT_PROCPU_RESET_EN field.
	RTCCNTL_WDTCONFIG0_WDT_PROCPU_RESET_EN_Msk = 0x200
	// Bit WDT_PROCPU_RESET_EN.
	RTCCNTL_WDTCONFIG0_WDT_PROCPU_RESET_EN = 0x200
	// Position of WDT_APPCPU_RESET_EN field.
	RTCCNTL_WDTCONFIG0_WDT_APPCPU_RESET_EN_Pos = 0x8
	// Bit mask of WDT_APPCPU_RESET_EN field.
	RTCCNTL_WDTCONFIG0_WDT_APPCPU_RESET_EN_Msk = 0x100
	// Bit WDT_APPCPU_RESET_EN.
	RTCCNTL_WDTCONFIG0_WDT_APPCPU_RESET_EN = 0x100
	// Position of WDT_PAUSE_IN_SLP field.
	RTCCNTL_WDTCONFIG0_WDT_PAUSE_IN_SLP_Pos = 0x7
	// Bit mask of WDT_PAUSE_IN_SLP field.
	RTCCNTL_WDTCONFIG0_WDT_PAUSE_IN_SLP_Msk = 0x80
	// Bit WDT_PAUSE_IN_SLP.
	RTCCNTL_WDTCONFIG0_WDT_PAUSE_IN_SLP = 0x80

	// WDTCONFIG1: RTC_CNTL_WDTCONFIG1
	// Position of WDT_STG0_HOLD field.
	RTCCNTL_WDTCONFIG1_WDT_STG0_HOLD_Pos = 0x0
	// Bit mask of WDT_STG0_HOLD field.
	RTCCNTL_WDTCONFIG1_WDT_STG0_HOLD_Msk = 0xffffffff

	// WDTCONFIG2: RTC_CNTL_WDTCONFIG2
	// Position of WDT_STG1_HOLD field.
	RTCCNTL_WDTCONFIG2_WDT_STG1_HOLD_Pos = 0x0
	// Bit mask of WDT_STG1_HOLD field.
	RTCCNTL_WDTCONFIG2_WDT_STG1_HOLD_Msk = 0xffffffff

	// WDTCONFIG3: RTC_CNTL_WDTCONFIG3
	// Position of WDT_STG2_HOLD field.
	RTCCNTL_WDTCONFIG3_WDT_STG2_HOLD_Pos = 0x0
	// Bit mask of WDT_STG2_HOLD field.
	RTCCNTL_WDTCONFIG3_WDT_STG2_HOLD_Msk = 0xffffffff

	// WDTCONFIG4: RTC_CNTL_WDTCONFIG4
	// Position of WDT_STG3_HOLD field.
	RTCCNTL_WDTCONFIG4_WDT_STG3_HOLD_Pos = 0x0
	// Bit mask of WDT_STG3_HOLD field.
	RTCCNTL_WDTCONFIG4_WDT_STG3_HOLD_Msk = 0xffffffff

	// WDTFEED: RTC_CNTL_WDTFEED
	// Position of WDT_FEED field.
	RTCCNTL_WDTFEED_WDT_FEED_Pos = 0x1f
	// Bit mask of WDT_FEED field.
	RTCCNTL_WDTFEED_WDT_FEED_Msk = 0x80000000
	// Bit WDT_FEED.
	RTCCNTL_WDTFEED_WDT_FEED = 0x80000000

	// WDTWPROTECT: RTC_CNTL_WDTWPROTECT
	// Position of WDT_WKEY field.
	RTCCNTL_WDTWPROTECT_WDT_WKEY_Pos = 0x0
	// Bit mask of WDT_WKEY field.
	RTCCNTL_WDTWPROTECT_WDT_WKEY_Msk = 0xffffffff

	// TEST_MUX: RTC_CNTL_TEST_MUX
	// Position of DTEST_RTC field.
	RTCCNTL_TEST_MUX_DTEST_RTC_Pos = 0x1e
	// Bit mask of DTEST_RTC field.
	RTCCNTL_TEST_MUX_DTEST_RTC_Msk = 0xc0000000
	// Position of ENT_RTC field.
	RTCCNTL_TEST_MUX_ENT_RTC_Pos = 0x1d
	// Bit mask of ENT_RTC field.
	RTCCNTL_TEST_MUX_ENT_RTC_Msk = 0x20000000
	// Bit ENT_RTC.
	RTCCNTL_TEST_MUX_ENT_RTC = 0x20000000

	// SW_CPU_STALL: RTC_CNTL_SW_CPU_STALL
	// Position of SW_STALL_PROCPU_C1 field.
	RTCCNTL_SW_CPU_STALL_SW_STALL_PROCPU_C1_Pos = 0x1a
	// Bit mask of SW_STALL_PROCPU_C1 field.
	RTCCNTL_SW_CPU_STALL_SW_STALL_PROCPU_C1_Msk = 0xfc000000
	// Position of SW_STALL_APPCPU_C1 field.
	RTCCNTL_SW_CPU_STALL_SW_STALL_APPCPU_C1_Pos = 0x14
	// Bit mask of SW_STALL_APPCPU_C1 field.
	RTCCNTL_SW_CPU_STALL_SW_STALL_APPCPU_C1_Msk = 0x3f00000

	// STORE4: RTC_CNTL_STORE4
	// Position of SCRATCH4 field.
	RTCCNTL_STORE4_SCRATCH4_Pos = 0x0
	// Bit mask of SCRATCH4 field.
	RTCCNTL_STORE4_SCRATCH4_Msk = 0xffffffff

	// STORE5: RTC_CNTL_STORE5
	// Position of SCRATCH5 field.
	RTCCNTL_STORE5_SCRATCH5_Pos = 0x0
	// Bit mask of SCRATCH5 field.
	RTCCNTL_STORE5_SCRATCH5_Msk = 0xffffffff

	// STORE6: RTC_CNTL_STORE6
	// Position of SCRATCH6 field.
	RTCCNTL_STORE6_SCRATCH6_Pos = 0x0
	// Bit mask of SCRATCH6 field.
	RTCCNTL_STORE6_SCRATCH6_Msk = 0xffffffff

	// STORE7: RTC_CNTL_STORE7
	// Position of SCRATCH7 field.
	RTCCNTL_STORE7_SCRATCH7_Pos = 0x0
	// Bit mask of SCRATCH7 field.
	RTCCNTL_STORE7_SCRATCH7_Msk = 0xffffffff

	// DIAG1: RTC_CNTL_DIAG1
	// Position of LOW_POWER_DIAG1 field.
	RTCCNTL_DIAG1_LOW_POWER_DIAG1_Pos = 0x0
	// Bit mask of LOW_POWER_DIAG1 field.
	RTCCNTL_DIAG1_LOW_POWER_DIAG1_Msk = 0xffffffff

	// HOLD_FORCE: RTC_CNTL_HOLD_FORCE
	// Position of X32N_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_X32N_HOLD_FORCE_Pos = 0x11
	// Bit mask of X32N_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_X32N_HOLD_FORCE_Msk = 0x20000
	// Bit X32N_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_X32N_HOLD_FORCE = 0x20000
	// Position of X32P_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_X32P_HOLD_FORCE_Pos = 0x10
	// Bit mask of X32P_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_X32P_HOLD_FORCE_Msk = 0x10000
	// Bit X32P_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_X32P_HOLD_FORCE = 0x10000
	// Position of TOUCH_PAD7_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD7_HOLD_FORCE_Pos = 0xf
	// Bit mask of TOUCH_PAD7_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD7_HOLD_FORCE_Msk = 0x8000
	// Bit TOUCH_PAD7_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD7_HOLD_FORCE = 0x8000
	// Position of TOUCH_PAD6_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD6_HOLD_FORCE_Pos = 0xe
	// Bit mask of TOUCH_PAD6_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD6_HOLD_FORCE_Msk = 0x4000
	// Bit TOUCH_PAD6_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD6_HOLD_FORCE = 0x4000
	// Position of TOUCH_PAD5_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD5_HOLD_FORCE_Pos = 0xd
	// Bit mask of TOUCH_PAD5_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD5_HOLD_FORCE_Msk = 0x2000
	// Bit TOUCH_PAD5_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD5_HOLD_FORCE = 0x2000
	// Position of TOUCH_PAD4_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD4_HOLD_FORCE_Pos = 0xc
	// Bit mask of TOUCH_PAD4_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD4_HOLD_FORCE_Msk = 0x1000
	// Bit TOUCH_PAD4_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD4_HOLD_FORCE = 0x1000
	// Position of TOUCH_PAD3_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD3_HOLD_FORCE_Pos = 0xb
	// Bit mask of TOUCH_PAD3_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD3_HOLD_FORCE_Msk = 0x800
	// Bit TOUCH_PAD3_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD3_HOLD_FORCE = 0x800
	// Position of TOUCH_PAD2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD2_HOLD_FORCE_Pos = 0xa
	// Bit mask of TOUCH_PAD2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD2_HOLD_FORCE_Msk = 0x400
	// Bit TOUCH_PAD2_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD2_HOLD_FORCE = 0x400
	// Position of TOUCH_PAD1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD1_HOLD_FORCE_Pos = 0x9
	// Bit mask of TOUCH_PAD1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD1_HOLD_FORCE_Msk = 0x200
	// Bit TOUCH_PAD1_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD1_HOLD_FORCE = 0x200
	// Position of TOUCH_PAD0_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD0_HOLD_FORCE_Pos = 0x8
	// Bit mask of TOUCH_PAD0_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD0_HOLD_FORCE_Msk = 0x100
	// Bit TOUCH_PAD0_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_TOUCH_PAD0_HOLD_FORCE = 0x100
	// Position of SENSE4_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE4_HOLD_FORCE_Pos = 0x7
	// Bit mask of SENSE4_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE4_HOLD_FORCE_Msk = 0x80
	// Bit SENSE4_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_SENSE4_HOLD_FORCE = 0x80
	// Position of SENSE3_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE3_HOLD_FORCE_Pos = 0x6
	// Bit mask of SENSE3_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE3_HOLD_FORCE_Msk = 0x40
	// Bit SENSE3_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_SENSE3_HOLD_FORCE = 0x40
	// Position of SENSE2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE2_HOLD_FORCE_Pos = 0x5
	// Bit mask of SENSE2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE2_HOLD_FORCE_Msk = 0x20
	// Bit SENSE2_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_SENSE2_HOLD_FORCE = 0x20
	// Position of SENSE1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE1_HOLD_FORCE_Pos = 0x4
	// Bit mask of SENSE1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_SENSE1_HOLD_FORCE_Msk = 0x10
	// Bit SENSE1_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_SENSE1_HOLD_FORCE = 0x10
	// Position of PDAC2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_PDAC2_HOLD_FORCE_Pos = 0x3
	// Bit mask of PDAC2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_PDAC2_HOLD_FORCE_Msk = 0x8
	// Bit PDAC2_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_PDAC2_HOLD_FORCE = 0x8
	// Position of PDAC1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_PDAC1_HOLD_FORCE_Pos = 0x2
	// Bit mask of PDAC1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_PDAC1_HOLD_FORCE_Msk = 0x4
	// Bit PDAC1_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_PDAC1_HOLD_FORCE = 0x4
	// Position of ADC2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_ADC2_HOLD_FORCE_Pos = 0x1
	// Bit mask of ADC2_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_ADC2_HOLD_FORCE_Msk = 0x2
	// Bit ADC2_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_ADC2_HOLD_FORCE = 0x2
	// Position of ADC1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_ADC1_HOLD_FORCE_Pos = 0x0
	// Bit mask of ADC1_HOLD_FORCE field.
	RTCCNTL_HOLD_FORCE_ADC1_HOLD_FORCE_Msk = 0x1
	// Bit ADC1_HOLD_FORCE.
	RTCCNTL_HOLD_FORCE_ADC1_HOLD_FORCE = 0x1

	// EXT_WAKEUP1: RTC_CNTL_EXT_WAKEUP1
	// Position of EXT_WAKEUP1_STATUS_CLR field.
	RTCCNTL_EXT_WAKEUP1_EXT_WAKEUP1_STATUS_CLR_Pos = 0x12
	// Bit mask of EXT_WAKEUP1_STATUS_CLR field.
	RTCCNTL_EXT_WAKEUP1_EXT_WAKEUP1_STATUS_CLR_Msk = 0x40000
	// Bit EXT_WAKEUP1_STATUS_CLR.
	RTCCNTL_EXT_WAKEUP1_EXT_WAKEUP1_STATUS_CLR = 0x40000
	// Position of EXT_WAKEUP1_SEL field.
	RTCCNTL_EXT_WAKEUP1_EXT_WAKEUP1_SEL_Pos = 0x0
	// Bit mask of EXT_WAKEUP1_SEL field.
	RTCCNTL_EXT_WAKEUP1_EXT_WAKEUP1_SEL_Msk = 0x3ffff

	// EXT_WAKEUP1_STATUS: RTC_CNTL_EXT_WAKEUP1_STATUS
	// Position of EXT_WAKEUP1_STATUS field.
	RTCCNTL_EXT_WAKEUP1_STATUS_EXT_WAKEUP1_STATUS_Pos = 0x0
	// Bit mask of EXT_WAKEUP1_STATUS field.
	RTCCNTL_EXT_WAKEUP1_STATUS_EXT_WAKEUP1_STATUS_Msk = 0x3ffff

	// BROWN_OUT: RTC_CNTL_BROWN_OUT
	// Position of BROWN_OUT_DET field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_DET_Pos = 0x1f
	// Bit mask of BROWN_OUT_DET field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_DET_Msk = 0x80000000
	// Bit BROWN_OUT_DET.
	RTCCNTL_BROWN_OUT_BROWN_OUT_DET = 0x80000000
	// Position of BROWN_OUT_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_ENA_Pos = 0x1e
	// Bit mask of BROWN_OUT_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_ENA_Msk = 0x40000000
	// Bit BROWN_OUT_ENA.
	RTCCNTL_BROWN_OUT_BROWN_OUT_ENA = 0x40000000
	// Position of DBROWN_OUT_THRES field.
	RTCCNTL_BROWN_OUT_DBROWN_OUT_THRES_Pos = 0x1b
	// Bit mask of DBROWN_OUT_THRES field.
	RTCCNTL_BROWN_OUT_DBROWN_OUT_THRES_Msk = 0x38000000
	// Position of BROWN_OUT_RST_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_RST_ENA_Pos = 0x1a
	// Bit mask of BROWN_OUT_RST_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_RST_ENA_Msk = 0x4000000
	// Bit BROWN_OUT_RST_ENA.
	RTCCNTL_BROWN_OUT_BROWN_OUT_RST_ENA = 0x4000000
	// Position of BROWN_OUT_RST_WAIT field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_RST_WAIT_Pos = 0x10
	// Bit mask of BROWN_OUT_RST_WAIT field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_RST_WAIT_Msk = 0x3ff0000
	// Position of BROWN_OUT_PD_RF_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_PD_RF_ENA_Pos = 0xf
	// Bit mask of BROWN_OUT_PD_RF_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_PD_RF_ENA_Msk = 0x8000
	// Bit BROWN_OUT_PD_RF_ENA.
	RTCCNTL_BROWN_OUT_BROWN_OUT_PD_RF_ENA = 0x8000
	// Position of BROWN_OUT_CLOSE_FLASH_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_CLOSE_FLASH_ENA_Pos = 0xe
	// Bit mask of BROWN_OUT_CLOSE_FLASH_ENA field.
	RTCCNTL_BROWN_OUT_BROWN_OUT_CLOSE_FLASH_ENA_Msk = 0x4000
	// Bit BROWN_OUT_CLOSE_FLASH_ENA.
	RTCCNTL_BROWN_OUT_BROWN_OUT_CLOSE_FLASH_ENA = 0x4000

	// DATE: RTC_CNTL_DATE
	// Position of CNTL_DATE field.
	RTCCNTL_DATE_CNTL_DATE_Pos = 0x0
	// Bit mask of CNTL_DATE field.
	RTCCNTL_DATE_CNTL_DATE_Msk = 0xfffffff

	// APLL: APLL I2C Register
	// Position of BLOCK field.
	RTCCNTL_APLL_BLOCK_Pos = 0x0
	// Bit mask of BLOCK field.
	RTCCNTL_APLL_BLOCK_Msk = 0xff
	// Position of ADDR field.
	RTCCNTL_APLL_ADDR_Pos = 0x8
	// Bit mask of ADDR field.
	RTCCNTL_APLL_ADDR_Msk = 0xff00
	// Position of DATA field.
	RTCCNTL_APLL_DATA_Pos = 0x10
	// Bit mask of DATA field.
	RTCCNTL_APLL_DATA_Msk = 0xff0000
	// Position of WRITE field.
	RTCCNTL_APLL_WRITE_Pos = 0x18
	// Bit mask of WRITE field.
	RTCCNTL_APLL_WRITE_Msk = 0x1000000
	// Bit WRITE.
	RTCCNTL_APLL_WRITE = 0x1000000
	// Position of BUSY field.
	RTCCNTL_APLL_BUSY_Pos = 0x19
	// Bit mask of BUSY field.
	RTCCNTL_APLL_BUSY_Msk = 0x2000000
	// Bit BUSY.
	RTCCNTL_APLL_BUSY = 0x2000000

	// PLL: PLL I2C Register
	// Position of BLOCK field.
	RTCCNTL_PLL_BLOCK_Pos = 0x0
	// Bit mask of BLOCK field.
	RTCCNTL_PLL_BLOCK_Msk = 0xff
	// Position of ADDR field.
	RTCCNTL_PLL_ADDR_Pos = 0x8
	// Bit mask of ADDR field.
	RTCCNTL_PLL_ADDR_Msk = 0xff00
	// Position of DATA field.
	RTCCNTL_PLL_DATA_Pos = 0x10
	// Bit mask of DATA field.
	RTCCNTL_PLL_DATA_Msk = 0xff0000
	// Position of WRITE field.
	RTCCNTL_PLL_WRITE_Pos = 0x18
	// Bit mask of WRITE field.
	RTCCNTL_PLL_WRITE_Msk = 0x1000000
	// Bit WRITE.
	RTCCNTL_PLL_WRITE = 0x1000000
	// Position of BUSY field.
	RTCCNTL_PLL_BUSY_Pos = 0x19
	// Bit mask of BUSY field.
	RTCCNTL_PLL_BUSY_Msk = 0x2000000
	// Bit BUSY.
	RTCCNTL_PLL_BUSY = 0x2000000
)

// Constants for SENS
const (
	// SAR_READ_CTRL: SENS_SAR_READ_CTRL
	// Position of SAR1_DATA_INV field.
	SENS_SAR_READ_CTRL_SAR1_DATA_INV_Pos = 0x1c
	// Bit mask of SAR1_DATA_INV field.
	SENS_SAR_READ_CTRL_SAR1_DATA_INV_Msk = 0x10000000
	// Bit SAR1_DATA_INV.
	SENS_SAR_READ_CTRL_SAR1_DATA_INV = 0x10000000
	// Position of SAR1_DIG_FORCE field.
	SENS_SAR_READ_CTRL_SAR1_DIG_FORCE_Pos = 0x1b
	// Bit mask of SAR1_DIG_FORCE field.
	SENS_SAR_READ_CTRL_SAR1_DIG_FORCE_Msk = 0x8000000
	// Bit SAR1_DIG_FORCE.
	SENS_SAR_READ_CTRL_SAR1_DIG_FORCE = 0x8000000
	// Position of SAR1_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_NUM_Pos = 0x13
	// Bit mask of SAR1_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_NUM_Msk = 0x7f80000
	// Position of SAR1_CLK_GATED field.
	SENS_SAR_READ_CTRL_SAR1_CLK_GATED_Pos = 0x12
	// Bit mask of SAR1_CLK_GATED field.
	SENS_SAR_READ_CTRL_SAR1_CLK_GATED_Msk = 0x40000
	// Bit SAR1_CLK_GATED.
	SENS_SAR_READ_CTRL_SAR1_CLK_GATED = 0x40000
	// Position of SAR1_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_BIT_Pos = 0x10
	// Bit mask of SAR1_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_BIT_Msk = 0x30000
	// Position of SAR1_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_CYCLE_Pos = 0x8
	// Bit mask of SAR1_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL_SAR1_SAMPLE_CYCLE_Msk = 0xff00
	// Position of SAR1_CLK_DIV field.
	SENS_SAR_READ_CTRL_SAR1_CLK_DIV_Pos = 0x0
	// Bit mask of SAR1_CLK_DIV field.
	SENS_SAR_READ_CTRL_SAR1_CLK_DIV_Msk = 0xff

	// SAR_READ_STATUS1: SENS_SAR_READ_STATUS1
	// Position of SAR1_READER_STATUS field.
	SENS_SAR_READ_STATUS1_SAR1_READER_STATUS_Pos = 0x0
	// Bit mask of SAR1_READER_STATUS field.
	SENS_SAR_READ_STATUS1_SAR1_READER_STATUS_Msk = 0xffffffff

	// SAR_MEAS_WAIT1: SENS_SAR_MEAS_WAIT1
	// Position of SAR_AMP_WAIT2 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT2_Pos = 0x10
	// Bit mask of SAR_AMP_WAIT2 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT2_Msk = 0xffff0000
	// Position of SAR_AMP_WAIT1 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT1_Pos = 0x0
	// Bit mask of SAR_AMP_WAIT1 field.
	SENS_SAR_MEAS_WAIT1_SAR_AMP_WAIT1_Msk = 0xffff

	// SAR_MEAS_WAIT2: SENS_SAR_MEAS_WAIT2
	// Position of SAR2_RSTB_WAIT field.
	SENS_SAR_MEAS_WAIT2_SAR2_RSTB_WAIT_Pos = 0x14
	// Bit mask of SAR2_RSTB_WAIT field.
	SENS_SAR_MEAS_WAIT2_SAR2_RSTB_WAIT_Msk = 0xff00000
	// Position of FORCE_XPD_SAR field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_SAR_Pos = 0x12
	// Bit mask of FORCE_XPD_SAR field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_SAR_Msk = 0xc0000
	// Position of FORCE_XPD_AMP field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_AMP_Pos = 0x10
	// Bit mask of FORCE_XPD_AMP field.
	SENS_SAR_MEAS_WAIT2_FORCE_XPD_AMP_Msk = 0x30000
	// Position of SAR_AMP_WAIT3 field.
	SENS_SAR_MEAS_WAIT2_SAR_AMP_WAIT3_Pos = 0x0
	// Bit mask of SAR_AMP_WAIT3 field.
	SENS_SAR_MEAS_WAIT2_SAR_AMP_WAIT3_Msk = 0xffff

	// SAR_MEAS_CTRL: SENS_SAR_MEAS_CTRL
	// Position of SAR2_XPD_WAIT field.
	SENS_SAR_MEAS_CTRL_SAR2_XPD_WAIT_Pos = 0x18
	// Bit mask of SAR2_XPD_WAIT field.
	SENS_SAR_MEAS_CTRL_SAR2_XPD_WAIT_Msk = 0xff000000
	// Position of SAR_RSTB_FSM field.
	SENS_SAR_MEAS_CTRL_SAR_RSTB_FSM_Pos = 0x14
	// Bit mask of SAR_RSTB_FSM field.
	SENS_SAR_MEAS_CTRL_SAR_RSTB_FSM_Msk = 0xf00000
	// Position of XPD_SAR_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_FSM_Pos = 0x10
	// Bit mask of XPD_SAR_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_FSM_Msk = 0xf0000
	// Position of AMP_SHORT_REF_GND_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM_Pos = 0xc
	// Bit mask of AMP_SHORT_REF_GND_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_GND_FSM_Msk = 0xf000
	// Position of AMP_SHORT_REF_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_FSM_Pos = 0x8
	// Bit mask of AMP_SHORT_REF_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_SHORT_REF_FSM_Msk = 0xf00
	// Position of AMP_RST_FB_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_RST_FB_FSM_Pos = 0x4
	// Bit mask of AMP_RST_FB_FSM field.
	SENS_SAR_MEAS_CTRL_AMP_RST_FB_FSM_Msk = 0xf0
	// Position of XPD_SAR_AMP_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_AMP_FSM_Pos = 0x0
	// Bit mask of XPD_SAR_AMP_FSM field.
	SENS_SAR_MEAS_CTRL_XPD_SAR_AMP_FSM_Msk = 0xf

	// SAR_READ_STATUS2: SENS_SAR_READ_STATUS2
	// Position of SAR2_READER_STATUS field.
	SENS_SAR_READ_STATUS2_SAR2_READER_STATUS_Pos = 0x0
	// Bit mask of SAR2_READER_STATUS field.
	SENS_SAR_READ_STATUS2_SAR2_READER_STATUS_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC0: SENS_ULP_CP_SLEEP_CYC0
	// Position of SLEEP_CYCLES_S0 field.
	SENS_ULP_CP_SLEEP_CYC0_SLEEP_CYCLES_S0_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S0 field.
	SENS_ULP_CP_SLEEP_CYC0_SLEEP_CYCLES_S0_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC1: SENS_ULP_CP_SLEEP_CYC1
	// Position of SLEEP_CYCLES_S1 field.
	SENS_ULP_CP_SLEEP_CYC1_SLEEP_CYCLES_S1_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S1 field.
	SENS_ULP_CP_SLEEP_CYC1_SLEEP_CYCLES_S1_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC2: SENS_ULP_CP_SLEEP_CYC2
	// Position of SLEEP_CYCLES_S2 field.
	SENS_ULP_CP_SLEEP_CYC2_SLEEP_CYCLES_S2_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S2 field.
	SENS_ULP_CP_SLEEP_CYC2_SLEEP_CYCLES_S2_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC3: SENS_ULP_CP_SLEEP_CYC3
	// Position of SLEEP_CYCLES_S3 field.
	SENS_ULP_CP_SLEEP_CYC3_SLEEP_CYCLES_S3_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S3 field.
	SENS_ULP_CP_SLEEP_CYC3_SLEEP_CYCLES_S3_Msk = 0xffffffff

	// ULP_CP_SLEEP_CYC4: SENS_ULP_CP_SLEEP_CYC4
	// Position of SLEEP_CYCLES_S4 field.
	SENS_ULP_CP_SLEEP_CYC4_SLEEP_CYCLES_S4_Pos = 0x0
	// Bit mask of SLEEP_CYCLES_S4 field.
	SENS_ULP_CP_SLEEP_CYC4_SLEEP_CYCLES_S4_Msk = 0xffffffff

	// SAR_START_FORCE: SENS_SAR_START_FORCE
	// Position of SAR2_PWDET_EN field.
	SENS_SAR_START_FORCE_SAR2_PWDET_EN_Pos = 0x18
	// Bit mask of SAR2_PWDET_EN field.
	SENS_SAR_START_FORCE_SAR2_PWDET_EN_Msk = 0x1000000
	// Bit SAR2_PWDET_EN.
	SENS_SAR_START_FORCE_SAR2_PWDET_EN = 0x1000000
	// Position of SAR1_STOP field.
	SENS_SAR_START_FORCE_SAR1_STOP_Pos = 0x17
	// Bit mask of SAR1_STOP field.
	SENS_SAR_START_FORCE_SAR1_STOP_Msk = 0x800000
	// Bit SAR1_STOP.
	SENS_SAR_START_FORCE_SAR1_STOP = 0x800000
	// Position of SAR2_STOP field.
	SENS_SAR_START_FORCE_SAR2_STOP_Pos = 0x16
	// Bit mask of SAR2_STOP field.
	SENS_SAR_START_FORCE_SAR2_STOP_Msk = 0x400000
	// Bit SAR2_STOP.
	SENS_SAR_START_FORCE_SAR2_STOP = 0x400000
	// Position of PC_INIT field.
	SENS_SAR_START_FORCE_PC_INIT_Pos = 0xb
	// Bit mask of PC_INIT field.
	SENS_SAR_START_FORCE_PC_INIT_Msk = 0x3ff800
	// Position of SARCLK_EN field.
	SENS_SAR_START_FORCE_SARCLK_EN_Pos = 0xa
	// Bit mask of SARCLK_EN field.
	SENS_SAR_START_FORCE_SARCLK_EN_Msk = 0x400
	// Bit SARCLK_EN.
	SENS_SAR_START_FORCE_SARCLK_EN = 0x400
	// Position of ULP_CP_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_START_TOP_Pos = 0x9
	// Bit mask of ULP_CP_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_START_TOP_Msk = 0x200
	// Bit ULP_CP_START_TOP.
	SENS_SAR_START_FORCE_ULP_CP_START_TOP = 0x200
	// Position of ULP_CP_FORCE_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_FORCE_START_TOP_Pos = 0x8
	// Bit mask of ULP_CP_FORCE_START_TOP field.
	SENS_SAR_START_FORCE_ULP_CP_FORCE_START_TOP_Msk = 0x100
	// Bit ULP_CP_FORCE_START_TOP.
	SENS_SAR_START_FORCE_ULP_CP_FORCE_START_TOP = 0x100
	// Position of SAR2_PWDET_CCT field.
	SENS_SAR_START_FORCE_SAR2_PWDET_CCT_Pos = 0x5
	// Bit mask of SAR2_PWDET_CCT field.
	SENS_SAR_START_FORCE_SAR2_PWDET_CCT_Msk = 0xe0
	// Position of SAR2_EN_TEST field.
	SENS_SAR_START_FORCE_SAR2_EN_TEST_Pos = 0x4
	// Bit mask of SAR2_EN_TEST field.
	SENS_SAR_START_FORCE_SAR2_EN_TEST_Msk = 0x10
	// Bit SAR2_EN_TEST.
	SENS_SAR_START_FORCE_SAR2_EN_TEST = 0x10
	// Position of SAR2_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR2_BIT_WIDTH_Pos = 0x2
	// Bit mask of SAR2_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR2_BIT_WIDTH_Msk = 0xc
	// Position of SAR1_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR1_BIT_WIDTH_Pos = 0x0
	// Bit mask of SAR1_BIT_WIDTH field.
	SENS_SAR_START_FORCE_SAR1_BIT_WIDTH_Msk = 0x3

	// SAR_MEM_WR_CTRL: SENS_SAR_MEM_WR_CTRL
	// Position of RTC_MEM_WR_OFFST_CLR field.
	SENS_SAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR_Pos = 0x16
	// Bit mask of RTC_MEM_WR_OFFST_CLR field.
	SENS_SAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR_Msk = 0x400000
	// Bit RTC_MEM_WR_OFFST_CLR.
	SENS_SAR_MEM_WR_CTRL_RTC_MEM_WR_OFFST_CLR = 0x400000
	// Position of MEM_WR_ADDR_SIZE field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE_Pos = 0xb
	// Bit mask of MEM_WR_ADDR_SIZE field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_SIZE_Msk = 0x3ff800
	// Position of MEM_WR_ADDR_INIT field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT_Pos = 0x0
	// Bit mask of MEM_WR_ADDR_INIT field.
	SENS_SAR_MEM_WR_CTRL_MEM_WR_ADDR_INIT_Msk = 0x7ff

	// SAR_ATTEN1: SENS_SAR_ATTEN1
	// Position of SAR1_ATTEN field.
	SENS_SAR_ATTEN1_SAR1_ATTEN_Pos = 0x0
	// Bit mask of SAR1_ATTEN field.
	SENS_SAR_ATTEN1_SAR1_ATTEN_Msk = 0xffffffff

	// SAR_ATTEN2: SENS_SAR_ATTEN2
	// Position of SAR2_ATTEN field.
	SENS_SAR_ATTEN2_SAR2_ATTEN_Pos = 0x0
	// Bit mask of SAR2_ATTEN field.
	SENS_SAR_ATTEN2_SAR2_ATTEN_Msk = 0xffffffff

	// SAR_SLAVE_ADDR1: SENS_SAR_SLAVE_ADDR1
	// Position of MEAS_STATUS field.
	SENS_SAR_SLAVE_ADDR1_MEAS_STATUS_Pos = 0x16
	// Bit mask of MEAS_STATUS field.
	SENS_SAR_SLAVE_ADDR1_MEAS_STATUS_Msk = 0x3fc00000
	// Position of I2C_SLAVE_ADDR0 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR0 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR0_Msk = 0x3ff800
	// Position of I2C_SLAVE_ADDR1 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR1 field.
	SENS_SAR_SLAVE_ADDR1_I2C_SLAVE_ADDR1_Msk = 0x7ff

	// SAR_SLAVE_ADDR2: SENS_SAR_SLAVE_ADDR2
	// Position of I2C_SLAVE_ADDR2 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR2 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR2_Msk = 0x3ff800
	// Position of I2C_SLAVE_ADDR3 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR3 field.
	SENS_SAR_SLAVE_ADDR2_I2C_SLAVE_ADDR3_Msk = 0x7ff

	// SAR_SLAVE_ADDR3: SENS_SAR_SLAVE_ADDR3
	// Position of TSENS_RDY_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_RDY_OUT_Pos = 0x1e
	// Bit mask of TSENS_RDY_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_RDY_OUT_Msk = 0x40000000
	// Bit TSENS_RDY_OUT.
	SENS_SAR_SLAVE_ADDR3_TSENS_RDY_OUT = 0x40000000
	// Position of TSENS_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_OUT_Pos = 0x16
	// Bit mask of TSENS_OUT field.
	SENS_SAR_SLAVE_ADDR3_TSENS_OUT_Msk = 0x3fc00000
	// Position of I2C_SLAVE_ADDR4 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR4 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR4_Msk = 0x3ff800
	// Position of I2C_SLAVE_ADDR5 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR5 field.
	SENS_SAR_SLAVE_ADDR3_I2C_SLAVE_ADDR5_Msk = 0x7ff

	// SAR_SLAVE_ADDR4: SENS_SAR_SLAVE_ADDR4
	// Position of I2C_DONE field.
	SENS_SAR_SLAVE_ADDR4_I2C_DONE_Pos = 0x1e
	// Bit mask of I2C_DONE field.
	SENS_SAR_SLAVE_ADDR4_I2C_DONE_Msk = 0x40000000
	// Bit I2C_DONE.
	SENS_SAR_SLAVE_ADDR4_I2C_DONE = 0x40000000
	// Position of I2C_RDATA field.
	SENS_SAR_SLAVE_ADDR4_I2C_RDATA_Pos = 0x16
	// Bit mask of I2C_RDATA field.
	SENS_SAR_SLAVE_ADDR4_I2C_RDATA_Msk = 0x3fc00000
	// Position of I2C_SLAVE_ADDR6 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6_Pos = 0xb
	// Bit mask of I2C_SLAVE_ADDR6 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR6_Msk = 0x3ff800
	// Position of I2C_SLAVE_ADDR7 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7_Pos = 0x0
	// Bit mask of I2C_SLAVE_ADDR7 field.
	SENS_SAR_SLAVE_ADDR4_I2C_SLAVE_ADDR7_Msk = 0x7ff

	// SAR_TSENS_CTRL: SENS_SAR_TSENS_CTRL
	// Position of TSENS_DUMP_OUT field.
	SENS_SAR_TSENS_CTRL_TSENS_DUMP_OUT_Pos = 0x1a
	// Bit mask of TSENS_DUMP_OUT field.
	SENS_SAR_TSENS_CTRL_TSENS_DUMP_OUT_Msk = 0x4000000
	// Bit TSENS_DUMP_OUT.
	SENS_SAR_TSENS_CTRL_TSENS_DUMP_OUT = 0x4000000
	// Position of TSENS_POWER_UP_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_FORCE_Pos = 0x19
	// Bit mask of TSENS_POWER_UP_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_FORCE_Msk = 0x2000000
	// Bit TSENS_POWER_UP_FORCE.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_FORCE = 0x2000000
	// Position of TSENS_POWER_UP field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_Pos = 0x18
	// Bit mask of TSENS_POWER_UP field.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP_Msk = 0x1000000
	// Bit TSENS_POWER_UP.
	SENS_SAR_TSENS_CTRL_TSENS_POWER_UP = 0x1000000
	// Position of TSENS_CLK_DIV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_DIV_Pos = 0x10
	// Bit mask of TSENS_CLK_DIV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_DIV_Msk = 0xff0000
	// Position of TSENS_IN_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_IN_INV_Pos = 0xf
	// Bit mask of TSENS_IN_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_IN_INV_Msk = 0x8000
	// Bit TSENS_IN_INV.
	SENS_SAR_TSENS_CTRL_TSENS_IN_INV = 0x8000
	// Position of TSENS_CLK_GATED field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_GATED_Pos = 0xe
	// Bit mask of TSENS_CLK_GATED field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_GATED_Msk = 0x4000
	// Bit TSENS_CLK_GATED.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_GATED = 0x4000
	// Position of TSENS_CLK_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_INV_Pos = 0xd
	// Bit mask of TSENS_CLK_INV field.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_INV_Msk = 0x2000
	// Bit TSENS_CLK_INV.
	SENS_SAR_TSENS_CTRL_TSENS_CLK_INV = 0x2000
	// Position of TSENS_XPD_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_FORCE_Pos = 0xc
	// Bit mask of TSENS_XPD_FORCE field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_FORCE_Msk = 0x1000
	// Bit TSENS_XPD_FORCE.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_FORCE = 0x1000
	// Position of TSENS_XPD_WAIT field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_WAIT_Pos = 0x0
	// Bit mask of TSENS_XPD_WAIT field.
	SENS_SAR_TSENS_CTRL_TSENS_XPD_WAIT_Msk = 0xfff

	// SAR_I2C_CTRL: SENS_SAR_I2C_CTRL
	// Position of SAR_I2C_START_FORCE field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_FORCE_Pos = 0x1d
	// Bit mask of SAR_I2C_START_FORCE field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_FORCE_Msk = 0x20000000
	// Bit SAR_I2C_START_FORCE.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_FORCE = 0x20000000
	// Position of SAR_I2C_START field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_Pos = 0x1c
	// Bit mask of SAR_I2C_START field.
	SENS_SAR_I2C_CTRL_SAR_I2C_START_Msk = 0x10000000
	// Bit SAR_I2C_START.
	SENS_SAR_I2C_CTRL_SAR_I2C_START = 0x10000000
	// Position of SAR_I2C_CTRL field.
	SENS_SAR_I2C_CTRL_SAR_I2C_CTRL_Pos = 0x0
	// Bit mask of SAR_I2C_CTRL field.
	SENS_SAR_I2C_CTRL_SAR_I2C_CTRL_Msk = 0xfffffff

	// SAR_MEAS_START1: SENS_SAR_MEAS_START1
	// Position of SAR1_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_FORCE_Pos = 0x1f
	// Bit mask of SAR1_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_FORCE_Msk = 0x80000000
	// Bit SAR1_EN_PAD_FORCE.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_FORCE = 0x80000000
	// Position of SAR1_EN_PAD field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_Pos = 0x13
	// Bit mask of SAR1_EN_PAD field.
	SENS_SAR_MEAS_START1_SAR1_EN_PAD_Msk = 0x7ff80000
	// Position of MEAS1_START_FORCE field.
	SENS_SAR_MEAS_START1_MEAS1_START_FORCE_Pos = 0x12
	// Bit mask of MEAS1_START_FORCE field.
	SENS_SAR_MEAS_START1_MEAS1_START_FORCE_Msk = 0x40000
	// Bit MEAS1_START_FORCE.
	SENS_SAR_MEAS_START1_MEAS1_START_FORCE = 0x40000
	// Position of MEAS1_START_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_START_SAR_Pos = 0x11
	// Bit mask of MEAS1_START_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_START_SAR_Msk = 0x20000
	// Bit MEAS1_START_SAR.
	SENS_SAR_MEAS_START1_MEAS1_START_SAR = 0x20000
	// Position of MEAS1_DONE_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DONE_SAR_Pos = 0x10
	// Bit mask of MEAS1_DONE_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DONE_SAR_Msk = 0x10000
	// Bit MEAS1_DONE_SAR.
	SENS_SAR_MEAS_START1_MEAS1_DONE_SAR = 0x10000
	// Position of MEAS1_DATA_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DATA_SAR_Pos = 0x0
	// Bit mask of MEAS1_DATA_SAR field.
	SENS_SAR_MEAS_START1_MEAS1_DATA_SAR_Msk = 0xffff

	// SAR_TOUCH_CTRL1: SENS_SAR_TOUCH_CTRL1
	// Position of HALL_PHASE_FORCE field.
	SENS_SAR_TOUCH_CTRL1_HALL_PHASE_FORCE_Pos = 0x1b
	// Bit mask of HALL_PHASE_FORCE field.
	SENS_SAR_TOUCH_CTRL1_HALL_PHASE_FORCE_Msk = 0x8000000
	// Bit HALL_PHASE_FORCE.
	SENS_SAR_TOUCH_CTRL1_HALL_PHASE_FORCE = 0x8000000
	// Position of XPD_HALL_FORCE field.
	SENS_SAR_TOUCH_CTRL1_XPD_HALL_FORCE_Pos = 0x1a
	// Bit mask of XPD_HALL_FORCE field.
	SENS_SAR_TOUCH_CTRL1_XPD_HALL_FORCE_Msk = 0x4000000
	// Bit XPD_HALL_FORCE.
	SENS_SAR_TOUCH_CTRL1_XPD_HALL_FORCE = 0x4000000
	// Position of TOUCH_OUT_1EN field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_1EN_Pos = 0x19
	// Bit mask of TOUCH_OUT_1EN field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_1EN_Msk = 0x2000000
	// Bit TOUCH_OUT_1EN.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_1EN = 0x2000000
	// Position of TOUCH_OUT_SEL field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_SEL_Pos = 0x18
	// Bit mask of TOUCH_OUT_SEL field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_SEL_Msk = 0x1000000
	// Bit TOUCH_OUT_SEL.
	SENS_SAR_TOUCH_CTRL1_TOUCH_OUT_SEL = 0x1000000
	// Position of TOUCH_XPD_WAIT field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_XPD_WAIT_Pos = 0x10
	// Bit mask of TOUCH_XPD_WAIT field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_XPD_WAIT_Msk = 0xff0000
	// Position of TOUCH_MEAS_DELAY field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY_Pos = 0x0
	// Bit mask of TOUCH_MEAS_DELAY field.
	SENS_SAR_TOUCH_CTRL1_TOUCH_MEAS_DELAY_Msk = 0xffff

	// SAR_TOUCH_THRES1: SENS_SAR_TOUCH_THRES1
	// Position of TOUCH_OUT_TH0 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH0_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH0 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH0_Msk = 0xffff0000
	// Position of TOUCH_OUT_TH1 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH1_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH1 field.
	SENS_SAR_TOUCH_THRES1_TOUCH_OUT_TH1_Msk = 0xffff

	// SAR_TOUCH_THRES2: SENS_SAR_TOUCH_THRES2
	// Position of TOUCH_OUT_TH2 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH2_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH2 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH2_Msk = 0xffff0000
	// Position of TOUCH_OUT_TH3 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH3_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH3 field.
	SENS_SAR_TOUCH_THRES2_TOUCH_OUT_TH3_Msk = 0xffff

	// SAR_TOUCH_THRES3: SENS_SAR_TOUCH_THRES3
	// Position of TOUCH_OUT_TH4 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH4_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH4 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH4_Msk = 0xffff0000
	// Position of TOUCH_OUT_TH5 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH5_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH5 field.
	SENS_SAR_TOUCH_THRES3_TOUCH_OUT_TH5_Msk = 0xffff

	// SAR_TOUCH_THRES4: SENS_SAR_TOUCH_THRES4
	// Position of TOUCH_OUT_TH6 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH6_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH6 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH6_Msk = 0xffff0000
	// Position of TOUCH_OUT_TH7 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH7_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH7 field.
	SENS_SAR_TOUCH_THRES4_TOUCH_OUT_TH7_Msk = 0xffff

	// SAR_TOUCH_THRES5: SENS_SAR_TOUCH_THRES5
	// Position of TOUCH_OUT_TH8 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH8_Pos = 0x10
	// Bit mask of TOUCH_OUT_TH8 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH8_Msk = 0xffff0000
	// Position of TOUCH_OUT_TH9 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH9_Pos = 0x0
	// Bit mask of TOUCH_OUT_TH9 field.
	SENS_SAR_TOUCH_THRES5_TOUCH_OUT_TH9_Msk = 0xffff

	// SAR_TOUCH_OUT1: SENS_SAR_TOUCH_OUT1
	// Position of TOUCH_MEAS_OUT0 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT0_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT0 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT0_Msk = 0xffff0000
	// Position of TOUCH_MEAS_OUT1 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT1_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT1 field.
	SENS_SAR_TOUCH_OUT1_TOUCH_MEAS_OUT1_Msk = 0xffff

	// SAR_TOUCH_OUT2: SENS_SAR_TOUCH_OUT2
	// Position of TOUCH_MEAS_OUT2 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT2_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT2 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT2_Msk = 0xffff0000
	// Position of TOUCH_MEAS_OUT3 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT3_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT3 field.
	SENS_SAR_TOUCH_OUT2_TOUCH_MEAS_OUT3_Msk = 0xffff

	// SAR_TOUCH_OUT3: SENS_SAR_TOUCH_OUT3
	// Position of TOUCH_MEAS_OUT4 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT4_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT4 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT4_Msk = 0xffff0000
	// Position of TOUCH_MEAS_OUT5 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT5_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT5 field.
	SENS_SAR_TOUCH_OUT3_TOUCH_MEAS_OUT5_Msk = 0xffff

	// SAR_TOUCH_OUT4: SENS_SAR_TOUCH_OUT4
	// Position of TOUCH_MEAS_OUT6 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT6_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT6 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT6_Msk = 0xffff0000
	// Position of TOUCH_MEAS_OUT7 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT7_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT7 field.
	SENS_SAR_TOUCH_OUT4_TOUCH_MEAS_OUT7_Msk = 0xffff

	// SAR_TOUCH_OUT5: SENS_SAR_TOUCH_OUT5
	// Position of TOUCH_MEAS_OUT8 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT8_Pos = 0x10
	// Bit mask of TOUCH_MEAS_OUT8 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT8_Msk = 0xffff0000
	// Position of TOUCH_MEAS_OUT9 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT9_Pos = 0x0
	// Bit mask of TOUCH_MEAS_OUT9 field.
	SENS_SAR_TOUCH_OUT5_TOUCH_MEAS_OUT9_Msk = 0xffff

	// SAR_TOUCH_CTRL2: SENS_SAR_TOUCH_CTRL2
	// Position of TOUCH_MEAS_EN_CLR field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR_Pos = 0x1e
	// Bit mask of TOUCH_MEAS_EN_CLR field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR_Msk = 0x40000000
	// Bit TOUCH_MEAS_EN_CLR.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_CLR = 0x40000000
	// Position of TOUCH_SLEEP_CYCLES field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES_Pos = 0xe
	// Bit mask of TOUCH_SLEEP_CYCLES field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_SLEEP_CYCLES_Msk = 0x3fffc000
	// Position of TOUCH_START_FORCE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FORCE_Pos = 0xd
	// Bit mask of TOUCH_START_FORCE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FORCE_Msk = 0x2000
	// Bit TOUCH_START_FORCE.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FORCE = 0x2000
	// Position of TOUCH_START_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_EN_Pos = 0xc
	// Bit mask of TOUCH_START_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_EN_Msk = 0x1000
	// Bit TOUCH_START_EN.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_EN = 0x1000
	// Position of TOUCH_START_FSM_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FSM_EN_Pos = 0xb
	// Bit mask of TOUCH_START_FSM_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FSM_EN_Msk = 0x800
	// Bit TOUCH_START_FSM_EN.
	SENS_SAR_TOUCH_CTRL2_TOUCH_START_FSM_EN = 0x800
	// Position of TOUCH_MEAS_DONE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_DONE_Pos = 0xa
	// Bit mask of TOUCH_MEAS_DONE field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_DONE_Msk = 0x400
	// Bit TOUCH_MEAS_DONE.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_DONE = 0x400
	// Position of TOUCH_MEAS_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_Pos = 0x0
	// Bit mask of TOUCH_MEAS_EN field.
	SENS_SAR_TOUCH_CTRL2_TOUCH_MEAS_EN_Msk = 0x3ff

	// SAR_TOUCH_ENABLE: SENS_SAR_TOUCH_ENABLE
	// Position of TOUCH_PAD_OUTEN1 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1_Pos = 0x14
	// Bit mask of TOUCH_PAD_OUTEN1 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN1_Msk = 0x3ff00000
	// Position of TOUCH_PAD_OUTEN2 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2_Pos = 0xa
	// Bit mask of TOUCH_PAD_OUTEN2 field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_OUTEN2_Msk = 0xffc00
	// Position of TOUCH_PAD_WORKEN field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN_Pos = 0x0
	// Bit mask of TOUCH_PAD_WORKEN field.
	SENS_SAR_TOUCH_ENABLE_TOUCH_PAD_WORKEN_Msk = 0x3ff

	// SAR_READ_CTRL2: SENS_SAR_READ_CTRL2
	// Position of SAR2_DATA_INV field.
	SENS_SAR_READ_CTRL2_SAR2_DATA_INV_Pos = 0x1d
	// Bit mask of SAR2_DATA_INV field.
	SENS_SAR_READ_CTRL2_SAR2_DATA_INV_Msk = 0x20000000
	// Bit SAR2_DATA_INV.
	SENS_SAR_READ_CTRL2_SAR2_DATA_INV = 0x20000000
	// Position of SAR2_DIG_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_DIG_FORCE_Pos = 0x1c
	// Bit mask of SAR2_DIG_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_DIG_FORCE_Msk = 0x10000000
	// Bit SAR2_DIG_FORCE.
	SENS_SAR_READ_CTRL2_SAR2_DIG_FORCE = 0x10000000
	// Position of SAR2_PWDET_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_PWDET_FORCE_Pos = 0x1b
	// Bit mask of SAR2_PWDET_FORCE field.
	SENS_SAR_READ_CTRL2_SAR2_PWDET_FORCE_Msk = 0x8000000
	// Bit SAR2_PWDET_FORCE.
	SENS_SAR_READ_CTRL2_SAR2_PWDET_FORCE = 0x8000000
	// Position of SAR2_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_NUM_Pos = 0x13
	// Bit mask of SAR2_SAMPLE_NUM field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_NUM_Msk = 0x7f80000
	// Position of SAR2_CLK_GATED field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_GATED_Pos = 0x12
	// Bit mask of SAR2_CLK_GATED field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_GATED_Msk = 0x40000
	// Bit SAR2_CLK_GATED.
	SENS_SAR_READ_CTRL2_SAR2_CLK_GATED = 0x40000
	// Position of SAR2_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_BIT_Pos = 0x10
	// Bit mask of SAR2_SAMPLE_BIT field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_BIT_Msk = 0x30000
	// Position of SAR2_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_CYCLE_Pos = 0x8
	// Bit mask of SAR2_SAMPLE_CYCLE field.
	SENS_SAR_READ_CTRL2_SAR2_SAMPLE_CYCLE_Msk = 0xff00
	// Position of SAR2_CLK_DIV field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_DIV_Pos = 0x0
	// Bit mask of SAR2_CLK_DIV field.
	SENS_SAR_READ_CTRL2_SAR2_CLK_DIV_Msk = 0xff

	// SAR_MEAS_START2: SENS_SAR_MEAS_START2
	// Position of SAR2_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_FORCE_Pos = 0x1f
	// Bit mask of SAR2_EN_PAD_FORCE field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_FORCE_Msk = 0x80000000
	// Bit SAR2_EN_PAD_FORCE.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_FORCE = 0x80000000
	// Position of SAR2_EN_PAD field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_Pos = 0x13
	// Bit mask of SAR2_EN_PAD field.
	SENS_SAR_MEAS_START2_SAR2_EN_PAD_Msk = 0x7ff80000
	// Position of MEAS2_START_FORCE field.
	SENS_SAR_MEAS_START2_MEAS2_START_FORCE_Pos = 0x12
	// Bit mask of MEAS2_START_FORCE field.
	SENS_SAR_MEAS_START2_MEAS2_START_FORCE_Msk = 0x40000
	// Bit MEAS2_START_FORCE.
	SENS_SAR_MEAS_START2_MEAS2_START_FORCE = 0x40000
	// Position of MEAS2_START_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_START_SAR_Pos = 0x11
	// Bit mask of MEAS2_START_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_START_SAR_Msk = 0x20000
	// Bit MEAS2_START_SAR.
	SENS_SAR_MEAS_START2_MEAS2_START_SAR = 0x20000
	// Position of MEAS2_DONE_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DONE_SAR_Pos = 0x10
	// Bit mask of MEAS2_DONE_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DONE_SAR_Msk = 0x10000
	// Bit MEAS2_DONE_SAR.
	SENS_SAR_MEAS_START2_MEAS2_DONE_SAR = 0x10000
	// Position of MEAS2_DATA_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DATA_SAR_Pos = 0x0
	// Bit mask of MEAS2_DATA_SAR field.
	SENS_SAR_MEAS_START2_MEAS2_DATA_SAR_Msk = 0xffff

	// SAR_DAC_CTRL1: SENS_SAR_DAC_CTRL1
	// Position of DAC_CLK_INV field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_INV_Pos = 0x19
	// Bit mask of DAC_CLK_INV field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_INV_Msk = 0x2000000
	// Bit DAC_CLK_INV.
	SENS_SAR_DAC_CTRL1_DAC_CLK_INV = 0x2000000
	// Position of DAC_CLK_FORCE_HIGH field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH_Pos = 0x18
	// Bit mask of DAC_CLK_FORCE_HIGH field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH_Msk = 0x1000000
	// Bit DAC_CLK_FORCE_HIGH.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_HIGH = 0x1000000
	// Position of DAC_CLK_FORCE_LOW field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_LOW_Pos = 0x17
	// Bit mask of DAC_CLK_FORCE_LOW field.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_LOW_Msk = 0x800000
	// Bit DAC_CLK_FORCE_LOW.
	SENS_SAR_DAC_CTRL1_DAC_CLK_FORCE_LOW = 0x800000
	// Position of DAC_DIG_FORCE field.
	SENS_SAR_DAC_CTRL1_DAC_DIG_FORCE_Pos = 0x16
	// Bit mask of DAC_DIG_FORCE field.
	SENS_SAR_DAC_CTRL1_DAC_DIG_FORCE_Msk = 0x400000
	// Bit DAC_DIG_FORCE.
	SENS_SAR_DAC_CTRL1_DAC_DIG_FORCE = 0x400000
	// Position of DEBUG_BIT_SEL field.
	SENS_SAR_DAC_CTRL1_DEBUG_BIT_SEL_Pos = 0x11
	// Bit mask of DEBUG_BIT_SEL field.
	SENS_SAR_DAC_CTRL1_DEBUG_BIT_SEL_Msk = 0x3e0000
	// Position of SW_TONE_EN field.
	SENS_SAR_DAC_CTRL1_SW_TONE_EN_Pos = 0x10
	// Bit mask of SW_TONE_EN field.
	SENS_SAR_DAC_CTRL1_SW_TONE_EN_Msk = 0x10000
	// Bit SW_TONE_EN.
	SENS_SAR_DAC_CTRL1_SW_TONE_EN = 0x10000
	// Position of SW_FSTEP field.
	SENS_SAR_DAC_CTRL1_SW_FSTEP_Pos = 0x0
	// Bit mask of SW_FSTEP field.
	SENS_SAR_DAC_CTRL1_SW_FSTEP_Msk = 0xffff

	// SAR_DAC_CTRL2: SENS_SAR_DAC_CTRL2
	// Position of DAC_CW_EN2 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN2_Pos = 0x19
	// Bit mask of DAC_CW_EN2 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN2_Msk = 0x2000000
	// Bit DAC_CW_EN2.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN2 = 0x2000000
	// Position of DAC_CW_EN1 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN1_Pos = 0x18
	// Bit mask of DAC_CW_EN1 field.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN1_Msk = 0x1000000
	// Bit DAC_CW_EN1.
	SENS_SAR_DAC_CTRL2_DAC_CW_EN1 = 0x1000000
	// Position of DAC_INV2 field.
	SENS_SAR_DAC_CTRL2_DAC_INV2_Pos = 0x16
	// Bit mask of DAC_INV2 field.
	SENS_SAR_DAC_CTRL2_DAC_INV2_Msk = 0xc00000
	// Position of DAC_INV1 field.
	SENS_SAR_DAC_CTRL2_DAC_INV1_Pos = 0x14
	// Bit mask of DAC_INV1 field.
	SENS_SAR_DAC_CTRL2_DAC_INV1_Msk = 0x300000
	// Position of DAC_SCALE2 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE2_Pos = 0x12
	// Bit mask of DAC_SCALE2 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE2_Msk = 0xc0000
	// Position of DAC_SCALE1 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE1_Pos = 0x10
	// Bit mask of DAC_SCALE1 field.
	SENS_SAR_DAC_CTRL2_DAC_SCALE1_Msk = 0x30000
	// Position of DAC_DC2 field.
	SENS_SAR_DAC_CTRL2_DAC_DC2_Pos = 0x8
	// Bit mask of DAC_DC2 field.
	SENS_SAR_DAC_CTRL2_DAC_DC2_Msk = 0xff00
	// Position of DAC_DC1 field.
	SENS_SAR_DAC_CTRL2_DAC_DC1_Pos = 0x0
	// Bit mask of DAC_DC1 field.
	SENS_SAR_DAC_CTRL2_DAC_DC1_Msk = 0xff

	// SAR_MEAS_CTRL2: SENS_SAR_MEAS_CTRL2
	// Position of AMP_SHORT_REF_GND_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE_Pos = 0x11
	// Bit mask of AMP_SHORT_REF_GND_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FORCE_Msk = 0x60000
	// Position of AMP_SHORT_REF_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE_Pos = 0xf
	// Bit mask of AMP_SHORT_REF_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FORCE_Msk = 0x18000
	// Position of AMP_RST_FB_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FORCE_Pos = 0xd
	// Bit mask of AMP_RST_FB_FORCE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FORCE_Msk = 0x6000
	// Position of SAR2_RSTB_FORCE field.
	SENS_SAR_MEAS_CTRL2_SAR2_RSTB_FORCE_Pos = 0xb
	// Bit mask of SAR2_RSTB_FORCE field.
	SENS_SAR_MEAS_CTRL2_SAR2_RSTB_FORCE_Msk = 0x1800
	// Position of SAR_RSTB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE_Pos = 0xa
	// Bit mask of SAR_RSTB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE_Msk = 0x400
	// Bit SAR_RSTB_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_SAR_RSTB_FSM_IDLE = 0x400
	// Position of XPD_SAR_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE_Pos = 0x9
	// Bit mask of XPD_SAR_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE_Msk = 0x200
	// Bit XPD_SAR_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_FSM_IDLE = 0x200
	// Position of AMP_SHORT_REF_GND_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE_Pos = 0x8
	// Bit mask of AMP_SHORT_REF_GND_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE_Msk = 0x100
	// Bit AMP_SHORT_REF_GND_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_GND_FSM_IDLE = 0x100
	// Position of AMP_SHORT_REF_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE_Pos = 0x7
	// Bit mask of AMP_SHORT_REF_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE_Msk = 0x80
	// Bit AMP_SHORT_REF_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_AMP_SHORT_REF_FSM_IDLE = 0x80
	// Position of AMP_RST_FB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE_Pos = 0x6
	// Bit mask of AMP_RST_FB_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE_Msk = 0x40
	// Bit AMP_RST_FB_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_AMP_RST_FB_FSM_IDLE = 0x40
	// Position of XPD_SAR_AMP_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE_Pos = 0x5
	// Bit mask of XPD_SAR_AMP_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE_Msk = 0x20
	// Bit XPD_SAR_AMP_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_XPD_SAR_AMP_FSM_IDLE = 0x20
	// Position of SAR1_DAC_XPD_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE_Pos = 0x4
	// Bit mask of SAR1_DAC_XPD_FSM_IDLE field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE_Msk = 0x10
	// Bit SAR1_DAC_XPD_FSM_IDLE.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_IDLE = 0x10
	// Position of SAR1_DAC_XPD_FSM field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_Pos = 0x0
	// Bit mask of SAR1_DAC_XPD_FSM field.
	SENS_SAR_MEAS_CTRL2_SAR1_DAC_XPD_FSM_Msk = 0xf

	// SAR_NOUSE: SENS_SAR_NOUSE
	// Position of SAR_NOUSE field.
	SENS_SAR_NOUSE_SAR_NOUSE_Pos = 0x0
	// Bit mask of SAR_NOUSE field.
	SENS_SAR_NOUSE_SAR_NOUSE_Msk = 0xffffffff

	// SARDATE: SENS_SARDATE
	// Position of SAR_DATE field.
	SENS_SARDATE_SAR_DATE_Pos = 0x0
	// Bit mask of SAR_DATE field.
	SENS_SARDATE_SAR_DATE_Msk = 0xfffffff
)

// Constants for NRX
const ()

// Constants for RTCIO
const (
	// OUT: RTC_GPIO_OUT
	// Position of OUT_DATA field.
	RTCIO_OUT_OUT_DATA_Pos = 0xe
	// Bit mask of OUT_DATA field.
	RTCIO_OUT_OUT_DATA_Msk = 0xffffc000

	// OUT_W1TS: RTC_GPIO_OUT_W1TS
	// Position of OUT_DATA_W1TS field.
	RTCIO_OUT_W1TS_OUT_DATA_W1TS_Pos = 0xe
	// Bit mask of OUT_DATA_W1TS field.
	RTCIO_OUT_W1TS_OUT_DATA_W1TS_Msk = 0xffffc000

	// OUT_W1TC: RTC_GPIO_OUT_W1TC
	// Position of OUT_DATA_W1TC field.
	RTCIO_OUT_W1TC_OUT_DATA_W1TC_Pos = 0xe
	// Bit mask of OUT_DATA_W1TC field.
	RTCIO_OUT_W1TC_OUT_DATA_W1TC_Msk = 0xffffc000

	// ENABLE: RTC_GPIO_ENABLE
	// Position of ENABLE field.
	RTCIO_ENABLE_ENABLE_Pos = 0xe
	// Bit mask of ENABLE field.
	RTCIO_ENABLE_ENABLE_Msk = 0xffffc000

	// ENABLE_W1TS: RTC_GPIO_ENABLE_W1TS
	// Position of ENABLE_W1TS field.
	RTCIO_ENABLE_W1TS_ENABLE_W1TS_Pos = 0xe
	// Bit mask of ENABLE_W1TS field.
	RTCIO_ENABLE_W1TS_ENABLE_W1TS_Msk = 0xffffc000

	// ENABLE_W1TC: RTC_GPIO_ENABLE_W1TC
	// Position of ENABLE_W1TC field.
	RTCIO_ENABLE_W1TC_ENABLE_W1TC_Pos = 0xe
	// Bit mask of ENABLE_W1TC field.
	RTCIO_ENABLE_W1TC_ENABLE_W1TC_Msk = 0xffffc000

	// STATUS: RTC_GPIO_STATUS
	// Position of STATUS_INT field.
	RTCIO_STATUS_STATUS_INT_Pos = 0xe
	// Bit mask of STATUS_INT field.
	RTCIO_STATUS_STATUS_INT_Msk = 0xffffc000

	// STATUS_W1TS: RTC_GPIO_STATUS_W1TS
	// Position of STATUS_INT_W1TS field.
	RTCIO_STATUS_W1TS_STATUS_INT_W1TS_Pos = 0xe
	// Bit mask of STATUS_INT_W1TS field.
	RTCIO_STATUS_W1TS_STATUS_INT_W1TS_Msk = 0xffffc000

	// STATUS_W1TC: RTC_GPIO_STATUS_W1TC
	// Position of STATUS_INT_W1TC field.
	RTCIO_STATUS_W1TC_STATUS_INT_W1TC_Pos = 0xe
	// Bit mask of STATUS_INT_W1TC field.
	RTCIO_STATUS_W1TC_STATUS_INT_W1TC_Msk = 0xffffc000

	// IN: RTC_GPIO_IN
	// Position of IN_NEXT field.
	RTCIO_IN_IN_NEXT_Pos = 0xe
	// Bit mask of IN_NEXT field.
	RTCIO_IN_IN_NEXT_Msk = 0xffffc000

	// PIN0: RTC_GPIO_PIN0
	// Position of WAKEUP_ENABLE field.
	RTCIO_PIN_WAKEUP_ENABLE_Pos = 0xa
	// Bit mask of WAKEUP_ENABLE field.
	RTCIO_PIN_WAKEUP_ENABLE_Msk = 0x400
	// Bit WAKEUP_ENABLE.
	RTCIO_PIN_WAKEUP_ENABLE = 0x400
	// Position of INT_TYPE field.
	RTCIO_PIN_INT_TYPE_Pos = 0x7
	// Bit mask of INT_TYPE field.
	RTCIO_PIN_INT_TYPE_Msk = 0x380
	// Position of PAD_DRIVER field.
	RTCIO_PIN_PAD_DRIVER_Pos = 0x2
	// Bit mask of PAD_DRIVER field.
	RTCIO_PIN_PAD_DRIVER_Msk = 0x4
	// Bit PAD_DRIVER.
	RTCIO_PIN_PAD_DRIVER = 0x4

	// RTC_DEBUG_SEL: RTC_IO_RTC_DEBUG_SEL
	// Position of DEBUG_12M_NO_GATING field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_12M_NO_GATING_Pos = 0x19
	// Bit mask of DEBUG_12M_NO_GATING field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_12M_NO_GATING_Msk = 0x2000000
	// Bit DEBUG_12M_NO_GATING.
	RTCIO_RTC_DEBUG_SEL_DEBUG_12M_NO_GATING = 0x2000000
	// Position of DEBUG_SEL4 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL4_Pos = 0x14
	// Bit mask of DEBUG_SEL4 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL4_Msk = 0x1f00000
	// Position of DEBUG_SEL3 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL3_Pos = 0xf
	// Bit mask of DEBUG_SEL3 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL3_Msk = 0xf8000
	// Position of DEBUG_SEL2 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL2_Pos = 0xa
	// Bit mask of DEBUG_SEL2 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL2_Msk = 0x7c00
	// Position of DEBUG_SEL1 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL1_Pos = 0x5
	// Bit mask of DEBUG_SEL1 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL1_Msk = 0x3e0
	// Position of DEBUG_SEL0 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL0_Pos = 0x0
	// Bit mask of DEBUG_SEL0 field.
	RTCIO_RTC_DEBUG_SEL_DEBUG_SEL0_Msk = 0x1f

	// DIG_PAD_HOLD: RTC_IO_DIG_PAD_HOLD
	// Position of DIG_PAD_HOLD field.
	RTCIO_DIG_PAD_HOLD_DIG_PAD_HOLD_Pos = 0x0
	// Bit mask of DIG_PAD_HOLD field.
	RTCIO_DIG_PAD_HOLD_DIG_PAD_HOLD_Msk = 0xffffffff

	// HALL_SENS: RTC_IO_HALL_SENS
	// Position of XPD_HALL field.
	RTCIO_HALL_SENS_XPD_HALL_Pos = 0x1f
	// Bit mask of XPD_HALL field.
	RTCIO_HALL_SENS_XPD_HALL_Msk = 0x80000000
	// Bit XPD_HALL.
	RTCIO_HALL_SENS_XPD_HALL = 0x80000000
	// Position of HALL_PHASE field.
	RTCIO_HALL_SENS_HALL_PHASE_Pos = 0x1e
	// Bit mask of HALL_PHASE field.
	RTCIO_HALL_SENS_HALL_PHASE_Msk = 0x40000000
	// Bit HALL_PHASE.
	RTCIO_HALL_SENS_HALL_PHASE = 0x40000000

	// SENSOR_PADS: RTC_IO_SENSOR_PADS
	// Position of SENSE1_HOLD field.
	RTCIO_SENSOR_PADS_SENSE1_HOLD_Pos = 0x1f
	// Bit mask of SENSE1_HOLD field.
	RTCIO_SENSOR_PADS_SENSE1_HOLD_Msk = 0x80000000
	// Bit SENSE1_HOLD.
	RTCIO_SENSOR_PADS_SENSE1_HOLD = 0x80000000
	// Position of SENSE2_HOLD field.
	RTCIO_SENSOR_PADS_SENSE2_HOLD_Pos = 0x1e
	// Bit mask of SENSE2_HOLD field.
	RTCIO_SENSOR_PADS_SENSE2_HOLD_Msk = 0x40000000
	// Bit SENSE2_HOLD.
	RTCIO_SENSOR_PADS_SENSE2_HOLD = 0x40000000
	// Position of SENSE3_HOLD field.
	RTCIO_SENSOR_PADS_SENSE3_HOLD_Pos = 0x1d
	// Bit mask of SENSE3_HOLD field.
	RTCIO_SENSOR_PADS_SENSE3_HOLD_Msk = 0x20000000
	// Bit SENSE3_HOLD.
	RTCIO_SENSOR_PADS_SENSE3_HOLD = 0x20000000
	// Position of SENSE4_HOLD field.
	RTCIO_SENSOR_PADS_SENSE4_HOLD_Pos = 0x1c
	// Bit mask of SENSE4_HOLD field.
	RTCIO_SENSOR_PADS_SENSE4_HOLD_Msk = 0x10000000
	// Bit SENSE4_HOLD.
	RTCIO_SENSOR_PADS_SENSE4_HOLD = 0x10000000
	// Position of SENSE1_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE1_MUX_SEL_Pos = 0x1b
	// Bit mask of SENSE1_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE1_MUX_SEL_Msk = 0x8000000
	// Bit SENSE1_MUX_SEL.
	RTCIO_SENSOR_PADS_SENSE1_MUX_SEL = 0x8000000
	// Position of SENSE2_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE2_MUX_SEL_Pos = 0x1a
	// Bit mask of SENSE2_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE2_MUX_SEL_Msk = 0x4000000
	// Bit SENSE2_MUX_SEL.
	RTCIO_SENSOR_PADS_SENSE2_MUX_SEL = 0x4000000
	// Position of SENSE3_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE3_MUX_SEL_Pos = 0x19
	// Bit mask of SENSE3_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE3_MUX_SEL_Msk = 0x2000000
	// Bit SENSE3_MUX_SEL.
	RTCIO_SENSOR_PADS_SENSE3_MUX_SEL = 0x2000000
	// Position of SENSE4_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE4_MUX_SEL_Pos = 0x18
	// Bit mask of SENSE4_MUX_SEL field.
	RTCIO_SENSOR_PADS_SENSE4_MUX_SEL_Msk = 0x1000000
	// Bit SENSE4_MUX_SEL.
	RTCIO_SENSOR_PADS_SENSE4_MUX_SEL = 0x1000000
	// Position of SENSE1_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE1_FUN_SEL_Pos = 0x16
	// Bit mask of SENSE1_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE1_FUN_SEL_Msk = 0xc00000
	// Position of SENSE1_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE1_SLP_SEL_Pos = 0x15
	// Bit mask of SENSE1_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE1_SLP_SEL_Msk = 0x200000
	// Bit SENSE1_SLP_SEL.
	RTCIO_SENSOR_PADS_SENSE1_SLP_SEL = 0x200000
	// Position of SENSE1_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE1_SLP_IE_Pos = 0x14
	// Bit mask of SENSE1_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE1_SLP_IE_Msk = 0x100000
	// Bit SENSE1_SLP_IE.
	RTCIO_SENSOR_PADS_SENSE1_SLP_IE = 0x100000
	// Position of SENSE1_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE1_FUN_IE_Pos = 0x13
	// Bit mask of SENSE1_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE1_FUN_IE_Msk = 0x80000
	// Bit SENSE1_FUN_IE.
	RTCIO_SENSOR_PADS_SENSE1_FUN_IE = 0x80000
	// Position of SENSE2_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE2_FUN_SEL_Pos = 0x11
	// Bit mask of SENSE2_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE2_FUN_SEL_Msk = 0x60000
	// Position of SENSE2_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE2_SLP_SEL_Pos = 0x10
	// Bit mask of SENSE2_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE2_SLP_SEL_Msk = 0x10000
	// Bit SENSE2_SLP_SEL.
	RTCIO_SENSOR_PADS_SENSE2_SLP_SEL = 0x10000
	// Position of SENSE2_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE2_SLP_IE_Pos = 0xf
	// Bit mask of SENSE2_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE2_SLP_IE_Msk = 0x8000
	// Bit SENSE2_SLP_IE.
	RTCIO_SENSOR_PADS_SENSE2_SLP_IE = 0x8000
	// Position of SENSE2_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE2_FUN_IE_Pos = 0xe
	// Bit mask of SENSE2_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE2_FUN_IE_Msk = 0x4000
	// Bit SENSE2_FUN_IE.
	RTCIO_SENSOR_PADS_SENSE2_FUN_IE = 0x4000
	// Position of SENSE3_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE3_FUN_SEL_Pos = 0xc
	// Bit mask of SENSE3_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE3_FUN_SEL_Msk = 0x3000
	// Position of SENSE3_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE3_SLP_SEL_Pos = 0xb
	// Bit mask of SENSE3_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE3_SLP_SEL_Msk = 0x800
	// Bit SENSE3_SLP_SEL.
	RTCIO_SENSOR_PADS_SENSE3_SLP_SEL = 0x800
	// Position of SENSE3_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE3_SLP_IE_Pos = 0xa
	// Bit mask of SENSE3_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE3_SLP_IE_Msk = 0x400
	// Bit SENSE3_SLP_IE.
	RTCIO_SENSOR_PADS_SENSE3_SLP_IE = 0x400
	// Position of SENSE3_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE3_FUN_IE_Pos = 0x9
	// Bit mask of SENSE3_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE3_FUN_IE_Msk = 0x200
	// Bit SENSE3_FUN_IE.
	RTCIO_SENSOR_PADS_SENSE3_FUN_IE = 0x200
	// Position of SENSE4_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE4_FUN_SEL_Pos = 0x7
	// Bit mask of SENSE4_FUN_SEL field.
	RTCIO_SENSOR_PADS_SENSE4_FUN_SEL_Msk = 0x180
	// Position of SENSE4_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE4_SLP_SEL_Pos = 0x6
	// Bit mask of SENSE4_SLP_SEL field.
	RTCIO_SENSOR_PADS_SENSE4_SLP_SEL_Msk = 0x40
	// Bit SENSE4_SLP_SEL.
	RTCIO_SENSOR_PADS_SENSE4_SLP_SEL = 0x40
	// Position of SENSE4_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE4_SLP_IE_Pos = 0x5
	// Bit mask of SENSE4_SLP_IE field.
	RTCIO_SENSOR_PADS_SENSE4_SLP_IE_Msk = 0x20
	// Bit SENSE4_SLP_IE.
	RTCIO_SENSOR_PADS_SENSE4_SLP_IE = 0x20
	// Position of SENSE4_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE4_FUN_IE_Pos = 0x4
	// Bit mask of SENSE4_FUN_IE field.
	RTCIO_SENSOR_PADS_SENSE4_FUN_IE_Msk = 0x10
	// Bit SENSE4_FUN_IE.
	RTCIO_SENSOR_PADS_SENSE4_FUN_IE = 0x10

	// ADC_PAD: RTC_IO_ADC_PAD
	// Position of ADC1_HOLD field.
	RTCIO_ADC_PAD_ADC1_HOLD_Pos = 0x1f
	// Bit mask of ADC1_HOLD field.
	RTCIO_ADC_PAD_ADC1_HOLD_Msk = 0x80000000
	// Bit ADC1_HOLD.
	RTCIO_ADC_PAD_ADC1_HOLD = 0x80000000
	// Position of ADC2_HOLD field.
	RTCIO_ADC_PAD_ADC2_HOLD_Pos = 0x1e
	// Bit mask of ADC2_HOLD field.
	RTCIO_ADC_PAD_ADC2_HOLD_Msk = 0x40000000
	// Bit ADC2_HOLD.
	RTCIO_ADC_PAD_ADC2_HOLD = 0x40000000
	// Position of ADC1_MUX_SEL field.
	RTCIO_ADC_PAD_ADC1_MUX_SEL_Pos = 0x1d
	// Bit mask of ADC1_MUX_SEL field.
	RTCIO_ADC_PAD_ADC1_MUX_SEL_Msk = 0x20000000
	// Bit ADC1_MUX_SEL.
	RTCIO_ADC_PAD_ADC1_MUX_SEL = 0x20000000
	// Position of ADC2_MUX_SEL field.
	RTCIO_ADC_PAD_ADC2_MUX_SEL_Pos = 0x1c
	// Bit mask of ADC2_MUX_SEL field.
	RTCIO_ADC_PAD_ADC2_MUX_SEL_Msk = 0x10000000
	// Bit ADC2_MUX_SEL.
	RTCIO_ADC_PAD_ADC2_MUX_SEL = 0x10000000
	// Position of ADC1_FUN_SEL field.
	RTCIO_ADC_PAD_ADC1_FUN_SEL_Pos = 0x1a
	// Bit mask of ADC1_FUN_SEL field.
	RTCIO_ADC_PAD_ADC1_FUN_SEL_Msk = 0xc000000
	// Position of ADC1_SLP_SEL field.
	RTCIO_ADC_PAD_ADC1_SLP_SEL_Pos = 0x19
	// Bit mask of ADC1_SLP_SEL field.
	RTCIO_ADC_PAD_ADC1_SLP_SEL_Msk = 0x2000000
	// Bit ADC1_SLP_SEL.
	RTCIO_ADC_PAD_ADC1_SLP_SEL = 0x2000000
	// Position of ADC1_SLP_IE field.
	RTCIO_ADC_PAD_ADC1_SLP_IE_Pos = 0x18
	// Bit mask of ADC1_SLP_IE field.
	RTCIO_ADC_PAD_ADC1_SLP_IE_Msk = 0x1000000
	// Bit ADC1_SLP_IE.
	RTCIO_ADC_PAD_ADC1_SLP_IE = 0x1000000
	// Position of ADC1_FUN_IE field.
	RTCIO_ADC_PAD_ADC1_FUN_IE_Pos = 0x17
	// Bit mask of ADC1_FUN_IE field.
	RTCIO_ADC_PAD_ADC1_FUN_IE_Msk = 0x800000
	// Bit ADC1_FUN_IE.
	RTCIO_ADC_PAD_ADC1_FUN_IE = 0x800000
	// Position of ADC2_FUN_SEL field.
	RTCIO_ADC_PAD_ADC2_FUN_SEL_Pos = 0x15
	// Bit mask of ADC2_FUN_SEL field.
	RTCIO_ADC_PAD_ADC2_FUN_SEL_Msk = 0x600000
	// Position of ADC2_SLP_SEL field.
	RTCIO_ADC_PAD_ADC2_SLP_SEL_Pos = 0x14
	// Bit mask of ADC2_SLP_SEL field.
	RTCIO_ADC_PAD_ADC2_SLP_SEL_Msk = 0x100000
	// Bit ADC2_SLP_SEL.
	RTCIO_ADC_PAD_ADC2_SLP_SEL = 0x100000
	// Position of ADC2_SLP_IE field.
	RTCIO_ADC_PAD_ADC2_SLP_IE_Pos = 0x13
	// Bit mask of ADC2_SLP_IE field.
	RTCIO_ADC_PAD_ADC2_SLP_IE_Msk = 0x80000
	// Bit ADC2_SLP_IE.
	RTCIO_ADC_PAD_ADC2_SLP_IE = 0x80000
	// Position of ADC2_FUN_IE field.
	RTCIO_ADC_PAD_ADC2_FUN_IE_Pos = 0x12
	// Bit mask of ADC2_FUN_IE field.
	RTCIO_ADC_PAD_ADC2_FUN_IE_Msk = 0x40000
	// Bit ADC2_FUN_IE.
	RTCIO_ADC_PAD_ADC2_FUN_IE = 0x40000

	// PAD_DAC1: RTC_IO_PAD_DAC1
	// Position of PDAC1_DRV field.
	RTCIO_PAD_DAC1_PDAC1_DRV_Pos = 0x1e
	// Bit mask of PDAC1_DRV field.
	RTCIO_PAD_DAC1_PDAC1_DRV_Msk = 0xc0000000
	// Position of PDAC1_HOLD field.
	RTCIO_PAD_DAC1_PDAC1_HOLD_Pos = 0x1d
	// Bit mask of PDAC1_HOLD field.
	RTCIO_PAD_DAC1_PDAC1_HOLD_Msk = 0x20000000
	// Bit PDAC1_HOLD.
	RTCIO_PAD_DAC1_PDAC1_HOLD = 0x20000000
	// Position of PDAC1_RDE field.
	RTCIO_PAD_DAC1_PDAC1_RDE_Pos = 0x1c
	// Bit mask of PDAC1_RDE field.
	RTCIO_PAD_DAC1_PDAC1_RDE_Msk = 0x10000000
	// Bit PDAC1_RDE.
	RTCIO_PAD_DAC1_PDAC1_RDE = 0x10000000
	// Position of PDAC1_RUE field.
	RTCIO_PAD_DAC1_PDAC1_RUE_Pos = 0x1b
	// Bit mask of PDAC1_RUE field.
	RTCIO_PAD_DAC1_PDAC1_RUE_Msk = 0x8000000
	// Bit PDAC1_RUE.
	RTCIO_PAD_DAC1_PDAC1_RUE = 0x8000000
	// Position of PDAC1_DAC field.
	RTCIO_PAD_DAC1_PDAC1_DAC_Pos = 0x13
	// Bit mask of PDAC1_DAC field.
	RTCIO_PAD_DAC1_PDAC1_DAC_Msk = 0x7f80000
	// Position of PDAC1_XPD_DAC field.
	RTCIO_PAD_DAC1_PDAC1_XPD_DAC_Pos = 0x12
	// Bit mask of PDAC1_XPD_DAC field.
	RTCIO_PAD_DAC1_PDAC1_XPD_DAC_Msk = 0x40000
	// Bit PDAC1_XPD_DAC.
	RTCIO_PAD_DAC1_PDAC1_XPD_DAC = 0x40000
	// Position of PDAC1_MUX_SEL field.
	RTCIO_PAD_DAC1_PDAC1_MUX_SEL_Pos = 0x11
	// Bit mask of PDAC1_MUX_SEL field.
	RTCIO_PAD_DAC1_PDAC1_MUX_SEL_Msk = 0x20000
	// Bit PDAC1_MUX_SEL.
	RTCIO_PAD_DAC1_PDAC1_MUX_SEL = 0x20000
	// Position of PDAC1_FUN_SEL field.
	RTCIO_PAD_DAC1_PDAC1_FUN_SEL_Pos = 0xf
	// Bit mask of PDAC1_FUN_SEL field.
	RTCIO_PAD_DAC1_PDAC1_FUN_SEL_Msk = 0x18000
	// Position of PDAC1_SLP_SEL field.
	RTCIO_PAD_DAC1_PDAC1_SLP_SEL_Pos = 0xe
	// Bit mask of PDAC1_SLP_SEL field.
	RTCIO_PAD_DAC1_PDAC1_SLP_SEL_Msk = 0x4000
	// Bit PDAC1_SLP_SEL.
	RTCIO_PAD_DAC1_PDAC1_SLP_SEL = 0x4000
	// Position of PDAC1_SLP_IE field.
	RTCIO_PAD_DAC1_PDAC1_SLP_IE_Pos = 0xd
	// Bit mask of PDAC1_SLP_IE field.
	RTCIO_PAD_DAC1_PDAC1_SLP_IE_Msk = 0x2000
	// Bit PDAC1_SLP_IE.
	RTCIO_PAD_DAC1_PDAC1_SLP_IE = 0x2000
	// Position of PDAC1_SLP_OE field.
	RTCIO_PAD_DAC1_PDAC1_SLP_OE_Pos = 0xc
	// Bit mask of PDAC1_SLP_OE field.
	RTCIO_PAD_DAC1_PDAC1_SLP_OE_Msk = 0x1000
	// Bit PDAC1_SLP_OE.
	RTCIO_PAD_DAC1_PDAC1_SLP_OE = 0x1000
	// Position of PDAC1_FUN_IE field.
	RTCIO_PAD_DAC1_PDAC1_FUN_IE_Pos = 0xb
	// Bit mask of PDAC1_FUN_IE field.
	RTCIO_PAD_DAC1_PDAC1_FUN_IE_Msk = 0x800
	// Bit PDAC1_FUN_IE.
	RTCIO_PAD_DAC1_PDAC1_FUN_IE = 0x800
	// Position of PDAC1_DAC_XPD_FORCE field.
	RTCIO_PAD_DAC1_PDAC1_DAC_XPD_FORCE_Pos = 0xa
	// Bit mask of PDAC1_DAC_XPD_FORCE field.
	RTCIO_PAD_DAC1_PDAC1_DAC_XPD_FORCE_Msk = 0x400
	// Bit PDAC1_DAC_XPD_FORCE.
	RTCIO_PAD_DAC1_PDAC1_DAC_XPD_FORCE = 0x400

	// PAD_DAC2: RTC_IO_PAD_DAC2
	// Position of PDAC2_DRV field.
	RTCIO_PAD_DAC2_PDAC2_DRV_Pos = 0x1e
	// Bit mask of PDAC2_DRV field.
	RTCIO_PAD_DAC2_PDAC2_DRV_Msk = 0xc0000000
	// Position of PDAC2_HOLD field.
	RTCIO_PAD_DAC2_PDAC2_HOLD_Pos = 0x1d
	// Bit mask of PDAC2_HOLD field.
	RTCIO_PAD_DAC2_PDAC2_HOLD_Msk = 0x20000000
	// Bit PDAC2_HOLD.
	RTCIO_PAD_DAC2_PDAC2_HOLD = 0x20000000
	// Position of PDAC2_RDE field.
	RTCIO_PAD_DAC2_PDAC2_RDE_Pos = 0x1c
	// Bit mask of PDAC2_RDE field.
	RTCIO_PAD_DAC2_PDAC2_RDE_Msk = 0x10000000
	// Bit PDAC2_RDE.
	RTCIO_PAD_DAC2_PDAC2_RDE = 0x10000000
	// Position of PDAC2_RUE field.
	RTCIO_PAD_DAC2_PDAC2_RUE_Pos = 0x1b
	// Bit mask of PDAC2_RUE field.
	RTCIO_PAD_DAC2_PDAC2_RUE_Msk = 0x8000000
	// Bit PDAC2_RUE.
	RTCIO_PAD_DAC2_PDAC2_RUE = 0x8000000
	// Position of PDAC2_DAC field.
	RTCIO_PAD_DAC2_PDAC2_DAC_Pos = 0x13
	// Bit mask of PDAC2_DAC field.
	RTCIO_PAD_DAC2_PDAC2_DAC_Msk = 0x7f80000
	// Position of PDAC2_XPD_DAC field.
	RTCIO_PAD_DAC2_PDAC2_XPD_DAC_Pos = 0x12
	// Bit mask of PDAC2_XPD_DAC field.
	RTCIO_PAD_DAC2_PDAC2_XPD_DAC_Msk = 0x40000
	// Bit PDAC2_XPD_DAC.
	RTCIO_PAD_DAC2_PDAC2_XPD_DAC = 0x40000
	// Position of PDAC2_MUX_SEL field.
	RTCIO_PAD_DAC2_PDAC2_MUX_SEL_Pos = 0x11
	// Bit mask of PDAC2_MUX_SEL field.
	RTCIO_PAD_DAC2_PDAC2_MUX_SEL_Msk = 0x20000
	// Bit PDAC2_MUX_SEL.
	RTCIO_PAD_DAC2_PDAC2_MUX_SEL = 0x20000
	// Position of PDAC2_FUN_SEL field.
	RTCIO_PAD_DAC2_PDAC2_FUN_SEL_Pos = 0xf
	// Bit mask of PDAC2_FUN_SEL field.
	RTCIO_PAD_DAC2_PDAC2_FUN_SEL_Msk = 0x18000
	// Position of PDAC2_SLP_SEL field.
	RTCIO_PAD_DAC2_PDAC2_SLP_SEL_Pos = 0xe
	// Bit mask of PDAC2_SLP_SEL field.
	RTCIO_PAD_DAC2_PDAC2_SLP_SEL_Msk = 0x4000
	// Bit PDAC2_SLP_SEL.
	RTCIO_PAD_DAC2_PDAC2_SLP_SEL = 0x4000
	// Position of PDAC2_SLP_IE field.
	RTCIO_PAD_DAC2_PDAC2_SLP_IE_Pos = 0xd
	// Bit mask of PDAC2_SLP_IE field.
	RTCIO_PAD_DAC2_PDAC2_SLP_IE_Msk = 0x2000
	// Bit PDAC2_SLP_IE.
	RTCIO_PAD_DAC2_PDAC2_SLP_IE = 0x2000
	// Position of PDAC2_SLP_OE field.
	RTCIO_PAD_DAC2_PDAC2_SLP_OE_Pos = 0xc
	// Bit mask of PDAC2_SLP_OE field.
	RTCIO_PAD_DAC2_PDAC2_SLP_OE_Msk = 0x1000
	// Bit PDAC2_SLP_OE.
	RTCIO_PAD_DAC2_PDAC2_SLP_OE = 0x1000
	// Position of PDAC2_FUN_IE field.
	RTCIO_PAD_DAC2_PDAC2_FUN_IE_Pos = 0xb
	// Bit mask of PDAC2_FUN_IE field.
	RTCIO_PAD_DAC2_PDAC2_FUN_IE_Msk = 0x800
	// Bit PDAC2_FUN_IE.
	RTCIO_PAD_DAC2_PDAC2_FUN_IE = 0x800
	// Position of PDAC2_DAC_XPD_FORCE field.
	RTCIO_PAD_DAC2_PDAC2_DAC_XPD_FORCE_Pos = 0xa
	// Bit mask of PDAC2_DAC_XPD_FORCE field.
	RTCIO_PAD_DAC2_PDAC2_DAC_XPD_FORCE_Msk = 0x400
	// Bit PDAC2_DAC_XPD_FORCE.
	RTCIO_PAD_DAC2_PDAC2_DAC_XPD_FORCE = 0x400

	// XTAL_32K_PAD: RTC_IO_XTAL_32K_PAD
	// Position of X32N_DRV field.
	RTCIO_XTAL_32K_PAD_X32N_DRV_Pos = 0x1e
	// Bit mask of X32N_DRV field.
	RTCIO_XTAL_32K_PAD_X32N_DRV_Msk = 0xc0000000
	// Position of X32N_HOLD field.
	RTCIO_XTAL_32K_PAD_X32N_HOLD_Pos = 0x1d
	// Bit mask of X32N_HOLD field.
	RTCIO_XTAL_32K_PAD_X32N_HOLD_Msk = 0x20000000
	// Bit X32N_HOLD.
	RTCIO_XTAL_32K_PAD_X32N_HOLD = 0x20000000
	// Position of X32N_RDE field.
	RTCIO_XTAL_32K_PAD_X32N_RDE_Pos = 0x1c
	// Bit mask of X32N_RDE field.
	RTCIO_XTAL_32K_PAD_X32N_RDE_Msk = 0x10000000
	// Bit X32N_RDE.
	RTCIO_XTAL_32K_PAD_X32N_RDE = 0x10000000
	// Position of X32N_RUE field.
	RTCIO_XTAL_32K_PAD_X32N_RUE_Pos = 0x1b
	// Bit mask of X32N_RUE field.
	RTCIO_XTAL_32K_PAD_X32N_RUE_Msk = 0x8000000
	// Bit X32N_RUE.
	RTCIO_XTAL_32K_PAD_X32N_RUE = 0x8000000
	// Position of X32P_DRV field.
	RTCIO_XTAL_32K_PAD_X32P_DRV_Pos = 0x19
	// Bit mask of X32P_DRV field.
	RTCIO_XTAL_32K_PAD_X32P_DRV_Msk = 0x6000000
	// Position of X32P_HOLD field.
	RTCIO_XTAL_32K_PAD_X32P_HOLD_Pos = 0x18
	// Bit mask of X32P_HOLD field.
	RTCIO_XTAL_32K_PAD_X32P_HOLD_Msk = 0x1000000
	// Bit X32P_HOLD.
	RTCIO_XTAL_32K_PAD_X32P_HOLD = 0x1000000
	// Position of X32P_RDE field.
	RTCIO_XTAL_32K_PAD_X32P_RDE_Pos = 0x17
	// Bit mask of X32P_RDE field.
	RTCIO_XTAL_32K_PAD_X32P_RDE_Msk = 0x800000
	// Bit X32P_RDE.
	RTCIO_XTAL_32K_PAD_X32P_RDE = 0x800000
	// Position of X32P_RUE field.
	RTCIO_XTAL_32K_PAD_X32P_RUE_Pos = 0x16
	// Bit mask of X32P_RUE field.
	RTCIO_XTAL_32K_PAD_X32P_RUE_Msk = 0x400000
	// Bit X32P_RUE.
	RTCIO_XTAL_32K_PAD_X32P_RUE = 0x400000
	// Position of DAC_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_DAC_XTAL_32K_Pos = 0x14
	// Bit mask of DAC_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_DAC_XTAL_32K_Msk = 0x300000
	// Position of XPD_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_XPD_XTAL_32K_Pos = 0x13
	// Bit mask of XPD_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_XPD_XTAL_32K_Msk = 0x80000
	// Bit XPD_XTAL_32K.
	RTCIO_XTAL_32K_PAD_XPD_XTAL_32K = 0x80000
	// Position of X32N_MUX_SEL field.
	RTCIO_XTAL_32K_PAD_X32N_MUX_SEL_Pos = 0x12
	// Bit mask of X32N_MUX_SEL field.
	RTCIO_XTAL_32K_PAD_X32N_MUX_SEL_Msk = 0x40000
	// Bit X32N_MUX_SEL.
	RTCIO_XTAL_32K_PAD_X32N_MUX_SEL = 0x40000
	// Position of X32P_MUX_SEL field.
	RTCIO_XTAL_32K_PAD_X32P_MUX_SEL_Pos = 0x11
	// Bit mask of X32P_MUX_SEL field.
	RTCIO_XTAL_32K_PAD_X32P_MUX_SEL_Msk = 0x20000
	// Bit X32P_MUX_SEL.
	RTCIO_XTAL_32K_PAD_X32P_MUX_SEL = 0x20000
	// Position of X32N_FUN_SEL field.
	RTCIO_XTAL_32K_PAD_X32N_FUN_SEL_Pos = 0xf
	// Bit mask of X32N_FUN_SEL field.
	RTCIO_XTAL_32K_PAD_X32N_FUN_SEL_Msk = 0x18000
	// Position of X32N_SLP_SEL field.
	RTCIO_XTAL_32K_PAD_X32N_SLP_SEL_Pos = 0xe
	// Bit mask of X32N_SLP_SEL field.
	RTCIO_XTAL_32K_PAD_X32N_SLP_SEL_Msk = 0x4000
	// Bit X32N_SLP_SEL.
	RTCIO_XTAL_32K_PAD_X32N_SLP_SEL = 0x4000
	// Position of X32N_SLP_IE field.
	RTCIO_XTAL_32K_PAD_X32N_SLP_IE_Pos = 0xd
	// Bit mask of X32N_SLP_IE field.
	RTCIO_XTAL_32K_PAD_X32N_SLP_IE_Msk = 0x2000
	// Bit X32N_SLP_IE.
	RTCIO_XTAL_32K_PAD_X32N_SLP_IE = 0x2000
	// Position of X32N_SLP_OE field.
	RTCIO_XTAL_32K_PAD_X32N_SLP_OE_Pos = 0xc
	// Bit mask of X32N_SLP_OE field.
	RTCIO_XTAL_32K_PAD_X32N_SLP_OE_Msk = 0x1000
	// Bit X32N_SLP_OE.
	RTCIO_XTAL_32K_PAD_X32N_SLP_OE = 0x1000
	// Position of X32N_FUN_IE field.
	RTCIO_XTAL_32K_PAD_X32N_FUN_IE_Pos = 0xb
	// Bit mask of X32N_FUN_IE field.
	RTCIO_XTAL_32K_PAD_X32N_FUN_IE_Msk = 0x800
	// Bit X32N_FUN_IE.
	RTCIO_XTAL_32K_PAD_X32N_FUN_IE = 0x800
	// Position of X32P_FUN_SEL field.
	RTCIO_XTAL_32K_PAD_X32P_FUN_SEL_Pos = 0x9
	// Bit mask of X32P_FUN_SEL field.
	RTCIO_XTAL_32K_PAD_X32P_FUN_SEL_Msk = 0x600
	// Position of X32P_SLP_SEL field.
	RTCIO_XTAL_32K_PAD_X32P_SLP_SEL_Pos = 0x8
	// Bit mask of X32P_SLP_SEL field.
	RTCIO_XTAL_32K_PAD_X32P_SLP_SEL_Msk = 0x100
	// Bit X32P_SLP_SEL.
	RTCIO_XTAL_32K_PAD_X32P_SLP_SEL = 0x100
	// Position of X32P_SLP_IE field.
	RTCIO_XTAL_32K_PAD_X32P_SLP_IE_Pos = 0x7
	// Bit mask of X32P_SLP_IE field.
	RTCIO_XTAL_32K_PAD_X32P_SLP_IE_Msk = 0x80
	// Bit X32P_SLP_IE.
	RTCIO_XTAL_32K_PAD_X32P_SLP_IE = 0x80
	// Position of X32P_SLP_OE field.
	RTCIO_XTAL_32K_PAD_X32P_SLP_OE_Pos = 0x6
	// Bit mask of X32P_SLP_OE field.
	RTCIO_XTAL_32K_PAD_X32P_SLP_OE_Msk = 0x40
	// Bit X32P_SLP_OE.
	RTCIO_XTAL_32K_PAD_X32P_SLP_OE = 0x40
	// Position of X32P_FUN_IE field.
	RTCIO_XTAL_32K_PAD_X32P_FUN_IE_Pos = 0x5
	// Bit mask of X32P_FUN_IE field.
	RTCIO_XTAL_32K_PAD_X32P_FUN_IE_Msk = 0x20
	// Bit X32P_FUN_IE.
	RTCIO_XTAL_32K_PAD_X32P_FUN_IE = 0x20
	// Position of DRES_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_DRES_XTAL_32K_Pos = 0x3
	// Bit mask of DRES_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_DRES_XTAL_32K_Msk = 0x18
	// Position of DBIAS_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_DBIAS_XTAL_32K_Pos = 0x1
	// Bit mask of DBIAS_XTAL_32K field.
	RTCIO_XTAL_32K_PAD_DBIAS_XTAL_32K_Msk = 0x6

	// TOUCH_CFG: RTC_IO_TOUCH_CFG
	// Position of TOUCH_XPD_BIAS field.
	RTCIO_TOUCH_CFG_TOUCH_XPD_BIAS_Pos = 0x1f
	// Bit mask of TOUCH_XPD_BIAS field.
	RTCIO_TOUCH_CFG_TOUCH_XPD_BIAS_Msk = 0x80000000
	// Bit TOUCH_XPD_BIAS.
	RTCIO_TOUCH_CFG_TOUCH_XPD_BIAS = 0x80000000
	// Position of TOUCH_DREFH field.
	RTCIO_TOUCH_CFG_TOUCH_DREFH_Pos = 0x1d
	// Bit mask of TOUCH_DREFH field.
	RTCIO_TOUCH_CFG_TOUCH_DREFH_Msk = 0x60000000
	// Position of TOUCH_DREFL field.
	RTCIO_TOUCH_CFG_TOUCH_DREFL_Pos = 0x1b
	// Bit mask of TOUCH_DREFL field.
	RTCIO_TOUCH_CFG_TOUCH_DREFL_Msk = 0x18000000
	// Position of TOUCH_DRANGE field.
	RTCIO_TOUCH_CFG_TOUCH_DRANGE_Pos = 0x19
	// Bit mask of TOUCH_DRANGE field.
	RTCIO_TOUCH_CFG_TOUCH_DRANGE_Msk = 0x6000000
	// Position of TOUCH_DCUR field.
	RTCIO_TOUCH_CFG_TOUCH_DCUR_Pos = 0x17
	// Bit mask of TOUCH_DCUR field.
	RTCIO_TOUCH_CFG_TOUCH_DCUR_Msk = 0x1800000

	// TOUCH_PAD0: RTC_IO_TOUCH_PAD0
	// Position of HOLD field.
	RTCIO_TOUCH_PAD0_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD0_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD0_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD0_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD0_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD0_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD0_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD0_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD0_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD0_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD0_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD0_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD0_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD0_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD0_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD0_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD0_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD0_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD0_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD0_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD0_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD0_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD0_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD0_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD0_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD0_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD0_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD0_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD0_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD0_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD0_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD0_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD0_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD0_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD0_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD0_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD0_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD0_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD0_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD0_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD0_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD0_TO_GPIO = 0x1000

	// TOUCH_PAD1: RTC_IO_TOUCH_PAD1
	// Position of HOLD field.
	RTCIO_TOUCH_PAD1_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD1_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD1_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD1_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD1_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD1_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD1_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD1_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD1_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD1_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD1_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD1_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD1_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD1_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD1_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD1_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD1_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD1_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD1_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD1_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD1_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD1_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD1_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD1_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD1_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD1_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD1_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD1_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD1_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD1_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD1_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD1_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD1_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD1_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD1_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD1_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD1_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD1_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD1_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD1_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD1_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD1_TO_GPIO = 0x1000

	// TOUCH_PAD2: RTC_IO_TOUCH_PAD2
	// Position of HOLD field.
	RTCIO_TOUCH_PAD2_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD2_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD2_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD2_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD2_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD2_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD2_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD2_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD2_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD2_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD2_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD2_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD2_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD2_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD2_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD2_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD2_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD2_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD2_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD2_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD2_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD2_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD2_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD2_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD2_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD2_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD2_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD2_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD2_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD2_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD2_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD2_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD2_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD2_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD2_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD2_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD2_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD2_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD2_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD2_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD2_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD2_TO_GPIO = 0x1000

	// TOUCH_PAD3: RTC_IO_TOUCH_PAD3
	// Position of HOLD field.
	RTCIO_TOUCH_PAD3_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD3_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD3_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD3_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD3_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD3_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD3_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD3_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD3_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD3_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD3_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD3_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD3_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD3_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD3_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD3_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD3_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD3_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD3_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD3_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD3_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD3_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD3_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD3_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD3_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD3_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD3_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD3_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD3_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD3_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD3_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD3_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD3_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD3_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD3_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD3_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD3_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD3_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD3_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD3_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD3_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD3_TO_GPIO = 0x1000

	// TOUCH_PAD4: RTC_IO_TOUCH_PAD4
	// Position of HOLD field.
	RTCIO_TOUCH_PAD4_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD4_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD4_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD4_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD4_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD4_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD4_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD4_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD4_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD4_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD4_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD4_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD4_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD4_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD4_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD4_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD4_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD4_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD4_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD4_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD4_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD4_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD4_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD4_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD4_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD4_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD4_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD4_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD4_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD4_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD4_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD4_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD4_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD4_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD4_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD4_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD4_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD4_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD4_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD4_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD4_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD4_TO_GPIO = 0x1000

	// TOUCH_PAD5: RTC_IO_TOUCH_PAD5
	// Position of HOLD field.
	RTCIO_TOUCH_PAD5_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD5_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD5_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD5_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD5_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD5_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD5_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD5_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD5_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD5_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD5_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD5_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD5_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD5_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD5_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD5_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD5_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD5_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD5_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD5_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD5_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD5_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD5_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD5_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD5_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD5_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD5_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD5_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD5_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD5_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD5_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD5_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD5_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD5_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD5_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD5_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD5_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD5_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD5_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD5_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD5_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD5_TO_GPIO = 0x1000

	// TOUCH_PAD6: RTC_IO_TOUCH_PAD6
	// Position of HOLD field.
	RTCIO_TOUCH_PAD6_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD6_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD6_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD6_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD6_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD6_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD6_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD6_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD6_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD6_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD6_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD6_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD6_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD6_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD6_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD6_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD6_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD6_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD6_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD6_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD6_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD6_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD6_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD6_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD6_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD6_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD6_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD6_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD6_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD6_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD6_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD6_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD6_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD6_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD6_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD6_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD6_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD6_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD6_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD6_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD6_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD6_TO_GPIO = 0x1000

	// TOUCH_PAD7: RTC_IO_TOUCH_PAD7
	// Position of HOLD field.
	RTCIO_TOUCH_PAD7_HOLD_Pos = 0x1f
	// Bit mask of HOLD field.
	RTCIO_TOUCH_PAD7_HOLD_Msk = 0x80000000
	// Bit HOLD.
	RTCIO_TOUCH_PAD7_HOLD = 0x80000000
	// Position of DRV field.
	RTCIO_TOUCH_PAD7_DRV_Pos = 0x1d
	// Bit mask of DRV field.
	RTCIO_TOUCH_PAD7_DRV_Msk = 0x60000000
	// Position of RDE field.
	RTCIO_TOUCH_PAD7_RDE_Pos = 0x1c
	// Bit mask of RDE field.
	RTCIO_TOUCH_PAD7_RDE_Msk = 0x10000000
	// Bit RDE.
	RTCIO_TOUCH_PAD7_RDE = 0x10000000
	// Position of RUE field.
	RTCIO_TOUCH_PAD7_RUE_Pos = 0x1b
	// Bit mask of RUE field.
	RTCIO_TOUCH_PAD7_RUE_Msk = 0x8000000
	// Bit RUE.
	RTCIO_TOUCH_PAD7_RUE = 0x8000000
	// Position of DAC field.
	RTCIO_TOUCH_PAD7_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD7_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD7_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD7_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD7_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD7_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD7_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD7_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD7_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD7_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD7_XPD = 0x100000
	// Position of MUX_SEL field.
	RTCIO_TOUCH_PAD7_MUX_SEL_Pos = 0x13
	// Bit mask of MUX_SEL field.
	RTCIO_TOUCH_PAD7_MUX_SEL_Msk = 0x80000
	// Bit MUX_SEL.
	RTCIO_TOUCH_PAD7_MUX_SEL = 0x80000
	// Position of FUN_SEL field.
	RTCIO_TOUCH_PAD7_FUN_SEL_Pos = 0x11
	// Bit mask of FUN_SEL field.
	RTCIO_TOUCH_PAD7_FUN_SEL_Msk = 0x60000
	// Position of SLP_SEL field.
	RTCIO_TOUCH_PAD7_SLP_SEL_Pos = 0x10
	// Bit mask of SLP_SEL field.
	RTCIO_TOUCH_PAD7_SLP_SEL_Msk = 0x10000
	// Bit SLP_SEL.
	RTCIO_TOUCH_PAD7_SLP_SEL = 0x10000
	// Position of SLP_IE field.
	RTCIO_TOUCH_PAD7_SLP_IE_Pos = 0xf
	// Bit mask of SLP_IE field.
	RTCIO_TOUCH_PAD7_SLP_IE_Msk = 0x8000
	// Bit SLP_IE.
	RTCIO_TOUCH_PAD7_SLP_IE = 0x8000
	// Position of SLP_OE field.
	RTCIO_TOUCH_PAD7_SLP_OE_Pos = 0xe
	// Bit mask of SLP_OE field.
	RTCIO_TOUCH_PAD7_SLP_OE_Msk = 0x4000
	// Bit SLP_OE.
	RTCIO_TOUCH_PAD7_SLP_OE = 0x4000
	// Position of FUN_IE field.
	RTCIO_TOUCH_PAD7_FUN_IE_Pos = 0xd
	// Bit mask of FUN_IE field.
	RTCIO_TOUCH_PAD7_FUN_IE_Msk = 0x2000
	// Bit FUN_IE.
	RTCIO_TOUCH_PAD7_FUN_IE = 0x2000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD7_TO_GPIO_Pos = 0xc
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD7_TO_GPIO_Msk = 0x1000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD7_TO_GPIO = 0x1000

	// TOUCH_PAD8: RTC_IO_TOUCH_PAD8
	// Position of DAC field.
	RTCIO_TOUCH_PAD8_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD8_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD8_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD8_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD8_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD8_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD8_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD8_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD8_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD8_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD8_XPD = 0x100000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD8_TO_GPIO_Pos = 0x13
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD8_TO_GPIO_Msk = 0x80000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD8_TO_GPIO = 0x80000

	// TOUCH_PAD9: RTC_IO_TOUCH_PAD9
	// Position of DAC field.
	RTCIO_TOUCH_PAD9_DAC_Pos = 0x17
	// Bit mask of DAC field.
	RTCIO_TOUCH_PAD9_DAC_Msk = 0x3800000
	// Position of START field.
	RTCIO_TOUCH_PAD9_START_Pos = 0x16
	// Bit mask of START field.
	RTCIO_TOUCH_PAD9_START_Msk = 0x400000
	// Bit START.
	RTCIO_TOUCH_PAD9_START = 0x400000
	// Position of TIE_OPT field.
	RTCIO_TOUCH_PAD9_TIE_OPT_Pos = 0x15
	// Bit mask of TIE_OPT field.
	RTCIO_TOUCH_PAD9_TIE_OPT_Msk = 0x200000
	// Bit TIE_OPT.
	RTCIO_TOUCH_PAD9_TIE_OPT = 0x200000
	// Position of XPD field.
	RTCIO_TOUCH_PAD9_XPD_Pos = 0x14
	// Bit mask of XPD field.
	RTCIO_TOUCH_PAD9_XPD_Msk = 0x100000
	// Bit XPD.
	RTCIO_TOUCH_PAD9_XPD = 0x100000
	// Position of TO_GPIO field.
	RTCIO_TOUCH_PAD9_TO_GPIO_Pos = 0x13
	// Bit mask of TO_GPIO field.
	RTCIO_TOUCH_PAD9_TO_GPIO_Msk = 0x80000
	// Bit TO_GPIO.
	RTCIO_TOUCH_PAD9_TO_GPIO = 0x80000

	// EXT_WAKEUP0: RTC_IO_EXT_WAKEUP0
	// Position of EXT_WAKEUP0_SEL field.
	RTCIO_EXT_WAKEUP0_EXT_WAKEUP0_SEL_Pos = 0x1b
	// Bit mask of EXT_WAKEUP0_SEL field.
	RTCIO_EXT_WAKEUP0_EXT_WAKEUP0_SEL_Msk = 0xf8000000

	// XTL_EXT_CTR: RTC_IO_XTL_EXT_CTR
	// Position of XTL_EXT_CTR_SEL field.
	RTCIO_XTL_EXT_CTR_XTL_EXT_CTR_SEL_Pos = 0x1b
	// Bit mask of XTL_EXT_CTR_SEL field.
	RTCIO_XTL_EXT_CTR_XTL_EXT_CTR_SEL_Msk = 0xf8000000

	// SAR_I2C_IO: RTC_IO_SAR_I2C_IO
	// Position of SAR_I2C_SDA_SEL field.
	RTCIO_SAR_I2C_IO_SAR_I2C_SDA_SEL_Pos = 0x1e
	// Bit mask of SAR_I2C_SDA_SEL field.
	RTCIO_SAR_I2C_IO_SAR_I2C_SDA_SEL_Msk = 0xc0000000
	// Position of SAR_I2C_SCL_SEL field.
	RTCIO_SAR_I2C_IO_SAR_I2C_SCL_SEL_Pos = 0x1c
	// Bit mask of SAR_I2C_SCL_SEL field.
	RTCIO_SAR_I2C_IO_SAR_I2C_SCL_SEL_Msk = 0x30000000
	// Position of SAR_DEBUG_BIT_SEL field.
	RTCIO_SAR_I2C_IO_SAR_DEBUG_BIT_SEL_Pos = 0x17
	// Bit mask of SAR_DEBUG_BIT_SEL field.
	RTCIO_SAR_I2C_IO_SAR_DEBUG_BIT_SEL_Msk = 0xf800000

	// DATE: RTC_IO_DATE
	// Position of IO_DATE field.
	RTCIO_DATE_IO_DATE_Pos = 0x0
	// Bit mask of IO_DATE field.
	RTCIO_DATE_IO_DATE_Msk = 0xfffffff
)

// Constants for FE
const ()

// Constants for BB
const ()

// Constants for DPORT
const (
	// PRO_BOOT_REMAP_CTRL: DPORT_PRO_BOOT_REMAP_CTRL
	// Position of PRO_BOOT_REMAP field.
	DPORT_PRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP_Pos = 0x0
	// Bit mask of PRO_BOOT_REMAP field.
	DPORT_PRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP_Msk = 0x1
	// Bit PRO_BOOT_REMAP.
	DPORT_PRO_BOOT_REMAP_CTRL_PRO_BOOT_REMAP = 0x1

	// APP_BOOT_REMAP_CTRL: DPORT_APP_BOOT_REMAP_CTRL
	// Position of APP_BOOT_REMAP field.
	DPORT_APP_BOOT_REMAP_CTRL_APP_BOOT_REMAP_Pos = 0x0
	// Bit mask of APP_BOOT_REMAP field.
	DPORT_APP_BOOT_REMAP_CTRL_APP_BOOT_REMAP_Msk = 0x1
	// Bit APP_BOOT_REMAP.
	DPORT_APP_BOOT_REMAP_CTRL_APP_BOOT_REMAP = 0x1

	// ACCESS_CHECK: DPORT_ACCESS_CHECK
	// Position of ACCESS_CHECK_APP field.
	DPORT_ACCESS_CHECK_ACCESS_CHECK_APP_Pos = 0x8
	// Bit mask of ACCESS_CHECK_APP field.
	DPORT_ACCESS_CHECK_ACCESS_CHECK_APP_Msk = 0x100
	// Bit ACCESS_CHECK_APP.
	DPORT_ACCESS_CHECK_ACCESS_CHECK_APP = 0x100
	// Position of ACCESS_CHECK_PRO field.
	DPORT_ACCESS_CHECK_ACCESS_CHECK_PRO_Pos = 0x0
	// Bit mask of ACCESS_CHECK_PRO field.
	DPORT_ACCESS_CHECK_ACCESS_CHECK_PRO_Msk = 0x1
	// Bit ACCESS_CHECK_PRO.
	DPORT_ACCESS_CHECK_ACCESS_CHECK_PRO = 0x1

	// PRO_DPORT_APB_MASK0: DPORT_PRO_DPORT_APB_MASK0
	// Position of PRODPORT_APB_MASK0 field.
	DPORT_PRO_DPORT_APB_MASK0_PRODPORT_APB_MASK0_Pos = 0x0
	// Bit mask of PRODPORT_APB_MASK0 field.
	DPORT_PRO_DPORT_APB_MASK0_PRODPORT_APB_MASK0_Msk = 0xffffffff

	// PRO_DPORT_APB_MASK1: DPORT_PRO_DPORT_APB_MASK1
	// Position of PRODPORT_APB_MASK1 field.
	DPORT_PRO_DPORT_APB_MASK1_PRODPORT_APB_MASK1_Pos = 0x0
	// Bit mask of PRODPORT_APB_MASK1 field.
	DPORT_PRO_DPORT_APB_MASK1_PRODPORT_APB_MASK1_Msk = 0xffffffff

	// APP_DPORT_APB_MASK0: DPORT_APP_DPORT_APB_MASK0
	// Position of APPDPORT_APB_MASK0 field.
	DPORT_APP_DPORT_APB_MASK0_APPDPORT_APB_MASK0_Pos = 0x0
	// Bit mask of APPDPORT_APB_MASK0 field.
	DPORT_APP_DPORT_APB_MASK0_APPDPORT_APB_MASK0_Msk = 0xffffffff

	// APP_DPORT_APB_MASK1: DPORT_APP_DPORT_APB_MASK1
	// Position of APPDPORT_APB_MASK1 field.
	DPORT_APP_DPORT_APB_MASK1_APPDPORT_APB_MASK1_Pos = 0x0
	// Bit mask of APPDPORT_APB_MASK1 field.
	DPORT_APP_DPORT_APB_MASK1_APPDPORT_APB_MASK1_Msk = 0xffffffff

	// PERI_CLK_EN: DPORT_PERI_CLK_EN
	// Position of PERI_CLK_EN field.
	DPORT_PERI_CLK_EN_PERI_CLK_EN_Pos = 0x0
	// Bit mask of PERI_CLK_EN field.
	DPORT_PERI_CLK_EN_PERI_CLK_EN_Msk = 0xffffffff
	// Position of DIGITAL_SIGNATURE field.
	DPORT_PERI_CLK_EN_DIGITAL_SIGNATURE_Pos = 0x4
	// Bit mask of DIGITAL_SIGNATURE field.
	DPORT_PERI_CLK_EN_DIGITAL_SIGNATURE_Msk = 0x10
	// Bit DIGITAL_SIGNATURE.
	DPORT_PERI_CLK_EN_DIGITAL_SIGNATURE = 0x10
	// Position of SECURE_BOOT field.
	DPORT_PERI_CLK_EN_SECURE_BOOT_Pos = 0x3
	// Bit mask of SECURE_BOOT field.
	DPORT_PERI_CLK_EN_SECURE_BOOT_Msk = 0x8
	// Bit SECURE_BOOT.
	DPORT_PERI_CLK_EN_SECURE_BOOT = 0x8
	// Position of RSA_ACCELERATOR field.
	DPORT_PERI_CLK_EN_RSA_ACCELERATOR_Pos = 0x2
	// Bit mask of RSA_ACCELERATOR field.
	DPORT_PERI_CLK_EN_RSA_ACCELERATOR_Msk = 0x4
	// Bit RSA_ACCELERATOR.
	DPORT_PERI_CLK_EN_RSA_ACCELERATOR = 0x4
	// Position of SHA_ACCELERATOR field.
	DPORT_PERI_CLK_EN_SHA_ACCELERATOR_Pos = 0x1
	// Bit mask of SHA_ACCELERATOR field.
	DPORT_PERI_CLK_EN_SHA_ACCELERATOR_Msk = 0x2
	// Bit SHA_ACCELERATOR.
	DPORT_PERI_CLK_EN_SHA_ACCELERATOR = 0x2
	// Position of AES_ACCELERATOR field.
	DPORT_PERI_CLK_EN_AES_ACCELERATOR_Pos = 0x0
	// Bit mask of AES_ACCELERATOR field.
	DPORT_PERI_CLK_EN_AES_ACCELERATOR_Msk = 0x1
	// Bit AES_ACCELERATOR.
	DPORT_PERI_CLK_EN_AES_ACCELERATOR = 0x1

	// PERI_RST_EN: DPORT_PERI_RST_EN
	// Position of PERI_RST_EN field.
	DPORT_PERI_RST_EN_PERI_RST_EN_Pos = 0x0
	// Bit mask of PERI_RST_EN field.
	DPORT_PERI_RST_EN_PERI_RST_EN_Msk = 0xffffffff
	// Position of DIGITAL_SIGNATURE field.
	DPORT_PERI_RST_EN_DIGITAL_SIGNATURE_Pos = 0x4
	// Bit mask of DIGITAL_SIGNATURE field.
	DPORT_PERI_RST_EN_DIGITAL_SIGNATURE_Msk = 0x10
	// Bit DIGITAL_SIGNATURE.
	DPORT_PERI_RST_EN_DIGITAL_SIGNATURE = 0x10
	// Position of SECURE_BOOT field.
	DPORT_PERI_RST_EN_SECURE_BOOT_Pos = 0x3
	// Bit mask of SECURE_BOOT field.
	DPORT_PERI_RST_EN_SECURE_BOOT_Msk = 0x8
	// Bit SECURE_BOOT.
	DPORT_PERI_RST_EN_SECURE_BOOT = 0x8
	// Position of RSA_ACCELERATOR field.
	DPORT_PERI_RST_EN_RSA_ACCELERATOR_Pos = 0x2
	// Bit mask of RSA_ACCELERATOR field.
	DPORT_PERI_RST_EN_RSA_ACCELERATOR_Msk = 0x4
	// Bit RSA_ACCELERATOR.
	DPORT_PERI_RST_EN_RSA_ACCELERATOR = 0x4
	// Position of SHA_ACCELERATOR field.
	DPORT_PERI_RST_EN_SHA_ACCELERATOR_Pos = 0x1
	// Bit mask of SHA_ACCELERATOR field.
	DPORT_PERI_RST_EN_SHA_ACCELERATOR_Msk = 0x2
	// Bit SHA_ACCELERATOR.
	DPORT_PERI_RST_EN_SHA_ACCELERATOR = 0x2
	// Position of AES_ACCELERATOR field.
	DPORT_PERI_RST_EN_AES_ACCELERATOR_Pos = 0x0
	// Bit mask of AES_ACCELERATOR field.
	DPORT_PERI_RST_EN_AES_ACCELERATOR_Msk = 0x1
	// Bit AES_ACCELERATOR.
	DPORT_PERI_RST_EN_AES_ACCELERATOR = 0x1

	// WIFI_BB_CFG: DPORT_WIFI_BB_CFG
	// Position of WIFI_BB_CFG field.
	DPORT_WIFI_BB_CFG_WIFI_BB_CFG_Pos = 0x0
	// Bit mask of WIFI_BB_CFG field.
	DPORT_WIFI_BB_CFG_WIFI_BB_CFG_Msk = 0xffffffff

	// WIFI_BB_CFG_2: DPORT_WIFI_BB_CFG_2
	// Position of WIFI_BB_CFG_2 field.
	DPORT_WIFI_BB_CFG_2_WIFI_BB_CFG_2_Pos = 0x0
	// Bit mask of WIFI_BB_CFG_2 field.
	DPORT_WIFI_BB_CFG_2_WIFI_BB_CFG_2_Msk = 0xffffffff

	// APPCPU_CTRL_A: DPORT_APPCPU_CTRL_A
	// Position of APPCPU_RESETTING field.
	DPORT_APPCPU_CTRL_A_APPCPU_RESETTING_Pos = 0x0
	// Bit mask of APPCPU_RESETTING field.
	DPORT_APPCPU_CTRL_A_APPCPU_RESETTING_Msk = 0x1
	// Bit APPCPU_RESETTING.
	DPORT_APPCPU_CTRL_A_APPCPU_RESETTING = 0x1

	// APPCPU_CTRL_B: DPORT_APPCPU_CTRL_B
	// Position of APPCPU_CLKGATE_EN field.
	DPORT_APPCPU_CTRL_B_APPCPU_CLKGATE_EN_Pos = 0x0
	// Bit mask of APPCPU_CLKGATE_EN field.
	DPORT_APPCPU_CTRL_B_APPCPU_CLKGATE_EN_Msk = 0x1
	// Bit APPCPU_CLKGATE_EN.
	DPORT_APPCPU_CTRL_B_APPCPU_CLKGATE_EN = 0x1

	// APPCPU_CTRL_C: DPORT_APPCPU_CTRL_C
	// Position of APPCPU_RUNSTALL field.
	DPORT_APPCPU_CTRL_C_APPCPU_RUNSTALL_Pos = 0x0
	// Bit mask of APPCPU_RUNSTALL field.
	DPORT_APPCPU_CTRL_C_APPCPU_RUNSTALL_Msk = 0x1
	// Bit APPCPU_RUNSTALL.
	DPORT_APPCPU_CTRL_C_APPCPU_RUNSTALL = 0x1

	// APPCPU_CTRL_D: DPORT_APPCPU_CTRL_D
	// Position of APPCPU_BOOT_ADDR field.
	DPORT_APPCPU_CTRL_D_APPCPU_BOOT_ADDR_Pos = 0x0
	// Bit mask of APPCPU_BOOT_ADDR field.
	DPORT_APPCPU_CTRL_D_APPCPU_BOOT_ADDR_Msk = 0xffffffff

	// CPU_PER_CONF: DPORT_CPU_PER_CONF
	// Position of FAST_CLK_RTC_SEL field.
	DPORT_CPU_PER_CONF_FAST_CLK_RTC_SEL_Pos = 0x3
	// Bit mask of FAST_CLK_RTC_SEL field.
	DPORT_CPU_PER_CONF_FAST_CLK_RTC_SEL_Msk = 0x8
	// Bit FAST_CLK_RTC_SEL.
	DPORT_CPU_PER_CONF_FAST_CLK_RTC_SEL = 0x8
	// Position of LOWSPEED_CLK_SEL field.
	DPORT_CPU_PER_CONF_LOWSPEED_CLK_SEL_Pos = 0x2
	// Bit mask of LOWSPEED_CLK_SEL field.
	DPORT_CPU_PER_CONF_LOWSPEED_CLK_SEL_Msk = 0x4
	// Bit LOWSPEED_CLK_SEL.
	DPORT_CPU_PER_CONF_LOWSPEED_CLK_SEL = 0x4
	// Position of CPUPERIOD_SEL field.
	DPORT_CPU_PER_CONF_CPUPERIOD_SEL_Pos = 0x0
	// Bit mask of CPUPERIOD_SEL field.
	DPORT_CPU_PER_CONF_CPUPERIOD_SEL_Msk = 0x3
	// Select 80 MHz clock
	DPORT_CPU_PER_CONF_CPUPERIOD_SEL_SEL_80 = 0x0
	// Select 160 MHz clock
	DPORT_CPU_PER_CONF_CPUPERIOD_SEL_SEL_160 = 0x1
	// Select 240 MHz clock
	DPORT_CPU_PER_CONF_CPUPERIOD_SEL_SEL_240 = 0x2

	// PRO_CACHE_CTRL: DPORT_PRO_CACHE_CTRL
	// Position of PRO_DRAM_HL field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_HL_Pos = 0x10
	// Bit mask of PRO_DRAM_HL field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_HL_Msk = 0x10000
	// Bit PRO_DRAM_HL.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_HL = 0x10000
	// Position of SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_SLAVE_REQ_Pos = 0xf
	// Bit mask of SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_SLAVE_REQ_Msk = 0x8000
	// Bit SLAVE_REQ.
	DPORT_PRO_CACHE_CTRL_SLAVE_REQ = 0x8000
	// Position of AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_AHB_SPI_REQ_Pos = 0xe
	// Bit mask of AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_AHB_SPI_REQ_Msk = 0x4000
	// Bit AHB_SPI_REQ.
	DPORT_PRO_CACHE_CTRL_AHB_SPI_REQ = 0x4000
	// Position of PRO_SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_SLAVE_REQ_Pos = 0xd
	// Bit mask of PRO_SLAVE_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_SLAVE_REQ_Msk = 0x2000
	// Bit PRO_SLAVE_REQ.
	DPORT_PRO_CACHE_CTRL_PRO_SLAVE_REQ = 0x2000
	// Position of PRO_AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_AHB_SPI_REQ_Pos = 0xc
	// Bit mask of PRO_AHB_SPI_REQ field.
	DPORT_PRO_CACHE_CTRL_PRO_AHB_SPI_REQ_Msk = 0x1000
	// Bit PRO_AHB_SPI_REQ.
	DPORT_PRO_CACHE_CTRL_PRO_AHB_SPI_REQ = 0x1000
	// Position of PRO_DRAM_SPLIT field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_SPLIT_Pos = 0xb
	// Bit mask of PRO_DRAM_SPLIT field.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_SPLIT_Msk = 0x800
	// Bit PRO_DRAM_SPLIT.
	DPORT_PRO_CACHE_CTRL_PRO_DRAM_SPLIT = 0x800
	// Position of PRO_SINGLE_IRAM_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA_Pos = 0xa
	// Bit mask of PRO_SINGLE_IRAM_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA_Msk = 0x400
	// Bit PRO_SINGLE_IRAM_ENA.
	DPORT_PRO_CACHE_CTRL_PRO_SINGLE_IRAM_ENA = 0x400
	// Position of PRO_CACHE_LOCK_3_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN_Pos = 0x9
	// Bit mask of PRO_CACHE_LOCK_3_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN_Msk = 0x200
	// Bit PRO_CACHE_LOCK_3_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_3_EN = 0x200
	// Position of PRO_CACHE_LOCK_2_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN_Pos = 0x8
	// Bit mask of PRO_CACHE_LOCK_2_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN_Msk = 0x100
	// Bit PRO_CACHE_LOCK_2_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_2_EN = 0x100
	// Position of PRO_CACHE_LOCK_1_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN_Pos = 0x7
	// Bit mask of PRO_CACHE_LOCK_1_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN_Msk = 0x80
	// Bit PRO_CACHE_LOCK_1_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_1_EN = 0x80
	// Position of PRO_CACHE_LOCK_0_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN_Pos = 0x6
	// Bit mask of PRO_CACHE_LOCK_0_EN field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN_Msk = 0x40
	// Bit PRO_CACHE_LOCK_0_EN.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_LOCK_0_EN = 0x40
	// Position of PRO_CACHE_FLUSH_DONE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE_Pos = 0x5
	// Bit mask of PRO_CACHE_FLUSH_DONE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE_Msk = 0x20
	// Bit PRO_CACHE_FLUSH_DONE.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_DONE = 0x20
	// Position of PRO_CACHE_FLUSH_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA_Pos = 0x4
	// Bit mask of PRO_CACHE_FLUSH_ENA field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA_Msk = 0x10
	// Bit PRO_CACHE_FLUSH_ENA.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_FLUSH_ENA = 0x10
	// Position of PRO_CACHE_ENABLE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_ENABLE_Pos = 0x3
	// Bit mask of PRO_CACHE_ENABLE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_ENABLE_Msk = 0x8
	// Bit PRO_CACHE_ENABLE.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_ENABLE = 0x8
	// Position of PRO_CACHE_MODE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_MODE_Pos = 0x2
	// Bit mask of PRO_CACHE_MODE field.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_MODE_Msk = 0x4
	// Bit PRO_CACHE_MODE.
	DPORT_PRO_CACHE_CTRL_PRO_CACHE_MODE = 0x4

	// PRO_CACHE_CTRL1: DPORT_PRO_CACHE_CTRL1
	// Position of PRO_CACHE_MMU_IA_CLR field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR_Pos = 0xd
	// Bit mask of PRO_CACHE_MMU_IA_CLR field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR_Msk = 0x2000
	// Bit PRO_CACHE_MMU_IA_CLR.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MMU_IA_CLR = 0x2000
	// Position of PRO_CMMU_PD field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_PD_Pos = 0xc
	// Bit mask of PRO_CMMU_PD field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_PD_Msk = 0x1000
	// Bit PRO_CMMU_PD.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_PD = 0x1000
	// Position of PRO_CMMU_FORCE_ON field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON_Pos = 0xb
	// Bit mask of PRO_CMMU_FORCE_ON field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON_Msk = 0x800
	// Bit PRO_CMMU_FORCE_ON.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FORCE_ON = 0x800
	// Position of PRO_CMMU_FLASH_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE_Pos = 0x9
	// Bit mask of PRO_CMMU_FLASH_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_FLASH_PAGE_MODE_Msk = 0x600
	// Position of PRO_CMMU_SRAM_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE_Pos = 0x6
	// Bit mask of PRO_CMMU_SRAM_PAGE_MODE field.
	DPORT_PRO_CACHE_CTRL1_PRO_CMMU_SRAM_PAGE_MODE_Msk = 0x1c0
	// Position of PRO_CACHE_MASK_OPSDRAM field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM_Pos = 0x5
	// Bit mask of PRO_CACHE_MASK_OPSDRAM field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM_Msk = 0x20
	// Bit PRO_CACHE_MASK_OPSDRAM.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_OPSDRAM = 0x20
	// Position of PRO_CACHE_MASK_DROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0_Pos = 0x4
	// Bit mask of PRO_CACHE_MASK_DROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0_Msk = 0x10
	// Bit PRO_CACHE_MASK_DROM0.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DROM0 = 0x10
	// Position of PRO_CACHE_MASK_DRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1_Pos = 0x3
	// Bit mask of PRO_CACHE_MASK_DRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1_Msk = 0x8
	// Bit PRO_CACHE_MASK_DRAM1.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_DRAM1 = 0x8
	// Position of PRO_CACHE_MASK_IROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0_Pos = 0x2
	// Bit mask of PRO_CACHE_MASK_IROM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0_Msk = 0x4
	// Bit PRO_CACHE_MASK_IROM0.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IROM0 = 0x4
	// Position of PRO_CACHE_MASK_IRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1_Pos = 0x1
	// Bit mask of PRO_CACHE_MASK_IRAM1 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1_Msk = 0x2
	// Bit PRO_CACHE_MASK_IRAM1.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM1 = 0x2
	// Position of PRO_CACHE_MASK_IRAM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0_Pos = 0x0
	// Bit mask of PRO_CACHE_MASK_IRAM0 field.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0_Msk = 0x1
	// Bit PRO_CACHE_MASK_IRAM0.
	DPORT_PRO_CACHE_CTRL1_PRO_CACHE_MASK_IRAM0 = 0x1

	// PRO_CACHE_LOCK_0_ADDR: DPORT_PRO_CACHE_LOCK_0_ADDR
	// Position of PRO_CACHE_LOCK_0_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MAX_Pos = 0x12
	// Bit mask of PRO_CACHE_LOCK_0_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MAX_Msk = 0x3c0000
	// Position of PRO_CACHE_LOCK_0_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MIN_Pos = 0xe
	// Bit mask of PRO_CACHE_LOCK_0_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_MIN_Msk = 0x3c000
	// Position of PRO_CACHE_LOCK_0_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_PRE_Pos = 0x0
	// Bit mask of PRO_CACHE_LOCK_0_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_0_ADDR_PRO_CACHE_LOCK_0_ADDR_PRE_Msk = 0x3fff

	// PRO_CACHE_LOCK_1_ADDR: DPORT_PRO_CACHE_LOCK_1_ADDR
	// Position of PRO_CACHE_LOCK_1_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MAX_Pos = 0x12
	// Bit mask of PRO_CACHE_LOCK_1_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MAX_Msk = 0x3c0000
	// Position of PRO_CACHE_LOCK_1_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MIN_Pos = 0xe
	// Bit mask of PRO_CACHE_LOCK_1_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_MIN_Msk = 0x3c000
	// Position of PRO_CACHE_LOCK_1_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_PRE_Pos = 0x0
	// Bit mask of PRO_CACHE_LOCK_1_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_1_ADDR_PRO_CACHE_LOCK_1_ADDR_PRE_Msk = 0x3fff

	// PRO_CACHE_LOCK_2_ADDR: DPORT_PRO_CACHE_LOCK_2_ADDR
	// Position of PRO_CACHE_LOCK_2_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MAX_Pos = 0x12
	// Bit mask of PRO_CACHE_LOCK_2_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MAX_Msk = 0x3c0000
	// Position of PRO_CACHE_LOCK_2_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MIN_Pos = 0xe
	// Bit mask of PRO_CACHE_LOCK_2_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_MIN_Msk = 0x3c000
	// Position of PRO_CACHE_LOCK_2_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_PRE_Pos = 0x0
	// Bit mask of PRO_CACHE_LOCK_2_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_2_ADDR_PRO_CACHE_LOCK_2_ADDR_PRE_Msk = 0x3fff

	// PRO_CACHE_LOCK_3_ADDR: DPORT_PRO_CACHE_LOCK_3_ADDR
	// Position of PRO_CACHE_LOCK_3_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MAX_Pos = 0x12
	// Bit mask of PRO_CACHE_LOCK_3_ADDR_MAX field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MAX_Msk = 0x3c0000
	// Position of PRO_CACHE_LOCK_3_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MIN_Pos = 0xe
	// Bit mask of PRO_CACHE_LOCK_3_ADDR_MIN field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_MIN_Msk = 0x3c000
	// Position of PRO_CACHE_LOCK_3_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_PRE_Pos = 0x0
	// Bit mask of PRO_CACHE_LOCK_3_ADDR_PRE field.
	DPORT_PRO_CACHE_LOCK_3_ADDR_PRO_CACHE_LOCK_3_ADDR_PRE_Msk = 0x3fff

	// APP_CACHE_CTRL: DPORT_APP_CACHE_CTRL
	// Position of APP_DRAM_HL field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_HL_Pos = 0xe
	// Bit mask of APP_DRAM_HL field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_HL_Msk = 0x4000
	// Bit APP_DRAM_HL.
	DPORT_APP_CACHE_CTRL_APP_DRAM_HL = 0x4000
	// Position of APP_SLAVE_REQ field.
	DPORT_APP_CACHE_CTRL_APP_SLAVE_REQ_Pos = 0xd
	// Bit mask of APP_SLAVE_REQ field.
	DPORT_APP_CACHE_CTRL_APP_SLAVE_REQ_Msk = 0x2000
	// Bit APP_SLAVE_REQ.
	DPORT_APP_CACHE_CTRL_APP_SLAVE_REQ = 0x2000
	// Position of APP_AHB_SPI_REQ field.
	DPORT_APP_CACHE_CTRL_APP_AHB_SPI_REQ_Pos = 0xc
	// Bit mask of APP_AHB_SPI_REQ field.
	DPORT_APP_CACHE_CTRL_APP_AHB_SPI_REQ_Msk = 0x1000
	// Bit APP_AHB_SPI_REQ.
	DPORT_APP_CACHE_CTRL_APP_AHB_SPI_REQ = 0x1000
	// Position of APP_DRAM_SPLIT field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_SPLIT_Pos = 0xb
	// Bit mask of APP_DRAM_SPLIT field.
	DPORT_APP_CACHE_CTRL_APP_DRAM_SPLIT_Msk = 0x800
	// Bit APP_DRAM_SPLIT.
	DPORT_APP_CACHE_CTRL_APP_DRAM_SPLIT = 0x800
	// Position of APP_SINGLE_IRAM_ENA field.
	DPORT_APP_CACHE_CTRL_APP_SINGLE_IRAM_ENA_Pos = 0xa
	// Bit mask of APP_SINGLE_IRAM_ENA field.
	DPORT_APP_CACHE_CTRL_APP_SINGLE_IRAM_ENA_Msk = 0x400
	// Bit APP_SINGLE_IRAM_ENA.
	DPORT_APP_CACHE_CTRL_APP_SINGLE_IRAM_ENA = 0x400
	// Position of APP_CACHE_LOCK_3_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_3_EN_Pos = 0x9
	// Bit mask of APP_CACHE_LOCK_3_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_3_EN_Msk = 0x200
	// Bit APP_CACHE_LOCK_3_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_3_EN = 0x200
	// Position of APP_CACHE_LOCK_2_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_2_EN_Pos = 0x8
	// Bit mask of APP_CACHE_LOCK_2_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_2_EN_Msk = 0x100
	// Bit APP_CACHE_LOCK_2_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_2_EN = 0x100
	// Position of APP_CACHE_LOCK_1_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_1_EN_Pos = 0x7
	// Bit mask of APP_CACHE_LOCK_1_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_1_EN_Msk = 0x80
	// Bit APP_CACHE_LOCK_1_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_1_EN = 0x80
	// Position of APP_CACHE_LOCK_0_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_0_EN_Pos = 0x6
	// Bit mask of APP_CACHE_LOCK_0_EN field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_0_EN_Msk = 0x40
	// Bit APP_CACHE_LOCK_0_EN.
	DPORT_APP_CACHE_CTRL_APP_CACHE_LOCK_0_EN = 0x40
	// Position of APP_CACHE_FLUSH_DONE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_DONE_Pos = 0x5
	// Bit mask of APP_CACHE_FLUSH_DONE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_DONE_Msk = 0x20
	// Bit APP_CACHE_FLUSH_DONE.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_DONE = 0x20
	// Position of APP_CACHE_FLUSH_ENA field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_ENA_Pos = 0x4
	// Bit mask of APP_CACHE_FLUSH_ENA field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_ENA_Msk = 0x10
	// Bit APP_CACHE_FLUSH_ENA.
	DPORT_APP_CACHE_CTRL_APP_CACHE_FLUSH_ENA = 0x10
	// Position of APP_CACHE_ENABLE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_ENABLE_Pos = 0x3
	// Bit mask of APP_CACHE_ENABLE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_ENABLE_Msk = 0x8
	// Bit APP_CACHE_ENABLE.
	DPORT_APP_CACHE_CTRL_APP_CACHE_ENABLE = 0x8
	// Position of APP_CACHE_MODE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_MODE_Pos = 0x2
	// Bit mask of APP_CACHE_MODE field.
	DPORT_APP_CACHE_CTRL_APP_CACHE_MODE_Msk = 0x4
	// Bit APP_CACHE_MODE.
	DPORT_APP_CACHE_CTRL_APP_CACHE_MODE = 0x4

	// APP_CACHE_CTRL1: DPORT_APP_CACHE_CTRL1
	// Position of APP_CACHE_MMU_IA_CLR field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR_Pos = 0xd
	// Bit mask of APP_CACHE_MMU_IA_CLR field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR_Msk = 0x2000
	// Bit APP_CACHE_MMU_IA_CLR.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MMU_IA_CLR = 0x2000
	// Position of APP_CMMU_PD field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_PD_Pos = 0xc
	// Bit mask of APP_CMMU_PD field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_PD_Msk = 0x1000
	// Bit APP_CMMU_PD.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_PD = 0x1000
	// Position of APP_CMMU_FORCE_ON field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FORCE_ON_Pos = 0xb
	// Bit mask of APP_CMMU_FORCE_ON field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FORCE_ON_Msk = 0x800
	// Bit APP_CMMU_FORCE_ON.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FORCE_ON = 0x800
	// Position of APP_CMMU_FLASH_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE_Pos = 0x9
	// Bit mask of APP_CMMU_FLASH_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_FLASH_PAGE_MODE_Msk = 0x600
	// Position of APP_CMMU_SRAM_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE_Pos = 0x6
	// Bit mask of APP_CMMU_SRAM_PAGE_MODE field.
	DPORT_APP_CACHE_CTRL1_APP_CMMU_SRAM_PAGE_MODE_Msk = 0x1c0
	// Position of APP_CACHE_MASK_OPSDRAM field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM_Pos = 0x5
	// Bit mask of APP_CACHE_MASK_OPSDRAM field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM_Msk = 0x20
	// Bit APP_CACHE_MASK_OPSDRAM.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_OPSDRAM = 0x20
	// Position of APP_CACHE_MASK_DROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DROM0_Pos = 0x4
	// Bit mask of APP_CACHE_MASK_DROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DROM0_Msk = 0x10
	// Bit APP_CACHE_MASK_DROM0.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DROM0 = 0x10
	// Position of APP_CACHE_MASK_DRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1_Pos = 0x3
	// Bit mask of APP_CACHE_MASK_DRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1_Msk = 0x8
	// Bit APP_CACHE_MASK_DRAM1.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_DRAM1 = 0x8
	// Position of APP_CACHE_MASK_IROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IROM0_Pos = 0x2
	// Bit mask of APP_CACHE_MASK_IROM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IROM0_Msk = 0x4
	// Bit APP_CACHE_MASK_IROM0.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IROM0 = 0x4
	// Position of APP_CACHE_MASK_IRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1_Pos = 0x1
	// Bit mask of APP_CACHE_MASK_IRAM1 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1_Msk = 0x2
	// Bit APP_CACHE_MASK_IRAM1.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM1 = 0x2
	// Position of APP_CACHE_MASK_IRAM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0_Pos = 0x0
	// Bit mask of APP_CACHE_MASK_IRAM0 field.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0_Msk = 0x1
	// Bit APP_CACHE_MASK_IRAM0.
	DPORT_APP_CACHE_CTRL1_APP_CACHE_MASK_IRAM0 = 0x1

	// APP_CACHE_LOCK_0_ADDR: DPORT_APP_CACHE_LOCK_0_ADDR
	// Position of APP_CACHE_LOCK_0_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MAX_Pos = 0x12
	// Bit mask of APP_CACHE_LOCK_0_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MAX_Msk = 0x3c0000
	// Position of APP_CACHE_LOCK_0_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MIN_Pos = 0xe
	// Bit mask of APP_CACHE_LOCK_0_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_MIN_Msk = 0x3c000
	// Position of APP_CACHE_LOCK_0_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_PRE_Pos = 0x0
	// Bit mask of APP_CACHE_LOCK_0_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_0_ADDR_APP_CACHE_LOCK_0_ADDR_PRE_Msk = 0x3fff

	// APP_CACHE_LOCK_1_ADDR: DPORT_APP_CACHE_LOCK_1_ADDR
	// Position of APP_CACHE_LOCK_1_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MAX_Pos = 0x12
	// Bit mask of APP_CACHE_LOCK_1_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MAX_Msk = 0x3c0000
	// Position of APP_CACHE_LOCK_1_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MIN_Pos = 0xe
	// Bit mask of APP_CACHE_LOCK_1_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_MIN_Msk = 0x3c000
	// Position of APP_CACHE_LOCK_1_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_PRE_Pos = 0x0
	// Bit mask of APP_CACHE_LOCK_1_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_1_ADDR_APP_CACHE_LOCK_1_ADDR_PRE_Msk = 0x3fff

	// APP_CACHE_LOCK_2_ADDR: DPORT_APP_CACHE_LOCK_2_ADDR
	// Position of APP_CACHE_LOCK_2_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MAX_Pos = 0x12
	// Bit mask of APP_CACHE_LOCK_2_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MAX_Msk = 0x3c0000
	// Position of APP_CACHE_LOCK_2_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MIN_Pos = 0xe
	// Bit mask of APP_CACHE_LOCK_2_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_MIN_Msk = 0x3c000
	// Position of APP_CACHE_LOCK_2_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_PRE_Pos = 0x0
	// Bit mask of APP_CACHE_LOCK_2_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_2_ADDR_APP_CACHE_LOCK_2_ADDR_PRE_Msk = 0x3fff

	// APP_CACHE_LOCK_3_ADDR: DPORT_APP_CACHE_LOCK_3_ADDR
	// Position of APP_CACHE_LOCK_3_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MAX_Pos = 0x12
	// Bit mask of APP_CACHE_LOCK_3_ADDR_MAX field.
	DPORT_APP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MAX_Msk = 0x3c0000
	// Position of APP_CACHE_LOCK_3_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MIN_Pos = 0xe
	// Bit mask of APP_CACHE_LOCK_3_ADDR_MIN field.
	DPORT_APP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_MIN_Msk = 0x3c000
	// Position of APP_CACHE_LOCK_3_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_PRE_Pos = 0x0
	// Bit mask of APP_CACHE_LOCK_3_ADDR_PRE field.
	DPORT_APP_CACHE_LOCK_3_ADDR_APP_CACHE_LOCK_3_ADDR_PRE_Msk = 0x3fff

	// TRACEMEM_MUX_MODE: DPORT_TRACEMEM_MUX_MODE
	// Position of TRACEMEM_MUX_MODE field.
	DPORT_TRACEMEM_MUX_MODE_TRACEMEM_MUX_MODE_Pos = 0x0
	// Bit mask of TRACEMEM_MUX_MODE field.
	DPORT_TRACEMEM_MUX_MODE_TRACEMEM_MUX_MODE_Msk = 0x3

	// PRO_TRACEMEM_ENA: DPORT_PRO_TRACEMEM_ENA
	// Position of PRO_TRACEMEM_ENA field.
	DPORT_PRO_TRACEMEM_ENA_PRO_TRACEMEM_ENA_Pos = 0x0
	// Bit mask of PRO_TRACEMEM_ENA field.
	DPORT_PRO_TRACEMEM_ENA_PRO_TRACEMEM_ENA_Msk = 0x1
	// Bit PRO_TRACEMEM_ENA.
	DPORT_PRO_TRACEMEM_ENA_PRO_TRACEMEM_ENA = 0x1

	// APP_TRACEMEM_ENA: DPORT_APP_TRACEMEM_ENA
	// Position of APP_TRACEMEM_ENA field.
	DPORT_APP_TRACEMEM_ENA_APP_TRACEMEM_ENA_Pos = 0x0
	// Bit mask of APP_TRACEMEM_ENA field.
	DPORT_APP_TRACEMEM_ENA_APP_TRACEMEM_ENA_Msk = 0x1
	// Bit APP_TRACEMEM_ENA.
	DPORT_APP_TRACEMEM_ENA_APP_TRACEMEM_ENA = 0x1

	// CACHE_MUX_MODE: DPORT_CACHE_MUX_MODE
	// Position of CACHE_MUX_MODE field.
	DPORT_CACHE_MUX_MODE_CACHE_MUX_MODE_Pos = 0x0
	// Bit mask of CACHE_MUX_MODE field.
	DPORT_CACHE_MUX_MODE_CACHE_MUX_MODE_Msk = 0x3

	// IMMU_PAGE_MODE: DPORT_IMMU_PAGE_MODE
	// Position of IMMU_PAGE_MODE field.
	DPORT_IMMU_PAGE_MODE_IMMU_PAGE_MODE_Pos = 0x1
	// Bit mask of IMMU_PAGE_MODE field.
	DPORT_IMMU_PAGE_MODE_IMMU_PAGE_MODE_Msk = 0x6
	// Position of INTERNAL_SRAM_IMMU_ENA field.
	DPORT_IMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA_Pos = 0x0
	// Bit mask of INTERNAL_SRAM_IMMU_ENA field.
	DPORT_IMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA_Msk = 0x1
	// Bit INTERNAL_SRAM_IMMU_ENA.
	DPORT_IMMU_PAGE_MODE_INTERNAL_SRAM_IMMU_ENA = 0x1

	// DMMU_PAGE_MODE: DPORT_DMMU_PAGE_MODE
	// Position of DMMU_PAGE_MODE field.
	DPORT_DMMU_PAGE_MODE_DMMU_PAGE_MODE_Pos = 0x1
	// Bit mask of DMMU_PAGE_MODE field.
	DPORT_DMMU_PAGE_MODE_DMMU_PAGE_MODE_Msk = 0x6
	// Position of INTERNAL_SRAM_DMMU_ENA field.
	DPORT_DMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA_Pos = 0x0
	// Bit mask of INTERNAL_SRAM_DMMU_ENA field.
	DPORT_DMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA_Msk = 0x1
	// Bit INTERNAL_SRAM_DMMU_ENA.
	DPORT_DMMU_PAGE_MODE_INTERNAL_SRAM_DMMU_ENA = 0x1

	// ROM_MPU_ENA: DPORT_ROM_MPU_ENA
	// Position of APP_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_APP_ROM_MPU_ENA_Pos = 0x2
	// Bit mask of APP_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_APP_ROM_MPU_ENA_Msk = 0x4
	// Bit APP_ROM_MPU_ENA.
	DPORT_ROM_MPU_ENA_APP_ROM_MPU_ENA = 0x4
	// Position of PRO_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_PRO_ROM_MPU_ENA_Pos = 0x1
	// Bit mask of PRO_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_PRO_ROM_MPU_ENA_Msk = 0x2
	// Bit PRO_ROM_MPU_ENA.
	DPORT_ROM_MPU_ENA_PRO_ROM_MPU_ENA = 0x2
	// Position of SHARE_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_SHARE_ROM_MPU_ENA_Pos = 0x0
	// Bit mask of SHARE_ROM_MPU_ENA field.
	DPORT_ROM_MPU_ENA_SHARE_ROM_MPU_ENA_Msk = 0x1
	// Bit SHARE_ROM_MPU_ENA.
	DPORT_ROM_MPU_ENA_SHARE_ROM_MPU_ENA = 0x1

	// MEM_PD_MASK: DPORT_MEM_PD_MASK
	// Position of LSLP_MEM_PD_MASK field.
	DPORT_MEM_PD_MASK_LSLP_MEM_PD_MASK_Pos = 0x0
	// Bit mask of LSLP_MEM_PD_MASK field.
	DPORT_MEM_PD_MASK_LSLP_MEM_PD_MASK_Msk = 0x1
	// Bit LSLP_MEM_PD_MASK.
	DPORT_MEM_PD_MASK_LSLP_MEM_PD_MASK = 0x1

	// ROM_PD_CTRL: DPORT_ROM_PD_CTRL
	// Position of SHARE_ROM_PD field.
	DPORT_ROM_PD_CTRL_SHARE_ROM_PD_Pos = 0x2
	// Bit mask of SHARE_ROM_PD field.
	DPORT_ROM_PD_CTRL_SHARE_ROM_PD_Msk = 0xfc
	// Position of APP_ROM_PD field.
	DPORT_ROM_PD_CTRL_APP_ROM_PD_Pos = 0x1
	// Bit mask of APP_ROM_PD field.
	DPORT_ROM_PD_CTRL_APP_ROM_PD_Msk = 0x2
	// Bit APP_ROM_PD.
	DPORT_ROM_PD_CTRL_APP_ROM_PD = 0x2
	// Position of PRO_ROM_PD field.
	DPORT_ROM_PD_CTRL_PRO_ROM_PD_Pos = 0x0
	// Bit mask of PRO_ROM_PD field.
	DPORT_ROM_PD_CTRL_PRO_ROM_PD_Msk = 0x1
	// Bit PRO_ROM_PD.
	DPORT_ROM_PD_CTRL_PRO_ROM_PD = 0x1

	// ROM_FO_CTRL: DPORT_ROM_FO_CTRL
	// Position of SHARE_ROM_FO field.
	DPORT_ROM_FO_CTRL_SHARE_ROM_FO_Pos = 0x2
	// Bit mask of SHARE_ROM_FO field.
	DPORT_ROM_FO_CTRL_SHARE_ROM_FO_Msk = 0xfc
	// Position of APP_ROM_FO field.
	DPORT_ROM_FO_CTRL_APP_ROM_FO_Pos = 0x1
	// Bit mask of APP_ROM_FO field.
	DPORT_ROM_FO_CTRL_APP_ROM_FO_Msk = 0x2
	// Bit APP_ROM_FO.
	DPORT_ROM_FO_CTRL_APP_ROM_FO = 0x2
	// Position of PRO_ROM_FO field.
	DPORT_ROM_FO_CTRL_PRO_ROM_FO_Pos = 0x0
	// Bit mask of PRO_ROM_FO field.
	DPORT_ROM_FO_CTRL_PRO_ROM_FO_Msk = 0x1
	// Bit PRO_ROM_FO.
	DPORT_ROM_FO_CTRL_PRO_ROM_FO = 0x1

	// SRAM_PD_CTRL_0: DPORT_SRAM_PD_CTRL_0
	// Position of SRAM_PD_0 field.
	DPORT_SRAM_PD_CTRL_0_SRAM_PD_0_Pos = 0x0
	// Bit mask of SRAM_PD_0 field.
	DPORT_SRAM_PD_CTRL_0_SRAM_PD_0_Msk = 0xffffffff

	// SRAM_PD_CTRL_1: DPORT_SRAM_PD_CTRL_1
	// Position of SRAM_PD_1 field.
	DPORT_SRAM_PD_CTRL_1_SRAM_PD_1_Pos = 0x0
	// Bit mask of SRAM_PD_1 field.
	DPORT_SRAM_PD_CTRL_1_SRAM_PD_1_Msk = 0x1
	// Bit SRAM_PD_1.
	DPORT_SRAM_PD_CTRL_1_SRAM_PD_1 = 0x1

	// SRAM_FO_CTRL_0: DPORT_SRAM_FO_CTRL_0
	// Position of SRAM_FO_0 field.
	DPORT_SRAM_FO_CTRL_0_SRAM_FO_0_Pos = 0x0
	// Bit mask of SRAM_FO_0 field.
	DPORT_SRAM_FO_CTRL_0_SRAM_FO_0_Msk = 0xffffffff

	// SRAM_FO_CTRL_1: DPORT_SRAM_FO_CTRL_1
	// Position of SRAM_FO_1 field.
	DPORT_SRAM_FO_CTRL_1_SRAM_FO_1_Pos = 0x0
	// Bit mask of SRAM_FO_1 field.
	DPORT_SRAM_FO_CTRL_1_SRAM_FO_1_Msk = 0x1
	// Bit SRAM_FO_1.
	DPORT_SRAM_FO_CTRL_1_SRAM_FO_1 = 0x1

	// IRAM_DRAM_AHB_SEL: DPORT_IRAM_DRAM_AHB_SEL
	// Position of MAC_DUMP_MODE field.
	DPORT_IRAM_DRAM_AHB_SEL_MAC_DUMP_MODE_Pos = 0x5
	// Bit mask of MAC_DUMP_MODE field.
	DPORT_IRAM_DRAM_AHB_SEL_MAC_DUMP_MODE_Msk = 0x60
	// Position of MASK_AHB field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_AHB_Pos = 0x4
	// Bit mask of MASK_AHB field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_AHB_Msk = 0x10
	// Bit MASK_AHB.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_AHB = 0x10
	// Position of MASK_APP_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_DRAM_Pos = 0x3
	// Bit mask of MASK_APP_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_DRAM_Msk = 0x8
	// Bit MASK_APP_DRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_DRAM = 0x8
	// Position of MASK_PRO_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_DRAM_Pos = 0x2
	// Bit mask of MASK_PRO_DRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_DRAM_Msk = 0x4
	// Bit MASK_PRO_DRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_DRAM = 0x4
	// Position of MASK_APP_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_IRAM_Pos = 0x1
	// Bit mask of MASK_APP_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_IRAM_Msk = 0x2
	// Bit MASK_APP_IRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_APP_IRAM = 0x2
	// Position of MASK_PRO_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_IRAM_Pos = 0x0
	// Bit mask of MASK_PRO_IRAM field.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_IRAM_Msk = 0x1
	// Bit MASK_PRO_IRAM.
	DPORT_IRAM_DRAM_AHB_SEL_MASK_PRO_IRAM = 0x1

	// TAG_FO_CTRL: DPORT_TAG_FO_CTRL
	// Position of APP_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_PD_Pos = 0x9
	// Bit mask of APP_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_PD_Msk = 0x200
	// Bit APP_CACHE_TAG_PD.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_PD = 0x200
	// Position of APP_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON_Pos = 0x8
	// Bit mask of APP_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON_Msk = 0x100
	// Bit APP_CACHE_TAG_FORCE_ON.
	DPORT_TAG_FO_CTRL_APP_CACHE_TAG_FORCE_ON = 0x100
	// Position of PRO_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_PD_Pos = 0x1
	// Bit mask of PRO_CACHE_TAG_PD field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_PD_Msk = 0x2
	// Bit PRO_CACHE_TAG_PD.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_PD = 0x2
	// Position of PRO_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON_Pos = 0x0
	// Bit mask of PRO_CACHE_TAG_FORCE_ON field.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON_Msk = 0x1
	// Bit PRO_CACHE_TAG_FORCE_ON.
	DPORT_TAG_FO_CTRL_PRO_CACHE_TAG_FORCE_ON = 0x1

	// AHB_LITE_MASK: DPORT_AHB_LITE_MASK
	// Position of AHB_LITE_SDHOST_PID_REG field.
	DPORT_AHB_LITE_MASK_AHB_LITE_SDHOST_PID_REG_Pos = 0xb
	// Bit mask of AHB_LITE_SDHOST_PID_REG field.
	DPORT_AHB_LITE_MASK_AHB_LITE_SDHOST_PID_REG_Msk = 0x3800
	// Position of AHB_LITE_MASK_APPDPORT field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_APPDPORT_Pos = 0xa
	// Bit mask of AHB_LITE_MASK_APPDPORT field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_APPDPORT_Msk = 0x400
	// Bit AHB_LITE_MASK_APPDPORT.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_APPDPORT = 0x400
	// Position of AHB_LITE_MASK_PRODPORT field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_PRODPORT_Pos = 0x9
	// Bit mask of AHB_LITE_MASK_PRODPORT field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_PRODPORT_Msk = 0x200
	// Bit AHB_LITE_MASK_PRODPORT.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_PRODPORT = 0x200
	// Position of AHB_LITE_MASK_SDIO field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_SDIO_Pos = 0x8
	// Bit mask of AHB_LITE_MASK_SDIO field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_SDIO_Msk = 0x100
	// Bit AHB_LITE_MASK_SDIO.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_SDIO = 0x100
	// Position of AHB_LITE_MASK_APP field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_APP_Pos = 0x4
	// Bit mask of AHB_LITE_MASK_APP field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_APP_Msk = 0x10
	// Bit AHB_LITE_MASK_APP.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_APP = 0x10
	// Position of AHB_LITE_MASK_PRO field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_PRO_Pos = 0x0
	// Bit mask of AHB_LITE_MASK_PRO field.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_PRO_Msk = 0x1
	// Bit AHB_LITE_MASK_PRO.
	DPORT_AHB_LITE_MASK_AHB_LITE_MASK_PRO = 0x1

	// AHB_MPU_TABLE_0: DPORT_AHB_MPU_TABLE_0
	// Position of AHB_ACCESS_GRANT_0 field.
	DPORT_AHB_MPU_TABLE_0_AHB_ACCESS_GRANT_0_Pos = 0x0
	// Bit mask of AHB_ACCESS_GRANT_0 field.
	DPORT_AHB_MPU_TABLE_0_AHB_ACCESS_GRANT_0_Msk = 0xffffffff

	// AHB_MPU_TABLE_1: DPORT_AHB_MPU_TABLE_1
	// Position of AHB_ACCESS_GRANT_1 field.
	DPORT_AHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1_Pos = 0x0
	// Bit mask of AHB_ACCESS_GRANT_1 field.
	DPORT_AHB_MPU_TABLE_1_AHB_ACCESS_GRANT_1_Msk = 0x1ff

	// HOST_INF_SEL: DPORT_HOST_INF_SEL
	// Position of LINK_DEVICE_SEL field.
	DPORT_HOST_INF_SEL_LINK_DEVICE_SEL_Pos = 0x8
	// Bit mask of LINK_DEVICE_SEL field.
	DPORT_HOST_INF_SEL_LINK_DEVICE_SEL_Msk = 0xff00
	// Position of PERI_IO_SWAP field.
	DPORT_HOST_INF_SEL_PERI_IO_SWAP_Pos = 0x0
	// Bit mask of PERI_IO_SWAP field.
	DPORT_HOST_INF_SEL_PERI_IO_SWAP_Msk = 0xff

	// PERIP_CLK_EN: DPORT_PERIP_CLK_EN
	// Position of PERIP_CLK_EN field.
	DPORT_PERIP_CLK_EN_PERIP_CLK_EN_Pos = 0x0
	// Bit mask of PERIP_CLK_EN field.
	DPORT_PERIP_CLK_EN_PERIP_CLK_EN_Msk = 0xffffffff
	// Position of PWM3 field.
	DPORT_PERIP_CLK_EN_PWM3_Pos = 0x1a
	// Bit mask of PWM3 field.
	DPORT_PERIP_CLK_EN_PWM3_Msk = 0x4000000
	// Bit PWM3.
	DPORT_PERIP_CLK_EN_PWM3 = 0x4000000
	// Position of PWM2 field.
	DPORT_PERIP_CLK_EN_PWM2_Pos = 0x19
	// Bit mask of PWM2 field.
	DPORT_PERIP_CLK_EN_PWM2_Msk = 0x2000000
	// Bit PWM2.
	DPORT_PERIP_CLK_EN_PWM2 = 0x2000000
	// Position of UART_MEM field.
	DPORT_PERIP_CLK_EN_UART_MEM_Pos = 0x18
	// Bit mask of UART_MEM field.
	DPORT_PERIP_CLK_EN_UART_MEM_Msk = 0x1000000
	// Bit UART_MEM.
	DPORT_PERIP_CLK_EN_UART_MEM = 0x1000000
	// Position of UART2 field.
	DPORT_PERIP_CLK_EN_UART2_Pos = 0x17
	// Bit mask of UART2 field.
	DPORT_PERIP_CLK_EN_UART2_Msk = 0x800000
	// Bit UART2.
	DPORT_PERIP_CLK_EN_UART2 = 0x800000
	// Position of SPI_DMA field.
	DPORT_PERIP_CLK_EN_SPI_DMA_Pos = 0x16
	// Bit mask of SPI_DMA field.
	DPORT_PERIP_CLK_EN_SPI_DMA_Msk = 0x400000
	// Bit SPI_DMA.
	DPORT_PERIP_CLK_EN_SPI_DMA = 0x400000
	// Position of I2S1 field.
	DPORT_PERIP_CLK_EN_I2S1_Pos = 0x15
	// Bit mask of I2S1 field.
	DPORT_PERIP_CLK_EN_I2S1_Msk = 0x200000
	// Bit I2S1.
	DPORT_PERIP_CLK_EN_I2S1 = 0x200000
	// Position of PWM1 field.
	DPORT_PERIP_CLK_EN_PWM1_Pos = 0x14
	// Bit mask of PWM1 field.
	DPORT_PERIP_CLK_EN_PWM1_Msk = 0x100000
	// Bit PWM1.
	DPORT_PERIP_CLK_EN_PWM1 = 0x100000
	// Position of CAN field.
	DPORT_PERIP_CLK_EN_CAN_Pos = 0x13
	// Bit mask of CAN field.
	DPORT_PERIP_CLK_EN_CAN_Msk = 0x80000
	// Bit CAN.
	DPORT_PERIP_CLK_EN_CAN = 0x80000
	// Position of I2C1 field.
	DPORT_PERIP_CLK_EN_I2C1_Pos = 0x12
	// Bit mask of I2C1 field.
	DPORT_PERIP_CLK_EN_I2C1_Msk = 0x40000
	// Bit I2C1.
	DPORT_PERIP_CLK_EN_I2C1 = 0x40000
	// Position of PWM0 field.
	DPORT_PERIP_CLK_EN_PWM0_Pos = 0x11
	// Bit mask of PWM0 field.
	DPORT_PERIP_CLK_EN_PWM0_Msk = 0x20000
	// Bit PWM0.
	DPORT_PERIP_CLK_EN_PWM0 = 0x20000
	// Position of SPI3 field.
	DPORT_PERIP_CLK_EN_SPI3_Pos = 0x10
	// Bit mask of SPI3 field.
	DPORT_PERIP_CLK_EN_SPI3_Msk = 0x10000
	// Bit SPI3.
	DPORT_PERIP_CLK_EN_SPI3 = 0x10000
	// Position of TIMER_GROUP1 field.
	DPORT_PERIP_CLK_EN_TIMER_GROUP1_Pos = 0xf
	// Bit mask of TIMER_GROUP1 field.
	DPORT_PERIP_CLK_EN_TIMER_GROUP1_Msk = 0x8000
	// Bit TIMER_GROUP1.
	DPORT_PERIP_CLK_EN_TIMER_GROUP1 = 0x8000
	// Position of EFUSE field.
	DPORT_PERIP_CLK_EN_EFUSE_Pos = 0xe
	// Bit mask of EFUSE field.
	DPORT_PERIP_CLK_EN_EFUSE_Msk = 0x4000
	// Bit EFUSE.
	DPORT_PERIP_CLK_EN_EFUSE = 0x4000
	// Position of TIMER_GROUP0 field.
	DPORT_PERIP_CLK_EN_TIMER_GROUP0_Pos = 0xd
	// Bit mask of TIMER_GROUP0 field.
	DPORT_PERIP_CLK_EN_TIMER_GROUP0_Msk = 0x2000
	// Bit TIMER_GROUP0.
	DPORT_PERIP_CLK_EN_TIMER_GROUP0 = 0x2000
	// Position of UHCI1 field.
	DPORT_PERIP_CLK_EN_UHCI1_Pos = 0xc
	// Bit mask of UHCI1 field.
	DPORT_PERIP_CLK_EN_UHCI1_Msk = 0x1000
	// Bit UHCI1.
	DPORT_PERIP_CLK_EN_UHCI1 = 0x1000
	// Position of LED_PWM field.
	DPORT_PERIP_CLK_EN_LED_PWM_Pos = 0xb
	// Bit mask of LED_PWM field.
	DPORT_PERIP_CLK_EN_LED_PWM_Msk = 0x800
	// Bit LED_PWM.
	DPORT_PERIP_CLK_EN_LED_PWM = 0x800
	// Position of PULSE_CNT field.
	DPORT_PERIP_CLK_EN_PULSE_CNT_Pos = 0xa
	// Bit mask of PULSE_CNT field.
	DPORT_PERIP_CLK_EN_PULSE_CNT_Msk = 0x400
	// Bit PULSE_CNT.
	DPORT_PERIP_CLK_EN_PULSE_CNT = 0x400
	// Position of REMOTE_CONTROLLER field.
	DPORT_PERIP_CLK_EN_REMOTE_CONTROLLER_Pos = 0x9
	// Bit mask of REMOTE_CONTROLLER field.
	DPORT_PERIP_CLK_EN_REMOTE_CONTROLLER_Msk = 0x200
	// Bit REMOTE_CONTROLLER.
	DPORT_PERIP_CLK_EN_REMOTE_CONTROLLER = 0x200
	// Position of UHCI0 field.
	DPORT_PERIP_CLK_EN_UHCI0_Pos = 0x8
	// Bit mask of UHCI0 field.
	DPORT_PERIP_CLK_EN_UHCI0_Msk = 0x100
	// Bit UHCI0.
	DPORT_PERIP_CLK_EN_UHCI0 = 0x100
	// Position of I2C0 field.
	DPORT_PERIP_CLK_EN_I2C0_Pos = 0x7
	// Bit mask of I2C0 field.
	DPORT_PERIP_CLK_EN_I2C0_Msk = 0x80
	// Bit I2C0.
	DPORT_PERIP_CLK_EN_I2C0 = 0x80
	// Position of SPI2 field.
	DPORT_PERIP_CLK_EN_SPI2_Pos = 0x6
	// Bit mask of SPI2 field.
	DPORT_PERIP_CLK_EN_SPI2_Msk = 0x40
	// Bit SPI2.
	DPORT_PERIP_CLK_EN_SPI2 = 0x40
	// Position of UART1 field.
	DPORT_PERIP_CLK_EN_UART1_Pos = 0x5
	// Bit mask of UART1 field.
	DPORT_PERIP_CLK_EN_UART1_Msk = 0x20
	// Bit UART1.
	DPORT_PERIP_CLK_EN_UART1 = 0x20
	// Position of I2S0 field.
	DPORT_PERIP_CLK_EN_I2S0_Pos = 0x4
	// Bit mask of I2S0 field.
	DPORT_PERIP_CLK_EN_I2S0_Msk = 0x10
	// Bit I2S0.
	DPORT_PERIP_CLK_EN_I2S0 = 0x10
	// Position of WDG field.
	DPORT_PERIP_CLK_EN_WDG_Pos = 0x3
	// Bit mask of WDG field.
	DPORT_PERIP_CLK_EN_WDG_Msk = 0x8
	// Bit WDG.
	DPORT_PERIP_CLK_EN_WDG = 0x8
	// Position of UART0 field.
	DPORT_PERIP_CLK_EN_UART0_Pos = 0x2
	// Bit mask of UART0 field.
	DPORT_PERIP_CLK_EN_UART0_Msk = 0x4
	// Bit UART0.
	DPORT_PERIP_CLK_EN_UART0 = 0x4
	// Position of SPI0 field.
	DPORT_PERIP_CLK_EN_SPI0_Pos = 0x1
	// Bit mask of SPI0 field.
	DPORT_PERIP_CLK_EN_SPI0_Msk = 0x2
	// Bit SPI0.
	DPORT_PERIP_CLK_EN_SPI0 = 0x2
	// Position of TIMERS field.
	DPORT_PERIP_CLK_EN_TIMERS_Pos = 0x0
	// Bit mask of TIMERS field.
	DPORT_PERIP_CLK_EN_TIMERS_Msk = 0x1
	// Bit TIMERS.
	DPORT_PERIP_CLK_EN_TIMERS = 0x1

	// PERIP_RST_EN: DPORT_PERIP_RST_EN
	// Position of PERIP_RST field.
	DPORT_PERIP_RST_EN_PERIP_RST_Pos = 0x0
	// Bit mask of PERIP_RST field.
	DPORT_PERIP_RST_EN_PERIP_RST_Msk = 0xffffffff
	// Position of SPI_DECRYPT_ENABLE field.
	DPORT_PERIP_RST_EN_SPI_DECRYPT_ENABLE_Pos = 0xc
	// Bit mask of SPI_DECRYPT_ENABLE field.
	DPORT_PERIP_RST_EN_SPI_DECRYPT_ENABLE_Msk = 0x1000
	// Bit SPI_DECRYPT_ENABLE.
	DPORT_PERIP_RST_EN_SPI_DECRYPT_ENABLE = 0x1000
	// Position of SPI_ENCRYPT_ENABLE field.
	DPORT_PERIP_RST_EN_SPI_ENCRYPT_ENABLE_Pos = 0x8
	// Bit mask of SPI_ENCRYPT_ENABLE field.
	DPORT_PERIP_RST_EN_SPI_ENCRYPT_ENABLE_Msk = 0x100
	// Bit SPI_ENCRYPT_ENABLE.
	DPORT_PERIP_RST_EN_SPI_ENCRYPT_ENABLE = 0x100
	// Position of SLAVE_SPI_MASK_APP field.
	DPORT_PERIP_RST_EN_SLAVE_SPI_MASK_APP_Pos = 0x4
	// Bit mask of SLAVE_SPI_MASK_APP field.
	DPORT_PERIP_RST_EN_SLAVE_SPI_MASK_APP_Msk = 0x10
	// Bit SLAVE_SPI_MASK_APP.
	DPORT_PERIP_RST_EN_SLAVE_SPI_MASK_APP = 0x10
	// Position of SLAVE_SPI_MASK_PRO field.
	DPORT_PERIP_RST_EN_SLAVE_SPI_MASK_PRO_Pos = 0x0
	// Bit mask of SLAVE_SPI_MASK_PRO field.
	DPORT_PERIP_RST_EN_SLAVE_SPI_MASK_PRO_Msk = 0x1
	// Bit SLAVE_SPI_MASK_PRO.
	DPORT_PERIP_RST_EN_SLAVE_SPI_MASK_PRO = 0x1
	// Position of PWM3 field.
	DPORT_PERIP_RST_EN_PWM3_Pos = 0x1a
	// Bit mask of PWM3 field.
	DPORT_PERIP_RST_EN_PWM3_Msk = 0x4000000
	// Bit PWM3.
	DPORT_PERIP_RST_EN_PWM3 = 0x4000000
	// Position of PWM2 field.
	DPORT_PERIP_RST_EN_PWM2_Pos = 0x19
	// Bit mask of PWM2 field.
	DPORT_PERIP_RST_EN_PWM2_Msk = 0x2000000
	// Bit PWM2.
	DPORT_PERIP_RST_EN_PWM2 = 0x2000000
	// Position of UART_MEM field.
	DPORT_PERIP_RST_EN_UART_MEM_Pos = 0x18
	// Bit mask of UART_MEM field.
	DPORT_PERIP_RST_EN_UART_MEM_Msk = 0x1000000
	// Bit UART_MEM.
	DPORT_PERIP_RST_EN_UART_MEM = 0x1000000
	// Position of UART2 field.
	DPORT_PERIP_RST_EN_UART2_Pos = 0x17
	// Bit mask of UART2 field.
	DPORT_PERIP_RST_EN_UART2_Msk = 0x800000
	// Bit UART2.
	DPORT_PERIP_RST_EN_UART2 = 0x800000
	// Position of SPI_DMA field.
	DPORT_PERIP_RST_EN_SPI_DMA_Pos = 0x16
	// Bit mask of SPI_DMA field.
	DPORT_PERIP_RST_EN_SPI_DMA_Msk = 0x400000
	// Bit SPI_DMA.
	DPORT_PERIP_RST_EN_SPI_DMA = 0x400000
	// Position of I2S1 field.
	DPORT_PERIP_RST_EN_I2S1_Pos = 0x15
	// Bit mask of I2S1 field.
	DPORT_PERIP_RST_EN_I2S1_Msk = 0x200000
	// Bit I2S1.
	DPORT_PERIP_RST_EN_I2S1 = 0x200000
	// Position of PWM1 field.
	DPORT_PERIP_RST_EN_PWM1_Pos = 0x14
	// Bit mask of PWM1 field.
	DPORT_PERIP_RST_EN_PWM1_Msk = 0x100000
	// Bit PWM1.
	DPORT_PERIP_RST_EN_PWM1 = 0x100000
	// Position of CAN field.
	DPORT_PERIP_RST_EN_CAN_Pos = 0x13
	// Bit mask of CAN field.
	DPORT_PERIP_RST_EN_CAN_Msk = 0x80000
	// Bit CAN.
	DPORT_PERIP_RST_EN_CAN = 0x80000
	// Position of I2C1 field.
	DPORT_PERIP_RST_EN_I2C1_Pos = 0x12
	// Bit mask of I2C1 field.
	DPORT_PERIP_RST_EN_I2C1_Msk = 0x40000
	// Bit I2C1.
	DPORT_PERIP_RST_EN_I2C1 = 0x40000
	// Position of PWM0 field.
	DPORT_PERIP_RST_EN_PWM0_Pos = 0x11
	// Bit mask of PWM0 field.
	DPORT_PERIP_RST_EN_PWM0_Msk = 0x20000
	// Bit PWM0.
	DPORT_PERIP_RST_EN_PWM0 = 0x20000
	// Position of SPI3 field.
	DPORT_PERIP_RST_EN_SPI3_Pos = 0x10
	// Bit mask of SPI3 field.
	DPORT_PERIP_RST_EN_SPI3_Msk = 0x10000
	// Bit SPI3.
	DPORT_PERIP_RST_EN_SPI3 = 0x10000
	// Position of TIMER_GROUP1 field.
	DPORT_PERIP_RST_EN_TIMER_GROUP1_Pos = 0xf
	// Bit mask of TIMER_GROUP1 field.
	DPORT_PERIP_RST_EN_TIMER_GROUP1_Msk = 0x8000
	// Bit TIMER_GROUP1.
	DPORT_PERIP_RST_EN_TIMER_GROUP1 = 0x8000
	// Position of EFUSE field.
	DPORT_PERIP_RST_EN_EFUSE_Pos = 0xe
	// Bit mask of EFUSE field.
	DPORT_PERIP_RST_EN_EFUSE_Msk = 0x4000
	// Bit EFUSE.
	DPORT_PERIP_RST_EN_EFUSE = 0x4000
	// Position of TIMER_GROUP0 field.
	DPORT_PERIP_RST_EN_TIMER_GROUP0_Pos = 0xd
	// Bit mask of TIMER_GROUP0 field.
	DPORT_PERIP_RST_EN_TIMER_GROUP0_Msk = 0x2000
	// Bit TIMER_GROUP0.
	DPORT_PERIP_RST_EN_TIMER_GROUP0 = 0x2000
	// Position of UHCI1 field.
	DPORT_PERIP_RST_EN_UHCI1_Pos = 0xc
	// Bit mask of UHCI1 field.
	DPORT_PERIP_RST_EN_UHCI1_Msk = 0x1000
	// Bit UHCI1.
	DPORT_PERIP_RST_EN_UHCI1 = 0x1000
	// Position of LED_PWM field.
	DPORT_PERIP_RST_EN_LED_PWM_Pos = 0xb
	// Bit mask of LED_PWM field.
	DPORT_PERIP_RST_EN_LED_PWM_Msk = 0x800
	// Bit LED_PWM.
	DPORT_PERIP_RST_EN_LED_PWM = 0x800
	// Position of PULSE_CNT field.
	DPORT_PERIP_RST_EN_PULSE_CNT_Pos = 0xa
	// Bit mask of PULSE_CNT field.
	DPORT_PERIP_RST_EN_PULSE_CNT_Msk = 0x400
	// Bit PULSE_CNT.
	DPORT_PERIP_RST_EN_PULSE_CNT = 0x400
	// Position of REMOTE_CONTROLLER field.
	DPORT_PERIP_RST_EN_REMOTE_CONTROLLER_Pos = 0x9
	// Bit mask of REMOTE_CONTROLLER field.
	DPORT_PERIP_RST_EN_REMOTE_CONTROLLER_Msk = 0x200
	// Bit REMOTE_CONTROLLER.
	DPORT_PERIP_RST_EN_REMOTE_CONTROLLER = 0x200
	// Position of UHCI0 field.
	DPORT_PERIP_RST_EN_UHCI0_Pos = 0x8
	// Bit mask of UHCI0 field.
	DPORT_PERIP_RST_EN_UHCI0_Msk = 0x100
	// Bit UHCI0.
	DPORT_PERIP_RST_EN_UHCI0 = 0x100
	// Position of I2C0 field.
	DPORT_PERIP_RST_EN_I2C0_Pos = 0x7
	// Bit mask of I2C0 field.
	DPORT_PERIP_RST_EN_I2C0_Msk = 0x80
	// Bit I2C0.
	DPORT_PERIP_RST_EN_I2C0 = 0x80
	// Position of SPI2 field.
	DPORT_PERIP_RST_EN_SPI2_Pos = 0x6
	// Bit mask of SPI2 field.
	DPORT_PERIP_RST_EN_SPI2_Msk = 0x40
	// Bit SPI2.
	DPORT_PERIP_RST_EN_SPI2 = 0x40
	// Position of UART1 field.
	DPORT_PERIP_RST_EN_UART1_Pos = 0x5
	// Bit mask of UART1 field.
	DPORT_PERIP_RST_EN_UART1_Msk = 0x20
	// Bit UART1.
	DPORT_PERIP_RST_EN_UART1 = 0x20
	// Position of I2S0 field.
	DPORT_PERIP_RST_EN_I2S0_Pos = 0x4
	// Bit mask of I2S0 field.
	DPORT_PERIP_RST_EN_I2S0_Msk = 0x10
	// Bit I2S0.
	DPORT_PERIP_RST_EN_I2S0 = 0x10
	// Position of WDG field.
	DPORT_PERIP_RST_EN_WDG_Pos = 0x3
	// Bit mask of WDG field.
	DPORT_PERIP_RST_EN_WDG_Msk = 0x8
	// Bit WDG.
	DPORT_PERIP_RST_EN_WDG = 0x8
	// Position of UART0 field.
	DPORT_PERIP_RST_EN_UART0_Pos = 0x2
	// Bit mask of UART0 field.
	DPORT_PERIP_RST_EN_UART0_Msk = 0x4
	// Bit UART0.
	DPORT_PERIP_RST_EN_UART0 = 0x4
	// Position of SPI0 field.
	DPORT_PERIP_RST_EN_SPI0_Pos = 0x1
	// Bit mask of SPI0 field.
	DPORT_PERIP_RST_EN_SPI0_Msk = 0x2
	// Bit SPI0.
	DPORT_PERIP_RST_EN_SPI0 = 0x2
	// Position of TIMERS field.
	DPORT_PERIP_RST_EN_TIMERS_Pos = 0x0
	// Bit mask of TIMERS field.
	DPORT_PERIP_RST_EN_TIMERS_Msk = 0x1
	// Bit TIMERS.
	DPORT_PERIP_RST_EN_TIMERS = 0x1

	// WIFI_CLK_EN: DPORT_WIFI_CLK_EN
	// Position of WIFI_CLK_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_EN_Pos = 0x0
	// Bit mask of WIFI_CLK_EN field.
	DPORT_WIFI_CLK_EN_WIFI_CLK_EN_Msk = 0xffffffff

	// CORE_RST_EN: DPORT_CORE_RST_EN
	// Position of CORE_RST field.
	DPORT_CORE_RST_EN_CORE_RST_Pos = 0x0
	// Bit mask of CORE_RST field.
	DPORT_CORE_RST_EN_CORE_RST_Msk = 0xffffffff

	// BT_LPCK_DIV_INT: DPORT_BT_LPCK_DIV_INT
	// Position of BTEXTWAKEUP_REQ field.
	DPORT_BT_LPCK_DIV_INT_BTEXTWAKEUP_REQ_Pos = 0xc
	// Bit mask of BTEXTWAKEUP_REQ field.
	DPORT_BT_LPCK_DIV_INT_BTEXTWAKEUP_REQ_Msk = 0x1000
	// Bit BTEXTWAKEUP_REQ.
	DPORT_BT_LPCK_DIV_INT_BTEXTWAKEUP_REQ = 0x1000
	// Position of BT_LPCK_DIV_NUM field.
	DPORT_BT_LPCK_DIV_INT_BT_LPCK_DIV_NUM_Pos = 0x0
	// Bit mask of BT_LPCK_DIV_NUM field.
	DPORT_BT_LPCK_DIV_INT_BT_LPCK_DIV_NUM_Msk = 0xfff

	// BT_LPCK_DIV_FRAC: DPORT_BT_LPCK_DIV_FRAC
	// Position of LPCLK_SEL_XTAL32K field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K_Pos = 0x1b
	// Bit mask of LPCLK_SEL_XTAL32K field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K_Msk = 0x8000000
	// Bit LPCLK_SEL_XTAL32K.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL32K = 0x8000000
	// Position of LPCLK_SEL_XTAL field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL_Pos = 0x1a
	// Bit mask of LPCLK_SEL_XTAL field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL_Msk = 0x4000000
	// Bit LPCLK_SEL_XTAL.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_XTAL = 0x4000000
	// Position of LPCLK_SEL_8M field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_8M_Pos = 0x19
	// Bit mask of LPCLK_SEL_8M field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_8M_Msk = 0x2000000
	// Bit LPCLK_SEL_8M.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_8M = 0x2000000
	// Position of LPCLK_SEL_RTC_SLOW field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW_Pos = 0x18
	// Bit mask of LPCLK_SEL_RTC_SLOW field.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW_Msk = 0x1000000
	// Bit LPCLK_SEL_RTC_SLOW.
	DPORT_BT_LPCK_DIV_FRAC_LPCLK_SEL_RTC_SLOW = 0x1000000
	// Position of BT_LPCK_DIV_A field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_A_Pos = 0xc
	// Bit mask of BT_LPCK_DIV_A field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_A_Msk = 0xfff000
	// Position of BT_LPCK_DIV_B field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_B_Pos = 0x0
	// Bit mask of BT_LPCK_DIV_B field.
	DPORT_BT_LPCK_DIV_FRAC_BT_LPCK_DIV_B_Msk = 0xfff

	// CPU_INTR_FROM_CPU_0: DPORT_CPU_INTR_FROM_CPU_0
	// Position of CPU_INTR_FROM_CPU_0 field.
	DPORT_CPU_INTR_FROM_CPU_0_CPU_INTR_FROM_CPU_0_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_0 field.
	DPORT_CPU_INTR_FROM_CPU_0_CPU_INTR_FROM_CPU_0_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_0.
	DPORT_CPU_INTR_FROM_CPU_0_CPU_INTR_FROM_CPU_0 = 0x1

	// CPU_INTR_FROM_CPU_1: DPORT_CPU_INTR_FROM_CPU_1
	// Position of CPU_INTR_FROM_CPU_1 field.
	DPORT_CPU_INTR_FROM_CPU_1_CPU_INTR_FROM_CPU_1_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_1 field.
	DPORT_CPU_INTR_FROM_CPU_1_CPU_INTR_FROM_CPU_1_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_1.
	DPORT_CPU_INTR_FROM_CPU_1_CPU_INTR_FROM_CPU_1 = 0x1

	// CPU_INTR_FROM_CPU_2: DPORT_CPU_INTR_FROM_CPU_2
	// Position of CPU_INTR_FROM_CPU_2 field.
	DPORT_CPU_INTR_FROM_CPU_2_CPU_INTR_FROM_CPU_2_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_2 field.
	DPORT_CPU_INTR_FROM_CPU_2_CPU_INTR_FROM_CPU_2_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_2.
	DPORT_CPU_INTR_FROM_CPU_2_CPU_INTR_FROM_CPU_2 = 0x1

	// CPU_INTR_FROM_CPU_3: DPORT_CPU_INTR_FROM_CPU_3
	// Position of CPU_INTR_FROM_CPU_3 field.
	DPORT_CPU_INTR_FROM_CPU_3_CPU_INTR_FROM_CPU_3_Pos = 0x0
	// Bit mask of CPU_INTR_FROM_CPU_3 field.
	DPORT_CPU_INTR_FROM_CPU_3_CPU_INTR_FROM_CPU_3_Msk = 0x1
	// Bit CPU_INTR_FROM_CPU_3.
	DPORT_CPU_INTR_FROM_CPU_3_CPU_INTR_FROM_CPU_3 = 0x1

	// PRO_INTR_STATUS_0: DPORT_PRO_INTR_STATUS_0
	// Position of PRO_INTR_STATUS_0 field.
	DPORT_PRO_INTR_STATUS_0_PRO_INTR_STATUS_0_Pos = 0x0
	// Bit mask of PRO_INTR_STATUS_0 field.
	DPORT_PRO_INTR_STATUS_0_PRO_INTR_STATUS_0_Msk = 0xffffffff

	// PRO_INTR_STATUS_1: DPORT_PRO_INTR_STATUS_1
	// Position of PRO_INTR_STATUS_1 field.
	DPORT_PRO_INTR_STATUS_1_PRO_INTR_STATUS_1_Pos = 0x0
	// Bit mask of PRO_INTR_STATUS_1 field.
	DPORT_PRO_INTR_STATUS_1_PRO_INTR_STATUS_1_Msk = 0xffffffff

	// PRO_INTR_STATUS_2: DPORT_PRO_INTR_STATUS_2
	// Position of PRO_INTR_STATUS_2 field.
	DPORT_PRO_INTR_STATUS_2_PRO_INTR_STATUS_2_Pos = 0x0
	// Bit mask of PRO_INTR_STATUS_2 field.
	DPORT_PRO_INTR_STATUS_2_PRO_INTR_STATUS_2_Msk = 0xffffffff

	// APP_INTR_STATUS_0: DPORT_APP_INTR_STATUS_0
	// Position of APP_INTR_STATUS_0 field.
	DPORT_APP_INTR_STATUS_0_APP_INTR_STATUS_0_Pos = 0x0
	// Bit mask of APP_INTR_STATUS_0 field.
	DPORT_APP_INTR_STATUS_0_APP_INTR_STATUS_0_Msk = 0xffffffff

	// APP_INTR_STATUS_1: DPORT_APP_INTR_STATUS_1
	// Position of APP_INTR_STATUS_1 field.
	DPORT_APP_INTR_STATUS_1_APP_INTR_STATUS_1_Pos = 0x0
	// Bit mask of APP_INTR_STATUS_1 field.
	DPORT_APP_INTR_STATUS_1_APP_INTR_STATUS_1_Msk = 0xffffffff

	// APP_INTR_STATUS_2: DPORT_APP_INTR_STATUS_2
	// Position of APP_INTR_STATUS_2 field.
	DPORT_APP_INTR_STATUS_2_APP_INTR_STATUS_2_Pos = 0x0
	// Bit mask of APP_INTR_STATUS_2 field.
	DPORT_APP_INTR_STATUS_2_APP_INTR_STATUS_2_Msk = 0xffffffff

	// PRO_MAC_INTR_MAP: DPORT_PRO_MAC_INTR_MAP
	// Position of PRO_MAC_INTR_MAP field.
	DPORT_PRO_MAC_INTR_MAP_PRO_MAC_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_MAC_INTR_MAP field.
	DPORT_PRO_MAC_INTR_MAP_PRO_MAC_INTR_MAP_Msk = 0x1f

	// PRO_MAC_NMI_MAP: DPORT_PRO_MAC_NMI_MAP
	// Position of PRO_MAC_NMI_MAP field.
	DPORT_PRO_MAC_NMI_MAP_PRO_MAC_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_MAC_NMI_MAP field.
	DPORT_PRO_MAC_NMI_MAP_PRO_MAC_NMI_MAP_Msk = 0x1f

	// PRO_BB_INT_MAP: DPORT_PRO_BB_INT_MAP
	// Position of PRO_BB_INT_MAP field.
	DPORT_PRO_BB_INT_MAP_PRO_BB_INT_MAP_Pos = 0x0
	// Bit mask of PRO_BB_INT_MAP field.
	DPORT_PRO_BB_INT_MAP_PRO_BB_INT_MAP_Msk = 0x1f

	// PRO_BT_MAC_INT_MAP: DPORT_PRO_BT_MAC_INT_MAP
	// Position of PRO_BT_MAC_INT_MAP field.
	DPORT_PRO_BT_MAC_INT_MAP_PRO_BT_MAC_INT_MAP_Pos = 0x0
	// Bit mask of PRO_BT_MAC_INT_MAP field.
	DPORT_PRO_BT_MAC_INT_MAP_PRO_BT_MAC_INT_MAP_Msk = 0x1f

	// PRO_BT_BB_INT_MAP: DPORT_PRO_BT_BB_INT_MAP
	// Position of PRO_BT_BB_INT_MAP field.
	DPORT_PRO_BT_BB_INT_MAP_PRO_BT_BB_INT_MAP_Pos = 0x0
	// Bit mask of PRO_BT_BB_INT_MAP field.
	DPORT_PRO_BT_BB_INT_MAP_PRO_BT_BB_INT_MAP_Msk = 0x1f

	// PRO_BT_BB_NMI_MAP: DPORT_PRO_BT_BB_NMI_MAP
	// Position of PRO_BT_BB_NMI_MAP field.
	DPORT_PRO_BT_BB_NMI_MAP_PRO_BT_BB_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_BT_BB_NMI_MAP field.
	DPORT_PRO_BT_BB_NMI_MAP_PRO_BT_BB_NMI_MAP_Msk = 0x1f

	// PRO_RWBT_IRQ_MAP: DPORT_PRO_RWBT_IRQ_MAP
	// Position of PRO_RWBT_IRQ_MAP field.
	DPORT_PRO_RWBT_IRQ_MAP_PRO_RWBT_IRQ_MAP_Pos = 0x0
	// Bit mask of PRO_RWBT_IRQ_MAP field.
	DPORT_PRO_RWBT_IRQ_MAP_PRO_RWBT_IRQ_MAP_Msk = 0x1f

	// PRO_RWBLE_IRQ_MAP: DPORT_PRO_RWBLE_IRQ_MAP
	// Position of PRO_RWBLE_IRQ_MAP field.
	DPORT_PRO_RWBLE_IRQ_MAP_PRO_RWBLE_IRQ_MAP_Pos = 0x0
	// Bit mask of PRO_RWBLE_IRQ_MAP field.
	DPORT_PRO_RWBLE_IRQ_MAP_PRO_RWBLE_IRQ_MAP_Msk = 0x1f

	// PRO_RWBT_NMI_MAP: DPORT_PRO_RWBT_NMI_MAP
	// Position of PRO_RWBT_NMI_MAP field.
	DPORT_PRO_RWBT_NMI_MAP_PRO_RWBT_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_RWBT_NMI_MAP field.
	DPORT_PRO_RWBT_NMI_MAP_PRO_RWBT_NMI_MAP_Msk = 0x1f

	// PRO_RWBLE_NMI_MAP: DPORT_PRO_RWBLE_NMI_MAP
	// Position of PRO_RWBLE_NMI_MAP field.
	DPORT_PRO_RWBLE_NMI_MAP_PRO_RWBLE_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_RWBLE_NMI_MAP field.
	DPORT_PRO_RWBLE_NMI_MAP_PRO_RWBLE_NMI_MAP_Msk = 0x1f

	// PRO_SLC0_INTR_MAP: DPORT_PRO_SLC0_INTR_MAP
	// Position of PRO_SLC0_INTR_MAP field.
	DPORT_PRO_SLC0_INTR_MAP_PRO_SLC0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_SLC0_INTR_MAP field.
	DPORT_PRO_SLC0_INTR_MAP_PRO_SLC0_INTR_MAP_Msk = 0x1f

	// PRO_SLC1_INTR_MAP: DPORT_PRO_SLC1_INTR_MAP
	// Position of PRO_SLC1_INTR_MAP field.
	DPORT_PRO_SLC1_INTR_MAP_PRO_SLC1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_SLC1_INTR_MAP field.
	DPORT_PRO_SLC1_INTR_MAP_PRO_SLC1_INTR_MAP_Msk = 0x1f

	// PRO_UHCI0_INTR_MAP: DPORT_PRO_UHCI0_INTR_MAP
	// Position of PRO_UHCI0_INTR_MAP field.
	DPORT_PRO_UHCI0_INTR_MAP_PRO_UHCI0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UHCI0_INTR_MAP field.
	DPORT_PRO_UHCI0_INTR_MAP_PRO_UHCI0_INTR_MAP_Msk = 0x1f

	// PRO_UHCI1_INTR_MAP: DPORT_PRO_UHCI1_INTR_MAP
	// Position of PRO_UHCI1_INTR_MAP field.
	DPORT_PRO_UHCI1_INTR_MAP_PRO_UHCI1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UHCI1_INTR_MAP field.
	DPORT_PRO_UHCI1_INTR_MAP_PRO_UHCI1_INTR_MAP_Msk = 0x1f

	// PRO_TG_T0_LEVEL_INT_MAP: DPORT_PRO_TG_T0_LEVEL_INT_MAP
	// Position of PRO_TG_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T0_LEVEL_INT_MAP_PRO_TG_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T0_LEVEL_INT_MAP_PRO_TG_T0_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG_T1_LEVEL_INT_MAP: DPORT_PRO_TG_T1_LEVEL_INT_MAP
	// Position of PRO_TG_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T1_LEVEL_INT_MAP_PRO_TG_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG_T1_LEVEL_INT_MAP_PRO_TG_T1_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG_WDT_LEVEL_INT_MAP: DPORT_PRO_TG_WDT_LEVEL_INT_MAP
	// Position of PRO_TG_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_WDT_LEVEL_INT_MAP_PRO_TG_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_WDT_LEVEL_INT_MAP_PRO_TG_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG_LACT_LEVEL_INT_MAP: DPORT_PRO_TG_LACT_LEVEL_INT_MAP
	// Position of PRO_TG_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_LACT_LEVEL_INT_MAP_PRO_TG_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG_LACT_LEVEL_INT_MAP_PRO_TG_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_T0_LEVEL_INT_MAP: DPORT_PRO_TG1_T0_LEVEL_INT_MAP
	// Position of PRO_TG1_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T0_LEVEL_INT_MAP_PRO_TG1_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T0_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T0_LEVEL_INT_MAP_PRO_TG1_T0_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_T1_LEVEL_INT_MAP: DPORT_PRO_TG1_T1_LEVEL_INT_MAP
	// Position of PRO_TG1_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T1_LEVEL_INT_MAP_PRO_TG1_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T1_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_T1_LEVEL_INT_MAP_PRO_TG1_T1_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_WDT_LEVEL_INT_MAP: DPORT_PRO_TG1_WDT_LEVEL_INT_MAP
	// Position of PRO_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_WDT_LEVEL_INT_MAP_PRO_TG1_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_WDT_LEVEL_INT_MAP_PRO_TG1_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_TG1_LACT_LEVEL_INT_MAP: DPORT_PRO_TG1_LACT_LEVEL_INT_MAP
	// Position of PRO_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_LACT_LEVEL_INT_MAP_PRO_TG1_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_PRO_TG1_LACT_LEVEL_INT_MAP_PRO_TG1_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// PRO_GPIO_INTERRUPT_MAP: DPORT_PRO_GPIO_INTERRUPT_MAP
	// Position of PRO_GPIO_INTERRUPT_PRO_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP_Pos = 0x0
	// Bit mask of PRO_GPIO_INTERRUPT_PRO_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_MAP_PRO_GPIO_INTERRUPT_PRO_MAP_Msk = 0x1f

	// PRO_GPIO_INTERRUPT_NMI_MAP: DPORT_PRO_GPIO_INTERRUPT_NMI_MAP
	// Position of PRO_GPIO_INTERRUPT_PRO_NMI_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP_Pos = 0x0
	// Bit mask of PRO_GPIO_INTERRUPT_PRO_NMI_MAP field.
	DPORT_PRO_GPIO_INTERRUPT_NMI_MAP_PRO_GPIO_INTERRUPT_PRO_NMI_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_0_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_0_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_0_MAP_PRO_CPU_INTR_FROM_CPU_0_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_0_MAP_PRO_CPU_INTR_FROM_CPU_0_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_1_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_1_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_1_MAP_PRO_CPU_INTR_FROM_CPU_1_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_1_MAP_PRO_CPU_INTR_FROM_CPU_1_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_2_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_2_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_2_MAP_PRO_CPU_INTR_FROM_CPU_2_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_2_MAP_PRO_CPU_INTR_FROM_CPU_2_MAP_Msk = 0x1f

	// PRO_CPU_INTR_FROM_CPU_3_MAP: DPORT_PRO_CPU_INTR_FROM_CPU_3_MAP
	// Position of PRO_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_3_MAP_PRO_CPU_INTR_FROM_CPU_3_MAP_Pos = 0x0
	// Bit mask of PRO_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_PRO_CPU_INTR_FROM_CPU_3_MAP_PRO_CPU_INTR_FROM_CPU_3_MAP_Msk = 0x1f

	// PRO_SPI_INTR_0_MAP: DPORT_PRO_SPI_INTR_0_MAP
	// Position of PRO_SPI_INTR_0_MAP field.
	DPORT_PRO_SPI_INTR_0_MAP_PRO_SPI_INTR_0_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_0_MAP field.
	DPORT_PRO_SPI_INTR_0_MAP_PRO_SPI_INTR_0_MAP_Msk = 0x1f

	// PRO_SPI_INTR_1_MAP: DPORT_PRO_SPI_INTR_1_MAP
	// Position of PRO_SPI_INTR_1_MAP field.
	DPORT_PRO_SPI_INTR_1_MAP_PRO_SPI_INTR_1_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_1_MAP field.
	DPORT_PRO_SPI_INTR_1_MAP_PRO_SPI_INTR_1_MAP_Msk = 0x1f

	// PRO_SPI_INTR_2_MAP: DPORT_PRO_SPI_INTR_2_MAP
	// Position of PRO_SPI_INTR_2_MAP field.
	DPORT_PRO_SPI_INTR_2_MAP_PRO_SPI_INTR_2_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_2_MAP field.
	DPORT_PRO_SPI_INTR_2_MAP_PRO_SPI_INTR_2_MAP_Msk = 0x1f

	// PRO_SPI_INTR_3_MAP: DPORT_PRO_SPI_INTR_3_MAP
	// Position of PRO_SPI_INTR_3_MAP field.
	DPORT_PRO_SPI_INTR_3_MAP_PRO_SPI_INTR_3_MAP_Pos = 0x0
	// Bit mask of PRO_SPI_INTR_3_MAP field.
	DPORT_PRO_SPI_INTR_3_MAP_PRO_SPI_INTR_3_MAP_Msk = 0x1f

	// PRO_I2S0_INT_MAP: DPORT_PRO_I2S0_INT_MAP
	// Position of PRO_I2S0_INT_MAP field.
	DPORT_PRO_I2S0_INT_MAP_PRO_I2S0_INT_MAP_Pos = 0x0
	// Bit mask of PRO_I2S0_INT_MAP field.
	DPORT_PRO_I2S0_INT_MAP_PRO_I2S0_INT_MAP_Msk = 0x1f

	// PRO_I2S1_INT_MAP: DPORT_PRO_I2S1_INT_MAP
	// Position of PRO_I2S1_INT_MAP field.
	DPORT_PRO_I2S1_INT_MAP_PRO_I2S1_INT_MAP_Pos = 0x0
	// Bit mask of PRO_I2S1_INT_MAP field.
	DPORT_PRO_I2S1_INT_MAP_PRO_I2S1_INT_MAP_Msk = 0x1f

	// PRO_UART_INTR_MAP: DPORT_PRO_UART_INTR_MAP
	// Position of PRO_UART_INTR_MAP field.
	DPORT_PRO_UART_INTR_MAP_PRO_UART_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UART_INTR_MAP field.
	DPORT_PRO_UART_INTR_MAP_PRO_UART_INTR_MAP_Msk = 0x1f

	// PRO_UART1_INTR_MAP: DPORT_PRO_UART1_INTR_MAP
	// Position of PRO_UART1_INTR_MAP field.
	DPORT_PRO_UART1_INTR_MAP_PRO_UART1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UART1_INTR_MAP field.
	DPORT_PRO_UART1_INTR_MAP_PRO_UART1_INTR_MAP_Msk = 0x1f

	// PRO_UART2_INTR_MAP: DPORT_PRO_UART2_INTR_MAP
	// Position of PRO_UART2_INTR_MAP field.
	DPORT_PRO_UART2_INTR_MAP_PRO_UART2_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_UART2_INTR_MAP field.
	DPORT_PRO_UART2_INTR_MAP_PRO_UART2_INTR_MAP_Msk = 0x1f

	// PRO_SDIO_HOST_INTERRUPT_MAP: DPORT_PRO_SDIO_HOST_INTERRUPT_MAP
	// Position of PRO_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_PRO_SDIO_HOST_INTERRUPT_MAP_PRO_SDIO_HOST_INTERRUPT_MAP_Pos = 0x0
	// Bit mask of PRO_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_PRO_SDIO_HOST_INTERRUPT_MAP_PRO_SDIO_HOST_INTERRUPT_MAP_Msk = 0x1f

	// PRO_EMAC_INT_MAP: DPORT_PRO_EMAC_INT_MAP
	// Position of PRO_EMAC_INT_MAP field.
	DPORT_PRO_EMAC_INT_MAP_PRO_EMAC_INT_MAP_Pos = 0x0
	// Bit mask of PRO_EMAC_INT_MAP field.
	DPORT_PRO_EMAC_INT_MAP_PRO_EMAC_INT_MAP_Msk = 0x1f

	// PRO_PWM0_INTR_MAP: DPORT_PRO_PWM0_INTR_MAP
	// Position of PRO_PWM0_INTR_MAP field.
	DPORT_PRO_PWM0_INTR_MAP_PRO_PWM0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM0_INTR_MAP field.
	DPORT_PRO_PWM0_INTR_MAP_PRO_PWM0_INTR_MAP_Msk = 0x1f

	// PRO_PWM1_INTR_MAP: DPORT_PRO_PWM1_INTR_MAP
	// Position of PRO_PWM1_INTR_MAP field.
	DPORT_PRO_PWM1_INTR_MAP_PRO_PWM1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM1_INTR_MAP field.
	DPORT_PRO_PWM1_INTR_MAP_PRO_PWM1_INTR_MAP_Msk = 0x1f

	// PRO_PWM2_INTR_MAP: DPORT_PRO_PWM2_INTR_MAP
	// Position of PRO_PWM2_INTR_MAP field.
	DPORT_PRO_PWM2_INTR_MAP_PRO_PWM2_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM2_INTR_MAP field.
	DPORT_PRO_PWM2_INTR_MAP_PRO_PWM2_INTR_MAP_Msk = 0x1f

	// PRO_PWM3_INTR_MAP: DPORT_PRO_PWM3_INTR_MAP
	// Position of PRO_PWM3_INTR_MAP field.
	DPORT_PRO_PWM3_INTR_MAP_PRO_PWM3_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PWM3_INTR_MAP field.
	DPORT_PRO_PWM3_INTR_MAP_PRO_PWM3_INTR_MAP_Msk = 0x1f

	// PRO_LEDC_INT_MAP: DPORT_PRO_LEDC_INT_MAP
	// Position of PRO_LEDC_INT_MAP field.
	DPORT_PRO_LEDC_INT_MAP_PRO_LEDC_INT_MAP_Pos = 0x0
	// Bit mask of PRO_LEDC_INT_MAP field.
	DPORT_PRO_LEDC_INT_MAP_PRO_LEDC_INT_MAP_Msk = 0x1f

	// PRO_EFUSE_INT_MAP: DPORT_PRO_EFUSE_INT_MAP
	// Position of PRO_EFUSE_INT_MAP field.
	DPORT_PRO_EFUSE_INT_MAP_PRO_EFUSE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_EFUSE_INT_MAP field.
	DPORT_PRO_EFUSE_INT_MAP_PRO_EFUSE_INT_MAP_Msk = 0x1f

	// PRO_CAN_INT_MAP: DPORT_PRO_CAN_INT_MAP
	// Position of PRO_CAN_INT_MAP field.
	DPORT_PRO_CAN_INT_MAP_PRO_CAN_INT_MAP_Pos = 0x0
	// Bit mask of PRO_CAN_INT_MAP field.
	DPORT_PRO_CAN_INT_MAP_PRO_CAN_INT_MAP_Msk = 0x1f

	// PRO_RTC_CORE_INTR_MAP: DPORT_PRO_RTC_CORE_INTR_MAP
	// Position of PRO_RTC_CORE_INTR_MAP field.
	DPORT_PRO_RTC_CORE_INTR_MAP_PRO_RTC_CORE_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_RTC_CORE_INTR_MAP field.
	DPORT_PRO_RTC_CORE_INTR_MAP_PRO_RTC_CORE_INTR_MAP_Msk = 0x1f

	// PRO_RMT_INTR_MAP: DPORT_PRO_RMT_INTR_MAP
	// Position of PRO_RMT_INTR_MAP field.
	DPORT_PRO_RMT_INTR_MAP_PRO_RMT_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_RMT_INTR_MAP field.
	DPORT_PRO_RMT_INTR_MAP_PRO_RMT_INTR_MAP_Msk = 0x1f

	// PRO_PCNT_INTR_MAP: DPORT_PRO_PCNT_INTR_MAP
	// Position of PRO_PCNT_INTR_MAP field.
	DPORT_PRO_PCNT_INTR_MAP_PRO_PCNT_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_PCNT_INTR_MAP field.
	DPORT_PRO_PCNT_INTR_MAP_PRO_PCNT_INTR_MAP_Msk = 0x1f

	// PRO_I2C_EXT0_INTR_MAP: DPORT_PRO_I2C_EXT0_INTR_MAP
	// Position of PRO_I2C_EXT0_INTR_MAP field.
	DPORT_PRO_I2C_EXT0_INTR_MAP_PRO_I2C_EXT0_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_I2C_EXT0_INTR_MAP field.
	DPORT_PRO_I2C_EXT0_INTR_MAP_PRO_I2C_EXT0_INTR_MAP_Msk = 0x1f

	// PRO_I2C_EXT1_INTR_MAP: DPORT_PRO_I2C_EXT1_INTR_MAP
	// Position of PRO_I2C_EXT1_INTR_MAP field.
	DPORT_PRO_I2C_EXT1_INTR_MAP_PRO_I2C_EXT1_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_I2C_EXT1_INTR_MAP field.
	DPORT_PRO_I2C_EXT1_INTR_MAP_PRO_I2C_EXT1_INTR_MAP_Msk = 0x1f

	// PRO_RSA_INTR_MAP: DPORT_PRO_RSA_INTR_MAP
	// Position of PRO_RSA_INTR_MAP field.
	DPORT_PRO_RSA_INTR_MAP_PRO_RSA_INTR_MAP_Pos = 0x0
	// Bit mask of PRO_RSA_INTR_MAP field.
	DPORT_PRO_RSA_INTR_MAP_PRO_RSA_INTR_MAP_Msk = 0x1f

	// PRO_SPI1_DMA_INT_MAP: DPORT_PRO_SPI1_DMA_INT_MAP
	// Position of PRO_SPI1_DMA_INT_MAP field.
	DPORT_PRO_SPI1_DMA_INT_MAP_PRO_SPI1_DMA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_SPI1_DMA_INT_MAP field.
	DPORT_PRO_SPI1_DMA_INT_MAP_PRO_SPI1_DMA_INT_MAP_Msk = 0x1f

	// PRO_SPI2_DMA_INT_MAP: DPORT_PRO_SPI2_DMA_INT_MAP
	// Position of PRO_SPI2_DMA_INT_MAP field.
	DPORT_PRO_SPI2_DMA_INT_MAP_PRO_SPI2_DMA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_SPI2_DMA_INT_MAP field.
	DPORT_PRO_SPI2_DMA_INT_MAP_PRO_SPI2_DMA_INT_MAP_Msk = 0x1f

	// PRO_SPI3_DMA_INT_MAP: DPORT_PRO_SPI3_DMA_INT_MAP
	// Position of PRO_SPI3_DMA_INT_MAP field.
	DPORT_PRO_SPI3_DMA_INT_MAP_PRO_SPI3_DMA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_SPI3_DMA_INT_MAP field.
	DPORT_PRO_SPI3_DMA_INT_MAP_PRO_SPI3_DMA_INT_MAP_Msk = 0x1f

	// PRO_WDG_INT_MAP: DPORT_PRO_WDG_INT_MAP
	// Position of PRO_WDG_INT_MAP field.
	DPORT_PRO_WDG_INT_MAP_PRO_WDG_INT_MAP_Pos = 0x0
	// Bit mask of PRO_WDG_INT_MAP field.
	DPORT_PRO_WDG_INT_MAP_PRO_WDG_INT_MAP_Msk = 0x1f

	// PRO_TIMER_INT1_MAP: DPORT_PRO_TIMER_INT1_MAP
	// Position of PRO_TIMER_INT1_MAP field.
	DPORT_PRO_TIMER_INT1_MAP_PRO_TIMER_INT1_MAP_Pos = 0x0
	// Bit mask of PRO_TIMER_INT1_MAP field.
	DPORT_PRO_TIMER_INT1_MAP_PRO_TIMER_INT1_MAP_Msk = 0x1f

	// PRO_TIMER_INT2_MAP: DPORT_PRO_TIMER_INT2_MAP
	// Position of PRO_TIMER_INT2_MAP field.
	DPORT_PRO_TIMER_INT2_MAP_PRO_TIMER_INT2_MAP_Pos = 0x0
	// Bit mask of PRO_TIMER_INT2_MAP field.
	DPORT_PRO_TIMER_INT2_MAP_PRO_TIMER_INT2_MAP_Msk = 0x1f

	// PRO_TG_T0_EDGE_INT_MAP: DPORT_PRO_TG_T0_EDGE_INT_MAP
	// Position of PRO_TG_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG_T0_EDGE_INT_MAP_PRO_TG_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG_T0_EDGE_INT_MAP_PRO_TG_T0_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG_T1_EDGE_INT_MAP: DPORT_PRO_TG_T1_EDGE_INT_MAP
	// Position of PRO_TG_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG_T1_EDGE_INT_MAP_PRO_TG_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG_T1_EDGE_INT_MAP_PRO_TG_T1_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG_WDT_EDGE_INT_MAP: DPORT_PRO_TG_WDT_EDGE_INT_MAP
	// Position of PRO_TG_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG_WDT_EDGE_INT_MAP_PRO_TG_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG_WDT_EDGE_INT_MAP_PRO_TG_WDT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG_LACT_EDGE_INT_MAP: DPORT_PRO_TG_LACT_EDGE_INT_MAP
	// Position of PRO_TG_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG_LACT_EDGE_INT_MAP_PRO_TG_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG_LACT_EDGE_INT_MAP_PRO_TG_LACT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_T0_EDGE_INT_MAP: DPORT_PRO_TG1_T0_EDGE_INT_MAP
	// Position of PRO_TG1_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T0_EDGE_INT_MAP_PRO_TG1_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T0_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T0_EDGE_INT_MAP_PRO_TG1_T0_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_T1_EDGE_INT_MAP: DPORT_PRO_TG1_T1_EDGE_INT_MAP
	// Position of PRO_TG1_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T1_EDGE_INT_MAP_PRO_TG1_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_T1_EDGE_INT_MAP field.
	DPORT_PRO_TG1_T1_EDGE_INT_MAP_PRO_TG1_T1_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_WDT_EDGE_INT_MAP: DPORT_PRO_TG1_WDT_EDGE_INT_MAP
	// Position of PRO_TG1_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_WDT_EDGE_INT_MAP_PRO_TG1_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_WDT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_WDT_EDGE_INT_MAP_PRO_TG1_WDT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_TG1_LACT_EDGE_INT_MAP: DPORT_PRO_TG1_LACT_EDGE_INT_MAP
	// Position of PRO_TG1_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_LACT_EDGE_INT_MAP_PRO_TG1_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of PRO_TG1_LACT_EDGE_INT_MAP field.
	DPORT_PRO_TG1_LACT_EDGE_INT_MAP_PRO_TG1_LACT_EDGE_INT_MAP_Msk = 0x1f

	// PRO_MMU_IA_INT_MAP: DPORT_PRO_MMU_IA_INT_MAP
	// Position of PRO_MMU_IA_INT_MAP field.
	DPORT_PRO_MMU_IA_INT_MAP_PRO_MMU_IA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_MMU_IA_INT_MAP field.
	DPORT_PRO_MMU_IA_INT_MAP_PRO_MMU_IA_INT_MAP_Msk = 0x1f

	// PRO_MPU_IA_INT_MAP: DPORT_PRO_MPU_IA_INT_MAP
	// Position of PRO_MPU_IA_INT_MAP field.
	DPORT_PRO_MPU_IA_INT_MAP_PRO_MPU_IA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_MPU_IA_INT_MAP field.
	DPORT_PRO_MPU_IA_INT_MAP_PRO_MPU_IA_INT_MAP_Msk = 0x1f

	// PRO_CACHE_IA_INT_MAP: DPORT_PRO_CACHE_IA_INT_MAP
	// Position of PRO_CACHE_IA_INT_MAP field.
	DPORT_PRO_CACHE_IA_INT_MAP_PRO_CACHE_IA_INT_MAP_Pos = 0x0
	// Bit mask of PRO_CACHE_IA_INT_MAP field.
	DPORT_PRO_CACHE_IA_INT_MAP_PRO_CACHE_IA_INT_MAP_Msk = 0x1f

	// APP_MAC_INTR_MAP: DPORT_APP_MAC_INTR_MAP
	// Position of APP_MAC_INTR_MAP field.
	DPORT_APP_MAC_INTR_MAP_APP_MAC_INTR_MAP_Pos = 0x0
	// Bit mask of APP_MAC_INTR_MAP field.
	DPORT_APP_MAC_INTR_MAP_APP_MAC_INTR_MAP_Msk = 0x1f

	// APP_MAC_NMI_MAP: DPORT_APP_MAC_NMI_MAP
	// Position of APP_MAC_NMI_MAP field.
	DPORT_APP_MAC_NMI_MAP_APP_MAC_NMI_MAP_Pos = 0x0
	// Bit mask of APP_MAC_NMI_MAP field.
	DPORT_APP_MAC_NMI_MAP_APP_MAC_NMI_MAP_Msk = 0x1f

	// APP_BB_INT_MAP: DPORT_APP_BB_INT_MAP
	// Position of APP_BB_INT_MAP field.
	DPORT_APP_BB_INT_MAP_APP_BB_INT_MAP_Pos = 0x0
	// Bit mask of APP_BB_INT_MAP field.
	DPORT_APP_BB_INT_MAP_APP_BB_INT_MAP_Msk = 0x1f

	// APP_BT_MAC_INT_MAP: DPORT_APP_BT_MAC_INT_MAP
	// Position of APP_BT_MAC_INT_MAP field.
	DPORT_APP_BT_MAC_INT_MAP_APP_BT_MAC_INT_MAP_Pos = 0x0
	// Bit mask of APP_BT_MAC_INT_MAP field.
	DPORT_APP_BT_MAC_INT_MAP_APP_BT_MAC_INT_MAP_Msk = 0x1f

	// APP_BT_BB_INT_MAP: DPORT_APP_BT_BB_INT_MAP
	// Position of APP_BT_BB_INT_MAP field.
	DPORT_APP_BT_BB_INT_MAP_APP_BT_BB_INT_MAP_Pos = 0x0
	// Bit mask of APP_BT_BB_INT_MAP field.
	DPORT_APP_BT_BB_INT_MAP_APP_BT_BB_INT_MAP_Msk = 0x1f

	// APP_BT_BB_NMI_MAP: DPORT_APP_BT_BB_NMI_MAP
	// Position of APP_BT_BB_NMI_MAP field.
	DPORT_APP_BT_BB_NMI_MAP_APP_BT_BB_NMI_MAP_Pos = 0x0
	// Bit mask of APP_BT_BB_NMI_MAP field.
	DPORT_APP_BT_BB_NMI_MAP_APP_BT_BB_NMI_MAP_Msk = 0x1f

	// APP_RWBT_IRQ_MAP: DPORT_APP_RWBT_IRQ_MAP
	// Position of APP_RWBT_IRQ_MAP field.
	DPORT_APP_RWBT_IRQ_MAP_APP_RWBT_IRQ_MAP_Pos = 0x0
	// Bit mask of APP_RWBT_IRQ_MAP field.
	DPORT_APP_RWBT_IRQ_MAP_APP_RWBT_IRQ_MAP_Msk = 0x1f

	// APP_RWBLE_IRQ_MAP: DPORT_APP_RWBLE_IRQ_MAP
	// Position of APP_RWBLE_IRQ_MAP field.
	DPORT_APP_RWBLE_IRQ_MAP_APP_RWBLE_IRQ_MAP_Pos = 0x0
	// Bit mask of APP_RWBLE_IRQ_MAP field.
	DPORT_APP_RWBLE_IRQ_MAP_APP_RWBLE_IRQ_MAP_Msk = 0x1f

	// APP_RWBT_NMI_MAP: DPORT_APP_RWBT_NMI_MAP
	// Position of APP_RWBT_NMI_MAP field.
	DPORT_APP_RWBT_NMI_MAP_APP_RWBT_NMI_MAP_Pos = 0x0
	// Bit mask of APP_RWBT_NMI_MAP field.
	DPORT_APP_RWBT_NMI_MAP_APP_RWBT_NMI_MAP_Msk = 0x1f

	// APP_RWBLE_NMI_MAP: DPORT_APP_RWBLE_NMI_MAP
	// Position of APP_RWBLE_NMI_MAP field.
	DPORT_APP_RWBLE_NMI_MAP_APP_RWBLE_NMI_MAP_Pos = 0x0
	// Bit mask of APP_RWBLE_NMI_MAP field.
	DPORT_APP_RWBLE_NMI_MAP_APP_RWBLE_NMI_MAP_Msk = 0x1f

	// APP_SLC0_INTR_MAP: DPORT_APP_SLC0_INTR_MAP
	// Position of APP_SLC0_INTR_MAP field.
	DPORT_APP_SLC0_INTR_MAP_APP_SLC0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_SLC0_INTR_MAP field.
	DPORT_APP_SLC0_INTR_MAP_APP_SLC0_INTR_MAP_Msk = 0x1f

	// APP_SLC1_INTR_MAP: DPORT_APP_SLC1_INTR_MAP
	// Position of APP_SLC1_INTR_MAP field.
	DPORT_APP_SLC1_INTR_MAP_APP_SLC1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_SLC1_INTR_MAP field.
	DPORT_APP_SLC1_INTR_MAP_APP_SLC1_INTR_MAP_Msk = 0x1f

	// APP_UHCI0_INTR_MAP: DPORT_APP_UHCI0_INTR_MAP
	// Position of APP_UHCI0_INTR_MAP field.
	DPORT_APP_UHCI0_INTR_MAP_APP_UHCI0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UHCI0_INTR_MAP field.
	DPORT_APP_UHCI0_INTR_MAP_APP_UHCI0_INTR_MAP_Msk = 0x1f

	// APP_UHCI1_INTR_MAP: DPORT_APP_UHCI1_INTR_MAP
	// Position of APP_UHCI1_INTR_MAP field.
	DPORT_APP_UHCI1_INTR_MAP_APP_UHCI1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UHCI1_INTR_MAP field.
	DPORT_APP_UHCI1_INTR_MAP_APP_UHCI1_INTR_MAP_Msk = 0x1f

	// APP_TG_T0_LEVEL_INT_MAP: DPORT_APP_TG_T0_LEVEL_INT_MAP
	// Position of APP_TG_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG_T0_LEVEL_INT_MAP_APP_TG_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG_T0_LEVEL_INT_MAP_APP_TG_T0_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG_T1_LEVEL_INT_MAP: DPORT_APP_TG_T1_LEVEL_INT_MAP
	// Position of APP_TG_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG_T1_LEVEL_INT_MAP_APP_TG_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG_T1_LEVEL_INT_MAP_APP_TG_T1_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG_WDT_LEVEL_INT_MAP: DPORT_APP_TG_WDT_LEVEL_INT_MAP
	// Position of APP_TG_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG_WDT_LEVEL_INT_MAP_APP_TG_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG_WDT_LEVEL_INT_MAP_APP_TG_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG_LACT_LEVEL_INT_MAP: DPORT_APP_TG_LACT_LEVEL_INT_MAP
	// Position of APP_TG_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG_LACT_LEVEL_INT_MAP_APP_TG_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG_LACT_LEVEL_INT_MAP_APP_TG_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_T0_LEVEL_INT_MAP: DPORT_APP_TG1_T0_LEVEL_INT_MAP
	// Position of APP_TG1_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T0_LEVEL_INT_MAP_APP_TG1_T0_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T0_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T0_LEVEL_INT_MAP_APP_TG1_T0_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_T1_LEVEL_INT_MAP: DPORT_APP_TG1_T1_LEVEL_INT_MAP
	// Position of APP_TG1_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T1_LEVEL_INT_MAP_APP_TG1_T1_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T1_LEVEL_INT_MAP field.
	DPORT_APP_TG1_T1_LEVEL_INT_MAP_APP_TG1_T1_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_WDT_LEVEL_INT_MAP: DPORT_APP_TG1_WDT_LEVEL_INT_MAP
	// Position of APP_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_WDT_LEVEL_INT_MAP_APP_TG1_WDT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_WDT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_WDT_LEVEL_INT_MAP_APP_TG1_WDT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_TG1_LACT_LEVEL_INT_MAP: DPORT_APP_TG1_LACT_LEVEL_INT_MAP
	// Position of APP_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_LACT_LEVEL_INT_MAP_APP_TG1_LACT_LEVEL_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_LACT_LEVEL_INT_MAP field.
	DPORT_APP_TG1_LACT_LEVEL_INT_MAP_APP_TG1_LACT_LEVEL_INT_MAP_Msk = 0x1f

	// APP_GPIO_INTERRUPT_MAP: DPORT_APP_GPIO_INTERRUPT_MAP
	// Position of APP_GPIO_INTERRUPT_APP_MAP field.
	DPORT_APP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP_Pos = 0x0
	// Bit mask of APP_GPIO_INTERRUPT_APP_MAP field.
	DPORT_APP_GPIO_INTERRUPT_MAP_APP_GPIO_INTERRUPT_APP_MAP_Msk = 0x1f

	// APP_GPIO_INTERRUPT_NMI_MAP: DPORT_APP_GPIO_INTERRUPT_NMI_MAP
	// Position of APP_GPIO_INTERRUPT_APP_NMI_MAP field.
	DPORT_APP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP_Pos = 0x0
	// Bit mask of APP_GPIO_INTERRUPT_APP_NMI_MAP field.
	DPORT_APP_GPIO_INTERRUPT_NMI_MAP_APP_GPIO_INTERRUPT_APP_NMI_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_0_MAP: DPORT_APP_CPU_INTR_FROM_CPU_0_MAP
	// Position of APP_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_0_MAP_APP_CPU_INTR_FROM_CPU_0_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_0_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_0_MAP_APP_CPU_INTR_FROM_CPU_0_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_1_MAP: DPORT_APP_CPU_INTR_FROM_CPU_1_MAP
	// Position of APP_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_1_MAP_APP_CPU_INTR_FROM_CPU_1_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_1_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_1_MAP_APP_CPU_INTR_FROM_CPU_1_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_2_MAP: DPORT_APP_CPU_INTR_FROM_CPU_2_MAP
	// Position of APP_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_2_MAP_APP_CPU_INTR_FROM_CPU_2_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_2_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_2_MAP_APP_CPU_INTR_FROM_CPU_2_MAP_Msk = 0x1f

	// APP_CPU_INTR_FROM_CPU_3_MAP: DPORT_APP_CPU_INTR_FROM_CPU_3_MAP
	// Position of APP_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_3_MAP_APP_CPU_INTR_FROM_CPU_3_MAP_Pos = 0x0
	// Bit mask of APP_CPU_INTR_FROM_CPU_3_MAP field.
	DPORT_APP_CPU_INTR_FROM_CPU_3_MAP_APP_CPU_INTR_FROM_CPU_3_MAP_Msk = 0x1f

	// APP_SPI_INTR_0_MAP: DPORT_APP_SPI_INTR_0_MAP
	// Position of APP_SPI_INTR_0_MAP field.
	DPORT_APP_SPI_INTR_0_MAP_APP_SPI_INTR_0_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_0_MAP field.
	DPORT_APP_SPI_INTR_0_MAP_APP_SPI_INTR_0_MAP_Msk = 0x1f

	// APP_SPI_INTR_1_MAP: DPORT_APP_SPI_INTR_1_MAP
	// Position of APP_SPI_INTR_1_MAP field.
	DPORT_APP_SPI_INTR_1_MAP_APP_SPI_INTR_1_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_1_MAP field.
	DPORT_APP_SPI_INTR_1_MAP_APP_SPI_INTR_1_MAP_Msk = 0x1f

	// APP_SPI_INTR_2_MAP: DPORT_APP_SPI_INTR_2_MAP
	// Position of APP_SPI_INTR_2_MAP field.
	DPORT_APP_SPI_INTR_2_MAP_APP_SPI_INTR_2_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_2_MAP field.
	DPORT_APP_SPI_INTR_2_MAP_APP_SPI_INTR_2_MAP_Msk = 0x1f

	// APP_SPI_INTR_3_MAP: DPORT_APP_SPI_INTR_3_MAP
	// Position of APP_SPI_INTR_3_MAP field.
	DPORT_APP_SPI_INTR_3_MAP_APP_SPI_INTR_3_MAP_Pos = 0x0
	// Bit mask of APP_SPI_INTR_3_MAP field.
	DPORT_APP_SPI_INTR_3_MAP_APP_SPI_INTR_3_MAP_Msk = 0x1f

	// APP_I2S0_INT_MAP: DPORT_APP_I2S0_INT_MAP
	// Position of APP_I2S0_INT_MAP field.
	DPORT_APP_I2S0_INT_MAP_APP_I2S0_INT_MAP_Pos = 0x0
	// Bit mask of APP_I2S0_INT_MAP field.
	DPORT_APP_I2S0_INT_MAP_APP_I2S0_INT_MAP_Msk = 0x1f

	// APP_I2S1_INT_MAP: DPORT_APP_I2S1_INT_MAP
	// Position of APP_I2S1_INT_MAP field.
	DPORT_APP_I2S1_INT_MAP_APP_I2S1_INT_MAP_Pos = 0x0
	// Bit mask of APP_I2S1_INT_MAP field.
	DPORT_APP_I2S1_INT_MAP_APP_I2S1_INT_MAP_Msk = 0x1f

	// APP_UART_INTR_MAP: DPORT_APP_UART_INTR_MAP
	// Position of APP_UART_INTR_MAP field.
	DPORT_APP_UART_INTR_MAP_APP_UART_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UART_INTR_MAP field.
	DPORT_APP_UART_INTR_MAP_APP_UART_INTR_MAP_Msk = 0x1f

	// APP_UART1_INTR_MAP: DPORT_APP_UART1_INTR_MAP
	// Position of APP_UART1_INTR_MAP field.
	DPORT_APP_UART1_INTR_MAP_APP_UART1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UART1_INTR_MAP field.
	DPORT_APP_UART1_INTR_MAP_APP_UART1_INTR_MAP_Msk = 0x1f

	// APP_UART2_INTR_MAP: DPORT_APP_UART2_INTR_MAP
	// Position of APP_UART2_INTR_MAP field.
	DPORT_APP_UART2_INTR_MAP_APP_UART2_INTR_MAP_Pos = 0x0
	// Bit mask of APP_UART2_INTR_MAP field.
	DPORT_APP_UART2_INTR_MAP_APP_UART2_INTR_MAP_Msk = 0x1f

	// APP_SDIO_HOST_INTERRUPT_MAP: DPORT_APP_SDIO_HOST_INTERRUPT_MAP
	// Position of APP_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_APP_SDIO_HOST_INTERRUPT_MAP_APP_SDIO_HOST_INTERRUPT_MAP_Pos = 0x0
	// Bit mask of APP_SDIO_HOST_INTERRUPT_MAP field.
	DPORT_APP_SDIO_HOST_INTERRUPT_MAP_APP_SDIO_HOST_INTERRUPT_MAP_Msk = 0x1f

	// APP_EMAC_INT_MAP: DPORT_APP_EMAC_INT_MAP
	// Position of APP_EMAC_INT_MAP field.
	DPORT_APP_EMAC_INT_MAP_APP_EMAC_INT_MAP_Pos = 0x0
	// Bit mask of APP_EMAC_INT_MAP field.
	DPORT_APP_EMAC_INT_MAP_APP_EMAC_INT_MAP_Msk = 0x1f

	// APP_PWM0_INTR_MAP: DPORT_APP_PWM0_INTR_MAP
	// Position of APP_PWM0_INTR_MAP field.
	DPORT_APP_PWM0_INTR_MAP_APP_PWM0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM0_INTR_MAP field.
	DPORT_APP_PWM0_INTR_MAP_APP_PWM0_INTR_MAP_Msk = 0x1f

	// APP_PWM1_INTR_MAP: DPORT_APP_PWM1_INTR_MAP
	// Position of APP_PWM1_INTR_MAP field.
	DPORT_APP_PWM1_INTR_MAP_APP_PWM1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM1_INTR_MAP field.
	DPORT_APP_PWM1_INTR_MAP_APP_PWM1_INTR_MAP_Msk = 0x1f

	// APP_PWM2_INTR_MAP: DPORT_APP_PWM2_INTR_MAP
	// Position of APP_PWM2_INTR_MAP field.
	DPORT_APP_PWM2_INTR_MAP_APP_PWM2_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM2_INTR_MAP field.
	DPORT_APP_PWM2_INTR_MAP_APP_PWM2_INTR_MAP_Msk = 0x1f

	// APP_PWM3_INTR_MAP: DPORT_APP_PWM3_INTR_MAP
	// Position of APP_PWM3_INTR_MAP field.
	DPORT_APP_PWM3_INTR_MAP_APP_PWM3_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PWM3_INTR_MAP field.
	DPORT_APP_PWM3_INTR_MAP_APP_PWM3_INTR_MAP_Msk = 0x1f

	// APP_LEDC_INT_MAP: DPORT_APP_LEDC_INT_MAP
	// Position of APP_LEDC_INT_MAP field.
	DPORT_APP_LEDC_INT_MAP_APP_LEDC_INT_MAP_Pos = 0x0
	// Bit mask of APP_LEDC_INT_MAP field.
	DPORT_APP_LEDC_INT_MAP_APP_LEDC_INT_MAP_Msk = 0x1f

	// APP_EFUSE_INT_MAP: DPORT_APP_EFUSE_INT_MAP
	// Position of APP_EFUSE_INT_MAP field.
	DPORT_APP_EFUSE_INT_MAP_APP_EFUSE_INT_MAP_Pos = 0x0
	// Bit mask of APP_EFUSE_INT_MAP field.
	DPORT_APP_EFUSE_INT_MAP_APP_EFUSE_INT_MAP_Msk = 0x1f

	// APP_CAN_INT_MAP: DPORT_APP_CAN_INT_MAP
	// Position of APP_CAN_INT_MAP field.
	DPORT_APP_CAN_INT_MAP_APP_CAN_INT_MAP_Pos = 0x0
	// Bit mask of APP_CAN_INT_MAP field.
	DPORT_APP_CAN_INT_MAP_APP_CAN_INT_MAP_Msk = 0x1f

	// APP_RTC_CORE_INTR_MAP: DPORT_APP_RTC_CORE_INTR_MAP
	// Position of APP_RTC_CORE_INTR_MAP field.
	DPORT_APP_RTC_CORE_INTR_MAP_APP_RTC_CORE_INTR_MAP_Pos = 0x0
	// Bit mask of APP_RTC_CORE_INTR_MAP field.
	DPORT_APP_RTC_CORE_INTR_MAP_APP_RTC_CORE_INTR_MAP_Msk = 0x1f

	// APP_RMT_INTR_MAP: DPORT_APP_RMT_INTR_MAP
	// Position of APP_RMT_INTR_MAP field.
	DPORT_APP_RMT_INTR_MAP_APP_RMT_INTR_MAP_Pos = 0x0
	// Bit mask of APP_RMT_INTR_MAP field.
	DPORT_APP_RMT_INTR_MAP_APP_RMT_INTR_MAP_Msk = 0x1f

	// APP_PCNT_INTR_MAP: DPORT_APP_PCNT_INTR_MAP
	// Position of APP_PCNT_INTR_MAP field.
	DPORT_APP_PCNT_INTR_MAP_APP_PCNT_INTR_MAP_Pos = 0x0
	// Bit mask of APP_PCNT_INTR_MAP field.
	DPORT_APP_PCNT_INTR_MAP_APP_PCNT_INTR_MAP_Msk = 0x1f

	// APP_I2C_EXT0_INTR_MAP: DPORT_APP_I2C_EXT0_INTR_MAP
	// Position of APP_I2C_EXT0_INTR_MAP field.
	DPORT_APP_I2C_EXT0_INTR_MAP_APP_I2C_EXT0_INTR_MAP_Pos = 0x0
	// Bit mask of APP_I2C_EXT0_INTR_MAP field.
	DPORT_APP_I2C_EXT0_INTR_MAP_APP_I2C_EXT0_INTR_MAP_Msk = 0x1f

	// APP_I2C_EXT1_INTR_MAP: DPORT_APP_I2C_EXT1_INTR_MAP
	// Position of APP_I2C_EXT1_INTR_MAP field.
	DPORT_APP_I2C_EXT1_INTR_MAP_APP_I2C_EXT1_INTR_MAP_Pos = 0x0
	// Bit mask of APP_I2C_EXT1_INTR_MAP field.
	DPORT_APP_I2C_EXT1_INTR_MAP_APP_I2C_EXT1_INTR_MAP_Msk = 0x1f

	// APP_RSA_INTR_MAP: DPORT_APP_RSA_INTR_MAP
	// Position of APP_RSA_INTR_MAP field.
	DPORT_APP_RSA_INTR_MAP_APP_RSA_INTR_MAP_Pos = 0x0
	// Bit mask of APP_RSA_INTR_MAP field.
	DPORT_APP_RSA_INTR_MAP_APP_RSA_INTR_MAP_Msk = 0x1f

	// APP_SPI1_DMA_INT_MAP: DPORT_APP_SPI1_DMA_INT_MAP
	// Position of APP_SPI1_DMA_INT_MAP field.
	DPORT_APP_SPI1_DMA_INT_MAP_APP_SPI1_DMA_INT_MAP_Pos = 0x0
	// Bit mask of APP_SPI1_DMA_INT_MAP field.
	DPORT_APP_SPI1_DMA_INT_MAP_APP_SPI1_DMA_INT_MAP_Msk = 0x1f

	// APP_SPI2_DMA_INT_MAP: DPORT_APP_SPI2_DMA_INT_MAP
	// Position of APP_SPI2_DMA_INT_MAP field.
	DPORT_APP_SPI2_DMA_INT_MAP_APP_SPI2_DMA_INT_MAP_Pos = 0x0
	// Bit mask of APP_SPI2_DMA_INT_MAP field.
	DPORT_APP_SPI2_DMA_INT_MAP_APP_SPI2_DMA_INT_MAP_Msk = 0x1f

	// APP_SPI3_DMA_INT_MAP: DPORT_APP_SPI3_DMA_INT_MAP
	// Position of APP_SPI3_DMA_INT_MAP field.
	DPORT_APP_SPI3_DMA_INT_MAP_APP_SPI3_DMA_INT_MAP_Pos = 0x0
	// Bit mask of APP_SPI3_DMA_INT_MAP field.
	DPORT_APP_SPI3_DMA_INT_MAP_APP_SPI3_DMA_INT_MAP_Msk = 0x1f

	// APP_WDG_INT_MAP: DPORT_APP_WDG_INT_MAP
	// Position of APP_WDG_INT_MAP field.
	DPORT_APP_WDG_INT_MAP_APP_WDG_INT_MAP_Pos = 0x0
	// Bit mask of APP_WDG_INT_MAP field.
	DPORT_APP_WDG_INT_MAP_APP_WDG_INT_MAP_Msk = 0x1f

	// APP_TIMER_INT1_MAP: DPORT_APP_TIMER_INT1_MAP
	// Position of APP_TIMER_INT1_MAP field.
	DPORT_APP_TIMER_INT1_MAP_APP_TIMER_INT1_MAP_Pos = 0x0
	// Bit mask of APP_TIMER_INT1_MAP field.
	DPORT_APP_TIMER_INT1_MAP_APP_TIMER_INT1_MAP_Msk = 0x1f

	// APP_TIMER_INT2_MAP: DPORT_APP_TIMER_INT2_MAP
	// Position of APP_TIMER_INT2_MAP field.
	DPORT_APP_TIMER_INT2_MAP_APP_TIMER_INT2_MAP_Pos = 0x0
	// Bit mask of APP_TIMER_INT2_MAP field.
	DPORT_APP_TIMER_INT2_MAP_APP_TIMER_INT2_MAP_Msk = 0x1f

	// APP_TG_T0_EDGE_INT_MAP: DPORT_APP_TG_T0_EDGE_INT_MAP
	// Position of APP_TG_T0_EDGE_INT_MAP field.
	DPORT_APP_TG_T0_EDGE_INT_MAP_APP_TG_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T0_EDGE_INT_MAP field.
	DPORT_APP_TG_T0_EDGE_INT_MAP_APP_TG_T0_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG_T1_EDGE_INT_MAP: DPORT_APP_TG_T1_EDGE_INT_MAP
	// Position of APP_TG_T1_EDGE_INT_MAP field.
	DPORT_APP_TG_T1_EDGE_INT_MAP_APP_TG_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_T1_EDGE_INT_MAP field.
	DPORT_APP_TG_T1_EDGE_INT_MAP_APP_TG_T1_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG_WDT_EDGE_INT_MAP: DPORT_APP_TG_WDT_EDGE_INT_MAP
	// Position of APP_TG_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG_WDT_EDGE_INT_MAP_APP_TG_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG_WDT_EDGE_INT_MAP_APP_TG_WDT_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG_LACT_EDGE_INT_MAP: DPORT_APP_TG_LACT_EDGE_INT_MAP
	// Position of APP_TG_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG_LACT_EDGE_INT_MAP_APP_TG_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG_LACT_EDGE_INT_MAP_APP_TG_LACT_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_T0_EDGE_INT_MAP: DPORT_APP_TG1_T0_EDGE_INT_MAP
	// Position of APP_TG1_T0_EDGE_INT_MAP field.
	DPORT_APP_TG1_T0_EDGE_INT_MAP_APP_TG1_T0_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T0_EDGE_INT_MAP field.
	DPORT_APP_TG1_T0_EDGE_INT_MAP_APP_TG1_T0_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_T1_EDGE_INT_MAP: DPORT_APP_TG1_T1_EDGE_INT_MAP
	// Position of APP_TG1_T1_EDGE_INT_MAP field.
	DPORT_APP_TG1_T1_EDGE_INT_MAP_APP_TG1_T1_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_T1_EDGE_INT_MAP field.
	DPORT_APP_TG1_T1_EDGE_INT_MAP_APP_TG1_T1_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_WDT_EDGE_INT_MAP: DPORT_APP_TG1_WDT_EDGE_INT_MAP
	// Position of APP_TG1_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG1_WDT_EDGE_INT_MAP_APP_TG1_WDT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_WDT_EDGE_INT_MAP field.
	DPORT_APP_TG1_WDT_EDGE_INT_MAP_APP_TG1_WDT_EDGE_INT_MAP_Msk = 0x1f

	// APP_TG1_LACT_EDGE_INT_MAP: DPORT_APP_TG1_LACT_EDGE_INT_MAP
	// Position of APP_TG1_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG1_LACT_EDGE_INT_MAP_APP_TG1_LACT_EDGE_INT_MAP_Pos = 0x0
	// Bit mask of APP_TG1_LACT_EDGE_INT_MAP field.
	DPORT_APP_TG1_LACT_EDGE_INT_MAP_APP_TG1_LACT_EDGE_INT_MAP_Msk = 0x1f

	// APP_MMU_IA_INT_MAP: DPORT_APP_MMU_IA_INT_MAP
	// Position of APP_MMU_IA_INT_MAP field.
	DPORT_APP_MMU_IA_INT_MAP_APP_MMU_IA_INT_MAP_Pos = 0x0
	// Bit mask of APP_MMU_IA_INT_MAP field.
	DPORT_APP_MMU_IA_INT_MAP_APP_MMU_IA_INT_MAP_Msk = 0x1f

	// APP_MPU_IA_INT_MAP: DPORT_APP_MPU_IA_INT_MAP
	// Position of APP_MPU_IA_INT_MAP field.
	DPORT_APP_MPU_IA_INT_MAP_APP_MPU_IA_INT_MAP_Pos = 0x0
	// Bit mask of APP_MPU_IA_INT_MAP field.
	DPORT_APP_MPU_IA_INT_MAP_APP_MPU_IA_INT_MAP_Msk = 0x1f

	// APP_CACHE_IA_INT_MAP: DPORT_APP_CACHE_IA_INT_MAP
	// Position of APP_CACHE_IA_INT_MAP field.
	DPORT_APP_CACHE_IA_INT_MAP_APP_CACHE_IA_INT_MAP_Pos = 0x0
	// Bit mask of APP_CACHE_IA_INT_MAP field.
	DPORT_APP_CACHE_IA_INT_MAP_APP_CACHE_IA_INT_MAP_Msk = 0x1f

	// AHBLITE_MPU_TABLE_UART: DPORT_AHBLITE_MPU_TABLE_UART
	// Position of UART_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UART_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART_UART_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI1: DPORT_AHBLITE_MPU_TABLE_SPI1
	// Position of SPI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI1_SPI1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI0: DPORT_AHBLITE_MPU_TABLE_SPI0
	// Position of SPI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI0_SPI0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_GPIO: DPORT_AHBLITE_MPU_TABLE_GPIO
	// Position of GPIO_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of GPIO_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_GPIO_GPIO_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_FE2: DPORT_AHBLITE_MPU_TABLE_FE2
	// Position of FE2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of FE2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE2_FE2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_FE: DPORT_AHBLITE_MPU_TABLE_FE
	// Position of FE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of FE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_FE_FE_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_TIMER: DPORT_AHBLITE_MPU_TABLE_TIMER
	// Position of TIMER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of TIMER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMER_TIMER_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_RTC: DPORT_AHBLITE_MPU_TABLE_RTC
	// Position of RTC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of RTC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RTC_RTC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_IO_MUX: DPORT_AHBLITE_MPU_TABLE_IO_MUX
	// Position of IOMUX_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of IOMUX_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_IO_MUX_IOMUX_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_WDG: DPORT_AHBLITE_MPU_TABLE_WDG
	// Position of WDG_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of WDG_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WDG_WDG_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_HINF: DPORT_AHBLITE_MPU_TABLE_HINF
	// Position of HINF_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of HINF_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_HINF_HINF_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UHCI1: DPORT_AHBLITE_MPU_TABLE_UHCI1
	// Position of UHCI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UHCI1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI1_UHCI1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_MISC: DPORT_AHBLITE_MPU_TABLE_MISC
	// Position of MISC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of MISC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_MISC_MISC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2C: DPORT_AHBLITE_MPU_TABLE_I2C
	// Position of I2C_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2C_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_I2C_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2S0: DPORT_AHBLITE_MPU_TABLE_I2S0
	// Position of I2S0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2S0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S0_I2S0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UART1: DPORT_AHBLITE_MPU_TABLE_UART1
	// Position of UART1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UART1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART1_UART1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BT: DPORT_AHBLITE_MPU_TABLE_BT
	// Position of BT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BT_BUFFER: DPORT_AHBLITE_MPU_TABLE_BT_BUFFER
	// Position of BTBUFFER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BTBUFFER_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BT_BUFFER_BTBUFFER_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2C_EXT0: DPORT_AHBLITE_MPU_TABLE_I2C_EXT0
	// Position of I2CEXT0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2CEXT0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT0_I2CEXT0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UHCI0: DPORT_AHBLITE_MPU_TABLE_UHCI0
	// Position of UHCI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UHCI0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UHCI0_UHCI0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SLCHOST: DPORT_AHBLITE_MPU_TABLE_SLCHOST
	// Position of SLCHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SLCHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLCHOST_SLCHOST_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_RMT: DPORT_AHBLITE_MPU_TABLE_RMT
	// Position of RMT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of RMT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RMT_RMT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PCNT: DPORT_AHBLITE_MPU_TABLE_PCNT
	// Position of PCNT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PCNT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PCNT_PCNT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SLC: DPORT_AHBLITE_MPU_TABLE_SLC
	// Position of SLC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SLC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SLC_SLC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_LEDC: DPORT_AHBLITE_MPU_TABLE_LEDC
	// Position of LEDC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of LEDC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_LEDC_LEDC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_EFUSE: DPORT_AHBLITE_MPU_TABLE_EFUSE
	// Position of EFUSE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of EFUSE_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EFUSE_EFUSE_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI_ENCRYPT: DPORT_AHBLITE_MPU_TABLE_SPI_ENCRYPT
	// Position of SPI_ENCRYPY_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI_ENCRYPY_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI_ENCRYPT_SPI_ENCRYPY_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BB: DPORT_AHBLITE_MPU_TABLE_BB
	// Position of BB_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BB_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BB_BB_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM0: DPORT_AHBLITE_MPU_TABLE_PWM0
	// Position of PWM0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM0_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM0_PWM0_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_TIMERGROUP: DPORT_AHBLITE_MPU_TABLE_TIMERGROUP
	// Position of TIMERGROUP_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of TIMERGROUP_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP_TIMERGROUP_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_TIMERGROUP1: DPORT_AHBLITE_MPU_TABLE_TIMERGROUP1
	// Position of TIMERGROUP1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of TIMERGROUP1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_TIMERGROUP1_TIMERGROUP1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI2: DPORT_AHBLITE_MPU_TABLE_SPI2
	// Position of SPI2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI2_SPI2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SPI3: DPORT_AHBLITE_MPU_TABLE_SPI3
	// Position of SPI3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SPI3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SPI3_SPI3_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_APB_CTRL: DPORT_AHBLITE_MPU_TABLE_APB_CTRL
	// Position of APBCTRL_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of APBCTRL_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_APB_CTRL_APBCTRL_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2C_EXT1: DPORT_AHBLITE_MPU_TABLE_I2C_EXT1
	// Position of I2CEXT1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2CEXT1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2C_EXT1_I2CEXT1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_SDIO_HOST: DPORT_AHBLITE_MPU_TABLE_SDIO_HOST
	// Position of SDIOHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of SDIOHOST_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_SDIO_HOST_SDIOHOST_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_EMAC: DPORT_AHBLITE_MPU_TABLE_EMAC
	// Position of EMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of EMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_EMAC_EMAC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_CAN: DPORT_AHBLITE_MPU_TABLE_CAN
	// Position of CAN_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of CAN_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_CAN_CAN_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM1: DPORT_AHBLITE_MPU_TABLE_PWM1
	// Position of PWM1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM1_PWM1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_I2S1: DPORT_AHBLITE_MPU_TABLE_I2S1
	// Position of I2S1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of I2S1_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_I2S1_I2S1_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_UART2: DPORT_AHBLITE_MPU_TABLE_UART2
	// Position of UART2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of UART2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_UART2_UART2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM2: DPORT_AHBLITE_MPU_TABLE_PWM2
	// Position of PWM2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM2_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM2_PWM2_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWM3: DPORT_AHBLITE_MPU_TABLE_PWM3
	// Position of PWM3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWM3_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWM3_PWM3_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_RWBT: DPORT_AHBLITE_MPU_TABLE_RWBT
	// Position of RWBT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of RWBT_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_RWBT_RWBT_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_BTMAC: DPORT_AHBLITE_MPU_TABLE_BTMAC
	// Position of BTMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of BTMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_BTMAC_BTMAC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_WIFIMAC: DPORT_AHBLITE_MPU_TABLE_WIFIMAC
	// Position of WIFIMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of WIFIMAC_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_WIFIMAC_WIFIMAC_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// AHBLITE_MPU_TABLE_PWR: DPORT_AHBLITE_MPU_TABLE_PWR
	// Position of PWR_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG_Pos = 0x0
	// Bit mask of PWR_ACCESS_GRANT_CONFIG field.
	DPORT_AHBLITE_MPU_TABLE_PWR_PWR_ACCESS_GRANT_CONFIG_Msk = 0x3f

	// MEM_ACCESS_DBUG0: DPORT_MEM_ACCESS_DBUG0
	// Position of INTERNAL_SRAM_MMU_MULTI_HIT field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT_Pos = 0x1a
	// Bit mask of INTERNAL_SRAM_MMU_MULTI_HIT field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_MULTI_HIT_Msk = 0x3c000000
	// Position of INTERNAL_SRAM_IA field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_IA_Pos = 0xe
	// Bit mask of INTERNAL_SRAM_IA field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_IA_Msk = 0x3ffc000
	// Position of INTERNAL_SRAM_MMU_AD field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD_Pos = 0xa
	// Bit mask of INTERNAL_SRAM_MMU_AD field.
	DPORT_MEM_ACCESS_DBUG0_INTERNAL_SRAM_MMU_AD_Msk = 0x3c00
	// Position of SHARE_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_IA_Pos = 0x6
	// Bit mask of SHARE_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_IA_Msk = 0x3c0
	// Position of SHARE_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD_Pos = 0x4
	// Bit mask of SHARE_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_SHARE_ROM_MPU_AD_Msk = 0x30
	// Position of APP_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_IA_Pos = 0x3
	// Bit mask of APP_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_IA_Msk = 0x8
	// Bit APP_ROM_IA.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_IA = 0x8
	// Position of APP_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_MPU_AD_Pos = 0x2
	// Bit mask of APP_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_MPU_AD_Msk = 0x4
	// Bit APP_ROM_MPU_AD.
	DPORT_MEM_ACCESS_DBUG0_APP_ROM_MPU_AD = 0x4
	// Position of PRO_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_IA_Pos = 0x1
	// Bit mask of PRO_ROM_IA field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_IA_Msk = 0x2
	// Bit PRO_ROM_IA.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_IA = 0x2
	// Position of PRO_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_MPU_AD_Pos = 0x0
	// Bit mask of PRO_ROM_MPU_AD field.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_MPU_AD_Msk = 0x1
	// Bit PRO_ROM_MPU_AD.
	DPORT_MEM_ACCESS_DBUG0_PRO_ROM_MPU_AD = 0x1

	// MEM_ACCESS_DBUG1: DPORT_MEM_ACCESS_DBUG1
	// Position of AHBLITE_IA field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_IA_Pos = 0xa
	// Bit mask of AHBLITE_IA field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_IA_Msk = 0x400
	// Bit AHBLITE_IA.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_IA = 0x400
	// Position of AHBLITE_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY_Pos = 0x9
	// Bit mask of AHBLITE_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY_Msk = 0x200
	// Bit AHBLITE_ACCESS_DENY.
	DPORT_MEM_ACCESS_DBUG1_AHBLITE_ACCESS_DENY = 0x200
	// Position of AHB_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHB_ACCESS_DENY_Pos = 0x8
	// Bit mask of AHB_ACCESS_DENY field.
	DPORT_MEM_ACCESS_DBUG1_AHB_ACCESS_DENY_Msk = 0x100
	// Bit AHB_ACCESS_DENY.
	DPORT_MEM_ACCESS_DBUG1_AHB_ACCESS_DENY = 0x100
	// Position of PIDGEN_IA field.
	DPORT_MEM_ACCESS_DBUG1_PIDGEN_IA_Pos = 0x6
	// Bit mask of PIDGEN_IA field.
	DPORT_MEM_ACCESS_DBUG1_PIDGEN_IA_Msk = 0xc0
	// Position of ARB_IA field.
	DPORT_MEM_ACCESS_DBUG1_ARB_IA_Pos = 0x4
	// Bit mask of ARB_IA field.
	DPORT_MEM_ACCESS_DBUG1_ARB_IA_Msk = 0x30
	// Position of INTERNAL_SRAM_MMU_MISS field.
	DPORT_MEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS_Pos = 0x0
	// Bit mask of INTERNAL_SRAM_MMU_MISS field.
	DPORT_MEM_ACCESS_DBUG1_INTERNAL_SRAM_MMU_MISS_Msk = 0xf

	// PRO_DCACHE_DBUG0: DPORT_PRO_DCACHE_DBUG0
	// Position of PRO_RX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_RX_END_Pos = 0x17
	// Bit mask of PRO_RX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_RX_END_Msk = 0x800000
	// Bit PRO_RX_END.
	DPORT_PRO_DCACHE_DBUG0_PRO_RX_END = 0x800000
	// Position of PRO_SLAVE_WDATA_V field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V_Pos = 0x16
	// Bit mask of PRO_SLAVE_WDATA_V field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V_Msk = 0x400000
	// Bit PRO_SLAVE_WDATA_V.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WDATA_V = 0x400000
	// Position of PRO_SLAVE_WR field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WR_Pos = 0x15
	// Bit mask of PRO_SLAVE_WR field.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WR_Msk = 0x200000
	// Bit PRO_SLAVE_WR.
	DPORT_PRO_DCACHE_DBUG0_PRO_SLAVE_WR = 0x200000
	// Position of PRO_TX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_TX_END_Pos = 0x14
	// Bit mask of PRO_TX_END field.
	DPORT_PRO_DCACHE_DBUG0_PRO_TX_END_Msk = 0x100000
	// Bit PRO_TX_END.
	DPORT_PRO_DCACHE_DBUG0_PRO_TX_END = 0x100000
	// Position of PRO_WR_BAK_TO_READ field.
	DPORT_PRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ_Pos = 0x13
	// Bit mask of PRO_WR_BAK_TO_READ field.
	DPORT_PRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ_Msk = 0x80000
	// Bit PRO_WR_BAK_TO_READ.
	DPORT_PRO_DCACHE_DBUG0_PRO_WR_BAK_TO_READ = 0x80000
	// Position of PRO_CACHE_STATE field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_STATE_Pos = 0x7
	// Bit mask of PRO_CACHE_STATE field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_STATE_Msk = 0x7ff80
	// Position of PRO_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_IA_Pos = 0x1
	// Bit mask of PRO_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_IA_Msk = 0x7e
	// Position of PRO_CACHE_MMU_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA_Pos = 0x0
	// Bit mask of PRO_CACHE_MMU_IA field.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA_Msk = 0x1
	// Bit PRO_CACHE_MMU_IA.
	DPORT_PRO_DCACHE_DBUG0_PRO_CACHE_MMU_IA = 0x1

	// PRO_DCACHE_DBUG1: DPORT_PRO_DCACHE_DBUG1
	// Position of PRO_CTAG_RAM_RDATA field.
	DPORT_PRO_DCACHE_DBUG1_PRO_CTAG_RAM_RDATA_Pos = 0x0
	// Bit mask of PRO_CTAG_RAM_RDATA field.
	DPORT_PRO_DCACHE_DBUG1_PRO_CTAG_RAM_RDATA_Msk = 0xffffffff

	// PRO_DCACHE_DBUG2: DPORT_PRO_DCACHE_DBUG2
	// Position of PRO_CACHE_VADDR field.
	DPORT_PRO_DCACHE_DBUG2_PRO_CACHE_VADDR_Pos = 0x0
	// Bit mask of PRO_CACHE_VADDR field.
	DPORT_PRO_DCACHE_DBUG2_PRO_CACHE_VADDR_Msk = 0x7ffffff

	// PRO_DCACHE_DBUG3: DPORT_PRO_DCACHE_DBUG3
	// Position of PRO_CACHE_IRAM0_PID_ERROR field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR_Pos = 0xf
	// Bit mask of PRO_CACHE_IRAM0_PID_ERROR field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR_Msk = 0x8000
	// Bit PRO_CACHE_IRAM0_PID_ERROR.
	DPORT_PRO_DCACHE_DBUG3_PRO_CACHE_IRAM0_PID_ERROR = 0x8000
	// Position of PRO_CPU_DISABLED_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_Pos = 0x9
	// Bit mask of PRO_CPU_DISABLED_CACHE_IA field.
	DPORT_PRO_DCACHE_DBUG3_PRO_CPU_DISABLED_CACHE_IA_Msk = 0x7e00

	// PRO_DCACHE_DBUG4: DPORT_PRO_DCACHE_DBUG4
	// Position of PRO_DRAM1ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA_Pos = 0x0
	// Bit mask of PRO_DRAM1ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG4_PRO_DRAM1ADDR0_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG5: DPORT_PRO_DCACHE_DBUG5
	// Position of PRO_DROM0ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA_Pos = 0x0
	// Bit mask of PRO_DROM0ADDR0_IA field.
	DPORT_PRO_DCACHE_DBUG5_PRO_DROM0ADDR0_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG6: DPORT_PRO_DCACHE_DBUG6
	// Position of PRO_IRAM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA_Pos = 0x0
	// Bit mask of PRO_IRAM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG6_PRO_IRAM0ADDR_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG7: DPORT_PRO_DCACHE_DBUG7
	// Position of PRO_IRAM1ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA_Pos = 0x0
	// Bit mask of PRO_IRAM1ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG7_PRO_IRAM1ADDR_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG8: DPORT_PRO_DCACHE_DBUG8
	// Position of PRO_IROM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA_Pos = 0x0
	// Bit mask of PRO_IROM0ADDR_IA field.
	DPORT_PRO_DCACHE_DBUG8_PRO_IROM0ADDR_IA_Msk = 0xfffff

	// PRO_DCACHE_DBUG9: DPORT_PRO_DCACHE_DBUG9
	// Position of PRO_OPSDRAMADDR_IA field.
	DPORT_PRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA_Pos = 0x0
	// Bit mask of PRO_OPSDRAMADDR_IA field.
	DPORT_PRO_DCACHE_DBUG9_PRO_OPSDRAMADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG0: DPORT_APP_DCACHE_DBUG0
	// Position of APP_RX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_RX_END_Pos = 0x17
	// Bit mask of APP_RX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_RX_END_Msk = 0x800000
	// Bit APP_RX_END.
	DPORT_APP_DCACHE_DBUG0_APP_RX_END = 0x800000
	// Position of APP_SLAVE_WDATA_V field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_V_Pos = 0x16
	// Bit mask of APP_SLAVE_WDATA_V field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_V_Msk = 0x400000
	// Bit APP_SLAVE_WDATA_V.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WDATA_V = 0x400000
	// Position of APP_SLAVE_WR field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WR_Pos = 0x15
	// Bit mask of APP_SLAVE_WR field.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WR_Msk = 0x200000
	// Bit APP_SLAVE_WR.
	DPORT_APP_DCACHE_DBUG0_APP_SLAVE_WR = 0x200000
	// Position of APP_TX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_TX_END_Pos = 0x14
	// Bit mask of APP_TX_END field.
	DPORT_APP_DCACHE_DBUG0_APP_TX_END_Msk = 0x100000
	// Bit APP_TX_END.
	DPORT_APP_DCACHE_DBUG0_APP_TX_END = 0x100000
	// Position of APP_WR_BAK_TO_READ field.
	DPORT_APP_DCACHE_DBUG0_APP_WR_BAK_TO_READ_Pos = 0x13
	// Bit mask of APP_WR_BAK_TO_READ field.
	DPORT_APP_DCACHE_DBUG0_APP_WR_BAK_TO_READ_Msk = 0x80000
	// Bit APP_WR_BAK_TO_READ.
	DPORT_APP_DCACHE_DBUG0_APP_WR_BAK_TO_READ = 0x80000
	// Position of APP_CACHE_STATE field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_STATE_Pos = 0x7
	// Bit mask of APP_CACHE_STATE field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_STATE_Msk = 0x7ff80
	// Position of APP_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_IA_Pos = 0x1
	// Bit mask of APP_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_IA_Msk = 0x7e
	// Position of APP_CACHE_MMU_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_MMU_IA_Pos = 0x0
	// Bit mask of APP_CACHE_MMU_IA field.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_MMU_IA_Msk = 0x1
	// Bit APP_CACHE_MMU_IA.
	DPORT_APP_DCACHE_DBUG0_APP_CACHE_MMU_IA = 0x1

	// APP_DCACHE_DBUG1: DPORT_APP_DCACHE_DBUG1
	// Position of APP_CTAG_RAM_RDATA field.
	DPORT_APP_DCACHE_DBUG1_APP_CTAG_RAM_RDATA_Pos = 0x0
	// Bit mask of APP_CTAG_RAM_RDATA field.
	DPORT_APP_DCACHE_DBUG1_APP_CTAG_RAM_RDATA_Msk = 0xffffffff

	// APP_DCACHE_DBUG2: DPORT_APP_DCACHE_DBUG2
	// Position of APP_CACHE_VADDR field.
	DPORT_APP_DCACHE_DBUG2_APP_CACHE_VADDR_Pos = 0x0
	// Bit mask of APP_CACHE_VADDR field.
	DPORT_APP_DCACHE_DBUG2_APP_CACHE_VADDR_Msk = 0x7ffffff

	// APP_DCACHE_DBUG3: DPORT_APP_DCACHE_DBUG3
	// Position of APP_CACHE_IRAM0_PID_ERROR field.
	DPORT_APP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR_Pos = 0xf
	// Bit mask of APP_CACHE_IRAM0_PID_ERROR field.
	DPORT_APP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR_Msk = 0x8000
	// Bit APP_CACHE_IRAM0_PID_ERROR.
	DPORT_APP_DCACHE_DBUG3_APP_CACHE_IRAM0_PID_ERROR = 0x8000
	// Position of APP_CPU_DISABLED_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_Pos = 0x9
	// Bit mask of APP_CPU_DISABLED_CACHE_IA field.
	DPORT_APP_DCACHE_DBUG3_APP_CPU_DISABLED_CACHE_IA_Msk = 0x7e00

	// APP_DCACHE_DBUG4: DPORT_APP_DCACHE_DBUG4
	// Position of APP_DRAM1ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA_Pos = 0x0
	// Bit mask of APP_DRAM1ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG4_APP_DRAM1ADDR0_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG5: DPORT_APP_DCACHE_DBUG5
	// Position of APP_DROM0ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG5_APP_DROM0ADDR0_IA_Pos = 0x0
	// Bit mask of APP_DROM0ADDR0_IA field.
	DPORT_APP_DCACHE_DBUG5_APP_DROM0ADDR0_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG6: DPORT_APP_DCACHE_DBUG6
	// Position of APP_IRAM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG6_APP_IRAM0ADDR_IA_Pos = 0x0
	// Bit mask of APP_IRAM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG6_APP_IRAM0ADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG7: DPORT_APP_DCACHE_DBUG7
	// Position of APP_IRAM1ADDR_IA field.
	DPORT_APP_DCACHE_DBUG7_APP_IRAM1ADDR_IA_Pos = 0x0
	// Bit mask of APP_IRAM1ADDR_IA field.
	DPORT_APP_DCACHE_DBUG7_APP_IRAM1ADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG8: DPORT_APP_DCACHE_DBUG8
	// Position of APP_IROM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG8_APP_IROM0ADDR_IA_Pos = 0x0
	// Bit mask of APP_IROM0ADDR_IA field.
	DPORT_APP_DCACHE_DBUG8_APP_IROM0ADDR_IA_Msk = 0xfffff

	// APP_DCACHE_DBUG9: DPORT_APP_DCACHE_DBUG9
	// Position of APP_OPSDRAMADDR_IA field.
	DPORT_APP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA_Pos = 0x0
	// Bit mask of APP_OPSDRAMADDR_IA field.
	DPORT_APP_DCACHE_DBUG9_APP_OPSDRAMADDR_IA_Msk = 0xfffff

	// PRO_CPU_RECORD_CTRL: DPORT_PRO_CPU_RECORD_CTRL
	// Position of PRO_CPU_PDEBUG_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE_Pos = 0x8
	// Bit mask of PRO_CPU_PDEBUG_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE_Msk = 0x100
	// Bit PRO_CPU_PDEBUG_ENABLE.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_PDEBUG_ENABLE = 0x100
	// Position of PRO_CPU_RECORD_DISABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE_Pos = 0x4
	// Bit mask of PRO_CPU_RECORD_DISABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE_Msk = 0x10
	// Bit PRO_CPU_RECORD_DISABLE.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_DISABLE = 0x10
	// Position of PRO_CPU_RECORD_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE_Pos = 0x0
	// Bit mask of PRO_CPU_RECORD_ENABLE field.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE_Msk = 0x1
	// Bit PRO_CPU_RECORD_ENABLE.
	DPORT_PRO_CPU_RECORD_CTRL_PRO_CPU_RECORD_ENABLE = 0x1

	// PRO_CPU_RECORD_STATUS: DPORT_PRO_CPU_RECORD_STATUS
	// Position of PRO_CPU_RECORDING field.
	DPORT_PRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING_Pos = 0x0
	// Bit mask of PRO_CPU_RECORDING field.
	DPORT_PRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING_Msk = 0x1
	// Bit PRO_CPU_RECORDING.
	DPORT_PRO_CPU_RECORD_STATUS_PRO_CPU_RECORDING = 0x1

	// PRO_CPU_RECORD_PID: DPORT_PRO_CPU_RECORD_PID
	// Position of RECORD_PRO_PID field.
	DPORT_PRO_CPU_RECORD_PID_RECORD_PRO_PID_Pos = 0x0
	// Bit mask of RECORD_PRO_PID field.
	DPORT_PRO_CPU_RECORD_PID_RECORD_PRO_PID_Msk = 0x7

	// PRO_CPU_RECORD_PDEBUGINST: DPORT_PRO_CPU_RECORD_PDEBUGINST
	// Position of RECORD_PRO_PDEBUGINST field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PRO_PDEBUGINST_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGINST field.
	DPORT_PRO_CPU_RECORD_PDEBUGINST_RECORD_PRO_PDEBUGINST_Msk = 0xffffffff

	// PRO_CPU_RECORD_PDEBUGSTATUS: DPORT_PRO_CPU_RECORD_PDEBUGSTATUS
	// Position of RECORD_PRO_PDEBUGSTATUS field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGSTATUS field.
	DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_RECORD_PRO_PDEBUGSTATUS_Msk = 0xff

	// PRO_CPU_RECORD_PDEBUGDATA: DPORT_PRO_CPU_RECORD_PDEBUGDATA
	// Position of RECORD_PRO_PDEBUGDATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PRO_PDEBUGDATA_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGDATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGDATA_RECORD_PRO_PDEBUGDATA_Msk = 0xffffffff

	// PRO_CPU_RECORD_PDEBUGPC: DPORT_PRO_CPU_RECORD_PDEBUGPC
	// Position of RECORD_PRO_PDEBUGPC field.
	DPORT_PRO_CPU_RECORD_PDEBUGPC_RECORD_PRO_PDEBUGPC_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGPC field.
	DPORT_PRO_CPU_RECORD_PDEBUGPC_RECORD_PRO_PDEBUGPC_Msk = 0xffffffff

	// PRO_CPU_RECORD_PDEBUGLS0STAT: DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT
	// Position of RECORD_PRO_PDEBUGLS0STAT field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PRO_PDEBUGLS0STAT_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGLS0STAT field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0STAT_RECORD_PRO_PDEBUGLS0STAT_Msk = 0xffffffff

	// PRO_CPU_RECORD_PDEBUGLS0ADDR: DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR
	// Position of RECORD_PRO_PDEBUGLS0ADDR field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR_RECORD_PRO_PDEBUGLS0ADDR_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGLS0ADDR field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR_RECORD_PRO_PDEBUGLS0ADDR_Msk = 0xffffffff

	// PRO_CPU_RECORD_PDEBUGLS0DATA: DPORT_PRO_CPU_RECORD_PDEBUGLS0DATA
	// Position of RECORD_PRO_PDEBUGLS0DATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0DATA_RECORD_PRO_PDEBUGLS0DATA_Pos = 0x0
	// Bit mask of RECORD_PRO_PDEBUGLS0DATA field.
	DPORT_PRO_CPU_RECORD_PDEBUGLS0DATA_RECORD_PRO_PDEBUGLS0DATA_Msk = 0xffffffff

	// APP_CPU_RECORD_CTRL: DPORT_APP_CPU_RECORD_CTRL
	// Position of APP_CPU_PDEBUG_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE_Pos = 0x8
	// Bit mask of APP_CPU_PDEBUG_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE_Msk = 0x100
	// Bit APP_CPU_PDEBUG_ENABLE.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_PDEBUG_ENABLE = 0x100
	// Position of APP_CPU_RECORD_DISABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE_Pos = 0x4
	// Bit mask of APP_CPU_RECORD_DISABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE_Msk = 0x10
	// Bit APP_CPU_RECORD_DISABLE.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_DISABLE = 0x10
	// Position of APP_CPU_RECORD_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE_Pos = 0x0
	// Bit mask of APP_CPU_RECORD_ENABLE field.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE_Msk = 0x1
	// Bit APP_CPU_RECORD_ENABLE.
	DPORT_APP_CPU_RECORD_CTRL_APP_CPU_RECORD_ENABLE = 0x1

	// APP_CPU_RECORD_STATUS: DPORT_APP_CPU_RECORD_STATUS
	// Position of APP_CPU_RECORDING field.
	DPORT_APP_CPU_RECORD_STATUS_APP_CPU_RECORDING_Pos = 0x0
	// Bit mask of APP_CPU_RECORDING field.
	DPORT_APP_CPU_RECORD_STATUS_APP_CPU_RECORDING_Msk = 0x1
	// Bit APP_CPU_RECORDING.
	DPORT_APP_CPU_RECORD_STATUS_APP_CPU_RECORDING = 0x1

	// APP_CPU_RECORD_PID: DPORT_APP_CPU_RECORD_PID
	// Position of RECORD_APP_PID field.
	DPORT_APP_CPU_RECORD_PID_RECORD_APP_PID_Pos = 0x0
	// Bit mask of RECORD_APP_PID field.
	DPORT_APP_CPU_RECORD_PID_RECORD_APP_PID_Msk = 0x7

	// APP_CPU_RECORD_PDEBUGINST: DPORT_APP_CPU_RECORD_PDEBUGINST
	// Position of RECORD_APP_PDEBUGINST field.
	DPORT_APP_CPU_RECORD_PDEBUGINST_RECORD_APP_PDEBUGINST_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGINST field.
	DPORT_APP_CPU_RECORD_PDEBUGINST_RECORD_APP_PDEBUGINST_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGSTATUS: DPORT_APP_CPU_RECORD_PDEBUGSTATUS
	// Position of RECORD_APP_PDEBUGSTATUS field.
	DPORT_APP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGSTATUS field.
	DPORT_APP_CPU_RECORD_PDEBUGSTATUS_RECORD_APP_PDEBUGSTATUS_Msk = 0xff

	// APP_CPU_RECORD_PDEBUGDATA: DPORT_APP_CPU_RECORD_PDEBUGDATA
	// Position of RECORD_APP_PDEBUGDATA field.
	DPORT_APP_CPU_RECORD_PDEBUGDATA_RECORD_APP_PDEBUGDATA_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGDATA field.
	DPORT_APP_CPU_RECORD_PDEBUGDATA_RECORD_APP_PDEBUGDATA_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGPC: DPORT_APP_CPU_RECORD_PDEBUGPC
	// Position of RECORD_APP_PDEBUGPC field.
	DPORT_APP_CPU_RECORD_PDEBUGPC_RECORD_APP_PDEBUGPC_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGPC field.
	DPORT_APP_CPU_RECORD_PDEBUGPC_RECORD_APP_PDEBUGPC_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGLS0STAT: DPORT_APP_CPU_RECORD_PDEBUGLS0STAT
	// Position of RECORD_APP_PDEBUGLS0STAT field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0STAT_RECORD_APP_PDEBUGLS0STAT_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGLS0STAT field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0STAT_RECORD_APP_PDEBUGLS0STAT_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGLS0ADDR: DPORT_APP_CPU_RECORD_PDEBUGLS0ADDR
	// Position of RECORD_APP_PDEBUGLS0ADDR field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0ADDR_RECORD_APP_PDEBUGLS0ADDR_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGLS0ADDR field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0ADDR_RECORD_APP_PDEBUGLS0ADDR_Msk = 0xffffffff

	// APP_CPU_RECORD_PDEBUGLS0DATA: DPORT_APP_CPU_RECORD_PDEBUGLS0DATA
	// Position of RECORD_APP_PDEBUGLS0DATA field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0DATA_RECORD_APP_PDEBUGLS0DATA_Pos = 0x0
	// Bit mask of RECORD_APP_PDEBUGLS0DATA field.
	DPORT_APP_CPU_RECORD_PDEBUGLS0DATA_RECORD_APP_PDEBUGLS0DATA_Msk = 0xffffffff

	// RSA_PD_CTRL: DPORT_RSA_PD_CTRL
	// Position of RSA_PD field.
	DPORT_RSA_PD_CTRL_RSA_PD_Pos = 0x0
	// Bit mask of RSA_PD field.
	DPORT_RSA_PD_CTRL_RSA_PD_Msk = 0x1
	// Bit RSA_PD.
	DPORT_RSA_PD_CTRL_RSA_PD = 0x1

	// ROM_MPU_TABLE0: DPORT_ROM_MPU_TABLE0
	// Position of ROM_MPU_TABLE0 field.
	DPORT_ROM_MPU_TABLE0_ROM_MPU_TABLE0_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE0 field.
	DPORT_ROM_MPU_TABLE0_ROM_MPU_TABLE0_Msk = 0x3

	// ROM_MPU_TABLE1: DPORT_ROM_MPU_TABLE1
	// Position of ROM_MPU_TABLE1 field.
	DPORT_ROM_MPU_TABLE1_ROM_MPU_TABLE1_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE1 field.
	DPORT_ROM_MPU_TABLE1_ROM_MPU_TABLE1_Msk = 0x3

	// ROM_MPU_TABLE2: DPORT_ROM_MPU_TABLE2
	// Position of ROM_MPU_TABLE2 field.
	DPORT_ROM_MPU_TABLE2_ROM_MPU_TABLE2_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE2 field.
	DPORT_ROM_MPU_TABLE2_ROM_MPU_TABLE2_Msk = 0x3

	// ROM_MPU_TABLE3: DPORT_ROM_MPU_TABLE3
	// Position of ROM_MPU_TABLE3 field.
	DPORT_ROM_MPU_TABLE3_ROM_MPU_TABLE3_Pos = 0x0
	// Bit mask of ROM_MPU_TABLE3 field.
	DPORT_ROM_MPU_TABLE3_ROM_MPU_TABLE3_Msk = 0x3

	// SHROM_MPU_TABLE0: DPORT_SHROM_MPU_TABLE0
	// Position of SHROM_MPU_TABLE0 field.
	DPORT_SHROM_MPU_TABLE0_SHROM_MPU_TABLE0_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE0 field.
	DPORT_SHROM_MPU_TABLE0_SHROM_MPU_TABLE0_Msk = 0x3

	// SHROM_MPU_TABLE1: DPORT_SHROM_MPU_TABLE1
	// Position of SHROM_MPU_TABLE1 field.
	DPORT_SHROM_MPU_TABLE1_SHROM_MPU_TABLE1_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE1 field.
	DPORT_SHROM_MPU_TABLE1_SHROM_MPU_TABLE1_Msk = 0x3

	// SHROM_MPU_TABLE2: DPORT_SHROM_MPU_TABLE2
	// Position of SHROM_MPU_TABLE2 field.
	DPORT_SHROM_MPU_TABLE2_SHROM_MPU_TABLE2_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE2 field.
	DPORT_SHROM_MPU_TABLE2_SHROM_MPU_TABLE2_Msk = 0x3

	// SHROM_MPU_TABLE3: DPORT_SHROM_MPU_TABLE3
	// Position of SHROM_MPU_TABLE3 field.
	DPORT_SHROM_MPU_TABLE3_SHROM_MPU_TABLE3_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE3 field.
	DPORT_SHROM_MPU_TABLE3_SHROM_MPU_TABLE3_Msk = 0x3

	// SHROM_MPU_TABLE4: DPORT_SHROM_MPU_TABLE4
	// Position of SHROM_MPU_TABLE4 field.
	DPORT_SHROM_MPU_TABLE4_SHROM_MPU_TABLE4_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE4 field.
	DPORT_SHROM_MPU_TABLE4_SHROM_MPU_TABLE4_Msk = 0x3

	// SHROM_MPU_TABLE5: DPORT_SHROM_MPU_TABLE5
	// Position of SHROM_MPU_TABLE5 field.
	DPORT_SHROM_MPU_TABLE5_SHROM_MPU_TABLE5_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE5 field.
	DPORT_SHROM_MPU_TABLE5_SHROM_MPU_TABLE5_Msk = 0x3

	// SHROM_MPU_TABLE6: DPORT_SHROM_MPU_TABLE6
	// Position of SHROM_MPU_TABLE6 field.
	DPORT_SHROM_MPU_TABLE6_SHROM_MPU_TABLE6_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE6 field.
	DPORT_SHROM_MPU_TABLE6_SHROM_MPU_TABLE6_Msk = 0x3

	// SHROM_MPU_TABLE7: DPORT_SHROM_MPU_TABLE7
	// Position of SHROM_MPU_TABLE7 field.
	DPORT_SHROM_MPU_TABLE7_SHROM_MPU_TABLE7_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE7 field.
	DPORT_SHROM_MPU_TABLE7_SHROM_MPU_TABLE7_Msk = 0x3

	// SHROM_MPU_TABLE8: DPORT_SHROM_MPU_TABLE8
	// Position of SHROM_MPU_TABLE8 field.
	DPORT_SHROM_MPU_TABLE8_SHROM_MPU_TABLE8_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE8 field.
	DPORT_SHROM_MPU_TABLE8_SHROM_MPU_TABLE8_Msk = 0x3

	// SHROM_MPU_TABLE9: DPORT_SHROM_MPU_TABLE9
	// Position of SHROM_MPU_TABLE9 field.
	DPORT_SHROM_MPU_TABLE9_SHROM_MPU_TABLE9_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE9 field.
	DPORT_SHROM_MPU_TABLE9_SHROM_MPU_TABLE9_Msk = 0x3

	// SHROM_MPU_TABLE10: DPORT_SHROM_MPU_TABLE10
	// Position of SHROM_MPU_TABLE10 field.
	DPORT_SHROM_MPU_TABLE10_SHROM_MPU_TABLE10_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE10 field.
	DPORT_SHROM_MPU_TABLE10_SHROM_MPU_TABLE10_Msk = 0x3

	// SHROM_MPU_TABLE11: DPORT_SHROM_MPU_TABLE11
	// Position of SHROM_MPU_TABLE11 field.
	DPORT_SHROM_MPU_TABLE11_SHROM_MPU_TABLE11_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE11 field.
	DPORT_SHROM_MPU_TABLE11_SHROM_MPU_TABLE11_Msk = 0x3

	// SHROM_MPU_TABLE12: DPORT_SHROM_MPU_TABLE12
	// Position of SHROM_MPU_TABLE12 field.
	DPORT_SHROM_MPU_TABLE12_SHROM_MPU_TABLE12_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE12 field.
	DPORT_SHROM_MPU_TABLE12_SHROM_MPU_TABLE12_Msk = 0x3

	// SHROM_MPU_TABLE13: DPORT_SHROM_MPU_TABLE13
	// Position of SHROM_MPU_TABLE13 field.
	DPORT_SHROM_MPU_TABLE13_SHROM_MPU_TABLE13_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE13 field.
	DPORT_SHROM_MPU_TABLE13_SHROM_MPU_TABLE13_Msk = 0x3

	// SHROM_MPU_TABLE14: DPORT_SHROM_MPU_TABLE14
	// Position of SHROM_MPU_TABLE14 field.
	DPORT_SHROM_MPU_TABLE14_SHROM_MPU_TABLE14_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE14 field.
	DPORT_SHROM_MPU_TABLE14_SHROM_MPU_TABLE14_Msk = 0x3

	// SHROM_MPU_TABLE15: DPORT_SHROM_MPU_TABLE15
	// Position of SHROM_MPU_TABLE15 field.
	DPORT_SHROM_MPU_TABLE15_SHROM_MPU_TABLE15_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE15 field.
	DPORT_SHROM_MPU_TABLE15_SHROM_MPU_TABLE15_Msk = 0x3

	// SHROM_MPU_TABLE16: DPORT_SHROM_MPU_TABLE16
	// Position of SHROM_MPU_TABLE16 field.
	DPORT_SHROM_MPU_TABLE16_SHROM_MPU_TABLE16_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE16 field.
	DPORT_SHROM_MPU_TABLE16_SHROM_MPU_TABLE16_Msk = 0x3

	// SHROM_MPU_TABLE17: DPORT_SHROM_MPU_TABLE17
	// Position of SHROM_MPU_TABLE17 field.
	DPORT_SHROM_MPU_TABLE17_SHROM_MPU_TABLE17_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE17 field.
	DPORT_SHROM_MPU_TABLE17_SHROM_MPU_TABLE17_Msk = 0x3

	// SHROM_MPU_TABLE18: DPORT_SHROM_MPU_TABLE18
	// Position of SHROM_MPU_TABLE18 field.
	DPORT_SHROM_MPU_TABLE18_SHROM_MPU_TABLE18_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE18 field.
	DPORT_SHROM_MPU_TABLE18_SHROM_MPU_TABLE18_Msk = 0x3

	// SHROM_MPU_TABLE19: DPORT_SHROM_MPU_TABLE19
	// Position of SHROM_MPU_TABLE19 field.
	DPORT_SHROM_MPU_TABLE19_SHROM_MPU_TABLE19_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE19 field.
	DPORT_SHROM_MPU_TABLE19_SHROM_MPU_TABLE19_Msk = 0x3

	// SHROM_MPU_TABLE20: DPORT_SHROM_MPU_TABLE20
	// Position of SHROM_MPU_TABLE20 field.
	DPORT_SHROM_MPU_TABLE20_SHROM_MPU_TABLE20_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE20 field.
	DPORT_SHROM_MPU_TABLE20_SHROM_MPU_TABLE20_Msk = 0x3

	// SHROM_MPU_TABLE21: DPORT_SHROM_MPU_TABLE21
	// Position of SHROM_MPU_TABLE21 field.
	DPORT_SHROM_MPU_TABLE21_SHROM_MPU_TABLE21_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE21 field.
	DPORT_SHROM_MPU_TABLE21_SHROM_MPU_TABLE21_Msk = 0x3

	// SHROM_MPU_TABLE22: DPORT_SHROM_MPU_TABLE22
	// Position of SHROM_MPU_TABLE22 field.
	DPORT_SHROM_MPU_TABLE22_SHROM_MPU_TABLE22_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE22 field.
	DPORT_SHROM_MPU_TABLE22_SHROM_MPU_TABLE22_Msk = 0x3

	// SHROM_MPU_TABLE23: DPORT_SHROM_MPU_TABLE23
	// Position of SHROM_MPU_TABLE23 field.
	DPORT_SHROM_MPU_TABLE23_SHROM_MPU_TABLE23_Pos = 0x0
	// Bit mask of SHROM_MPU_TABLE23 field.
	DPORT_SHROM_MPU_TABLE23_SHROM_MPU_TABLE23_Msk = 0x3

	// IMMU_TABLE0: DPORT_IMMU_TABLE0
	// Position of IMMU_TABLE0 field.
	DPORT_IMMU_TABLE0_IMMU_TABLE0_Pos = 0x0
	// Bit mask of IMMU_TABLE0 field.
	DPORT_IMMU_TABLE0_IMMU_TABLE0_Msk = 0x7f

	// IMMU_TABLE1: DPORT_IMMU_TABLE1
	// Position of IMMU_TABLE1 field.
	DPORT_IMMU_TABLE1_IMMU_TABLE1_Pos = 0x0
	// Bit mask of IMMU_TABLE1 field.
	DPORT_IMMU_TABLE1_IMMU_TABLE1_Msk = 0x7f

	// IMMU_TABLE2: DPORT_IMMU_TABLE2
	// Position of IMMU_TABLE2 field.
	DPORT_IMMU_TABLE2_IMMU_TABLE2_Pos = 0x0
	// Bit mask of IMMU_TABLE2 field.
	DPORT_IMMU_TABLE2_IMMU_TABLE2_Msk = 0x7f

	// IMMU_TABLE3: DPORT_IMMU_TABLE3
	// Position of IMMU_TABLE3 field.
	DPORT_IMMU_TABLE3_IMMU_TABLE3_Pos = 0x0
	// Bit mask of IMMU_TABLE3 field.
	DPORT_IMMU_TABLE3_IMMU_TABLE3_Msk = 0x7f

	// IMMU_TABLE4: DPORT_IMMU_TABLE4
	// Position of IMMU_TABLE4 field.
	DPORT_IMMU_TABLE4_IMMU_TABLE4_Pos = 0x0
	// Bit mask of IMMU_TABLE4 field.
	DPORT_IMMU_TABLE4_IMMU_TABLE4_Msk = 0x7f

	// IMMU_TABLE5: DPORT_IMMU_TABLE5
	// Position of IMMU_TABLE5 field.
	DPORT_IMMU_TABLE5_IMMU_TABLE5_Pos = 0x0
	// Bit mask of IMMU_TABLE5 field.
	DPORT_IMMU_TABLE5_IMMU_TABLE5_Msk = 0x7f

	// IMMU_TABLE6: DPORT_IMMU_TABLE6
	// Position of IMMU_TABLE6 field.
	DPORT_IMMU_TABLE6_IMMU_TABLE6_Pos = 0x0
	// Bit mask of IMMU_TABLE6 field.
	DPORT_IMMU_TABLE6_IMMU_TABLE6_Msk = 0x7f

	// IMMU_TABLE7: DPORT_IMMU_TABLE7
	// Position of IMMU_TABLE7 field.
	DPORT_IMMU_TABLE7_IMMU_TABLE7_Pos = 0x0
	// Bit mask of IMMU_TABLE7 field.
	DPORT_IMMU_TABLE7_IMMU_TABLE7_Msk = 0x7f

	// IMMU_TABLE8: DPORT_IMMU_TABLE8
	// Position of IMMU_TABLE8 field.
	DPORT_IMMU_TABLE8_IMMU_TABLE8_Pos = 0x0
	// Bit mask of IMMU_TABLE8 field.
	DPORT_IMMU_TABLE8_IMMU_TABLE8_Msk = 0x7f

	// IMMU_TABLE9: DPORT_IMMU_TABLE9
	// Position of IMMU_TABLE9 field.
	DPORT_IMMU_TABLE9_IMMU_TABLE9_Pos = 0x0
	// Bit mask of IMMU_TABLE9 field.
	DPORT_IMMU_TABLE9_IMMU_TABLE9_Msk = 0x7f

	// IMMU_TABLE10: DPORT_IMMU_TABLE10
	// Position of IMMU_TABLE10 field.
	DPORT_IMMU_TABLE10_IMMU_TABLE10_Pos = 0x0
	// Bit mask of IMMU_TABLE10 field.
	DPORT_IMMU_TABLE10_IMMU_TABLE10_Msk = 0x7f

	// IMMU_TABLE11: DPORT_IMMU_TABLE11
	// Position of IMMU_TABLE11 field.
	DPORT_IMMU_TABLE11_IMMU_TABLE11_Pos = 0x0
	// Bit mask of IMMU_TABLE11 field.
	DPORT_IMMU_TABLE11_IMMU_TABLE11_Msk = 0x7f

	// IMMU_TABLE12: DPORT_IMMU_TABLE12
	// Position of IMMU_TABLE12 field.
	DPORT_IMMU_TABLE12_IMMU_TABLE12_Pos = 0x0
	// Bit mask of IMMU_TABLE12 field.
	DPORT_IMMU_TABLE12_IMMU_TABLE12_Msk = 0x7f

	// IMMU_TABLE13: DPORT_IMMU_TABLE13
	// Position of IMMU_TABLE13 field.
	DPORT_IMMU_TABLE13_IMMU_TABLE13_Pos = 0x0
	// Bit mask of IMMU_TABLE13 field.
	DPORT_IMMU_TABLE13_IMMU_TABLE13_Msk = 0x7f

	// IMMU_TABLE14: DPORT_IMMU_TABLE14
	// Position of IMMU_TABLE14 field.
	DPORT_IMMU_TABLE14_IMMU_TABLE14_Pos = 0x0
	// Bit mask of IMMU_TABLE14 field.
	DPORT_IMMU_TABLE14_IMMU_TABLE14_Msk = 0x7f

	// IMMU_TABLE15: DPORT_IMMU_TABLE15
	// Position of IMMU_TABLE15 field.
	DPORT_IMMU_TABLE15_IMMU_TABLE15_Pos = 0x0
	// Bit mask of IMMU_TABLE15 field.
	DPORT_IMMU_TABLE15_IMMU_TABLE15_Msk = 0x7f

	// DMMU_TABLE0: DPORT_DMMU_TABLE0
	// Position of DMMU_TABLE0 field.
	DPORT_DMMU_TABLE0_DMMU_TABLE0_Pos = 0x0
	// Bit mask of DMMU_TABLE0 field.
	DPORT_DMMU_TABLE0_DMMU_TABLE0_Msk = 0x7f

	// DMMU_TABLE1: DPORT_DMMU_TABLE1
	// Position of DMMU_TABLE1 field.
	DPORT_DMMU_TABLE1_DMMU_TABLE1_Pos = 0x0
	// Bit mask of DMMU_TABLE1 field.
	DPORT_DMMU_TABLE1_DMMU_TABLE1_Msk = 0x7f

	// DMMU_TABLE2: DPORT_DMMU_TABLE2
	// Position of DMMU_TABLE2 field.
	DPORT_DMMU_TABLE2_DMMU_TABLE2_Pos = 0x0
	// Bit mask of DMMU_TABLE2 field.
	DPORT_DMMU_TABLE2_DMMU_TABLE2_Msk = 0x7f

	// DMMU_TABLE3: DPORT_DMMU_TABLE3
	// Position of DMMU_TABLE3 field.
	DPORT_DMMU_TABLE3_DMMU_TABLE3_Pos = 0x0
	// Bit mask of DMMU_TABLE3 field.
	DPORT_DMMU_TABLE3_DMMU_TABLE3_Msk = 0x7f

	// DMMU_TABLE4: DPORT_DMMU_TABLE4
	// Position of DMMU_TABLE4 field.
	DPORT_DMMU_TABLE4_DMMU_TABLE4_Pos = 0x0
	// Bit mask of DMMU_TABLE4 field.
	DPORT_DMMU_TABLE4_DMMU_TABLE4_Msk = 0x7f

	// DMMU_TABLE5: DPORT_DMMU_TABLE5
	// Position of DMMU_TABLE5 field.
	DPORT_DMMU_TABLE5_DMMU_TABLE5_Pos = 0x0
	// Bit mask of DMMU_TABLE5 field.
	DPORT_DMMU_TABLE5_DMMU_TABLE5_Msk = 0x7f

	// DMMU_TABLE6: DPORT_DMMU_TABLE6
	// Position of DMMU_TABLE6 field.
	DPORT_DMMU_TABLE6_DMMU_TABLE6_Pos = 0x0
	// Bit mask of DMMU_TABLE6 field.
	DPORT_DMMU_TABLE6_DMMU_TABLE6_Msk = 0x7f

	// DMMU_TABLE7: DPORT_DMMU_TABLE7
	// Position of DMMU_TABLE7 field.
	DPORT_DMMU_TABLE7_DMMU_TABLE7_Pos = 0x0
	// Bit mask of DMMU_TABLE7 field.
	DPORT_DMMU_TABLE7_DMMU_TABLE7_Msk = 0x7f

	// DMMU_TABLE8: DPORT_DMMU_TABLE8
	// Position of DMMU_TABLE8 field.
	DPORT_DMMU_TABLE8_DMMU_TABLE8_Pos = 0x0
	// Bit mask of DMMU_TABLE8 field.
	DPORT_DMMU_TABLE8_DMMU_TABLE8_Msk = 0x7f

	// DMMU_TABLE9: DPORT_DMMU_TABLE9
	// Position of DMMU_TABLE9 field.
	DPORT_DMMU_TABLE9_DMMU_TABLE9_Pos = 0x0
	// Bit mask of DMMU_TABLE9 field.
	DPORT_DMMU_TABLE9_DMMU_TABLE9_Msk = 0x7f

	// DMMU_TABLE10: DPORT_DMMU_TABLE10
	// Position of DMMU_TABLE10 field.
	DPORT_DMMU_TABLE10_DMMU_TABLE10_Pos = 0x0
	// Bit mask of DMMU_TABLE10 field.
	DPORT_DMMU_TABLE10_DMMU_TABLE10_Msk = 0x7f

	// DMMU_TABLE11: DPORT_DMMU_TABLE11
	// Position of DMMU_TABLE11 field.
	DPORT_DMMU_TABLE11_DMMU_TABLE11_Pos = 0x0
	// Bit mask of DMMU_TABLE11 field.
	DPORT_DMMU_TABLE11_DMMU_TABLE11_Msk = 0x7f

	// DMMU_TABLE12: DPORT_DMMU_TABLE12
	// Position of DMMU_TABLE12 field.
	DPORT_DMMU_TABLE12_DMMU_TABLE12_Pos = 0x0
	// Bit mask of DMMU_TABLE12 field.
	DPORT_DMMU_TABLE12_DMMU_TABLE12_Msk = 0x7f

	// DMMU_TABLE13: DPORT_DMMU_TABLE13
	// Position of DMMU_TABLE13 field.
	DPORT_DMMU_TABLE13_DMMU_TABLE13_Pos = 0x0
	// Bit mask of DMMU_TABLE13 field.
	DPORT_DMMU_TABLE13_DMMU_TABLE13_Msk = 0x7f

	// DMMU_TABLE14: DPORT_DMMU_TABLE14
	// Position of DMMU_TABLE14 field.
	DPORT_DMMU_TABLE14_DMMU_TABLE14_Pos = 0x0
	// Bit mask of DMMU_TABLE14 field.
	DPORT_DMMU_TABLE14_DMMU_TABLE14_Msk = 0x7f

	// DMMU_TABLE15: DPORT_DMMU_TABLE15
	// Position of DMMU_TABLE15 field.
	DPORT_DMMU_TABLE15_DMMU_TABLE15_Pos = 0x0
	// Bit mask of DMMU_TABLE15 field.
	DPORT_DMMU_TABLE15_DMMU_TABLE15_Msk = 0x7f

	// PRO_INTRUSION_CTRL: DPORT_PRO_INTRUSION_CTRL
	// Position of PRO_INTRUSION_RECORD_RESET_N field.
	DPORT_PRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N_Pos = 0x0
	// Bit mask of PRO_INTRUSION_RECORD_RESET_N field.
	DPORT_PRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N_Msk = 0x1
	// Bit PRO_INTRUSION_RECORD_RESET_N.
	DPORT_PRO_INTRUSION_CTRL_PRO_INTRUSION_RECORD_RESET_N = 0x1

	// PRO_INTRUSION_STATUS: DPORT_PRO_INTRUSION_STATUS
	// Position of PRO_INTRUSION_RECORD field.
	DPORT_PRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD_Pos = 0x0
	// Bit mask of PRO_INTRUSION_RECORD field.
	DPORT_PRO_INTRUSION_STATUS_PRO_INTRUSION_RECORD_Msk = 0xf

	// APP_INTRUSION_CTRL: DPORT_APP_INTRUSION_CTRL
	// Position of APP_INTRUSION_RECORD_RESET_N field.
	DPORT_APP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N_Pos = 0x0
	// Bit mask of APP_INTRUSION_RECORD_RESET_N field.
	DPORT_APP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N_Msk = 0x1
	// Bit APP_INTRUSION_RECORD_RESET_N.
	DPORT_APP_INTRUSION_CTRL_APP_INTRUSION_RECORD_RESET_N = 0x1

	// APP_INTRUSION_STATUS: DPORT_APP_INTRUSION_STATUS
	// Position of APP_INTRUSION_RECORD field.
	DPORT_APP_INTRUSION_STATUS_APP_INTRUSION_RECORD_Pos = 0x0
	// Bit mask of APP_INTRUSION_RECORD field.
	DPORT_APP_INTRUSION_STATUS_APP_INTRUSION_RECORD_Msk = 0xf

	// FRONT_END_MEM_PD: DPORT_FRONT_END_MEM_PD
	// Position of PBUS_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PD_Pos = 0x3
	// Bit mask of PBUS_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PD_Msk = 0x8
	// Bit PBUS_MEM_FORCE_PD.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PD = 0x8
	// Position of PBUS_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PU_Pos = 0x2
	// Bit mask of PBUS_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PU_Msk = 0x4
	// Bit PBUS_MEM_FORCE_PU.
	DPORT_FRONT_END_MEM_PD_PBUS_MEM_FORCE_PU = 0x4
	// Position of AGC_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PD_Pos = 0x1
	// Bit mask of AGC_MEM_FORCE_PD field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PD_Msk = 0x2
	// Bit AGC_MEM_FORCE_PD.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PD = 0x2
	// Position of AGC_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PU_Pos = 0x0
	// Bit mask of AGC_MEM_FORCE_PU field.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PU_Msk = 0x1
	// Bit AGC_MEM_FORCE_PU.
	DPORT_FRONT_END_MEM_PD_AGC_MEM_FORCE_PU = 0x1

	// MMU_IA_INT_EN: DPORT_MMU_IA_INT_EN
	// Position of MMU_IA_INT_EN field.
	DPORT_MMU_IA_INT_EN_MMU_IA_INT_EN_Pos = 0x0
	// Bit mask of MMU_IA_INT_EN field.
	DPORT_MMU_IA_INT_EN_MMU_IA_INT_EN_Msk = 0xffffff

	// MPU_IA_INT_EN: DPORT_MPU_IA_INT_EN
	// Position of MPU_IA_INT_EN field.
	DPORT_MPU_IA_INT_EN_MPU_IA_INT_EN_Pos = 0x0
	// Bit mask of MPU_IA_INT_EN field.
	DPORT_MPU_IA_INT_EN_MPU_IA_INT_EN_Msk = 0x1ffff

	// CACHE_IA_INT_EN: DPORT_CACHE_IA_INT_EN
	// Position of CACHE_IA_INT_EN field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_EN_Pos = 0x0
	// Bit mask of CACHE_IA_INT_EN field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_EN_Msk = 0xfffffff
	// Position of CACHE_IA_INT_PRO_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE_Pos = 0x13
	// Bit mask of CACHE_IA_INT_PRO_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE_Msk = 0x80000
	// Bit CACHE_IA_INT_PRO_OPPOSITE.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_OPPOSITE = 0x80000
	// Position of CACHE_IA_INT_PRO_DRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1_Pos = 0x12
	// Bit mask of CACHE_IA_INT_PRO_DRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1_Msk = 0x40000
	// Bit CACHE_IA_INT_PRO_DRAM1.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DRAM1 = 0x40000
	// Position of CACHE_IA_INT_PRO_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0_Pos = 0x11
	// Bit mask of CACHE_IA_INT_PRO_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0_Msk = 0x20000
	// Bit CACHE_IA_INT_PRO_IROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IROM0 = 0x20000
	// Position of CACHE_IA_INT_PRO_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1_Pos = 0x10
	// Bit mask of CACHE_IA_INT_PRO_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1_Msk = 0x10000
	// Bit CACHE_IA_INT_PRO_IRAM1.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM1 = 0x10000
	// Position of CACHE_IA_INT_PRO_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0_Pos = 0xf
	// Bit mask of CACHE_IA_INT_PRO_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0_Msk = 0x8000
	// Bit CACHE_IA_INT_PRO_IRAM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_IRAM0 = 0x8000
	// Position of CACHE_IA_INT_PRO_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0_Pos = 0xe
	// Bit mask of CACHE_IA_INT_PRO_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0_Msk = 0x4000
	// Bit CACHE_IA_INT_PRO_DROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_PRO_DROM0 = 0x4000
	// Position of CACHE_IA_INT_APP_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE_Pos = 0x5
	// Bit mask of CACHE_IA_INT_APP_OPPOSITE field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE_Msk = 0x20
	// Bit CACHE_IA_INT_APP_OPPOSITE.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_OPPOSITE = 0x20
	// Position of CACHE_IA_INT_APP_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0_Pos = 0x3
	// Bit mask of CACHE_IA_INT_APP_IROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0_Msk = 0x8
	// Bit CACHE_IA_INT_APP_IROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IROM0 = 0x8
	// Position of CACHE_IA_INT_APP_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1_Pos = 0x2
	// Bit mask of CACHE_IA_INT_APP_IRAM1 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1_Msk = 0x4
	// Bit CACHE_IA_INT_APP_IRAM1.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM1 = 0x4
	// Position of CACHE_IA_INT_APP_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0_Pos = 0x1
	// Bit mask of CACHE_IA_INT_APP_IRAM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0_Msk = 0x2
	// Bit CACHE_IA_INT_APP_IRAM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_IRAM0 = 0x2
	// Position of CACHE_IA_INT_APP_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0_Pos = 0x0
	// Bit mask of CACHE_IA_INT_APP_DROM0 field.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0_Msk = 0x1
	// Bit CACHE_IA_INT_APP_DROM0.
	DPORT_CACHE_IA_INT_EN_CACHE_IA_INT_APP_DROM0 = 0x1

	// SECURE_BOOT_CTRL: DPORT_SECURE_BOOT_CTRL
	// Position of SW_BOOTLOADER_SEL field.
	DPORT_SECURE_BOOT_CTRL_SW_BOOTLOADER_SEL_Pos = 0x0
	// Bit mask of SW_BOOTLOADER_SEL field.
	DPORT_SECURE_BOOT_CTRL_SW_BOOTLOADER_SEL_Msk = 0x1
	// Bit SW_BOOTLOADER_SEL.
	DPORT_SECURE_BOOT_CTRL_SW_BOOTLOADER_SEL = 0x1

	// SPI_DMA_CHAN_SEL: DPORT_SPI_DMA_CHAN_SEL
	// Position of SPI3_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL_Pos = 0x4
	// Bit mask of SPI3_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI3_DMA_CHAN_SEL_Msk = 0x30
	// Position of SPI2_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL_Pos = 0x2
	// Bit mask of SPI2_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI2_DMA_CHAN_SEL_Msk = 0xc
	// Position of SPI1_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL_Pos = 0x0
	// Bit mask of SPI1_DMA_CHAN_SEL field.
	DPORT_SPI_DMA_CHAN_SEL_SPI1_DMA_CHAN_SEL_Msk = 0x3

	// PRO_VECBASE_CTRL: DPORT_PRO_VECBASE_CTRL
	// Position of PRO_OUT_VECBASE_SEL field.
	DPORT_PRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL_Pos = 0x0
	// Bit mask of PRO_OUT_VECBASE_SEL field.
	DPORT_PRO_VECBASE_CTRL_PRO_OUT_VECBASE_SEL_Msk = 0x3

	// PRO_VECBASE_SET: DPORT_PRO_VECBASE_SET
	// Position of PRO_OUT_VECBASE_REG field.
	DPORT_PRO_VECBASE_SET_PRO_OUT_VECBASE_REG_Pos = 0x0
	// Bit mask of PRO_OUT_VECBASE_REG field.
	DPORT_PRO_VECBASE_SET_PRO_OUT_VECBASE_REG_Msk = 0x3fffff

	// APP_VECBASE_CTRL: DPORT_APP_VECBASE_CTRL
	// Position of APP_OUT_VECBASE_SEL field.
	DPORT_APP_VECBASE_CTRL_APP_OUT_VECBASE_SEL_Pos = 0x0
	// Bit mask of APP_OUT_VECBASE_SEL field.
	DPORT_APP_VECBASE_CTRL_APP_OUT_VECBASE_SEL_Msk = 0x3

	// APP_VECBASE_SET: DPORT_APP_VECBASE_SET
	// Position of APP_OUT_VECBASE_REG field.
	DPORT_APP_VECBASE_SET_APP_OUT_VECBASE_REG_Pos = 0x0
	// Bit mask of APP_OUT_VECBASE_REG field.
	DPORT_APP_VECBASE_SET_APP_OUT_VECBASE_REG_Msk = 0x3fffff

	// DATE: DPORT_DATE
	// Position of DATE field.
	DPORT_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	DPORT_DATE_DATE_Msk = 0xfffffff
)

// Constants for TIMG
const (
	// T0CONFIG: TIMG_T0CONFIG
	// Position of T0_EN field.
	TIMG_T0CONFIG_T0_EN_Pos = 0x1f
	// Bit mask of T0_EN field.
	TIMG_T0CONFIG_T0_EN_Msk = 0x80000000
	// Bit T0_EN.
	TIMG_T0CONFIG_T0_EN = 0x80000000
	// Position of T0_INCREASE field.
	TIMG_T0CONFIG_T0_INCREASE_Pos = 0x1e
	// Bit mask of T0_INCREASE field.
	TIMG_T0CONFIG_T0_INCREASE_Msk = 0x40000000
	// Bit T0_INCREASE.
	TIMG_T0CONFIG_T0_INCREASE = 0x40000000
	// Position of T0_AUTORELOAD field.
	TIMG_T0CONFIG_T0_AUTORELOAD_Pos = 0x1d
	// Bit mask of T0_AUTORELOAD field.
	TIMG_T0CONFIG_T0_AUTORELOAD_Msk = 0x20000000
	// Bit T0_AUTORELOAD.
	TIMG_T0CONFIG_T0_AUTORELOAD = 0x20000000
	// Position of T0_DIVIDER field.
	TIMG_T0CONFIG_T0_DIVIDER_Pos = 0xd
	// Bit mask of T0_DIVIDER field.
	TIMG_T0CONFIG_T0_DIVIDER_Msk = 0x1fffe000
	// Position of T0_EDGE_INT_EN field.
	TIMG_T0CONFIG_T0_EDGE_INT_EN_Pos = 0xc
	// Bit mask of T0_EDGE_INT_EN field.
	TIMG_T0CONFIG_T0_EDGE_INT_EN_Msk = 0x1000
	// Bit T0_EDGE_INT_EN.
	TIMG_T0CONFIG_T0_EDGE_INT_EN = 0x1000
	// Position of T0_LEVEL_INT_EN field.
	TIMG_T0CONFIG_T0_LEVEL_INT_EN_Pos = 0xb
	// Bit mask of T0_LEVEL_INT_EN field.
	TIMG_T0CONFIG_T0_LEVEL_INT_EN_Msk = 0x800
	// Bit T0_LEVEL_INT_EN.
	TIMG_T0CONFIG_T0_LEVEL_INT_EN = 0x800
	// Position of T0_ALARM_EN field.
	TIMG_T0CONFIG_T0_ALARM_EN_Pos = 0xa
	// Bit mask of T0_ALARM_EN field.
	TIMG_T0CONFIG_T0_ALARM_EN_Msk = 0x400
	// Bit T0_ALARM_EN.
	TIMG_T0CONFIG_T0_ALARM_EN = 0x400

	// T0LO: TIMG_T0LO
	// Position of T0_LO field.
	TIMG_T0LO_T0_LO_Pos = 0x0
	// Bit mask of T0_LO field.
	TIMG_T0LO_T0_LO_Msk = 0xffffffff

	// T0HI: TIMG_T0HI
	// Position of T0_HI field.
	TIMG_T0HI_T0_HI_Pos = 0x0
	// Bit mask of T0_HI field.
	TIMG_T0HI_T0_HI_Msk = 0xffffffff

	// T0UPDATE: TIMG_T0UPDATE
	// Position of T0_UPDATE field.
	TIMG_T0UPDATE_T0_UPDATE_Pos = 0x0
	// Bit mask of T0_UPDATE field.
	TIMG_T0UPDATE_T0_UPDATE_Msk = 0xffffffff

	// T0ALARMLO: TIMG_T0ALARMLO
	// Position of T0_ALARM_LO field.
	TIMG_T0ALARMLO_T0_ALARM_LO_Pos = 0x0
	// Bit mask of T0_ALARM_LO field.
	TIMG_T0ALARMLO_T0_ALARM_LO_Msk = 0xffffffff

	// T0ALARMHI: TIMG_T0ALARMHI
	// Position of T0_ALARM_HI field.
	TIMG_T0ALARMHI_T0_ALARM_HI_Pos = 0x0
	// Bit mask of T0_ALARM_HI field.
	TIMG_T0ALARMHI_T0_ALARM_HI_Msk = 0xffffffff

	// T0LOADLO: TIMG_T0LOADLO
	// Position of T0_LOAD_LO field.
	TIMG_T0LOADLO_T0_LOAD_LO_Pos = 0x0
	// Bit mask of T0_LOAD_LO field.
	TIMG_T0LOADLO_T0_LOAD_LO_Msk = 0xffffffff

	// T0LOADHI: TIMG_T0LOADHI
	// Position of T0_LOAD_HI field.
	TIMG_T0LOADHI_T0_LOAD_HI_Pos = 0x0
	// Bit mask of T0_LOAD_HI field.
	TIMG_T0LOADHI_T0_LOAD_HI_Msk = 0xffffffff

	// T0LOAD: TIMG_T0LOAD
	// Position of T0_LOAD field.
	TIMG_T0LOAD_T0_LOAD_Pos = 0x0
	// Bit mask of T0_LOAD field.
	TIMG_T0LOAD_T0_LOAD_Msk = 0xffffffff

	// T1CONFIG: TIMG_T1CONFIG
	// Position of T1_EN field.
	TIMG_T1CONFIG_T1_EN_Pos = 0x1f
	// Bit mask of T1_EN field.
	TIMG_T1CONFIG_T1_EN_Msk = 0x80000000
	// Bit T1_EN.
	TIMG_T1CONFIG_T1_EN = 0x80000000
	// Position of T1_INCREASE field.
	TIMG_T1CONFIG_T1_INCREASE_Pos = 0x1e
	// Bit mask of T1_INCREASE field.
	TIMG_T1CONFIG_T1_INCREASE_Msk = 0x40000000
	// Bit T1_INCREASE.
	TIMG_T1CONFIG_T1_INCREASE = 0x40000000
	// Position of T1_AUTORELOAD field.
	TIMG_T1CONFIG_T1_AUTORELOAD_Pos = 0x1d
	// Bit mask of T1_AUTORELOAD field.
	TIMG_T1CONFIG_T1_AUTORELOAD_Msk = 0x20000000
	// Bit T1_AUTORELOAD.
	TIMG_T1CONFIG_T1_AUTORELOAD = 0x20000000
	// Position of T1_DIVIDER field.
	TIMG_T1CONFIG_T1_DIVIDER_Pos = 0xd
	// Bit mask of T1_DIVIDER field.
	TIMG_T1CONFIG_T1_DIVIDER_Msk = 0x1fffe000
	// Position of T1_EDGE_INT_EN field.
	TIMG_T1CONFIG_T1_EDGE_INT_EN_Pos = 0xc
	// Bit mask of T1_EDGE_INT_EN field.
	TIMG_T1CONFIG_T1_EDGE_INT_EN_Msk = 0x1000
	// Bit T1_EDGE_INT_EN.
	TIMG_T1CONFIG_T1_EDGE_INT_EN = 0x1000
	// Position of T1_LEVEL_INT_EN field.
	TIMG_T1CONFIG_T1_LEVEL_INT_EN_Pos = 0xb
	// Bit mask of T1_LEVEL_INT_EN field.
	TIMG_T1CONFIG_T1_LEVEL_INT_EN_Msk = 0x800
	// Bit T1_LEVEL_INT_EN.
	TIMG_T1CONFIG_T1_LEVEL_INT_EN = 0x800
	// Position of T1_ALARM_EN field.
	TIMG_T1CONFIG_T1_ALARM_EN_Pos = 0xa
	// Bit mask of T1_ALARM_EN field.
	TIMG_T1CONFIG_T1_ALARM_EN_Msk = 0x400
	// Bit T1_ALARM_EN.
	TIMG_T1CONFIG_T1_ALARM_EN = 0x400

	// T1LO: TIMG_T1LO
	// Position of T1_LO field.
	TIMG_T1LO_T1_LO_Pos = 0x0
	// Bit mask of T1_LO field.
	TIMG_T1LO_T1_LO_Msk = 0xffffffff

	// T1HI: TIMG_T1HI
	// Position of T1_HI field.
	TIMG_T1HI_T1_HI_Pos = 0x0
	// Bit mask of T1_HI field.
	TIMG_T1HI_T1_HI_Msk = 0xffffffff

	// T1UPDATE: TIMG_T1UPDATE
	// Position of T1_UPDATE field.
	TIMG_T1UPDATE_T1_UPDATE_Pos = 0x0
	// Bit mask of T1_UPDATE field.
	TIMG_T1UPDATE_T1_UPDATE_Msk = 0xffffffff

	// T1ALARMLO: TIMG_T1ALARMLO
	// Position of T1_ALARM_LO field.
	TIMG_T1ALARMLO_T1_ALARM_LO_Pos = 0x0
	// Bit mask of T1_ALARM_LO field.
	TIMG_T1ALARMLO_T1_ALARM_LO_Msk = 0xffffffff

	// T1ALARMHI: TIMG_T1ALARMHI
	// Position of T1_ALARM_HI field.
	TIMG_T1ALARMHI_T1_ALARM_HI_Pos = 0x0
	// Bit mask of T1_ALARM_HI field.
	TIMG_T1ALARMHI_T1_ALARM_HI_Msk = 0xffffffff

	// T1LOADLO: TIMG_T1LOADLO
	// Position of T1_LOAD_LO field.
	TIMG_T1LOADLO_T1_LOAD_LO_Pos = 0x0
	// Bit mask of T1_LOAD_LO field.
	TIMG_T1LOADLO_T1_LOAD_LO_Msk = 0xffffffff

	// T1LOADHI: TIMG_T1LOADHI
	// Position of T1_LOAD_HI field.
	TIMG_T1LOADHI_T1_LOAD_HI_Pos = 0x0
	// Bit mask of T1_LOAD_HI field.
	TIMG_T1LOADHI_T1_LOAD_HI_Msk = 0xffffffff

	// T1LOAD: TIMG_T1LOAD
	// Position of T1_LOAD field.
	TIMG_T1LOAD_T1_LOAD_Pos = 0x0
	// Bit mask of T1_LOAD field.
	TIMG_T1LOAD_T1_LOAD_Msk = 0xffffffff

	// WDTCONFIG0: TIMG_WDTCONFIG0
	// Position of WDT_EN field.
	TIMG_WDTCONFIG0_WDT_EN_Pos = 0x1f
	// Bit mask of WDT_EN field.
	TIMG_WDTCONFIG0_WDT_EN_Msk = 0x80000000
	// Bit WDT_EN.
	TIMG_WDTCONFIG0_WDT_EN = 0x80000000
	// Position of WDT_STG0 field.
	TIMG_WDTCONFIG0_WDT_STG0_Pos = 0x1d
	// Bit mask of WDT_STG0 field.
	TIMG_WDTCONFIG0_WDT_STG0_Msk = 0x60000000
	// Disabled
	TIMG_WDTCONFIG0_WDT_STG0_Disable = 0x0
	// Trigger an interrupt
	TIMG_WDTCONFIG0_WDT_STG0_Interrupt = 0x1
	// Reset CPU core
	TIMG_WDTCONFIG0_WDT_STG0_ResetCPU = 0x2
	// Reset System
	TIMG_WDTCONFIG0_WDT_STG0_ResetSystem = 0x3
	// Position of WDT_STG1 field.
	TIMG_WDTCONFIG0_WDT_STG1_Pos = 0x1b
	// Bit mask of WDT_STG1 field.
	TIMG_WDTCONFIG0_WDT_STG1_Msk = 0x18000000
	// Disabled
	TIMG_WDTCONFIG0_WDT_STG1_Disable = 0x0
	// Trigger an interrupt
	TIMG_WDTCONFIG0_WDT_STG1_Interrupt = 0x1
	// Reset CPU core
	TIMG_WDTCONFIG0_WDT_STG1_ResetCPU = 0x2
	// Reset System
	TIMG_WDTCONFIG0_WDT_STG1_ResetSystem = 0x3
	// Position of WDT_STG2 field.
	TIMG_WDTCONFIG0_WDT_STG2_Pos = 0x19
	// Bit mask of WDT_STG2 field.
	TIMG_WDTCONFIG0_WDT_STG2_Msk = 0x6000000
	// Disabled
	TIMG_WDTCONFIG0_WDT_STG2_Disable = 0x0
	// Trigger an interrupt
	TIMG_WDTCONFIG0_WDT_STG2_Interrupt = 0x1
	// Reset CPU core
	TIMG_WDTCONFIG0_WDT_STG2_ResetCPU = 0x2
	// Reset System
	TIMG_WDTCONFIG0_WDT_STG2_ResetSystem = 0x3
	// Position of WDT_STG3 field.
	TIMG_WDTCONFIG0_WDT_STG3_Pos = 0x17
	// Bit mask of WDT_STG3 field.
	TIMG_WDTCONFIG0_WDT_STG3_Msk = 0x1800000
	// Disabled
	TIMG_WDTCONFIG0_WDT_STG3_Disable = 0x0
	// Trigger an interrupt
	TIMG_WDTCONFIG0_WDT_STG3_Interrupt = 0x1
	// Reset CPU core
	TIMG_WDTCONFIG0_WDT_STG3_ResetCPU = 0x2
	// Reset System
	TIMG_WDTCONFIG0_WDT_STG3_ResetSystem = 0x3
	// Position of WDT_EDGE_INT_EN field.
	TIMG_WDTCONFIG0_WDT_EDGE_INT_EN_Pos = 0x16
	// Bit mask of WDT_EDGE_INT_EN field.
	TIMG_WDTCONFIG0_WDT_EDGE_INT_EN_Msk = 0x400000
	// Bit WDT_EDGE_INT_EN.
	TIMG_WDTCONFIG0_WDT_EDGE_INT_EN = 0x400000
	// Position of WDT_LEVEL_INT_EN field.
	TIMG_WDTCONFIG0_WDT_LEVEL_INT_EN_Pos = 0x15
	// Bit mask of WDT_LEVEL_INT_EN field.
	TIMG_WDTCONFIG0_WDT_LEVEL_INT_EN_Msk = 0x200000
	// Bit WDT_LEVEL_INT_EN.
	TIMG_WDTCONFIG0_WDT_LEVEL_INT_EN = 0x200000
	// Position of WDT_CPU_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Pos = 0x12
	// Bit mask of WDT_CPU_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_Msk = 0x1c0000
	// 100ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T100ns = 0x0
	// 200ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T200ns = 0x1
	// 300ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T300ns = 0x2
	// 400ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T400ns = 0x3
	// 500ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T500ns = 0x4
	// 800ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T800ns = 0x5
	// 1600ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T1600ns = 0x6
	// 3200ns
	TIMG_WDTCONFIG0_WDT_CPU_RESET_LENGTH_T3200ns = 0x7
	// Position of WDT_SYS_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Pos = 0xf
	// Bit mask of WDT_SYS_RESET_LENGTH field.
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_Msk = 0x38000
	// 100ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T100ns = 0x0
	// 200ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T200ns = 0x1
	// 300ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T300ns = 0x2
	// 400ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T400ns = 0x3
	// 500ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T500ns = 0x4
	// 800ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T800ns = 0x5
	// 1600ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T1600ns = 0x6
	// 3200ns
	TIMG_WDTCONFIG0_WDT_SYS_RESET_LENGTH_T3200ns = 0x7
	// Position of WDT_FLASHBOOT_MOD_EN field.
	TIMG_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Pos = 0xe
	// Bit mask of WDT_FLASHBOOT_MOD_EN field.
	TIMG_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN_Msk = 0x4000
	// Bit WDT_FLASHBOOT_MOD_EN.
	TIMG_WDTCONFIG0_WDT_FLASHBOOT_MOD_EN = 0x4000

	// WDTCONFIG1: TIMG_WDTCONFIG1
	// Position of WDT_CLK_PRESCALE field.
	TIMG_WDTCONFIG1_WDT_CLK_PRESCALE_Pos = 0x10
	// Bit mask of WDT_CLK_PRESCALE field.
	TIMG_WDTCONFIG1_WDT_CLK_PRESCALE_Msk = 0xffff0000

	// WDTCONFIG2: TIMG_WDTCONFIG2
	// Position of WDT_STG0_HOLD field.
	TIMG_WDTCONFIG2_WDT_STG0_HOLD_Pos = 0x0
	// Bit mask of WDT_STG0_HOLD field.
	TIMG_WDTCONFIG2_WDT_STG0_HOLD_Msk = 0xffffffff

	// WDTCONFIG3: TIMG_WDTCONFIG3
	// Position of WDT_STG1_HOLD field.
	TIMG_WDTCONFIG3_WDT_STG1_HOLD_Pos = 0x0
	// Bit mask of WDT_STG1_HOLD field.
	TIMG_WDTCONFIG3_WDT_STG1_HOLD_Msk = 0xffffffff

	// WDTCONFIG4: TIMG_WDTCONFIG4
	// Position of WDT_STG2_HOLD field.
	TIMG_WDTCONFIG4_WDT_STG2_HOLD_Pos = 0x0
	// Bit mask of WDT_STG2_HOLD field.
	TIMG_WDTCONFIG4_WDT_STG2_HOLD_Msk = 0xffffffff

	// WDTCONFIG5: TIMG_WDTCONFIG5
	// Position of WDT_STG3_HOLD field.
	TIMG_WDTCONFIG5_WDT_STG3_HOLD_Pos = 0x0
	// Bit mask of WDT_STG3_HOLD field.
	TIMG_WDTCONFIG5_WDT_STG3_HOLD_Msk = 0xffffffff

	// WDTFEED: TIMG_WDTFEED
	// Position of WDT_FEED field.
	TIMG_WDTFEED_WDT_FEED_Pos = 0x0
	// Bit mask of WDT_FEED field.
	TIMG_WDTFEED_WDT_FEED_Msk = 0xffffffff

	// WDTWPROTECT: TIMG_WDTWPROTECT
	// Position of WDT_WKEY field.
	TIMG_WDTWPROTECT_WDT_WKEY_Pos = 0x0
	// Bit mask of WDT_WKEY field.
	TIMG_WDTWPROTECT_WDT_WKEY_Msk = 0xffffffff

	// RTCCALICFG: TIMG_RTCCALICFG
	// Position of START field.
	TIMG_RTCCALICFG_START_Pos = 0x1f
	// Bit mask of START field.
	TIMG_RTCCALICFG_START_Msk = 0x80000000
	// Bit START.
	TIMG_RTCCALICFG_START = 0x80000000
	// Position of MAX field.
	TIMG_RTCCALICFG_MAX_Pos = 0x10
	// Bit mask of MAX field.
	TIMG_RTCCALICFG_MAX_Msk = 0x7fff0000
	// Position of RDY field.
	TIMG_RTCCALICFG_RDY_Pos = 0xf
	// Bit mask of RDY field.
	TIMG_RTCCALICFG_RDY_Msk = 0x8000
	// Bit RDY.
	TIMG_RTCCALICFG_RDY = 0x8000
	// Position of CLK_SEL field.
	TIMG_RTCCALICFG_CLK_SEL_Pos = 0xd
	// Bit mask of CLK_SEL field.
	TIMG_RTCCALICFG_CLK_SEL_Msk = 0x6000
	// Select RTC slow clock
	TIMG_RTCCALICFG_CLK_SEL_RTC_MUX = 0x0
	// Internal 8 MHz RC oscillator, divided by 256
	TIMG_RTCCALICFG_CLK_SEL_CK8M_D256 = 0x1
	// Select XTAL_32K
	TIMG_RTCCALICFG_CLK_SEL_XTAL32K = 0x2
	// Position of START_CYCLING field.
	TIMG_RTCCALICFG_START_CYCLING_Pos = 0xc
	// Bit mask of START_CYCLING field.
	TIMG_RTCCALICFG_START_CYCLING_Msk = 0x1000
	// Bit START_CYCLING.
	TIMG_RTCCALICFG_START_CYCLING = 0x1000

	// RTCCALICFG1: TIMG_RTCCALICFG1
	// Position of VALUE field.
	TIMG_RTCCALICFG1_VALUE_Pos = 0x7
	// Bit mask of VALUE field.
	TIMG_RTCCALICFG1_VALUE_Msk = 0xffffff80

	// LACTCONFIG: TIMG_LACTCONFIG
	// Position of LACT_EN field.
	TIMG_LACTCONFIG_LACT_EN_Pos = 0x1f
	// Bit mask of LACT_EN field.
	TIMG_LACTCONFIG_LACT_EN_Msk = 0x80000000
	// Bit LACT_EN.
	TIMG_LACTCONFIG_LACT_EN = 0x80000000
	// Position of LACT_INCREASE field.
	TIMG_LACTCONFIG_LACT_INCREASE_Pos = 0x1e
	// Bit mask of LACT_INCREASE field.
	TIMG_LACTCONFIG_LACT_INCREASE_Msk = 0x40000000
	// Bit LACT_INCREASE.
	TIMG_LACTCONFIG_LACT_INCREASE = 0x40000000
	// Position of LACT_AUTORELOAD field.
	TIMG_LACTCONFIG_LACT_AUTORELOAD_Pos = 0x1d
	// Bit mask of LACT_AUTORELOAD field.
	TIMG_LACTCONFIG_LACT_AUTORELOAD_Msk = 0x20000000
	// Bit LACT_AUTORELOAD.
	TIMG_LACTCONFIG_LACT_AUTORELOAD = 0x20000000
	// Position of LACT_DIVIDER field.
	TIMG_LACTCONFIG_LACT_DIVIDER_Pos = 0xd
	// Bit mask of LACT_DIVIDER field.
	TIMG_LACTCONFIG_LACT_DIVIDER_Msk = 0x1fffe000
	// Position of LACT_EDGE_INT_EN field.
	TIMG_LACTCONFIG_LACT_EDGE_INT_EN_Pos = 0xc
	// Bit mask of LACT_EDGE_INT_EN field.
	TIMG_LACTCONFIG_LACT_EDGE_INT_EN_Msk = 0x1000
	// Bit LACT_EDGE_INT_EN.
	TIMG_LACTCONFIG_LACT_EDGE_INT_EN = 0x1000
	// Position of LACT_LEVEL_INT_EN field.
	TIMG_LACTCONFIG_LACT_LEVEL_INT_EN_Pos = 0xb
	// Bit mask of LACT_LEVEL_INT_EN field.
	TIMG_LACTCONFIG_LACT_LEVEL_INT_EN_Msk = 0x800
	// Bit LACT_LEVEL_INT_EN.
	TIMG_LACTCONFIG_LACT_LEVEL_INT_EN = 0x800
	// Position of LACT_ALARM_EN field.
	TIMG_LACTCONFIG_LACT_ALARM_EN_Pos = 0xa
	// Bit mask of LACT_ALARM_EN field.
	TIMG_LACTCONFIG_LACT_ALARM_EN_Msk = 0x400
	// Bit LACT_ALARM_EN.
	TIMG_LACTCONFIG_LACT_ALARM_EN = 0x400
	// Position of LACT_LAC_EN field.
	TIMG_LACTCONFIG_LACT_LAC_EN_Pos = 0x9
	// Bit mask of LACT_LAC_EN field.
	TIMG_LACTCONFIG_LACT_LAC_EN_Msk = 0x200
	// Bit LACT_LAC_EN.
	TIMG_LACTCONFIG_LACT_LAC_EN = 0x200
	// Position of LACT_CPST_EN field.
	TIMG_LACTCONFIG_LACT_CPST_EN_Pos = 0x8
	// Bit mask of LACT_CPST_EN field.
	TIMG_LACTCONFIG_LACT_CPST_EN_Msk = 0x100
	// Bit LACT_CPST_EN.
	TIMG_LACTCONFIG_LACT_CPST_EN = 0x100
	// Position of LACT_RTC_ONLY field.
	TIMG_LACTCONFIG_LACT_RTC_ONLY_Pos = 0x7
	// Bit mask of LACT_RTC_ONLY field.
	TIMG_LACTCONFIG_LACT_RTC_ONLY_Msk = 0x80
	// Bit LACT_RTC_ONLY.
	TIMG_LACTCONFIG_LACT_RTC_ONLY = 0x80

	// LACTRTC: TIMG_LACTRTC
	// Position of LACT_RTC_STEP_LEN field.
	TIMG_LACTRTC_LACT_RTC_STEP_LEN_Pos = 0x6
	// Bit mask of LACT_RTC_STEP_LEN field.
	TIMG_LACTRTC_LACT_RTC_STEP_LEN_Msk = 0xffffffc0

	// LACTLO: TIMG_LACTLO
	// Position of LACT_LO field.
	TIMG_LACTLO_LACT_LO_Pos = 0x0
	// Bit mask of LACT_LO field.
	TIMG_LACTLO_LACT_LO_Msk = 0xffffffff

	// LACTHI: TIMG_LACTHI
	// Position of LACT_HI field.
	TIMG_LACTHI_LACT_HI_Pos = 0x0
	// Bit mask of LACT_HI field.
	TIMG_LACTHI_LACT_HI_Msk = 0xffffffff

	// LACTUPDATE: TIMG_LACTUPDATE
	// Position of LACT_UPDATE field.
	TIMG_LACTUPDATE_LACT_UPDATE_Pos = 0x0
	// Bit mask of LACT_UPDATE field.
	TIMG_LACTUPDATE_LACT_UPDATE_Msk = 0xffffffff

	// LACTALARMLO: TIMG_LACTALARMLO
	// Position of LACT_ALARM_LO field.
	TIMG_LACTALARMLO_LACT_ALARM_LO_Pos = 0x0
	// Bit mask of LACT_ALARM_LO field.
	TIMG_LACTALARMLO_LACT_ALARM_LO_Msk = 0xffffffff

	// LACTALARMHI: TIMG_LACTALARMHI
	// Position of LACT_ALARM_HI field.
	TIMG_LACTALARMHI_LACT_ALARM_HI_Pos = 0x0
	// Bit mask of LACT_ALARM_HI field.
	TIMG_LACTALARMHI_LACT_ALARM_HI_Msk = 0xffffffff

	// LACTLOADLO: TIMG_LACTLOADLO
	// Position of LACT_LOAD_LO field.
	TIMG_LACTLOADLO_LACT_LOAD_LO_Pos = 0x0
	// Bit mask of LACT_LOAD_LO field.
	TIMG_LACTLOADLO_LACT_LOAD_LO_Msk = 0xffffffff

	// LACTLOADHI: TIMG_LACTLOADHI
	// Position of LACT_LOAD_HI field.
	TIMG_LACTLOADHI_LACT_LOAD_HI_Pos = 0x0
	// Bit mask of LACT_LOAD_HI field.
	TIMG_LACTLOADHI_LACT_LOAD_HI_Msk = 0xffffffff

	// LACTLOAD: TIMG_LACTLOAD
	// Position of LACT_LOAD field.
	TIMG_LACTLOAD_LACT_LOAD_Pos = 0x0
	// Bit mask of LACT_LOAD field.
	TIMG_LACTLOAD_LACT_LOAD_Msk = 0xffffffff

	// INT_ENA_TIMERS: TIMG_INT_ENA_TIMERS
	// Position of LACT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_LACT_INT_ENA_Pos = 0x3
	// Bit mask of LACT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_LACT_INT_ENA_Msk = 0x8
	// Bit LACT_INT_ENA.
	TIMG_INT_ENA_TIMERS_LACT_INT_ENA = 0x8
	// Position of WDT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_WDT_INT_ENA_Pos = 0x2
	// Bit mask of WDT_INT_ENA field.
	TIMG_INT_ENA_TIMERS_WDT_INT_ENA_Msk = 0x4
	// Bit WDT_INT_ENA.
	TIMG_INT_ENA_TIMERS_WDT_INT_ENA = 0x4
	// Position of T1_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T1_INT_ENA_Pos = 0x1
	// Bit mask of T1_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T1_INT_ENA_Msk = 0x2
	// Bit T1_INT_ENA.
	TIMG_INT_ENA_TIMERS_T1_INT_ENA = 0x2
	// Position of T0_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T0_INT_ENA_Pos = 0x0
	// Bit mask of T0_INT_ENA field.
	TIMG_INT_ENA_TIMERS_T0_INT_ENA_Msk = 0x1
	// Bit T0_INT_ENA.
	TIMG_INT_ENA_TIMERS_T0_INT_ENA = 0x1

	// INT_RAW_TIMERS: TIMG_INT_RAW_TIMERS
	// Position of LACT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_LACT_INT_RAW_Pos = 0x3
	// Bit mask of LACT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_LACT_INT_RAW_Msk = 0x8
	// Bit LACT_INT_RAW.
	TIMG_INT_RAW_TIMERS_LACT_INT_RAW = 0x8
	// Position of WDT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_WDT_INT_RAW_Pos = 0x2
	// Bit mask of WDT_INT_RAW field.
	TIMG_INT_RAW_TIMERS_WDT_INT_RAW_Msk = 0x4
	// Bit WDT_INT_RAW.
	TIMG_INT_RAW_TIMERS_WDT_INT_RAW = 0x4
	// Position of T1_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T1_INT_RAW_Pos = 0x1
	// Bit mask of T1_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T1_INT_RAW_Msk = 0x2
	// Bit T1_INT_RAW.
	TIMG_INT_RAW_TIMERS_T1_INT_RAW = 0x2
	// Position of T0_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T0_INT_RAW_Pos = 0x0
	// Bit mask of T0_INT_RAW field.
	TIMG_INT_RAW_TIMERS_T0_INT_RAW_Msk = 0x1
	// Bit T0_INT_RAW.
	TIMG_INT_RAW_TIMERS_T0_INT_RAW = 0x1

	// INT_ST_TIMERS: TIMG_INT_ST_TIMERS
	// Position of LACT_INT_ST field.
	TIMG_INT_ST_TIMERS_LACT_INT_ST_Pos = 0x3
	// Bit mask of LACT_INT_ST field.
	TIMG_INT_ST_TIMERS_LACT_INT_ST_Msk = 0x8
	// Bit LACT_INT_ST.
	TIMG_INT_ST_TIMERS_LACT_INT_ST = 0x8
	// Position of WDT_INT_ST field.
	TIMG_INT_ST_TIMERS_WDT_INT_ST_Pos = 0x2
	// Bit mask of WDT_INT_ST field.
	TIMG_INT_ST_TIMERS_WDT_INT_ST_Msk = 0x4
	// Bit WDT_INT_ST.
	TIMG_INT_ST_TIMERS_WDT_INT_ST = 0x4
	// Position of T1_INT_ST field.
	TIMG_INT_ST_TIMERS_T1_INT_ST_Pos = 0x1
	// Bit mask of T1_INT_ST field.
	TIMG_INT_ST_TIMERS_T1_INT_ST_Msk = 0x2
	// Bit T1_INT_ST.
	TIMG_INT_ST_TIMERS_T1_INT_ST = 0x2
	// Position of T0_INT_ST field.
	TIMG_INT_ST_TIMERS_T0_INT_ST_Pos = 0x0
	// Bit mask of T0_INT_ST field.
	TIMG_INT_ST_TIMERS_T0_INT_ST_Msk = 0x1
	// Bit T0_INT_ST.
	TIMG_INT_ST_TIMERS_T0_INT_ST = 0x1

	// INT_CLR_TIMERS: TIMG_INT_CLR_TIMERS
	// Position of LACT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_LACT_INT_CLR_Pos = 0x3
	// Bit mask of LACT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_LACT_INT_CLR_Msk = 0x8
	// Bit LACT_INT_CLR.
	TIMG_INT_CLR_TIMERS_LACT_INT_CLR = 0x8
	// Position of WDT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_WDT_INT_CLR_Pos = 0x2
	// Bit mask of WDT_INT_CLR field.
	TIMG_INT_CLR_TIMERS_WDT_INT_CLR_Msk = 0x4
	// Bit WDT_INT_CLR.
	TIMG_INT_CLR_TIMERS_WDT_INT_CLR = 0x4
	// Position of T1_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T1_INT_CLR_Pos = 0x1
	// Bit mask of T1_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T1_INT_CLR_Msk = 0x2
	// Bit T1_INT_CLR.
	TIMG_INT_CLR_TIMERS_T1_INT_CLR = 0x2
	// Position of T0_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T0_INT_CLR_Pos = 0x0
	// Bit mask of T0_INT_CLR field.
	TIMG_INT_CLR_TIMERS_T0_INT_CLR_Msk = 0x1
	// Bit T0_INT_CLR.
	TIMG_INT_CLR_TIMERS_T0_INT_CLR = 0x1

	// NTIMERS_DATE: TIMG_NTIMERS_DATE
	// Position of NTIMERS_DATE field.
	TIMG_NTIMERS_DATE_NTIMERS_DATE_Pos = 0x0
	// Bit mask of NTIMERS_DATE field.
	TIMG_NTIMERS_DATE_NTIMERS_DATE_Msk = 0xfffffff

	// TIMGCLK: TIMGCLK
	// Position of CLK_EN field.
	TIMG_TIMGCLK_CLK_EN_Pos = 0x1f
	// Bit mask of CLK_EN field.
	TIMG_TIMGCLK_CLK_EN_Msk = 0x80000000
	// Bit CLK_EN.
	TIMG_TIMGCLK_CLK_EN = 0x80000000
)

// Constants for SPI_ENCRYPT
const ()

// Constants for GPIO_SD
const (
	// SIGMADELTA0: GPIO_SIGMADELTA0
	// Position of SD0_PRESCALE field.
	GPIO_SD_SIGMADELTA0_SD0_PRESCALE_Pos = 0x8
	// Bit mask of SD0_PRESCALE field.
	GPIO_SD_SIGMADELTA0_SD0_PRESCALE_Msk = 0xff00
	// Position of SD0_IN field.
	GPIO_SD_SIGMADELTA0_SD0_IN_Pos = 0x0
	// Bit mask of SD0_IN field.
	GPIO_SD_SIGMADELTA0_SD0_IN_Msk = 0xff

	// SIGMADELTA1: GPIO_SIGMADELTA1
	// Position of SD1_PRESCALE field.
	GPIO_SD_SIGMADELTA1_SD1_PRESCALE_Pos = 0x8
	// Bit mask of SD1_PRESCALE field.
	GPIO_SD_SIGMADELTA1_SD1_PRESCALE_Msk = 0xff00
	// Position of SD1_IN field.
	GPIO_SD_SIGMADELTA1_SD1_IN_Pos = 0x0
	// Bit mask of SD1_IN field.
	GPIO_SD_SIGMADELTA1_SD1_IN_Msk = 0xff

	// SIGMADELTA2: GPIO_SIGMADELTA2
	// Position of SD2_PRESCALE field.
	GPIO_SD_SIGMADELTA2_SD2_PRESCALE_Pos = 0x8
	// Bit mask of SD2_PRESCALE field.
	GPIO_SD_SIGMADELTA2_SD2_PRESCALE_Msk = 0xff00
	// Position of SD2_IN field.
	GPIO_SD_SIGMADELTA2_SD2_IN_Pos = 0x0
	// Bit mask of SD2_IN field.
	GPIO_SD_SIGMADELTA2_SD2_IN_Msk = 0xff

	// SIGMADELTA3: GPIO_SIGMADELTA3
	// Position of SD3_PRESCALE field.
	GPIO_SD_SIGMADELTA3_SD3_PRESCALE_Pos = 0x8
	// Bit mask of SD3_PRESCALE field.
	GPIO_SD_SIGMADELTA3_SD3_PRESCALE_Msk = 0xff00
	// Position of SD3_IN field.
	GPIO_SD_SIGMADELTA3_SD3_IN_Pos = 0x0
	// Bit mask of SD3_IN field.
	GPIO_SD_SIGMADELTA3_SD3_IN_Msk = 0xff

	// SIGMADELTA4: GPIO_SIGMADELTA4
	// Position of SD4_PRESCALE field.
	GPIO_SD_SIGMADELTA4_SD4_PRESCALE_Pos = 0x8
	// Bit mask of SD4_PRESCALE field.
	GPIO_SD_SIGMADELTA4_SD4_PRESCALE_Msk = 0xff00
	// Position of SD4_IN field.
	GPIO_SD_SIGMADELTA4_SD4_IN_Pos = 0x0
	// Bit mask of SD4_IN field.
	GPIO_SD_SIGMADELTA4_SD4_IN_Msk = 0xff

	// SIGMADELTA5: GPIO_SIGMADELTA5
	// Position of SD5_PRESCALE field.
	GPIO_SD_SIGMADELTA5_SD5_PRESCALE_Pos = 0x8
	// Bit mask of SD5_PRESCALE field.
	GPIO_SD_SIGMADELTA5_SD5_PRESCALE_Msk = 0xff00
	// Position of SD5_IN field.
	GPIO_SD_SIGMADELTA5_SD5_IN_Pos = 0x0
	// Bit mask of SD5_IN field.
	GPIO_SD_SIGMADELTA5_SD5_IN_Msk = 0xff

	// SIGMADELTA6: GPIO_SIGMADELTA6
	// Position of SD6_PRESCALE field.
	GPIO_SD_SIGMADELTA6_SD6_PRESCALE_Pos = 0x8
	// Bit mask of SD6_PRESCALE field.
	GPIO_SD_SIGMADELTA6_SD6_PRESCALE_Msk = 0xff00
	// Position of SD6_IN field.
	GPIO_SD_SIGMADELTA6_SD6_IN_Pos = 0x0
	// Bit mask of SD6_IN field.
	GPIO_SD_SIGMADELTA6_SD6_IN_Msk = 0xff

	// SIGMADELTA7: GPIO_SIGMADELTA7
	// Position of SD7_PRESCALE field.
	GPIO_SD_SIGMADELTA7_SD7_PRESCALE_Pos = 0x8
	// Bit mask of SD7_PRESCALE field.
	GPIO_SD_SIGMADELTA7_SD7_PRESCALE_Msk = 0xff00
	// Position of SD7_IN field.
	GPIO_SD_SIGMADELTA7_SD7_IN_Pos = 0x0
	// Bit mask of SD7_IN field.
	GPIO_SD_SIGMADELTA7_SD7_IN_Msk = 0xff

	// SIGMADELTA_CG: GPIO_SIGMADELTA_CG
	// Position of SD_CLK_EN field.
	GPIO_SD_SIGMADELTA_CG_SD_CLK_EN_Pos = 0x1f
	// Bit mask of SD_CLK_EN field.
	GPIO_SD_SIGMADELTA_CG_SD_CLK_EN_Msk = 0x80000000
	// Bit SD_CLK_EN.
	GPIO_SD_SIGMADELTA_CG_SD_CLK_EN = 0x80000000

	// SIGMADELTA_MISC: GPIO_SIGMADELTA_MISC
	// Position of SPI_SWAP field.
	GPIO_SD_SIGMADELTA_MISC_SPI_SWAP_Pos = 0x1f
	// Bit mask of SPI_SWAP field.
	GPIO_SD_SIGMADELTA_MISC_SPI_SWAP_Msk = 0x80000000
	// Bit SPI_SWAP.
	GPIO_SD_SIGMADELTA_MISC_SPI_SWAP = 0x80000000

	// SIGMADELTA_VERSION: GPIO_SIGMADELTA_VERSION
	// Position of SD_DATE field.
	GPIO_SD_SIGMADELTA_VERSION_SD_DATE_Pos = 0x0
	// Bit mask of SD_DATE field.
	GPIO_SD_SIGMADELTA_VERSION_SD_DATE_Msk = 0xfffffff
)

// Constants for SDMMC
const ()

// Constants for IO_MUX
const (
	// PIN_CTRL: configures clock source and clock output pins
	// Position of PIN_CTRL_CLK3 field.
	IO_MUX_PIN_CTRL_PIN_CTRL_CLK3_Pos = 0x8
	// Bit mask of PIN_CTRL_CLK3 field.
	IO_MUX_PIN_CTRL_PIN_CTRL_CLK3_Msk = 0x700
	// Position of PIN_CTRL_CLK2 field.
	IO_MUX_PIN_CTRL_PIN_CTRL_CLK2_Pos = 0x4
	// Bit mask of PIN_CTRL_CLK2 field.
	IO_MUX_PIN_CTRL_PIN_CTRL_CLK2_Msk = 0x70
	// Position of PIN_CTRL_CLK1 field.
	IO_MUX_PIN_CTRL_PIN_CTRL_CLK1_Pos = 0x0
	// Bit mask of PIN_CTRL_CLK1 field.
	IO_MUX_PIN_CTRL_PIN_CTRL_CLK1_Msk = 0x7

	// GPIO36: configures IO_MUX for GPIO36
	// Position of MCU_SEL field.
	IO_MUX_GPIO36_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO36_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO36_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO36_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO36_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO36_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO36_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO36_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO36_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO36_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO36_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO36_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO36_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO36_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO36_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO36_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO36_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO36_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO36_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO36_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO36_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO36_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO36_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO36_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO36_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO36_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO36_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO36_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO36_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO36_MCU_OE = 0x1

	// GPIO37: configures IO_MUX for GPIO37
	// Position of MCU_SEL field.
	IO_MUX_GPIO37_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO37_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO37_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO37_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO37_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO37_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO37_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO37_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO37_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO37_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO37_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO37_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO37_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO37_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO37_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO37_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO37_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO37_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO37_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO37_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO37_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO37_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO37_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO37_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO37_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO37_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO37_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO37_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO37_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO37_MCU_OE = 0x1

	// GPIO38: configures IO_MUX for GPIO38
	// Position of MCU_SEL field.
	IO_MUX_GPIO38_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO38_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO38_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO38_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO38_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO38_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO38_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO38_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO38_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO38_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO38_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO38_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO38_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO38_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO38_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO38_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO38_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO38_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO38_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO38_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO38_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO38_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO38_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO38_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO38_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO38_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO38_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO38_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO38_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO38_MCU_OE = 0x1

	// GPIO39: configures IO_MUX for GPIO39
	// Position of MCU_SEL field.
	IO_MUX_GPIO39_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO39_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO39_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO39_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO39_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO39_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO39_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO39_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO39_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO39_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO39_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO39_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO39_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO39_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO39_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO39_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO39_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO39_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO39_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO39_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO39_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO39_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO39_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO39_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO39_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO39_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO39_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO39_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO39_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO39_MCU_OE = 0x1

	// GPIO34: configures IO_MUX for GPIO34
	// Position of MCU_SEL field.
	IO_MUX_GPIO34_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO34_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO34_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO34_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO34_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO34_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO34_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO34_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO34_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO34_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO34_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO34_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO34_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO34_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO34_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO34_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO34_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO34_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO34_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO34_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO34_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO34_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO34_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO34_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO34_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO34_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO34_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO34_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO34_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO34_MCU_OE = 0x1

	// GPIO35: configures IO_MUX for GPIO35
	// Position of MCU_SEL field.
	IO_MUX_GPIO35_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO35_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO35_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO35_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO35_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO35_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO35_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO35_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO35_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO35_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO35_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO35_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO35_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO35_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO35_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO35_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO35_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO35_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO35_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO35_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO35_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO35_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO35_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO35_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO35_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO35_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO35_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO35_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO35_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO35_MCU_OE = 0x1

	// GPIO32: configures IO_MUX for GPIO32
	// Position of MCU_SEL field.
	IO_MUX_GPIO32_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO32_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO32_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO32_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO32_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO32_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO32_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO32_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO32_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO32_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO32_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO32_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO32_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO32_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO32_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO32_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO32_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO32_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO32_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO32_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO32_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO32_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO32_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO32_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO32_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO32_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO32_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO32_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO32_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO32_MCU_OE = 0x1

	// GPIO33: configures IO_MUX for GPIO33
	// Position of MCU_SEL field.
	IO_MUX_GPIO33_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO33_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO33_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO33_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO33_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO33_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO33_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO33_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO33_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO33_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO33_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO33_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO33_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO33_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO33_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO33_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO33_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO33_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO33_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO33_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO33_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO33_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO33_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO33_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO33_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO33_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO33_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO33_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO33_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO33_MCU_OE = 0x1

	// GPIO25: configures IO_MUX for GPIO25
	// Position of MCU_SEL field.
	IO_MUX_GPIO25_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO25_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO25_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO25_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO25_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO25_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO25_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO25_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO25_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO25_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO25_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO25_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO25_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO25_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO25_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO25_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO25_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO25_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO25_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO25_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO25_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO25_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO25_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO25_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO25_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO25_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO25_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO25_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO25_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO25_MCU_OE = 0x1

	// GPIO26: configures IO_MUX for GPIO26
	// Position of MCU_SEL field.
	IO_MUX_GPIO26_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO26_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO26_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO26_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO26_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO26_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO26_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO26_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO26_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO26_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO26_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO26_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO26_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO26_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO26_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO26_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO26_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO26_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO26_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO26_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO26_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO26_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO26_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO26_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO26_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO26_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO26_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO26_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO26_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO26_MCU_OE = 0x1

	// GPIO27: configures IO_MUX for GPIO27
	// Position of MCU_SEL field.
	IO_MUX_GPIO27_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO27_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO27_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO27_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO27_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO27_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO27_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO27_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO27_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO27_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO27_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO27_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO27_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO27_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO27_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO27_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO27_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO27_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO27_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO27_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO27_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO27_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO27_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO27_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO27_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO27_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO27_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO27_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO27_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO27_MCU_OE = 0x1

	// MTMS: configures IO_MUX for MTMS
	// Position of MCU_SEL field.
	IO_MUX_MTMS_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_MTMS_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_MTMS_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_MTMS_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_MTMS_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_MTMS_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_MTMS_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_MTMS_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_MTMS_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_MTMS_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_MTMS_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_MTMS_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_MTMS_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_MTMS_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_MTMS_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_MTMS_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_MTMS_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_MTMS_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_MTMS_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_MTMS_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_MTMS_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_MTMS_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_MTMS_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_MTMS_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_MTMS_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_MTMS_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_MTMS_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_MTMS_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_MTMS_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_MTMS_MCU_OE = 0x1

	// MTDI: configures IO_MUX for MTDI
	// Position of MCU_SEL field.
	IO_MUX_MTDI_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_MTDI_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_MTDI_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_MTDI_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_MTDI_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_MTDI_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_MTDI_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_MTDI_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_MTDI_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_MTDI_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_MTDI_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_MTDI_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_MTDI_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_MTDI_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_MTDI_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_MTDI_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_MTDI_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_MTDI_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_MTDI_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_MTDI_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_MTDI_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_MTDI_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_MTDI_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_MTDI_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_MTDI_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_MTDI_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_MTDI_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_MTDI_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_MTDI_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_MTDI_MCU_OE = 0x1

	// MTCK: configures IO_MUX for MTCK
	// Position of MCU_SEL field.
	IO_MUX_MTCK_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_MTCK_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_MTCK_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_MTCK_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_MTCK_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_MTCK_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_MTCK_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_MTCK_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_MTCK_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_MTCK_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_MTCK_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_MTCK_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_MTCK_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_MTCK_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_MTCK_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_MTCK_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_MTCK_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_MTCK_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_MTCK_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_MTCK_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_MTCK_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_MTCK_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_MTCK_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_MTCK_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_MTCK_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_MTCK_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_MTCK_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_MTCK_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_MTCK_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_MTCK_MCU_OE = 0x1

	// MTDO: configures IO_MUX for MTDO
	// Position of MCU_SEL field.
	IO_MUX_MTDO_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_MTDO_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_MTDO_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_MTDO_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_MTDO_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_MTDO_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_MTDO_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_MTDO_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_MTDO_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_MTDO_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_MTDO_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_MTDO_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_MTDO_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_MTDO_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_MTDO_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_MTDO_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_MTDO_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_MTDO_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_MTDO_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_MTDO_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_MTDO_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_MTDO_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_MTDO_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_MTDO_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_MTDO_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_MTDO_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_MTDO_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_MTDO_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_MTDO_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_MTDO_MCU_OE = 0x1

	// GPIO2: configures IO_MUX for GPIO2
	// Position of MCU_SEL field.
	IO_MUX_GPIO2_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO2_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO2_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO2_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO2_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO2_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO2_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO2_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO2_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO2_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO2_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO2_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO2_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO2_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO2_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO2_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO2_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO2_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO2_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO2_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO2_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO2_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO2_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO2_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO2_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO2_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO2_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO2_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO2_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO2_MCU_OE = 0x1

	// GPIO0: configures IO_MUX for GPIO0
	// Position of MCU_SEL field.
	IO_MUX_GPIO0_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO0_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO0_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO0_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO0_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO0_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO0_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO0_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO0_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO0_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO0_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO0_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO0_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO0_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO0_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO0_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO0_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO0_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO0_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO0_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO0_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO0_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO0_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO0_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO0_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO0_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO0_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO0_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO0_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO0_MCU_OE = 0x1

	// GPIO4: configures IO_MUX for GPIO4
	// Position of MCU_SEL field.
	IO_MUX_GPIO4_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO4_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO4_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO4_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO4_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO4_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO4_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO4_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO4_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO4_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO4_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO4_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO4_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO4_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO4_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO4_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO4_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO4_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO4_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO4_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO4_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO4_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO4_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO4_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO4_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO4_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO4_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO4_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO4_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO4_MCU_OE = 0x1

	// GPIO16: configures IO_MUX for GPIO16
	// Position of MCU_SEL field.
	IO_MUX_GPIO16_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO16_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO16_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO16_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO16_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO16_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO16_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO16_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO16_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO16_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO16_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO16_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO16_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO16_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO16_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO16_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO16_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO16_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO16_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO16_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO16_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO16_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO16_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO16_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO16_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO16_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO16_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO16_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO16_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO16_MCU_OE = 0x1

	// GPIO17: configures IO_MUX for GPIO17
	// Position of MCU_SEL field.
	IO_MUX_GPIO17_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO17_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO17_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO17_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO17_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO17_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO17_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO17_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO17_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO17_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO17_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO17_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO17_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO17_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO17_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO17_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO17_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO17_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO17_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO17_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO17_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO17_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO17_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO17_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO17_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO17_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO17_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO17_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO17_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO17_MCU_OE = 0x1

	// SD_DATA2: configures IO_MUX for SD_DATA2
	// Position of MCU_SEL field.
	IO_MUX_SD_DATA2_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_SD_DATA2_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_SD_DATA2_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_SD_DATA2_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_SD_DATA2_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_SD_DATA2_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_SD_DATA2_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_SD_DATA2_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_SD_DATA2_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_SD_DATA2_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_SD_DATA2_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_SD_DATA2_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_SD_DATA2_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_SD_DATA2_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_SD_DATA2_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_SD_DATA2_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_SD_DATA2_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_SD_DATA2_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_SD_DATA2_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_SD_DATA2_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_SD_DATA2_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_SD_DATA2_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_SD_DATA2_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_SD_DATA2_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_SD_DATA2_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_SD_DATA2_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_SD_DATA2_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_SD_DATA2_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_SD_DATA2_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_SD_DATA2_MCU_OE = 0x1

	// SD_DATA3: configures IO_MUX for SD_DATA3
	// Position of MCU_SEL field.
	IO_MUX_SD_DATA3_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_SD_DATA3_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_SD_DATA3_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_SD_DATA3_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_SD_DATA3_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_SD_DATA3_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_SD_DATA3_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_SD_DATA3_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_SD_DATA3_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_SD_DATA3_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_SD_DATA3_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_SD_DATA3_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_SD_DATA3_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_SD_DATA3_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_SD_DATA3_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_SD_DATA3_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_SD_DATA3_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_SD_DATA3_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_SD_DATA3_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_SD_DATA3_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_SD_DATA3_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_SD_DATA3_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_SD_DATA3_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_SD_DATA3_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_SD_DATA3_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_SD_DATA3_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_SD_DATA3_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_SD_DATA3_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_SD_DATA3_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_SD_DATA3_MCU_OE = 0x1

	// SD_CMD: configures IO_MUX for SD_CMD
	// Position of MCU_SEL field.
	IO_MUX_SD_CMD_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_SD_CMD_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_SD_CMD_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_SD_CMD_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_SD_CMD_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_SD_CMD_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_SD_CMD_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_SD_CMD_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_SD_CMD_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_SD_CMD_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_SD_CMD_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_SD_CMD_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_SD_CMD_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_SD_CMD_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_SD_CMD_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_SD_CMD_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_SD_CMD_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_SD_CMD_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_SD_CMD_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_SD_CMD_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_SD_CMD_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_SD_CMD_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_SD_CMD_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_SD_CMD_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_SD_CMD_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_SD_CMD_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_SD_CMD_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_SD_CMD_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_SD_CMD_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_SD_CMD_MCU_OE = 0x1

	// SD_CLK: configures IO_MUX for SD_CLK
	// Position of MCU_SEL field.
	IO_MUX_SD_CLK_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_SD_CLK_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_SD_CLK_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_SD_CLK_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_SD_CLK_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_SD_CLK_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_SD_CLK_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_SD_CLK_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_SD_CLK_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_SD_CLK_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_SD_CLK_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_SD_CLK_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_SD_CLK_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_SD_CLK_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_SD_CLK_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_SD_CLK_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_SD_CLK_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_SD_CLK_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_SD_CLK_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_SD_CLK_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_SD_CLK_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_SD_CLK_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_SD_CLK_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_SD_CLK_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_SD_CLK_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_SD_CLK_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_SD_CLK_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_SD_CLK_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_SD_CLK_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_SD_CLK_MCU_OE = 0x1

	// SD_DATA0: configures IO_MUX for SD_DATA0
	// Position of MCU_SEL field.
	IO_MUX_SD_DATA0_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_SD_DATA0_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_SD_DATA0_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_SD_DATA0_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_SD_DATA0_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_SD_DATA0_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_SD_DATA0_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_SD_DATA0_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_SD_DATA0_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_SD_DATA0_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_SD_DATA0_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_SD_DATA0_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_SD_DATA0_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_SD_DATA0_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_SD_DATA0_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_SD_DATA0_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_SD_DATA0_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_SD_DATA0_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_SD_DATA0_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_SD_DATA0_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_SD_DATA0_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_SD_DATA0_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_SD_DATA0_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_SD_DATA0_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_SD_DATA0_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_SD_DATA0_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_SD_DATA0_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_SD_DATA0_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_SD_DATA0_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_SD_DATA0_MCU_OE = 0x1

	// SD_DATA1: configures IO_MUX for SD_DATA1
	// Position of MCU_SEL field.
	IO_MUX_SD_DATA1_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_SD_DATA1_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_SD_DATA1_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_SD_DATA1_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_SD_DATA1_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_SD_DATA1_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_SD_DATA1_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_SD_DATA1_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_SD_DATA1_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_SD_DATA1_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_SD_DATA1_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_SD_DATA1_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_SD_DATA1_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_SD_DATA1_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_SD_DATA1_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_SD_DATA1_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_SD_DATA1_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_SD_DATA1_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_SD_DATA1_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_SD_DATA1_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_SD_DATA1_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_SD_DATA1_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_SD_DATA1_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_SD_DATA1_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_SD_DATA1_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_SD_DATA1_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_SD_DATA1_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_SD_DATA1_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_SD_DATA1_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_SD_DATA1_MCU_OE = 0x1

	// GPIO5: configures IO_MUX for GPIO5
	// Position of MCU_SEL field.
	IO_MUX_GPIO5_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO5_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO5_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO5_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO5_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO5_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO5_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO5_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO5_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO5_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO5_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO5_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO5_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO5_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO5_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO5_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO5_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO5_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO5_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO5_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO5_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO5_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO5_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO5_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO5_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO5_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO5_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO5_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO5_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO5_MCU_OE = 0x1

	// GPIO18: configures IO_MUX for GPIO18
	// Position of MCU_SEL field.
	IO_MUX_GPIO18_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO18_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO18_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO18_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO18_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO18_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO18_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO18_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO18_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO18_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO18_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO18_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO18_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO18_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO18_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO18_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO18_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO18_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO18_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO18_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO18_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO18_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO18_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO18_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO18_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO18_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO18_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO18_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO18_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO18_MCU_OE = 0x1

	// GPIO19: configures IO_MUX for GPIO19
	// Position of MCU_SEL field.
	IO_MUX_GPIO19_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO19_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO19_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO19_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO19_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO19_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO19_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO19_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO19_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO19_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO19_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO19_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO19_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO19_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO19_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO19_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO19_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO19_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO19_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO19_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO19_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO19_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO19_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO19_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO19_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO19_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO19_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO19_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO19_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO19_MCU_OE = 0x1

	// GPIO20: configures IO_MUX for GPIO20
	// Position of MCU_SEL field.
	IO_MUX_GPIO20_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO20_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO20_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO20_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO20_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO20_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO20_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO20_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO20_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO20_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO20_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO20_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO20_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO20_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO20_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO20_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO20_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO20_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO20_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO20_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO20_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO20_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO20_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO20_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO20_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO20_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO20_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO20_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO20_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO20_MCU_OE = 0x1

	// GPIO21: configures IO_MUX for GPIO21
	// Position of MCU_SEL field.
	IO_MUX_GPIO21_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO21_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO21_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO21_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO21_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO21_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO21_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO21_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO21_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO21_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO21_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO21_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO21_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO21_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO21_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO21_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO21_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO21_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO21_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO21_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO21_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO21_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO21_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO21_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO21_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO21_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO21_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO21_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO21_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO21_MCU_OE = 0x1

	// GPIO22: configures IO_MUX for GPIO22
	// Position of MCU_SEL field.
	IO_MUX_GPIO22_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO22_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO22_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO22_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO22_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO22_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO22_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO22_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO22_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO22_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO22_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO22_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO22_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO22_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO22_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO22_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO22_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO22_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO22_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO22_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO22_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO22_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO22_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO22_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO22_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO22_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO22_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO22_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO22_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO22_MCU_OE = 0x1

	// U0RXD: configures IO_MUX for U0RXD
	// Position of MCU_SEL field.
	IO_MUX_U0RXD_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_U0RXD_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_U0RXD_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_U0RXD_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_U0RXD_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_U0RXD_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_U0RXD_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_U0RXD_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_U0RXD_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_U0RXD_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_U0RXD_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_U0RXD_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_U0RXD_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_U0RXD_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_U0RXD_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_U0RXD_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_U0RXD_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_U0RXD_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_U0RXD_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_U0RXD_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_U0RXD_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_U0RXD_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_U0RXD_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_U0RXD_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_U0RXD_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_U0RXD_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_U0RXD_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_U0RXD_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_U0RXD_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_U0RXD_MCU_OE = 0x1

	// U0TXD: configures IO_MUX for U0TXD
	// Position of MCU_SEL field.
	IO_MUX_U0TXD_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_U0TXD_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_U0TXD_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_U0TXD_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_U0TXD_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_U0TXD_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_U0TXD_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_U0TXD_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_U0TXD_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_U0TXD_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_U0TXD_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_U0TXD_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_U0TXD_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_U0TXD_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_U0TXD_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_U0TXD_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_U0TXD_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_U0TXD_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_U0TXD_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_U0TXD_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_U0TXD_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_U0TXD_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_U0TXD_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_U0TXD_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_U0TXD_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_U0TXD_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_U0TXD_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_U0TXD_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_U0TXD_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_U0TXD_MCU_OE = 0x1

	// GPIO23: configures IO_MUX for GPIO23
	// Position of MCU_SEL field.
	IO_MUX_GPIO23_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO23_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO23_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO23_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO23_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO23_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO23_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO23_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO23_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO23_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO23_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO23_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO23_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO23_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO23_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO23_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO23_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO23_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO23_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO23_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO23_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO23_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO23_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO23_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO23_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO23_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO23_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO23_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO23_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO23_MCU_OE = 0x1

	// GPIO24: configures IO_MUX for GPIO24
	// Position of MCU_SEL field.
	IO_MUX_GPIO24_MCU_SEL_Pos = 0xc
	// Bit mask of MCU_SEL field.
	IO_MUX_GPIO24_MCU_SEL_Msk = 0x3000
	// Position of FUN_DRV field.
	IO_MUX_GPIO24_FUN_DRV_Pos = 0xa
	// Bit mask of FUN_DRV field.
	IO_MUX_GPIO24_FUN_DRV_Msk = 0xc00
	// Position of FUN_IE field.
	IO_MUX_GPIO24_FUN_IE_Pos = 0x9
	// Bit mask of FUN_IE field.
	IO_MUX_GPIO24_FUN_IE_Msk = 0x200
	// Bit FUN_IE.
	IO_MUX_GPIO24_FUN_IE = 0x200
	// Position of FUN_WPU field.
	IO_MUX_GPIO24_FUN_WPU_Pos = 0x8
	// Bit mask of FUN_WPU field.
	IO_MUX_GPIO24_FUN_WPU_Msk = 0x100
	// Bit FUN_WPU.
	IO_MUX_GPIO24_FUN_WPU = 0x100
	// Position of FUN_WPD field.
	IO_MUX_GPIO24_FUN_WPD_Pos = 0x7
	// Bit mask of FUN_WPD field.
	IO_MUX_GPIO24_FUN_WPD_Msk = 0x80
	// Bit FUN_WPD.
	IO_MUX_GPIO24_FUN_WPD = 0x80
	// Position of MCU_DRV field.
	IO_MUX_GPIO24_MCU_DRV_Pos = 0x5
	// Bit mask of MCU_DRV field.
	IO_MUX_GPIO24_MCU_DRV_Msk = 0x60
	// Position of MCU_IE field.
	IO_MUX_GPIO24_MCU_IE_Pos = 0x4
	// Bit mask of MCU_IE field.
	IO_MUX_GPIO24_MCU_IE_Msk = 0x10
	// Bit MCU_IE.
	IO_MUX_GPIO24_MCU_IE = 0x10
	// Position of MCU_WPU field.
	IO_MUX_GPIO24_MCU_WPU_Pos = 0x3
	// Bit mask of MCU_WPU field.
	IO_MUX_GPIO24_MCU_WPU_Msk = 0x8
	// Bit MCU_WPU.
	IO_MUX_GPIO24_MCU_WPU = 0x8
	// Position of MCU_WPD field.
	IO_MUX_GPIO24_MCU_WPD_Pos = 0x2
	// Bit mask of MCU_WPD field.
	IO_MUX_GPIO24_MCU_WPD_Msk = 0x4
	// Bit MCU_WPD.
	IO_MUX_GPIO24_MCU_WPD = 0x4
	// Position of SLP_SEL field.
	IO_MUX_GPIO24_SLP_SEL_Pos = 0x1
	// Bit mask of SLP_SEL field.
	IO_MUX_GPIO24_SLP_SEL_Msk = 0x2
	// Bit SLP_SEL.
	IO_MUX_GPIO24_SLP_SEL = 0x2
	// Position of MCU_OE field.
	IO_MUX_GPIO24_MCU_OE_Pos = 0x0
	// Bit mask of MCU_OE field.
	IO_MUX_GPIO24_MCU_OE_Msk = 0x1
	// Bit MCU_OE.
	IO_MUX_GPIO24_MCU_OE = 0x1
)

// Constants for CAN
const ()

// Constants for I2S
const (
	// CONF: I2S_CONF
	// Position of SIG_LOOPBACK field.
	I2S_CONF_SIG_LOOPBACK_Pos = 0x12
	// Bit mask of SIG_LOOPBACK field.
	I2S_CONF_SIG_LOOPBACK_Msk = 0x40000
	// Bit SIG_LOOPBACK.
	I2S_CONF_SIG_LOOPBACK = 0x40000
	// Position of RX_MSB_RIGHT field.
	I2S_CONF_RX_MSB_RIGHT_Pos = 0x11
	// Bit mask of RX_MSB_RIGHT field.
	I2S_CONF_RX_MSB_RIGHT_Msk = 0x20000
	// Bit RX_MSB_RIGHT.
	I2S_CONF_RX_MSB_RIGHT = 0x20000
	// Position of TX_MSB_RIGHT field.
	I2S_CONF_TX_MSB_RIGHT_Pos = 0x10
	// Bit mask of TX_MSB_RIGHT field.
	I2S_CONF_TX_MSB_RIGHT_Msk = 0x10000
	// Bit TX_MSB_RIGHT.
	I2S_CONF_TX_MSB_RIGHT = 0x10000
	// Position of RX_MONO field.
	I2S_CONF_RX_MONO_Pos = 0xf
	// Bit mask of RX_MONO field.
	I2S_CONF_RX_MONO_Msk = 0x8000
	// Bit RX_MONO.
	I2S_CONF_RX_MONO = 0x8000
	// Position of TX_MONO field.
	I2S_CONF_TX_MONO_Pos = 0xe
	// Bit mask of TX_MONO field.
	I2S_CONF_TX_MONO_Msk = 0x4000
	// Bit TX_MONO.
	I2S_CONF_TX_MONO = 0x4000
	// Position of RX_SHORT_SYNC field.
	I2S_CONF_RX_SHORT_SYNC_Pos = 0xd
	// Bit mask of RX_SHORT_SYNC field.
	I2S_CONF_RX_SHORT_SYNC_Msk = 0x2000
	// Bit RX_SHORT_SYNC.
	I2S_CONF_RX_SHORT_SYNC = 0x2000
	// Position of TX_SHORT_SYNC field.
	I2S_CONF_TX_SHORT_SYNC_Pos = 0xc
	// Bit mask of TX_SHORT_SYNC field.
	I2S_CONF_TX_SHORT_SYNC_Msk = 0x1000
	// Bit TX_SHORT_SYNC.
	I2S_CONF_TX_SHORT_SYNC = 0x1000
	// Position of RX_MSB_SHIFT field.
	I2S_CONF_RX_MSB_SHIFT_Pos = 0xb
	// Bit mask of RX_MSB_SHIFT field.
	I2S_CONF_RX_MSB_SHIFT_Msk = 0x800
	// Bit RX_MSB_SHIFT.
	I2S_CONF_RX_MSB_SHIFT = 0x800
	// Position of TX_MSB_SHIFT field.
	I2S_CONF_TX_MSB_SHIFT_Pos = 0xa
	// Bit mask of TX_MSB_SHIFT field.
	I2S_CONF_TX_MSB_SHIFT_Msk = 0x400
	// Bit TX_MSB_SHIFT.
	I2S_CONF_TX_MSB_SHIFT = 0x400
	// Position of RX_RIGHT_FIRST field.
	I2S_CONF_RX_RIGHT_FIRST_Pos = 0x9
	// Bit mask of RX_RIGHT_FIRST field.
	I2S_CONF_RX_RIGHT_FIRST_Msk = 0x200
	// Bit RX_RIGHT_FIRST.
	I2S_CONF_RX_RIGHT_FIRST = 0x200
	// Position of TX_RIGHT_FIRST field.
	I2S_CONF_TX_RIGHT_FIRST_Pos = 0x8
	// Bit mask of TX_RIGHT_FIRST field.
	I2S_CONF_TX_RIGHT_FIRST_Msk = 0x100
	// Bit TX_RIGHT_FIRST.
	I2S_CONF_TX_RIGHT_FIRST = 0x100
	// Position of RX_SLAVE_MOD field.
	I2S_CONF_RX_SLAVE_MOD_Pos = 0x7
	// Bit mask of RX_SLAVE_MOD field.
	I2S_CONF_RX_SLAVE_MOD_Msk = 0x80
	// Bit RX_SLAVE_MOD.
	I2S_CONF_RX_SLAVE_MOD = 0x80
	// Position of TX_SLAVE_MOD field.
	I2S_CONF_TX_SLAVE_MOD_Pos = 0x6
	// Bit mask of TX_SLAVE_MOD field.
	I2S_CONF_TX_SLAVE_MOD_Msk = 0x40
	// Bit TX_SLAVE_MOD.
	I2S_CONF_TX_SLAVE_MOD = 0x40
	// Position of RX_START field.
	I2S_CONF_RX_START_Pos = 0x5
	// Bit mask of RX_START field.
	I2S_CONF_RX_START_Msk = 0x20
	// Bit RX_START.
	I2S_CONF_RX_START = 0x20
	// Position of TX_START field.
	I2S_CONF_TX_START_Pos = 0x4
	// Bit mask of TX_START field.
	I2S_CONF_TX_START_Msk = 0x10
	// Bit TX_START.
	I2S_CONF_TX_START = 0x10
	// Position of RX_FIFO_RESET field.
	I2S_CONF_RX_FIFO_RESET_Pos = 0x3
	// Bit mask of RX_FIFO_RESET field.
	I2S_CONF_RX_FIFO_RESET_Msk = 0x8
	// Bit RX_FIFO_RESET.
	I2S_CONF_RX_FIFO_RESET = 0x8
	// Position of TX_FIFO_RESET field.
	I2S_CONF_TX_FIFO_RESET_Pos = 0x2
	// Bit mask of TX_FIFO_RESET field.
	I2S_CONF_TX_FIFO_RESET_Msk = 0x4
	// Bit TX_FIFO_RESET.
	I2S_CONF_TX_FIFO_RESET = 0x4
	// Position of RX_RESET field.
	I2S_CONF_RX_RESET_Pos = 0x1
	// Bit mask of RX_RESET field.
	I2S_CONF_RX_RESET_Msk = 0x2
	// Bit RX_RESET.
	I2S_CONF_RX_RESET = 0x2
	// Position of TX_RESET field.
	I2S_CONF_TX_RESET_Pos = 0x0
	// Bit mask of TX_RESET field.
	I2S_CONF_TX_RESET_Msk = 0x1
	// Bit TX_RESET.
	I2S_CONF_TX_RESET = 0x1

	// INT_RAW: I2S_INT_RAW
	// Position of OUT_TOTAL_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_TOTAL_EOF_INT_RAW_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_RAW.
	I2S_INT_RAW_OUT_TOTAL_EOF_INT_RAW = 0x10000
	// Position of IN_DSCR_EMPTY_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_EMPTY_INT_RAW_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_RAW.
	I2S_INT_RAW_IN_DSCR_EMPTY_INT_RAW = 0x8000
	// Position of OUT_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_OUT_DSCR_ERR_INT_RAW_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_OUT_DSCR_ERR_INT_RAW_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_RAW.
	I2S_INT_RAW_OUT_DSCR_ERR_INT_RAW = 0x4000
	// Position of IN_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_ERR_INT_RAW_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_RAW field.
	I2S_INT_RAW_IN_DSCR_ERR_INT_RAW_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_RAW.
	I2S_INT_RAW_IN_DSCR_ERR_INT_RAW = 0x2000
	// Position of OUT_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_EOF_INT_RAW_Pos = 0xc
	// Bit mask of OUT_EOF_INT_RAW field.
	I2S_INT_RAW_OUT_EOF_INT_RAW_Msk = 0x1000
	// Bit OUT_EOF_INT_RAW.
	I2S_INT_RAW_OUT_EOF_INT_RAW = 0x1000
	// Position of OUT_DONE_INT_RAW field.
	I2S_INT_RAW_OUT_DONE_INT_RAW_Pos = 0xb
	// Bit mask of OUT_DONE_INT_RAW field.
	I2S_INT_RAW_OUT_DONE_INT_RAW_Msk = 0x800
	// Bit OUT_DONE_INT_RAW.
	I2S_INT_RAW_OUT_DONE_INT_RAW = 0x800
	// Position of IN_ERR_EOF_INT_RAW field.
	I2S_INT_RAW_IN_ERR_EOF_INT_RAW_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_RAW field.
	I2S_INT_RAW_IN_ERR_EOF_INT_RAW_Msk = 0x400
	// Bit IN_ERR_EOF_INT_RAW.
	I2S_INT_RAW_IN_ERR_EOF_INT_RAW = 0x400
	// Position of IN_SUC_EOF_INT_RAW field.
	I2S_INT_RAW_IN_SUC_EOF_INT_RAW_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_RAW field.
	I2S_INT_RAW_IN_SUC_EOF_INT_RAW_Msk = 0x200
	// Bit IN_SUC_EOF_INT_RAW.
	I2S_INT_RAW_IN_SUC_EOF_INT_RAW = 0x200
	// Position of IN_DONE_INT_RAW field.
	I2S_INT_RAW_IN_DONE_INT_RAW_Pos = 0x8
	// Bit mask of IN_DONE_INT_RAW field.
	I2S_INT_RAW_IN_DONE_INT_RAW_Msk = 0x100
	// Bit IN_DONE_INT_RAW.
	I2S_INT_RAW_IN_DONE_INT_RAW = 0x100
	// Position of TX_HUNG_INT_RAW field.
	I2S_INT_RAW_TX_HUNG_INT_RAW_Pos = 0x7
	// Bit mask of TX_HUNG_INT_RAW field.
	I2S_INT_RAW_TX_HUNG_INT_RAW_Msk = 0x80
	// Bit TX_HUNG_INT_RAW.
	I2S_INT_RAW_TX_HUNG_INT_RAW = 0x80
	// Position of RX_HUNG_INT_RAW field.
	I2S_INT_RAW_RX_HUNG_INT_RAW_Pos = 0x6
	// Bit mask of RX_HUNG_INT_RAW field.
	I2S_INT_RAW_RX_HUNG_INT_RAW_Msk = 0x40
	// Bit RX_HUNG_INT_RAW.
	I2S_INT_RAW_RX_HUNG_INT_RAW = 0x40
	// Position of TX_REMPTY_INT_RAW field.
	I2S_INT_RAW_TX_REMPTY_INT_RAW_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_RAW field.
	I2S_INT_RAW_TX_REMPTY_INT_RAW_Msk = 0x20
	// Bit TX_REMPTY_INT_RAW.
	I2S_INT_RAW_TX_REMPTY_INT_RAW = 0x20
	// Position of TX_WFULL_INT_RAW field.
	I2S_INT_RAW_TX_WFULL_INT_RAW_Pos = 0x4
	// Bit mask of TX_WFULL_INT_RAW field.
	I2S_INT_RAW_TX_WFULL_INT_RAW_Msk = 0x10
	// Bit TX_WFULL_INT_RAW.
	I2S_INT_RAW_TX_WFULL_INT_RAW = 0x10
	// Position of RX_REMPTY_INT_RAW field.
	I2S_INT_RAW_RX_REMPTY_INT_RAW_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_RAW field.
	I2S_INT_RAW_RX_REMPTY_INT_RAW_Msk = 0x8
	// Bit RX_REMPTY_INT_RAW.
	I2S_INT_RAW_RX_REMPTY_INT_RAW = 0x8
	// Position of RX_WFULL_INT_RAW field.
	I2S_INT_RAW_RX_WFULL_INT_RAW_Pos = 0x2
	// Bit mask of RX_WFULL_INT_RAW field.
	I2S_INT_RAW_RX_WFULL_INT_RAW_Msk = 0x4
	// Bit RX_WFULL_INT_RAW.
	I2S_INT_RAW_RX_WFULL_INT_RAW = 0x4
	// Position of TX_PUT_DATA_INT_RAW field.
	I2S_INT_RAW_TX_PUT_DATA_INT_RAW_Pos = 0x1
	// Bit mask of TX_PUT_DATA_INT_RAW field.
	I2S_INT_RAW_TX_PUT_DATA_INT_RAW_Msk = 0x2
	// Bit TX_PUT_DATA_INT_RAW.
	I2S_INT_RAW_TX_PUT_DATA_INT_RAW = 0x2
	// Position of RX_TAKE_DATA_INT_RAW field.
	I2S_INT_RAW_RX_TAKE_DATA_INT_RAW_Pos = 0x0
	// Bit mask of RX_TAKE_DATA_INT_RAW field.
	I2S_INT_RAW_RX_TAKE_DATA_INT_RAW_Msk = 0x1
	// Bit RX_TAKE_DATA_INT_RAW.
	I2S_INT_RAW_RX_TAKE_DATA_INT_RAW = 0x1

	// INT_ST: I2S_INT_ST
	// Position of OUT_TOTAL_EOF_INT_ST field.
	I2S_INT_ST_OUT_TOTAL_EOF_INT_ST_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_ST field.
	I2S_INT_ST_OUT_TOTAL_EOF_INT_ST_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_ST.
	I2S_INT_ST_OUT_TOTAL_EOF_INT_ST = 0x10000
	// Position of IN_DSCR_EMPTY_INT_ST field.
	I2S_INT_ST_IN_DSCR_EMPTY_INT_ST_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_ST field.
	I2S_INT_ST_IN_DSCR_EMPTY_INT_ST_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_ST.
	I2S_INT_ST_IN_DSCR_EMPTY_INT_ST = 0x8000
	// Position of OUT_DSCR_ERR_INT_ST field.
	I2S_INT_ST_OUT_DSCR_ERR_INT_ST_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_ST field.
	I2S_INT_ST_OUT_DSCR_ERR_INT_ST_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_ST.
	I2S_INT_ST_OUT_DSCR_ERR_INT_ST = 0x4000
	// Position of IN_DSCR_ERR_INT_ST field.
	I2S_INT_ST_IN_DSCR_ERR_INT_ST_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_ST field.
	I2S_INT_ST_IN_DSCR_ERR_INT_ST_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_ST.
	I2S_INT_ST_IN_DSCR_ERR_INT_ST = 0x2000
	// Position of OUT_EOF_INT_ST field.
	I2S_INT_ST_OUT_EOF_INT_ST_Pos = 0xc
	// Bit mask of OUT_EOF_INT_ST field.
	I2S_INT_ST_OUT_EOF_INT_ST_Msk = 0x1000
	// Bit OUT_EOF_INT_ST.
	I2S_INT_ST_OUT_EOF_INT_ST = 0x1000
	// Position of OUT_DONE_INT_ST field.
	I2S_INT_ST_OUT_DONE_INT_ST_Pos = 0xb
	// Bit mask of OUT_DONE_INT_ST field.
	I2S_INT_ST_OUT_DONE_INT_ST_Msk = 0x800
	// Bit OUT_DONE_INT_ST.
	I2S_INT_ST_OUT_DONE_INT_ST = 0x800
	// Position of IN_ERR_EOF_INT_ST field.
	I2S_INT_ST_IN_ERR_EOF_INT_ST_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_ST field.
	I2S_INT_ST_IN_ERR_EOF_INT_ST_Msk = 0x400
	// Bit IN_ERR_EOF_INT_ST.
	I2S_INT_ST_IN_ERR_EOF_INT_ST = 0x400
	// Position of IN_SUC_EOF_INT_ST field.
	I2S_INT_ST_IN_SUC_EOF_INT_ST_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_ST field.
	I2S_INT_ST_IN_SUC_EOF_INT_ST_Msk = 0x200
	// Bit IN_SUC_EOF_INT_ST.
	I2S_INT_ST_IN_SUC_EOF_INT_ST = 0x200
	// Position of IN_DONE_INT_ST field.
	I2S_INT_ST_IN_DONE_INT_ST_Pos = 0x8
	// Bit mask of IN_DONE_INT_ST field.
	I2S_INT_ST_IN_DONE_INT_ST_Msk = 0x100
	// Bit IN_DONE_INT_ST.
	I2S_INT_ST_IN_DONE_INT_ST = 0x100
	// Position of TX_HUNG_INT_ST field.
	I2S_INT_ST_TX_HUNG_INT_ST_Pos = 0x7
	// Bit mask of TX_HUNG_INT_ST field.
	I2S_INT_ST_TX_HUNG_INT_ST_Msk = 0x80
	// Bit TX_HUNG_INT_ST.
	I2S_INT_ST_TX_HUNG_INT_ST = 0x80
	// Position of RX_HUNG_INT_ST field.
	I2S_INT_ST_RX_HUNG_INT_ST_Pos = 0x6
	// Bit mask of RX_HUNG_INT_ST field.
	I2S_INT_ST_RX_HUNG_INT_ST_Msk = 0x40
	// Bit RX_HUNG_INT_ST.
	I2S_INT_ST_RX_HUNG_INT_ST = 0x40
	// Position of TX_REMPTY_INT_ST field.
	I2S_INT_ST_TX_REMPTY_INT_ST_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_ST field.
	I2S_INT_ST_TX_REMPTY_INT_ST_Msk = 0x20
	// Bit TX_REMPTY_INT_ST.
	I2S_INT_ST_TX_REMPTY_INT_ST = 0x20
	// Position of TX_WFULL_INT_ST field.
	I2S_INT_ST_TX_WFULL_INT_ST_Pos = 0x4
	// Bit mask of TX_WFULL_INT_ST field.
	I2S_INT_ST_TX_WFULL_INT_ST_Msk = 0x10
	// Bit TX_WFULL_INT_ST.
	I2S_INT_ST_TX_WFULL_INT_ST = 0x10
	// Position of RX_REMPTY_INT_ST field.
	I2S_INT_ST_RX_REMPTY_INT_ST_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_ST field.
	I2S_INT_ST_RX_REMPTY_INT_ST_Msk = 0x8
	// Bit RX_REMPTY_INT_ST.
	I2S_INT_ST_RX_REMPTY_INT_ST = 0x8
	// Position of RX_WFULL_INT_ST field.
	I2S_INT_ST_RX_WFULL_INT_ST_Pos = 0x2
	// Bit mask of RX_WFULL_INT_ST field.
	I2S_INT_ST_RX_WFULL_INT_ST_Msk = 0x4
	// Bit RX_WFULL_INT_ST.
	I2S_INT_ST_RX_WFULL_INT_ST = 0x4
	// Position of TX_PUT_DATA_INT_ST field.
	I2S_INT_ST_TX_PUT_DATA_INT_ST_Pos = 0x1
	// Bit mask of TX_PUT_DATA_INT_ST field.
	I2S_INT_ST_TX_PUT_DATA_INT_ST_Msk = 0x2
	// Bit TX_PUT_DATA_INT_ST.
	I2S_INT_ST_TX_PUT_DATA_INT_ST = 0x2
	// Position of RX_TAKE_DATA_INT_ST field.
	I2S_INT_ST_RX_TAKE_DATA_INT_ST_Pos = 0x0
	// Bit mask of RX_TAKE_DATA_INT_ST field.
	I2S_INT_ST_RX_TAKE_DATA_INT_ST_Msk = 0x1
	// Bit RX_TAKE_DATA_INT_ST.
	I2S_INT_ST_RX_TAKE_DATA_INT_ST = 0x1

	// INT_ENA: I2S_INT_ENA
	// Position of OUT_TOTAL_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_TOTAL_EOF_INT_ENA_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_ENA.
	I2S_INT_ENA_OUT_TOTAL_EOF_INT_ENA = 0x10000
	// Position of IN_DSCR_EMPTY_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_EMPTY_INT_ENA_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_ENA.
	I2S_INT_ENA_IN_DSCR_EMPTY_INT_ENA = 0x8000
	// Position of OUT_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_OUT_DSCR_ERR_INT_ENA_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_OUT_DSCR_ERR_INT_ENA_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_ENA.
	I2S_INT_ENA_OUT_DSCR_ERR_INT_ENA = 0x4000
	// Position of IN_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_ERR_INT_ENA_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_ENA field.
	I2S_INT_ENA_IN_DSCR_ERR_INT_ENA_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_ENA.
	I2S_INT_ENA_IN_DSCR_ERR_INT_ENA = 0x2000
	// Position of OUT_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_EOF_INT_ENA_Pos = 0xc
	// Bit mask of OUT_EOF_INT_ENA field.
	I2S_INT_ENA_OUT_EOF_INT_ENA_Msk = 0x1000
	// Bit OUT_EOF_INT_ENA.
	I2S_INT_ENA_OUT_EOF_INT_ENA = 0x1000
	// Position of OUT_DONE_INT_ENA field.
	I2S_INT_ENA_OUT_DONE_INT_ENA_Pos = 0xb
	// Bit mask of OUT_DONE_INT_ENA field.
	I2S_INT_ENA_OUT_DONE_INT_ENA_Msk = 0x800
	// Bit OUT_DONE_INT_ENA.
	I2S_INT_ENA_OUT_DONE_INT_ENA = 0x800
	// Position of IN_ERR_EOF_INT_ENA field.
	I2S_INT_ENA_IN_ERR_EOF_INT_ENA_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_ENA field.
	I2S_INT_ENA_IN_ERR_EOF_INT_ENA_Msk = 0x400
	// Bit IN_ERR_EOF_INT_ENA.
	I2S_INT_ENA_IN_ERR_EOF_INT_ENA = 0x400
	// Position of IN_SUC_EOF_INT_ENA field.
	I2S_INT_ENA_IN_SUC_EOF_INT_ENA_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_ENA field.
	I2S_INT_ENA_IN_SUC_EOF_INT_ENA_Msk = 0x200
	// Bit IN_SUC_EOF_INT_ENA.
	I2S_INT_ENA_IN_SUC_EOF_INT_ENA = 0x200
	// Position of IN_DONE_INT_ENA field.
	I2S_INT_ENA_IN_DONE_INT_ENA_Pos = 0x8
	// Bit mask of IN_DONE_INT_ENA field.
	I2S_INT_ENA_IN_DONE_INT_ENA_Msk = 0x100
	// Bit IN_DONE_INT_ENA.
	I2S_INT_ENA_IN_DONE_INT_ENA = 0x100
	// Position of TX_HUNG_INT_ENA field.
	I2S_INT_ENA_TX_HUNG_INT_ENA_Pos = 0x7
	// Bit mask of TX_HUNG_INT_ENA field.
	I2S_INT_ENA_TX_HUNG_INT_ENA_Msk = 0x80
	// Bit TX_HUNG_INT_ENA.
	I2S_INT_ENA_TX_HUNG_INT_ENA = 0x80
	// Position of RX_HUNG_INT_ENA field.
	I2S_INT_ENA_RX_HUNG_INT_ENA_Pos = 0x6
	// Bit mask of RX_HUNG_INT_ENA field.
	I2S_INT_ENA_RX_HUNG_INT_ENA_Msk = 0x40
	// Bit RX_HUNG_INT_ENA.
	I2S_INT_ENA_RX_HUNG_INT_ENA = 0x40
	// Position of TX_REMPTY_INT_ENA field.
	I2S_INT_ENA_TX_REMPTY_INT_ENA_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_ENA field.
	I2S_INT_ENA_TX_REMPTY_INT_ENA_Msk = 0x20
	// Bit TX_REMPTY_INT_ENA.
	I2S_INT_ENA_TX_REMPTY_INT_ENA = 0x20
	// Position of TX_WFULL_INT_ENA field.
	I2S_INT_ENA_TX_WFULL_INT_ENA_Pos = 0x4
	// Bit mask of TX_WFULL_INT_ENA field.
	I2S_INT_ENA_TX_WFULL_INT_ENA_Msk = 0x10
	// Bit TX_WFULL_INT_ENA.
	I2S_INT_ENA_TX_WFULL_INT_ENA = 0x10
	// Position of RX_REMPTY_INT_ENA field.
	I2S_INT_ENA_RX_REMPTY_INT_ENA_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_ENA field.
	I2S_INT_ENA_RX_REMPTY_INT_ENA_Msk = 0x8
	// Bit RX_REMPTY_INT_ENA.
	I2S_INT_ENA_RX_REMPTY_INT_ENA = 0x8
	// Position of RX_WFULL_INT_ENA field.
	I2S_INT_ENA_RX_WFULL_INT_ENA_Pos = 0x2
	// Bit mask of RX_WFULL_INT_ENA field.
	I2S_INT_ENA_RX_WFULL_INT_ENA_Msk = 0x4
	// Bit RX_WFULL_INT_ENA.
	I2S_INT_ENA_RX_WFULL_INT_ENA = 0x4
	// Position of TX_PUT_DATA_INT_ENA field.
	I2S_INT_ENA_TX_PUT_DATA_INT_ENA_Pos = 0x1
	// Bit mask of TX_PUT_DATA_INT_ENA field.
	I2S_INT_ENA_TX_PUT_DATA_INT_ENA_Msk = 0x2
	// Bit TX_PUT_DATA_INT_ENA.
	I2S_INT_ENA_TX_PUT_DATA_INT_ENA = 0x2
	// Position of RX_TAKE_DATA_INT_ENA field.
	I2S_INT_ENA_RX_TAKE_DATA_INT_ENA_Pos = 0x0
	// Bit mask of RX_TAKE_DATA_INT_ENA field.
	I2S_INT_ENA_RX_TAKE_DATA_INT_ENA_Msk = 0x1
	// Bit RX_TAKE_DATA_INT_ENA.
	I2S_INT_ENA_RX_TAKE_DATA_INT_ENA = 0x1

	// INT_CLR: I2S_INT_CLR
	// Position of OUT_TOTAL_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Pos = 0x10
	// Bit mask of OUT_TOTAL_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_TOTAL_EOF_INT_CLR_Msk = 0x10000
	// Bit OUT_TOTAL_EOF_INT_CLR.
	I2S_INT_CLR_OUT_TOTAL_EOF_INT_CLR = 0x10000
	// Position of IN_DSCR_EMPTY_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Pos = 0xf
	// Bit mask of IN_DSCR_EMPTY_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_EMPTY_INT_CLR_Msk = 0x8000
	// Bit IN_DSCR_EMPTY_INT_CLR.
	I2S_INT_CLR_IN_DSCR_EMPTY_INT_CLR = 0x8000
	// Position of OUT_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_OUT_DSCR_ERR_INT_CLR_Pos = 0xe
	// Bit mask of OUT_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_OUT_DSCR_ERR_INT_CLR_Msk = 0x4000
	// Bit OUT_DSCR_ERR_INT_CLR.
	I2S_INT_CLR_OUT_DSCR_ERR_INT_CLR = 0x4000
	// Position of IN_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_ERR_INT_CLR_Pos = 0xd
	// Bit mask of IN_DSCR_ERR_INT_CLR field.
	I2S_INT_CLR_IN_DSCR_ERR_INT_CLR_Msk = 0x2000
	// Bit IN_DSCR_ERR_INT_CLR.
	I2S_INT_CLR_IN_DSCR_ERR_INT_CLR = 0x2000
	// Position of OUT_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_EOF_INT_CLR_Pos = 0xc
	// Bit mask of OUT_EOF_INT_CLR field.
	I2S_INT_CLR_OUT_EOF_INT_CLR_Msk = 0x1000
	// Bit OUT_EOF_INT_CLR.
	I2S_INT_CLR_OUT_EOF_INT_CLR = 0x1000
	// Position of OUT_DONE_INT_CLR field.
	I2S_INT_CLR_OUT_DONE_INT_CLR_Pos = 0xb
	// Bit mask of OUT_DONE_INT_CLR field.
	I2S_INT_CLR_OUT_DONE_INT_CLR_Msk = 0x800
	// Bit OUT_DONE_INT_CLR.
	I2S_INT_CLR_OUT_DONE_INT_CLR = 0x800
	// Position of IN_ERR_EOF_INT_CLR field.
	I2S_INT_CLR_IN_ERR_EOF_INT_CLR_Pos = 0xa
	// Bit mask of IN_ERR_EOF_INT_CLR field.
	I2S_INT_CLR_IN_ERR_EOF_INT_CLR_Msk = 0x400
	// Bit IN_ERR_EOF_INT_CLR.
	I2S_INT_CLR_IN_ERR_EOF_INT_CLR = 0x400
	// Position of IN_SUC_EOF_INT_CLR field.
	I2S_INT_CLR_IN_SUC_EOF_INT_CLR_Pos = 0x9
	// Bit mask of IN_SUC_EOF_INT_CLR field.
	I2S_INT_CLR_IN_SUC_EOF_INT_CLR_Msk = 0x200
	// Bit IN_SUC_EOF_INT_CLR.
	I2S_INT_CLR_IN_SUC_EOF_INT_CLR = 0x200
	// Position of IN_DONE_INT_CLR field.
	I2S_INT_CLR_IN_DONE_INT_CLR_Pos = 0x8
	// Bit mask of IN_DONE_INT_CLR field.
	I2S_INT_CLR_IN_DONE_INT_CLR_Msk = 0x100
	// Bit IN_DONE_INT_CLR.
	I2S_INT_CLR_IN_DONE_INT_CLR = 0x100
	// Position of TX_HUNG_INT_CLR field.
	I2S_INT_CLR_TX_HUNG_INT_CLR_Pos = 0x7
	// Bit mask of TX_HUNG_INT_CLR field.
	I2S_INT_CLR_TX_HUNG_INT_CLR_Msk = 0x80
	// Bit TX_HUNG_INT_CLR.
	I2S_INT_CLR_TX_HUNG_INT_CLR = 0x80
	// Position of RX_HUNG_INT_CLR field.
	I2S_INT_CLR_RX_HUNG_INT_CLR_Pos = 0x6
	// Bit mask of RX_HUNG_INT_CLR field.
	I2S_INT_CLR_RX_HUNG_INT_CLR_Msk = 0x40
	// Bit RX_HUNG_INT_CLR.
	I2S_INT_CLR_RX_HUNG_INT_CLR = 0x40
	// Position of TX_REMPTY_INT_CLR field.
	I2S_INT_CLR_TX_REMPTY_INT_CLR_Pos = 0x5
	// Bit mask of TX_REMPTY_INT_CLR field.
	I2S_INT_CLR_TX_REMPTY_INT_CLR_Msk = 0x20
	// Bit TX_REMPTY_INT_CLR.
	I2S_INT_CLR_TX_REMPTY_INT_CLR = 0x20
	// Position of TX_WFULL_INT_CLR field.
	I2S_INT_CLR_TX_WFULL_INT_CLR_Pos = 0x4
	// Bit mask of TX_WFULL_INT_CLR field.
	I2S_INT_CLR_TX_WFULL_INT_CLR_Msk = 0x10
	// Bit TX_WFULL_INT_CLR.
	I2S_INT_CLR_TX_WFULL_INT_CLR = 0x10
	// Position of RX_REMPTY_INT_CLR field.
	I2S_INT_CLR_RX_REMPTY_INT_CLR_Pos = 0x3
	// Bit mask of RX_REMPTY_INT_CLR field.
	I2S_INT_CLR_RX_REMPTY_INT_CLR_Msk = 0x8
	// Bit RX_REMPTY_INT_CLR.
	I2S_INT_CLR_RX_REMPTY_INT_CLR = 0x8
	// Position of RX_WFULL_INT_CLR field.
	I2S_INT_CLR_RX_WFULL_INT_CLR_Pos = 0x2
	// Bit mask of RX_WFULL_INT_CLR field.
	I2S_INT_CLR_RX_WFULL_INT_CLR_Msk = 0x4
	// Bit RX_WFULL_INT_CLR.
	I2S_INT_CLR_RX_WFULL_INT_CLR = 0x4
	// Position of PUT_DATA_INT_CLR field.
	I2S_INT_CLR_PUT_DATA_INT_CLR_Pos = 0x1
	// Bit mask of PUT_DATA_INT_CLR field.
	I2S_INT_CLR_PUT_DATA_INT_CLR_Msk = 0x2
	// Bit PUT_DATA_INT_CLR.
	I2S_INT_CLR_PUT_DATA_INT_CLR = 0x2
	// Position of TAKE_DATA_INT_CLR field.
	I2S_INT_CLR_TAKE_DATA_INT_CLR_Pos = 0x0
	// Bit mask of TAKE_DATA_INT_CLR field.
	I2S_INT_CLR_TAKE_DATA_INT_CLR_Msk = 0x1
	// Bit TAKE_DATA_INT_CLR.
	I2S_INT_CLR_TAKE_DATA_INT_CLR = 0x1

	// TIMING: I2S_TIMING
	// Position of TX_BCK_IN_INV field.
	I2S_TIMING_TX_BCK_IN_INV_Pos = 0x18
	// Bit mask of TX_BCK_IN_INV field.
	I2S_TIMING_TX_BCK_IN_INV_Msk = 0x1000000
	// Bit TX_BCK_IN_INV.
	I2S_TIMING_TX_BCK_IN_INV = 0x1000000
	// Position of DATA_ENABLE_DELAY field.
	I2S_TIMING_DATA_ENABLE_DELAY_Pos = 0x16
	// Bit mask of DATA_ENABLE_DELAY field.
	I2S_TIMING_DATA_ENABLE_DELAY_Msk = 0xc00000
	// Position of RX_DSYNC_SW field.
	I2S_TIMING_RX_DSYNC_SW_Pos = 0x15
	// Bit mask of RX_DSYNC_SW field.
	I2S_TIMING_RX_DSYNC_SW_Msk = 0x200000
	// Bit RX_DSYNC_SW.
	I2S_TIMING_RX_DSYNC_SW = 0x200000
	// Position of TX_DSYNC_SW field.
	I2S_TIMING_TX_DSYNC_SW_Pos = 0x14
	// Bit mask of TX_DSYNC_SW field.
	I2S_TIMING_TX_DSYNC_SW_Msk = 0x100000
	// Bit TX_DSYNC_SW.
	I2S_TIMING_TX_DSYNC_SW = 0x100000
	// Position of RX_BCK_OUT_DELAY field.
	I2S_TIMING_RX_BCK_OUT_DELAY_Pos = 0x12
	// Bit mask of RX_BCK_OUT_DELAY field.
	I2S_TIMING_RX_BCK_OUT_DELAY_Msk = 0xc0000
	// Position of RX_WS_OUT_DELAY field.
	I2S_TIMING_RX_WS_OUT_DELAY_Pos = 0x10
	// Bit mask of RX_WS_OUT_DELAY field.
	I2S_TIMING_RX_WS_OUT_DELAY_Msk = 0x30000
	// Position of TX_SD_OUT_DELAY field.
	I2S_TIMING_TX_SD_OUT_DELAY_Pos = 0xe
	// Bit mask of TX_SD_OUT_DELAY field.
	I2S_TIMING_TX_SD_OUT_DELAY_Msk = 0xc000
	// Position of TX_WS_OUT_DELAY field.
	I2S_TIMING_TX_WS_OUT_DELAY_Pos = 0xc
	// Bit mask of TX_WS_OUT_DELAY field.
	I2S_TIMING_TX_WS_OUT_DELAY_Msk = 0x3000
	// Position of TX_BCK_OUT_DELAY field.
	I2S_TIMING_TX_BCK_OUT_DELAY_Pos = 0xa
	// Bit mask of TX_BCK_OUT_DELAY field.
	I2S_TIMING_TX_BCK_OUT_DELAY_Msk = 0xc00
	// Position of RX_SD_IN_DELAY field.
	I2S_TIMING_RX_SD_IN_DELAY_Pos = 0x8
	// Bit mask of RX_SD_IN_DELAY field.
	I2S_TIMING_RX_SD_IN_DELAY_Msk = 0x300
	// Position of RX_WS_IN_DELAY field.
	I2S_TIMING_RX_WS_IN_DELAY_Pos = 0x6
	// Bit mask of RX_WS_IN_DELAY field.
	I2S_TIMING_RX_WS_IN_DELAY_Msk = 0xc0
	// Position of RX_BCK_IN_DELAY field.
	I2S_TIMING_RX_BCK_IN_DELAY_Pos = 0x4
	// Bit mask of RX_BCK_IN_DELAY field.
	I2S_TIMING_RX_BCK_IN_DELAY_Msk = 0x30
	// Position of TX_WS_IN_DELAY field.
	I2S_TIMING_TX_WS_IN_DELAY_Pos = 0x2
	// Bit mask of TX_WS_IN_DELAY field.
	I2S_TIMING_TX_WS_IN_DELAY_Msk = 0xc
	// Position of TX_BCK_IN_DELAY field.
	I2S_TIMING_TX_BCK_IN_DELAY_Pos = 0x0
	// Bit mask of TX_BCK_IN_DELAY field.
	I2S_TIMING_TX_BCK_IN_DELAY_Msk = 0x3

	// FIFO_CONF: I2S_FIFO_CONF
	// Position of RX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_RX_FIFO_MOD_FORCE_EN_Pos = 0x14
	// Bit mask of RX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_RX_FIFO_MOD_FORCE_EN_Msk = 0x100000
	// Bit RX_FIFO_MOD_FORCE_EN.
	I2S_FIFO_CONF_RX_FIFO_MOD_FORCE_EN = 0x100000
	// Position of TX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_TX_FIFO_MOD_FORCE_EN_Pos = 0x13
	// Bit mask of TX_FIFO_MOD_FORCE_EN field.
	I2S_FIFO_CONF_TX_FIFO_MOD_FORCE_EN_Msk = 0x80000
	// Bit TX_FIFO_MOD_FORCE_EN.
	I2S_FIFO_CONF_TX_FIFO_MOD_FORCE_EN = 0x80000
	// Position of RX_FIFO_MOD field.
	I2S_FIFO_CONF_RX_FIFO_MOD_Pos = 0x10
	// Bit mask of RX_FIFO_MOD field.
	I2S_FIFO_CONF_RX_FIFO_MOD_Msk = 0x70000
	// Position of TX_FIFO_MOD field.
	I2S_FIFO_CONF_TX_FIFO_MOD_Pos = 0xd
	// Bit mask of TX_FIFO_MOD field.
	I2S_FIFO_CONF_TX_FIFO_MOD_Msk = 0xe000
	// Position of DSCR_EN field.
	I2S_FIFO_CONF_DSCR_EN_Pos = 0xc
	// Bit mask of DSCR_EN field.
	I2S_FIFO_CONF_DSCR_EN_Msk = 0x1000
	// Bit DSCR_EN.
	I2S_FIFO_CONF_DSCR_EN = 0x1000
	// Position of TX_DATA_NUM field.
	I2S_FIFO_CONF_TX_DATA_NUM_Pos = 0x6
	// Bit mask of TX_DATA_NUM field.
	I2S_FIFO_CONF_TX_DATA_NUM_Msk = 0xfc0
	// Position of RX_DATA_NUM field.
	I2S_FIFO_CONF_RX_DATA_NUM_Pos = 0x0
	// Bit mask of RX_DATA_NUM field.
	I2S_FIFO_CONF_RX_DATA_NUM_Msk = 0x3f

	// RXEOF_NUM: I2S_RXEOF_NUM
	// Position of RX_EOF_NUM field.
	I2S_RXEOF_NUM_RX_EOF_NUM_Pos = 0x0
	// Bit mask of RX_EOF_NUM field.
	I2S_RXEOF_NUM_RX_EOF_NUM_Msk = 0xffffffff

	// CONF_SIGLE_DATA: I2S_CONF_SIGLE_DATA
	// Position of SIGLE_DATA field.
	I2S_CONF_SIGLE_DATA_SIGLE_DATA_Pos = 0x0
	// Bit mask of SIGLE_DATA field.
	I2S_CONF_SIGLE_DATA_SIGLE_DATA_Msk = 0xffffffff

	// CONF_CHAN: I2S_CONF_CHAN
	// Position of RX_CHAN_MOD field.
	I2S_CONF_CHAN_RX_CHAN_MOD_Pos = 0x3
	// Bit mask of RX_CHAN_MOD field.
	I2S_CONF_CHAN_RX_CHAN_MOD_Msk = 0x18
	// Position of TX_CHAN_MOD field.
	I2S_CONF_CHAN_TX_CHAN_MOD_Pos = 0x0
	// Bit mask of TX_CHAN_MOD field.
	I2S_CONF_CHAN_TX_CHAN_MOD_Msk = 0x7

	// OUT_LINK: I2S_OUT_LINK
	// Position of OUTLINK_PARK field.
	I2S_OUT_LINK_OUTLINK_PARK_Pos = 0x1f
	// Bit mask of OUTLINK_PARK field.
	I2S_OUT_LINK_OUTLINK_PARK_Msk = 0x80000000
	// Bit OUTLINK_PARK.
	I2S_OUT_LINK_OUTLINK_PARK = 0x80000000
	// Position of OUTLINK_RESTART field.
	I2S_OUT_LINK_OUTLINK_RESTART_Pos = 0x1e
	// Bit mask of OUTLINK_RESTART field.
	I2S_OUT_LINK_OUTLINK_RESTART_Msk = 0x40000000
	// Bit OUTLINK_RESTART.
	I2S_OUT_LINK_OUTLINK_RESTART = 0x40000000
	// Position of OUTLINK_START field.
	I2S_OUT_LINK_OUTLINK_START_Pos = 0x1d
	// Bit mask of OUTLINK_START field.
	I2S_OUT_LINK_OUTLINK_START_Msk = 0x20000000
	// Bit OUTLINK_START.
	I2S_OUT_LINK_OUTLINK_START = 0x20000000
	// Position of OUTLINK_STOP field.
	I2S_OUT_LINK_OUTLINK_STOP_Pos = 0x1c
	// Bit mask of OUTLINK_STOP field.
	I2S_OUT_LINK_OUTLINK_STOP_Msk = 0x10000000
	// Bit OUTLINK_STOP.
	I2S_OUT_LINK_OUTLINK_STOP = 0x10000000
	// Position of OUTLINK_ADDR field.
	I2S_OUT_LINK_OUTLINK_ADDR_Pos = 0x0
	// Bit mask of OUTLINK_ADDR field.
	I2S_OUT_LINK_OUTLINK_ADDR_Msk = 0xfffff

	// IN_LINK: I2S_IN_LINK
	// Position of INLINK_PARK field.
	I2S_IN_LINK_INLINK_PARK_Pos = 0x1f
	// Bit mask of INLINK_PARK field.
	I2S_IN_LINK_INLINK_PARK_Msk = 0x80000000
	// Bit INLINK_PARK.
	I2S_IN_LINK_INLINK_PARK = 0x80000000
	// Position of INLINK_RESTART field.
	I2S_IN_LINK_INLINK_RESTART_Pos = 0x1e
	// Bit mask of INLINK_RESTART field.
	I2S_IN_LINK_INLINK_RESTART_Msk = 0x40000000
	// Bit INLINK_RESTART.
	I2S_IN_LINK_INLINK_RESTART = 0x40000000
	// Position of INLINK_START field.
	I2S_IN_LINK_INLINK_START_Pos = 0x1d
	// Bit mask of INLINK_START field.
	I2S_IN_LINK_INLINK_START_Msk = 0x20000000
	// Bit INLINK_START.
	I2S_IN_LINK_INLINK_START = 0x20000000
	// Position of INLINK_STOP field.
	I2S_IN_LINK_INLINK_STOP_Pos = 0x1c
	// Bit mask of INLINK_STOP field.
	I2S_IN_LINK_INLINK_STOP_Msk = 0x10000000
	// Bit INLINK_STOP.
	I2S_IN_LINK_INLINK_STOP = 0x10000000
	// Position of INLINK_ADDR field.
	I2S_IN_LINK_INLINK_ADDR_Pos = 0x0
	// Bit mask of INLINK_ADDR field.
	I2S_IN_LINK_INLINK_ADDR_Msk = 0xfffff

	// OUT_EOF_DES_ADDR: I2S_OUT_EOF_DES_ADDR
	// Position of OUT_EOF_DES_ADDR field.
	I2S_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_DES_ADDR field.
	I2S_OUT_EOF_DES_ADDR_OUT_EOF_DES_ADDR_Msk = 0xffffffff

	// IN_EOF_DES_ADDR: I2S_IN_EOF_DES_ADDR
	// Position of IN_SUC_EOF_DES_ADDR field.
	I2S_IN_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Pos = 0x0
	// Bit mask of IN_SUC_EOF_DES_ADDR field.
	I2S_IN_EOF_DES_ADDR_IN_SUC_EOF_DES_ADDR_Msk = 0xffffffff

	// OUT_EOF_BFR_DES_ADDR: I2S_OUT_EOF_BFR_DES_ADDR
	// Position of OUT_EOF_BFR_DES_ADDR field.
	I2S_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Pos = 0x0
	// Bit mask of OUT_EOF_BFR_DES_ADDR field.
	I2S_OUT_EOF_BFR_DES_ADDR_OUT_EOF_BFR_DES_ADDR_Msk = 0xffffffff

	// AHB_TEST: I2S_AHB_TEST
	// Position of AHB_TESTADDR field.
	I2S_AHB_TEST_AHB_TESTADDR_Pos = 0x4
	// Bit mask of AHB_TESTADDR field.
	I2S_AHB_TEST_AHB_TESTADDR_Msk = 0x30
	// Position of AHB_TESTMODE field.
	I2S_AHB_TEST_AHB_TESTMODE_Pos = 0x0
	// Bit mask of AHB_TESTMODE field.
	I2S_AHB_TEST_AHB_TESTMODE_Msk = 0x7

	// INLINK_DSCR: I2S_INLINK_DSCR
	// Position of INLINK_DSCR field.
	I2S_INLINK_DSCR_INLINK_DSCR_Pos = 0x0
	// Bit mask of INLINK_DSCR field.
	I2S_INLINK_DSCR_INLINK_DSCR_Msk = 0xffffffff

	// INLINK_DSCR_BF0: I2S_INLINK_DSCR_BF0
	// Position of INLINK_DSCR_BF0 field.
	I2S_INLINK_DSCR_BF0_INLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF0 field.
	I2S_INLINK_DSCR_BF0_INLINK_DSCR_BF0_Msk = 0xffffffff

	// INLINK_DSCR_BF1: I2S_INLINK_DSCR_BF1
	// Position of INLINK_DSCR_BF1 field.
	I2S_INLINK_DSCR_BF1_INLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of INLINK_DSCR_BF1 field.
	I2S_INLINK_DSCR_BF1_INLINK_DSCR_BF1_Msk = 0xffffffff

	// OUTLINK_DSCR: I2S_OUTLINK_DSCR
	// Position of OUTLINK_DSCR field.
	I2S_OUTLINK_DSCR_OUTLINK_DSCR_Pos = 0x0
	// Bit mask of OUTLINK_DSCR field.
	I2S_OUTLINK_DSCR_OUTLINK_DSCR_Msk = 0xffffffff

	// OUTLINK_DSCR_BF0: I2S_OUTLINK_DSCR_BF0
	// Position of OUTLINK_DSCR_BF0 field.
	I2S_OUTLINK_DSCR_BF0_OUTLINK_DSCR_BF0_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF0 field.
	I2S_OUTLINK_DSCR_BF0_OUTLINK_DSCR_BF0_Msk = 0xffffffff

	// OUTLINK_DSCR_BF1: I2S_OUTLINK_DSCR_BF1
	// Position of OUTLINK_DSCR_BF1 field.
	I2S_OUTLINK_DSCR_BF1_OUTLINK_DSCR_BF1_Pos = 0x0
	// Bit mask of OUTLINK_DSCR_BF1 field.
	I2S_OUTLINK_DSCR_BF1_OUTLINK_DSCR_BF1_Msk = 0xffffffff

	// LC_CONF: I2S_LC_CONF
	// Position of MEM_TRANS_EN field.
	I2S_LC_CONF_MEM_TRANS_EN_Pos = 0xd
	// Bit mask of MEM_TRANS_EN field.
	I2S_LC_CONF_MEM_TRANS_EN_Msk = 0x2000
	// Bit MEM_TRANS_EN.
	I2S_LC_CONF_MEM_TRANS_EN = 0x2000
	// Position of CHECK_OWNER field.
	I2S_LC_CONF_CHECK_OWNER_Pos = 0xc
	// Bit mask of CHECK_OWNER field.
	I2S_LC_CONF_CHECK_OWNER_Msk = 0x1000
	// Bit CHECK_OWNER.
	I2S_LC_CONF_CHECK_OWNER = 0x1000
	// Position of OUT_DATA_BURST_EN field.
	I2S_LC_CONF_OUT_DATA_BURST_EN_Pos = 0xb
	// Bit mask of OUT_DATA_BURST_EN field.
	I2S_LC_CONF_OUT_DATA_BURST_EN_Msk = 0x800
	// Bit OUT_DATA_BURST_EN.
	I2S_LC_CONF_OUT_DATA_BURST_EN = 0x800
	// Position of INDSCR_BURST_EN field.
	I2S_LC_CONF_INDSCR_BURST_EN_Pos = 0xa
	// Bit mask of INDSCR_BURST_EN field.
	I2S_LC_CONF_INDSCR_BURST_EN_Msk = 0x400
	// Bit INDSCR_BURST_EN.
	I2S_LC_CONF_INDSCR_BURST_EN = 0x400
	// Position of OUTDSCR_BURST_EN field.
	I2S_LC_CONF_OUTDSCR_BURST_EN_Pos = 0x9
	// Bit mask of OUTDSCR_BURST_EN field.
	I2S_LC_CONF_OUTDSCR_BURST_EN_Msk = 0x200
	// Bit OUTDSCR_BURST_EN.
	I2S_LC_CONF_OUTDSCR_BURST_EN = 0x200
	// Position of OUT_EOF_MODE field.
	I2S_LC_CONF_OUT_EOF_MODE_Pos = 0x8
	// Bit mask of OUT_EOF_MODE field.
	I2S_LC_CONF_OUT_EOF_MODE_Msk = 0x100
	// Bit OUT_EOF_MODE.
	I2S_LC_CONF_OUT_EOF_MODE = 0x100
	// Position of OUT_NO_RESTART_CLR field.
	I2S_LC_CONF_OUT_NO_RESTART_CLR_Pos = 0x7
	// Bit mask of OUT_NO_RESTART_CLR field.
	I2S_LC_CONF_OUT_NO_RESTART_CLR_Msk = 0x80
	// Bit OUT_NO_RESTART_CLR.
	I2S_LC_CONF_OUT_NO_RESTART_CLR = 0x80
	// Position of OUT_AUTO_WRBACK field.
	I2S_LC_CONF_OUT_AUTO_WRBACK_Pos = 0x6
	// Bit mask of OUT_AUTO_WRBACK field.
	I2S_LC_CONF_OUT_AUTO_WRBACK_Msk = 0x40
	// Bit OUT_AUTO_WRBACK.
	I2S_LC_CONF_OUT_AUTO_WRBACK = 0x40
	// Position of IN_LOOP_TEST field.
	I2S_LC_CONF_IN_LOOP_TEST_Pos = 0x5
	// Bit mask of IN_LOOP_TEST field.
	I2S_LC_CONF_IN_LOOP_TEST_Msk = 0x20
	// Bit IN_LOOP_TEST.
	I2S_LC_CONF_IN_LOOP_TEST = 0x20
	// Position of OUT_LOOP_TEST field.
	I2S_LC_CONF_OUT_LOOP_TEST_Pos = 0x4
	// Bit mask of OUT_LOOP_TEST field.
	I2S_LC_CONF_OUT_LOOP_TEST_Msk = 0x10
	// Bit OUT_LOOP_TEST.
	I2S_LC_CONF_OUT_LOOP_TEST = 0x10
	// Position of AHBM_RST field.
	I2S_LC_CONF_AHBM_RST_Pos = 0x3
	// Bit mask of AHBM_RST field.
	I2S_LC_CONF_AHBM_RST_Msk = 0x8
	// Bit AHBM_RST.
	I2S_LC_CONF_AHBM_RST = 0x8
	// Position of AHBM_FIFO_RST field.
	I2S_LC_CONF_AHBM_FIFO_RST_Pos = 0x2
	// Bit mask of AHBM_FIFO_RST field.
	I2S_LC_CONF_AHBM_FIFO_RST_Msk = 0x4
	// Bit AHBM_FIFO_RST.
	I2S_LC_CONF_AHBM_FIFO_RST = 0x4
	// Position of OUT_RST field.
	I2S_LC_CONF_OUT_RST_Pos = 0x1
	// Bit mask of OUT_RST field.
	I2S_LC_CONF_OUT_RST_Msk = 0x2
	// Bit OUT_RST.
	I2S_LC_CONF_OUT_RST = 0x2
	// Position of IN_RST field.
	I2S_LC_CONF_IN_RST_Pos = 0x0
	// Bit mask of IN_RST field.
	I2S_LC_CONF_IN_RST_Msk = 0x1
	// Bit IN_RST.
	I2S_LC_CONF_IN_RST = 0x1

	// OUTFIFO_PUSH: I2S_OUTFIFO_PUSH
	// Position of OUTFIFO_PUSH field.
	I2S_OUTFIFO_PUSH_OUTFIFO_PUSH_Pos = 0x10
	// Bit mask of OUTFIFO_PUSH field.
	I2S_OUTFIFO_PUSH_OUTFIFO_PUSH_Msk = 0x10000
	// Bit OUTFIFO_PUSH.
	I2S_OUTFIFO_PUSH_OUTFIFO_PUSH = 0x10000
	// Position of OUTFIFO_WDATA field.
	I2S_OUTFIFO_PUSH_OUTFIFO_WDATA_Pos = 0x0
	// Bit mask of OUTFIFO_WDATA field.
	I2S_OUTFIFO_PUSH_OUTFIFO_WDATA_Msk = 0x1ff

	// INFIFO_POP: I2S_INFIFO_POP
	// Position of INFIFO_POP field.
	I2S_INFIFO_POP_INFIFO_POP_Pos = 0x10
	// Bit mask of INFIFO_POP field.
	I2S_INFIFO_POP_INFIFO_POP_Msk = 0x10000
	// Bit INFIFO_POP.
	I2S_INFIFO_POP_INFIFO_POP = 0x10000
	// Position of INFIFO_RDATA field.
	I2S_INFIFO_POP_INFIFO_RDATA_Pos = 0x0
	// Bit mask of INFIFO_RDATA field.
	I2S_INFIFO_POP_INFIFO_RDATA_Msk = 0xfff

	// LC_STATE0: I2S_LC_STATE0
	// Position of LC_STATE0 field.
	I2S_LC_STATE0_LC_STATE0_Pos = 0x0
	// Bit mask of LC_STATE0 field.
	I2S_LC_STATE0_LC_STATE0_Msk = 0xffffffff

	// LC_STATE1: I2S_LC_STATE1
	// Position of LC_STATE1 field.
	I2S_LC_STATE1_LC_STATE1_Pos = 0x0
	// Bit mask of LC_STATE1 field.
	I2S_LC_STATE1_LC_STATE1_Msk = 0xffffffff

	// LC_HUNG_CONF: I2S_LC_HUNG_CONF
	// Position of LC_FIFO_TIMEOUT_ENA field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA_Pos = 0xb
	// Bit mask of LC_FIFO_TIMEOUT_ENA field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA_Msk = 0x800
	// Bit LC_FIFO_TIMEOUT_ENA.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_ENA = 0x800
	// Position of LC_FIFO_TIMEOUT_SHIFT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT_Pos = 0x8
	// Bit mask of LC_FIFO_TIMEOUT_SHIFT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_SHIFT_Msk = 0x700
	// Position of LC_FIFO_TIMEOUT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_Pos = 0x0
	// Bit mask of LC_FIFO_TIMEOUT field.
	I2S_LC_HUNG_CONF_LC_FIFO_TIMEOUT_Msk = 0xff

	// CVSD_CONF0: I2S_CVSD_CONF0
	// Position of CVSD_Y_MIN field.
	I2S_CVSD_CONF0_CVSD_Y_MIN_Pos = 0x10
	// Bit mask of CVSD_Y_MIN field.
	I2S_CVSD_CONF0_CVSD_Y_MIN_Msk = 0xffff0000
	// Position of CVSD_Y_MAX field.
	I2S_CVSD_CONF0_CVSD_Y_MAX_Pos = 0x0
	// Bit mask of CVSD_Y_MAX field.
	I2S_CVSD_CONF0_CVSD_Y_MAX_Msk = 0xffff

	// CVSD_CONF1: I2S_CVSD_CONF1
	// Position of CVSD_SIGMA_MIN field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MIN_Pos = 0x10
	// Bit mask of CVSD_SIGMA_MIN field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MIN_Msk = 0xffff0000
	// Position of CVSD_SIGMA_MAX field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MAX_Pos = 0x0
	// Bit mask of CVSD_SIGMA_MAX field.
	I2S_CVSD_CONF1_CVSD_SIGMA_MAX_Msk = 0xffff

	// CVSD_CONF2: I2S_CVSD_CONF2
	// Position of CVSD_H field.
	I2S_CVSD_CONF2_CVSD_H_Pos = 0x10
	// Bit mask of CVSD_H field.
	I2S_CVSD_CONF2_CVSD_H_Msk = 0x70000
	// Position of CVSD_BETA field.
	I2S_CVSD_CONF2_CVSD_BETA_Pos = 0x6
	// Bit mask of CVSD_BETA field.
	I2S_CVSD_CONF2_CVSD_BETA_Msk = 0xffc0
	// Position of CVSD_J field.
	I2S_CVSD_CONF2_CVSD_J_Pos = 0x3
	// Bit mask of CVSD_J field.
	I2S_CVSD_CONF2_CVSD_J_Msk = 0x38
	// Position of CVSD_K field.
	I2S_CVSD_CONF2_CVSD_K_Pos = 0x0
	// Bit mask of CVSD_K field.
	I2S_CVSD_CONF2_CVSD_K_Msk = 0x7

	// PLC_CONF0: I2S_PLC_CONF0
	// Position of N_MIN_ERR field.
	I2S_PLC_CONF0_N_MIN_ERR_Pos = 0x19
	// Bit mask of N_MIN_ERR field.
	I2S_PLC_CONF0_N_MIN_ERR_Msk = 0xe000000
	// Position of PACK_LEN_8K field.
	I2S_PLC_CONF0_PACK_LEN_8K_Pos = 0x14
	// Bit mask of PACK_LEN_8K field.
	I2S_PLC_CONF0_PACK_LEN_8K_Msk = 0x1f00000
	// Position of MAX_SLIDE_SAMPLE field.
	I2S_PLC_CONF0_MAX_SLIDE_SAMPLE_Pos = 0xc
	// Bit mask of MAX_SLIDE_SAMPLE field.
	I2S_PLC_CONF0_MAX_SLIDE_SAMPLE_Msk = 0xff000
	// Position of SHIFT_RATE field.
	I2S_PLC_CONF0_SHIFT_RATE_Pos = 0x9
	// Bit mask of SHIFT_RATE field.
	I2S_PLC_CONF0_SHIFT_RATE_Msk = 0xe00
	// Position of N_ERR_SEG field.
	I2S_PLC_CONF0_N_ERR_SEG_Pos = 0x6
	// Bit mask of N_ERR_SEG field.
	I2S_PLC_CONF0_N_ERR_SEG_Msk = 0x1c0
	// Position of GOOD_PACK_MAX field.
	I2S_PLC_CONF0_GOOD_PACK_MAX_Pos = 0x0
	// Bit mask of GOOD_PACK_MAX field.
	I2S_PLC_CONF0_GOOD_PACK_MAX_Msk = 0x3f

	// PLC_CONF1: I2S_PLC_CONF1
	// Position of SLIDE_WIN_LEN field.
	I2S_PLC_CONF1_SLIDE_WIN_LEN_Pos = 0x18
	// Bit mask of SLIDE_WIN_LEN field.
	I2S_PLC_CONF1_SLIDE_WIN_LEN_Msk = 0xff000000
	// Position of BAD_OLA_WIN2_PARA field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_Pos = 0x10
	// Bit mask of BAD_OLA_WIN2_PARA field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_Msk = 0xff0000
	// Position of BAD_OLA_WIN2_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT_Pos = 0xc
	// Bit mask of BAD_OLA_WIN2_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_OLA_WIN2_PARA_SHIFT_Msk = 0xf000
	// Position of BAD_CEF_ATTEN_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT_Pos = 0x8
	// Bit mask of BAD_CEF_ATTEN_PARA_SHIFT field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_SHIFT_Msk = 0xf00
	// Position of BAD_CEF_ATTEN_PARA field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_Pos = 0x0
	// Bit mask of BAD_CEF_ATTEN_PARA field.
	I2S_PLC_CONF1_BAD_CEF_ATTEN_PARA_Msk = 0xff

	// PLC_CONF2: I2S_PLC_CONF2
	// Position of MIN_PERIOD field.
	I2S_PLC_CONF2_MIN_PERIOD_Pos = 0x2
	// Bit mask of MIN_PERIOD field.
	I2S_PLC_CONF2_MIN_PERIOD_Msk = 0x7c
	// Position of CVSD_SEG_MOD field.
	I2S_PLC_CONF2_CVSD_SEG_MOD_Pos = 0x0
	// Bit mask of CVSD_SEG_MOD field.
	I2S_PLC_CONF2_CVSD_SEG_MOD_Msk = 0x3

	// ESCO_CONF0: I2S_ESCO_CONF0
	// Position of PLC2DMA_EN field.
	I2S_ESCO_CONF0_PLC2DMA_EN_Pos = 0xc
	// Bit mask of PLC2DMA_EN field.
	I2S_ESCO_CONF0_PLC2DMA_EN_Msk = 0x1000
	// Bit PLC2DMA_EN.
	I2S_ESCO_CONF0_PLC2DMA_EN = 0x1000
	// Position of PLC_EN field.
	I2S_ESCO_CONF0_PLC_EN_Pos = 0xb
	// Bit mask of PLC_EN field.
	I2S_ESCO_CONF0_PLC_EN_Msk = 0x800
	// Bit PLC_EN.
	I2S_ESCO_CONF0_PLC_EN = 0x800
	// Position of CVSD_DEC_RESET field.
	I2S_ESCO_CONF0_CVSD_DEC_RESET_Pos = 0xa
	// Bit mask of CVSD_DEC_RESET field.
	I2S_ESCO_CONF0_CVSD_DEC_RESET_Msk = 0x400
	// Bit CVSD_DEC_RESET.
	I2S_ESCO_CONF0_CVSD_DEC_RESET = 0x400
	// Position of CVSD_DEC_START field.
	I2S_ESCO_CONF0_CVSD_DEC_START_Pos = 0x9
	// Bit mask of CVSD_DEC_START field.
	I2S_ESCO_CONF0_CVSD_DEC_START_Msk = 0x200
	// Bit CVSD_DEC_START.
	I2S_ESCO_CONF0_CVSD_DEC_START = 0x200
	// Position of ESCO_CVSD_INF_EN field.
	I2S_ESCO_CONF0_ESCO_CVSD_INF_EN_Pos = 0x8
	// Bit mask of ESCO_CVSD_INF_EN field.
	I2S_ESCO_CONF0_ESCO_CVSD_INF_EN_Msk = 0x100
	// Bit ESCO_CVSD_INF_EN.
	I2S_ESCO_CONF0_ESCO_CVSD_INF_EN = 0x100
	// Position of ESCO_CVSD_PACK_LEN_8K field.
	I2S_ESCO_CONF0_ESCO_CVSD_PACK_LEN_8K_Pos = 0x3
	// Bit mask of ESCO_CVSD_PACK_LEN_8K field.
	I2S_ESCO_CONF0_ESCO_CVSD_PACK_LEN_8K_Msk = 0xf8
	// Position of ESCO_CVSD_DEC_PACK_ERR field.
	I2S_ESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR_Pos = 0x2
	// Bit mask of ESCO_CVSD_DEC_PACK_ERR field.
	I2S_ESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR_Msk = 0x4
	// Bit ESCO_CVSD_DEC_PACK_ERR.
	I2S_ESCO_CONF0_ESCO_CVSD_DEC_PACK_ERR = 0x4
	// Position of ESCO_CHAN_MOD field.
	I2S_ESCO_CONF0_ESCO_CHAN_MOD_Pos = 0x1
	// Bit mask of ESCO_CHAN_MOD field.
	I2S_ESCO_CONF0_ESCO_CHAN_MOD_Msk = 0x2
	// Bit ESCO_CHAN_MOD.
	I2S_ESCO_CONF0_ESCO_CHAN_MOD = 0x2
	// Position of ESCO_EN field.
	I2S_ESCO_CONF0_ESCO_EN_Pos = 0x0
	// Bit mask of ESCO_EN field.
	I2S_ESCO_CONF0_ESCO_EN_Msk = 0x1
	// Bit ESCO_EN.
	I2S_ESCO_CONF0_ESCO_EN = 0x1

	// SCO_CONF0: I2S_SCO_CONF0
	// Position of CVSD_ENC_RESET field.
	I2S_SCO_CONF0_CVSD_ENC_RESET_Pos = 0x3
	// Bit mask of CVSD_ENC_RESET field.
	I2S_SCO_CONF0_CVSD_ENC_RESET_Msk = 0x8
	// Bit CVSD_ENC_RESET.
	I2S_SCO_CONF0_CVSD_ENC_RESET = 0x8
	// Position of CVSD_ENC_START field.
	I2S_SCO_CONF0_CVSD_ENC_START_Pos = 0x2
	// Bit mask of CVSD_ENC_START field.
	I2S_SCO_CONF0_CVSD_ENC_START_Msk = 0x4
	// Bit CVSD_ENC_START.
	I2S_SCO_CONF0_CVSD_ENC_START = 0x4
	// Position of SCO_NO_I2S_EN field.
	I2S_SCO_CONF0_SCO_NO_I2S_EN_Pos = 0x1
	// Bit mask of SCO_NO_I2S_EN field.
	I2S_SCO_CONF0_SCO_NO_I2S_EN_Msk = 0x2
	// Bit SCO_NO_I2S_EN.
	I2S_SCO_CONF0_SCO_NO_I2S_EN = 0x2
	// Position of SCO_WITH_I2S_EN field.
	I2S_SCO_CONF0_SCO_WITH_I2S_EN_Pos = 0x0
	// Bit mask of SCO_WITH_I2S_EN field.
	I2S_SCO_CONF0_SCO_WITH_I2S_EN_Msk = 0x1
	// Bit SCO_WITH_I2S_EN.
	I2S_SCO_CONF0_SCO_WITH_I2S_EN = 0x1

	// CONF1: I2S_CONF1
	// Position of TX_ZEROS_RM_EN field.
	I2S_CONF1_TX_ZEROS_RM_EN_Pos = 0x9
	// Bit mask of TX_ZEROS_RM_EN field.
	I2S_CONF1_TX_ZEROS_RM_EN_Msk = 0x200
	// Bit TX_ZEROS_RM_EN.
	I2S_CONF1_TX_ZEROS_RM_EN = 0x200
	// Position of TX_STOP_EN field.
	I2S_CONF1_TX_STOP_EN_Pos = 0x8
	// Bit mask of TX_STOP_EN field.
	I2S_CONF1_TX_STOP_EN_Msk = 0x100
	// Bit TX_STOP_EN.
	I2S_CONF1_TX_STOP_EN = 0x100
	// Position of RX_PCM_BYPASS field.
	I2S_CONF1_RX_PCM_BYPASS_Pos = 0x7
	// Bit mask of RX_PCM_BYPASS field.
	I2S_CONF1_RX_PCM_BYPASS_Msk = 0x80
	// Bit RX_PCM_BYPASS.
	I2S_CONF1_RX_PCM_BYPASS = 0x80
	// Position of RX_PCM_CONF field.
	I2S_CONF1_RX_PCM_CONF_Pos = 0x4
	// Bit mask of RX_PCM_CONF field.
	I2S_CONF1_RX_PCM_CONF_Msk = 0x70
	// Position of TX_PCM_BYPASS field.
	I2S_CONF1_TX_PCM_BYPASS_Pos = 0x3
	// Bit mask of TX_PCM_BYPASS field.
	I2S_CONF1_TX_PCM_BYPASS_Msk = 0x8
	// Bit TX_PCM_BYPASS.
	I2S_CONF1_TX_PCM_BYPASS = 0x8
	// Position of TX_PCM_CONF field.
	I2S_CONF1_TX_PCM_CONF_Pos = 0x0
	// Bit mask of TX_PCM_CONF field.
	I2S_CONF1_TX_PCM_CONF_Msk = 0x7

	// PD_CONF: I2S_PD_CONF
	// Position of PLC_MEM_FORCE_PU field.
	I2S_PD_CONF_PLC_MEM_FORCE_PU_Pos = 0x3
	// Bit mask of PLC_MEM_FORCE_PU field.
	I2S_PD_CONF_PLC_MEM_FORCE_PU_Msk = 0x8
	// Bit PLC_MEM_FORCE_PU.
	I2S_PD_CONF_PLC_MEM_FORCE_PU = 0x8
	// Position of PLC_MEM_FORCE_PD field.
	I2S_PD_CONF_PLC_MEM_FORCE_PD_Pos = 0x2
	// Bit mask of PLC_MEM_FORCE_PD field.
	I2S_PD_CONF_PLC_MEM_FORCE_PD_Msk = 0x4
	// Bit PLC_MEM_FORCE_PD.
	I2S_PD_CONF_PLC_MEM_FORCE_PD = 0x4
	// Position of FIFO_FORCE_PU field.
	I2S_PD_CONF_FIFO_FORCE_PU_Pos = 0x1
	// Bit mask of FIFO_FORCE_PU field.
	I2S_PD_CONF_FIFO_FORCE_PU_Msk = 0x2
	// Bit FIFO_FORCE_PU.
	I2S_PD_CONF_FIFO_FORCE_PU = 0x2
	// Position of FIFO_FORCE_PD field.
	I2S_PD_CONF_FIFO_FORCE_PD_Pos = 0x0
	// Bit mask of FIFO_FORCE_PD field.
	I2S_PD_CONF_FIFO_FORCE_PD_Msk = 0x1
	// Bit FIFO_FORCE_PD.
	I2S_PD_CONF_FIFO_FORCE_PD = 0x1

	// CONF2: I2S_CONF2
	// Position of INTER_VALID_EN field.
	I2S_CONF2_INTER_VALID_EN_Pos = 0x7
	// Bit mask of INTER_VALID_EN field.
	I2S_CONF2_INTER_VALID_EN_Msk = 0x80
	// Bit INTER_VALID_EN.
	I2S_CONF2_INTER_VALID_EN = 0x80
	// Position of EXT_ADC_START_EN field.
	I2S_CONF2_EXT_ADC_START_EN_Pos = 0x6
	// Bit mask of EXT_ADC_START_EN field.
	I2S_CONF2_EXT_ADC_START_EN_Msk = 0x40
	// Bit EXT_ADC_START_EN.
	I2S_CONF2_EXT_ADC_START_EN = 0x40
	// Position of LCD_EN field.
	I2S_CONF2_LCD_EN_Pos = 0x5
	// Bit mask of LCD_EN field.
	I2S_CONF2_LCD_EN_Msk = 0x20
	// Bit LCD_EN.
	I2S_CONF2_LCD_EN = 0x20
	// Position of DATA_ENABLE field.
	I2S_CONF2_DATA_ENABLE_Pos = 0x4
	// Bit mask of DATA_ENABLE field.
	I2S_CONF2_DATA_ENABLE_Msk = 0x10
	// Bit DATA_ENABLE.
	I2S_CONF2_DATA_ENABLE = 0x10
	// Position of DATA_ENABLE_TEST_EN field.
	I2S_CONF2_DATA_ENABLE_TEST_EN_Pos = 0x3
	// Bit mask of DATA_ENABLE_TEST_EN field.
	I2S_CONF2_DATA_ENABLE_TEST_EN_Msk = 0x8
	// Bit DATA_ENABLE_TEST_EN.
	I2S_CONF2_DATA_ENABLE_TEST_EN = 0x8
	// Position of LCD_TX_SDX2_EN field.
	I2S_CONF2_LCD_TX_SDX2_EN_Pos = 0x2
	// Bit mask of LCD_TX_SDX2_EN field.
	I2S_CONF2_LCD_TX_SDX2_EN_Msk = 0x4
	// Bit LCD_TX_SDX2_EN.
	I2S_CONF2_LCD_TX_SDX2_EN = 0x4
	// Position of LCD_TX_WRX2_EN field.
	I2S_CONF2_LCD_TX_WRX2_EN_Pos = 0x1
	// Bit mask of LCD_TX_WRX2_EN field.
	I2S_CONF2_LCD_TX_WRX2_EN_Msk = 0x2
	// Bit LCD_TX_WRX2_EN.
	I2S_CONF2_LCD_TX_WRX2_EN = 0x2
	// Position of CAMERA_EN field.
	I2S_CONF2_CAMERA_EN_Pos = 0x0
	// Bit mask of CAMERA_EN field.
	I2S_CONF2_CAMERA_EN_Msk = 0x1
	// Bit CAMERA_EN.
	I2S_CONF2_CAMERA_EN = 0x1

	// CLKM_CONF: I2S_CLKM_CONF
	// Position of CLKA_ENA field.
	I2S_CLKM_CONF_CLKA_ENA_Pos = 0x15
	// Bit mask of CLKA_ENA field.
	I2S_CLKM_CONF_CLKA_ENA_Msk = 0x200000
	// Bit CLKA_ENA.
	I2S_CLKM_CONF_CLKA_ENA = 0x200000
	// Position of CLK_EN field.
	I2S_CLKM_CONF_CLK_EN_Pos = 0x14
	// Bit mask of CLK_EN field.
	I2S_CLKM_CONF_CLK_EN_Msk = 0x100000
	// Bit CLK_EN.
	I2S_CLKM_CONF_CLK_EN = 0x100000
	// Position of CLKM_DIV_A field.
	I2S_CLKM_CONF_CLKM_DIV_A_Pos = 0xe
	// Bit mask of CLKM_DIV_A field.
	I2S_CLKM_CONF_CLKM_DIV_A_Msk = 0xfc000
	// Position of CLKM_DIV_B field.
	I2S_CLKM_CONF_CLKM_DIV_B_Pos = 0x8
	// Bit mask of CLKM_DIV_B field.
	I2S_CLKM_CONF_CLKM_DIV_B_Msk = 0x3f00
	// Position of CLKM_DIV_NUM field.
	I2S_CLKM_CONF_CLKM_DIV_NUM_Pos = 0x0
	// Bit mask of CLKM_DIV_NUM field.
	I2S_CLKM_CONF_CLKM_DIV_NUM_Msk = 0xff

	// SAMPLE_RATE_CONF: I2S_SAMPLE_RATE_CONF
	// Position of RX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_RX_BITS_MOD_Pos = 0x12
	// Bit mask of RX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_RX_BITS_MOD_Msk = 0xfc0000
	// Position of TX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_TX_BITS_MOD_Pos = 0xc
	// Bit mask of TX_BITS_MOD field.
	I2S_SAMPLE_RATE_CONF_TX_BITS_MOD_Msk = 0x3f000
	// Position of RX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_RX_BCK_DIV_NUM_Pos = 0x6
	// Bit mask of RX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_RX_BCK_DIV_NUM_Msk = 0xfc0
	// Position of TX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_TX_BCK_DIV_NUM_Pos = 0x0
	// Bit mask of TX_BCK_DIV_NUM field.
	I2S_SAMPLE_RATE_CONF_TX_BCK_DIV_NUM_Msk = 0x3f

	// PDM_CONF: I2S_PDM_CONF
	// Position of TX_PDM_HP_BYPASS field.
	I2S_PDM_CONF_TX_PDM_HP_BYPASS_Pos = 0x19
	// Bit mask of TX_PDM_HP_BYPASS field.
	I2S_PDM_CONF_TX_PDM_HP_BYPASS_Msk = 0x2000000
	// Bit TX_PDM_HP_BYPASS.
	I2S_PDM_CONF_TX_PDM_HP_BYPASS = 0x2000000
	// Position of RX_PDM_SINC_DSR_16_EN field.
	I2S_PDM_CONF_RX_PDM_SINC_DSR_16_EN_Pos = 0x18
	// Bit mask of RX_PDM_SINC_DSR_16_EN field.
	I2S_PDM_CONF_RX_PDM_SINC_DSR_16_EN_Msk = 0x1000000
	// Bit RX_PDM_SINC_DSR_16_EN.
	I2S_PDM_CONF_RX_PDM_SINC_DSR_16_EN = 0x1000000
	// Position of TX_PDM_SIGMADELTA_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT_Pos = 0x16
	// Bit mask of TX_PDM_SIGMADELTA_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SIGMADELTA_IN_SHIFT_Msk = 0xc00000
	// Position of TX_PDM_SINC_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SINC_IN_SHIFT_Pos = 0x14
	// Bit mask of TX_PDM_SINC_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_SINC_IN_SHIFT_Msk = 0x300000
	// Position of TX_PDM_LP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_LP_IN_SHIFT_Pos = 0x12
	// Bit mask of TX_PDM_LP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_LP_IN_SHIFT_Msk = 0xc0000
	// Position of TX_PDM_HP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_HP_IN_SHIFT_Pos = 0x10
	// Bit mask of TX_PDM_HP_IN_SHIFT field.
	I2S_PDM_CONF_TX_PDM_HP_IN_SHIFT_Msk = 0x30000
	// Position of TX_PDM_PRESCALE field.
	I2S_PDM_CONF_TX_PDM_PRESCALE_Pos = 0x8
	// Bit mask of TX_PDM_PRESCALE field.
	I2S_PDM_CONF_TX_PDM_PRESCALE_Msk = 0xff00
	// Position of TX_PDM_SINC_OSR2 field.
	I2S_PDM_CONF_TX_PDM_SINC_OSR2_Pos = 0x4
	// Bit mask of TX_PDM_SINC_OSR2 field.
	I2S_PDM_CONF_TX_PDM_SINC_OSR2_Msk = 0xf0
	// Position of PDM2PCM_CONV_EN field.
	I2S_PDM_CONF_PDM2PCM_CONV_EN_Pos = 0x3
	// Bit mask of PDM2PCM_CONV_EN field.
	I2S_PDM_CONF_PDM2PCM_CONV_EN_Msk = 0x8
	// Bit PDM2PCM_CONV_EN.
	I2S_PDM_CONF_PDM2PCM_CONV_EN = 0x8
	// Position of PCM2PDM_CONV_EN field.
	I2S_PDM_CONF_PCM2PDM_CONV_EN_Pos = 0x2
	// Bit mask of PCM2PDM_CONV_EN field.
	I2S_PDM_CONF_PCM2PDM_CONV_EN_Msk = 0x4
	// Bit PCM2PDM_CONV_EN.
	I2S_PDM_CONF_PCM2PDM_CONV_EN = 0x4
	// Position of RX_PDM_EN field.
	I2S_PDM_CONF_RX_PDM_EN_Pos = 0x1
	// Bit mask of RX_PDM_EN field.
	I2S_PDM_CONF_RX_PDM_EN_Msk = 0x2
	// Bit RX_PDM_EN.
	I2S_PDM_CONF_RX_PDM_EN = 0x2
	// Position of TX_PDM_EN field.
	I2S_PDM_CONF_TX_PDM_EN_Pos = 0x0
	// Bit mask of TX_PDM_EN field.
	I2S_PDM_CONF_TX_PDM_EN_Msk = 0x1
	// Bit TX_PDM_EN.
	I2S_PDM_CONF_TX_PDM_EN = 0x1

	// PDM_FREQ_CONF: I2S_PDM_FREQ_CONF
	// Position of TX_PDM_FP field.
	I2S_PDM_FREQ_CONF_TX_PDM_FP_Pos = 0xa
	// Bit mask of TX_PDM_FP field.
	I2S_PDM_FREQ_CONF_TX_PDM_FP_Msk = 0xffc00
	// Position of TX_PDM_FS field.
	I2S_PDM_FREQ_CONF_TX_PDM_FS_Pos = 0x0
	// Bit mask of TX_PDM_FS field.
	I2S_PDM_FREQ_CONF_TX_PDM_FS_Msk = 0x3ff

	// STATE: I2S_STATE
	// Position of RX_FIFO_RESET_BACK field.
	I2S_STATE_RX_FIFO_RESET_BACK_Pos = 0x2
	// Bit mask of RX_FIFO_RESET_BACK field.
	I2S_STATE_RX_FIFO_RESET_BACK_Msk = 0x4
	// Bit RX_FIFO_RESET_BACK.
	I2S_STATE_RX_FIFO_RESET_BACK = 0x4
	// Position of TX_FIFO_RESET_BACK field.
	I2S_STATE_TX_FIFO_RESET_BACK_Pos = 0x1
	// Bit mask of TX_FIFO_RESET_BACK field.
	I2S_STATE_TX_FIFO_RESET_BACK_Msk = 0x2
	// Bit TX_FIFO_RESET_BACK.
	I2S_STATE_TX_FIFO_RESET_BACK = 0x2
	// Position of TX_IDLE field.
	I2S_STATE_TX_IDLE_Pos = 0x0
	// Bit mask of TX_IDLE field.
	I2S_STATE_TX_IDLE_Msk = 0x1
	// Bit TX_IDLE.
	I2S_STATE_TX_IDLE = 0x1

	// DATE: I2S_DATE
	// Position of I2SDATE field.
	I2S_DATE_I2SDATE_Pos = 0x0
	// Bit mask of I2SDATE field.
	I2S_DATE_I2SDATE_Msk = 0xffffffff
)

// Constants for APB_CTRL
const (
	// SYSCLK_CONF: APB_CTRL_SYSCLK_CONF
	// Position of QUICK_CLK_CHNG field.
	APB_CTRL_SYSCLK_CONF_QUICK_CLK_CHNG_Pos = 0xd
	// Bit mask of QUICK_CLK_CHNG field.
	APB_CTRL_SYSCLK_CONF_QUICK_CLK_CHNG_Msk = 0x2000
	// Bit QUICK_CLK_CHNG.
	APB_CTRL_SYSCLK_CONF_QUICK_CLK_CHNG = 0x2000
	// Position of RST_TICK_CNT field.
	APB_CTRL_SYSCLK_CONF_RST_TICK_CNT_Pos = 0xc
	// Bit mask of RST_TICK_CNT field.
	APB_CTRL_SYSCLK_CONF_RST_TICK_CNT_Msk = 0x1000
	// Bit RST_TICK_CNT.
	APB_CTRL_SYSCLK_CONF_RST_TICK_CNT = 0x1000
	// Position of CLK_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_EN_Pos = 0xb
	// Bit mask of CLK_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_EN_Msk = 0x800
	// Bit CLK_EN.
	APB_CTRL_SYSCLK_CONF_CLK_EN = 0x800
	// Position of CLK_320M_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_320M_EN_Pos = 0xa
	// Bit mask of CLK_320M_EN field.
	APB_CTRL_SYSCLK_CONF_CLK_320M_EN_Msk = 0x400
	// Bit CLK_320M_EN.
	APB_CTRL_SYSCLK_CONF_CLK_320M_EN = 0x400
	// Position of PRE_DIV_CNT field.
	APB_CTRL_SYSCLK_CONF_PRE_DIV_CNT_Pos = 0x0
	// Bit mask of PRE_DIV_CNT field.
	APB_CTRL_SYSCLK_CONF_PRE_DIV_CNT_Msk = 0x3ff

	// XTAL_TICK_CONF: APB_CTRL_XTAL_TICK_CONF
	// Position of XTAL_TICK_NUM field.
	APB_CTRL_XTAL_TICK_CONF_XTAL_TICK_NUM_Pos = 0x0
	// Bit mask of XTAL_TICK_NUM field.
	APB_CTRL_XTAL_TICK_CONF_XTAL_TICK_NUM_Msk = 0xff

	// PLL_TICK_CONF: APB_CTRL_PLL_TICK_CONF
	// Position of PLL_TICK_NUM field.
	APB_CTRL_PLL_TICK_CONF_PLL_TICK_NUM_Pos = 0x0
	// Bit mask of PLL_TICK_NUM field.
	APB_CTRL_PLL_TICK_CONF_PLL_TICK_NUM_Msk = 0xff

	// CK8M_TICK_CONF: APB_CTRL_CK8M_TICK_CONF
	// Position of CK8M_TICK_NUM field.
	APB_CTRL_CK8M_TICK_CONF_CK8M_TICK_NUM_Pos = 0x0
	// Bit mask of CK8M_TICK_NUM field.
	APB_CTRL_CK8M_TICK_CONF_CK8M_TICK_NUM_Msk = 0xff

	// APB_SARADC_CTRL: APB_CTRL_APB_SARADC_CTRL
	// Position of SARADC_DATA_TO_I2S field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_TO_I2S_Pos = 0x1a
	// Bit mask of SARADC_DATA_TO_I2S field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_TO_I2S_Msk = 0x4000000
	// Bit SARADC_DATA_TO_I2S.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_TO_I2S = 0x4000000
	// Position of SARADC_DATA_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_SAR_SEL_Pos = 0x19
	// Bit mask of SARADC_DATA_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_SAR_SEL_Msk = 0x2000000
	// Bit SARADC_DATA_SAR_SEL.
	APB_CTRL_APB_SARADC_CTRL_SARADC_DATA_SAR_SEL = 0x2000000
	// Position of SARADC_SAR2_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR_Pos = 0x18
	// Bit mask of SARADC_SAR2_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR_Msk = 0x1000000
	// Bit SARADC_SAR2_PATT_P_CLEAR.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR = 0x1000000
	// Position of SARADC_SAR1_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR_Pos = 0x17
	// Bit mask of SARADC_SAR1_PATT_P_CLEAR field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR_Msk = 0x800000
	// Bit SARADC_SAR1_PATT_P_CLEAR.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR = 0x800000
	// Position of SARADC_SAR2_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_LEN_Pos = 0x13
	// Bit mask of SARADC_SAR2_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_PATT_LEN_Msk = 0x780000
	// Position of SARADC_SAR1_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_LEN_Pos = 0xf
	// Bit mask of SARADC_SAR1_PATT_LEN field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR1_PATT_LEN_Msk = 0x78000
	// Position of SARADC_SAR_CLK_DIV field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_DIV_Pos = 0x7
	// Bit mask of SARADC_SAR_CLK_DIV field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_DIV_Msk = 0x7f80
	// Position of SARADC_SAR_CLK_GATED field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_GATED_Pos = 0x6
	// Bit mask of SARADC_SAR_CLK_GATED field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_GATED_Msk = 0x40
	// Bit SARADC_SAR_CLK_GATED.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_CLK_GATED = 0x40
	// Position of SARADC_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_SEL_Pos = 0x5
	// Bit mask of SARADC_SAR_SEL field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_SEL_Msk = 0x20
	// Bit SARADC_SAR_SEL.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR_SEL = 0x20
	// Position of SARADC_WORK_MODE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_WORK_MODE_Pos = 0x3
	// Bit mask of SARADC_WORK_MODE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_WORK_MODE_Msk = 0x18
	// Position of SARADC_SAR2_MUX field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_MUX_Pos = 0x2
	// Bit mask of SARADC_SAR2_MUX field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_MUX_Msk = 0x4
	// Bit SARADC_SAR2_MUX.
	APB_CTRL_APB_SARADC_CTRL_SARADC_SAR2_MUX = 0x4
	// Position of SARADC_START field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_Pos = 0x1
	// Bit mask of SARADC_START field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_Msk = 0x2
	// Bit SARADC_START.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START = 0x2
	// Position of SARADC_START_FORCE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_FORCE_Pos = 0x0
	// Bit mask of SARADC_START_FORCE field.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_FORCE_Msk = 0x1
	// Bit SARADC_START_FORCE.
	APB_CTRL_APB_SARADC_CTRL_SARADC_START_FORCE = 0x1

	// APB_SARADC_CTRL2: APB_CTRL_APB_SARADC_CTRL2
	// Position of SARADC_SAR2_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR2_INV_Pos = 0xa
	// Bit mask of SARADC_SAR2_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR2_INV_Msk = 0x400
	// Bit SARADC_SAR2_INV.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR2_INV = 0x400
	// Position of SARADC_SAR1_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR1_INV_Pos = 0x9
	// Bit mask of SARADC_SAR1_INV field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR1_INV_Msk = 0x200
	// Bit SARADC_SAR1_INV.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_SAR1_INV = 0x200
	// Position of SARADC_MAX_MEAS_NUM field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM_Pos = 0x1
	// Bit mask of SARADC_MAX_MEAS_NUM field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MAX_MEAS_NUM_Msk = 0x1fe
	// Position of SARADC_MEAS_NUM_LIMIT field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT_Pos = 0x0
	// Bit mask of SARADC_MEAS_NUM_LIMIT field.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT_Msk = 0x1
	// Bit SARADC_MEAS_NUM_LIMIT.
	APB_CTRL_APB_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT = 0x1

	// APB_SARADC_FSM: APB_CTRL_APB_SARADC_FSM
	// Position of SARADC_SAMPLE_CYCLE field.
	APB_CTRL_APB_SARADC_FSM_SARADC_SAMPLE_CYCLE_Pos = 0x18
	// Bit mask of SARADC_SAMPLE_CYCLE field.
	APB_CTRL_APB_SARADC_FSM_SARADC_SAMPLE_CYCLE_Msk = 0xff000000
	// Position of SARADC_START_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_START_WAIT_Pos = 0x10
	// Bit mask of SARADC_START_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_START_WAIT_Msk = 0xff0000
	// Position of SARADC_STANDBY_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_STANDBY_WAIT_Pos = 0x8
	// Bit mask of SARADC_STANDBY_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_STANDBY_WAIT_Msk = 0xff00
	// Position of SARADC_RSTB_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_RSTB_WAIT_Pos = 0x0
	// Bit mask of SARADC_RSTB_WAIT field.
	APB_CTRL_APB_SARADC_FSM_SARADC_RSTB_WAIT_Msk = 0xff

	// APB_SARADC_SAR1_PATT_TAB1: APB_CTRL_APB_SARADC_SAR1_PATT_TAB1
	// Position of SARADC_SAR1_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB1_SARADC_SAR1_PATT_TAB1_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB1_SARADC_SAR1_PATT_TAB1_Msk = 0xffffffff

	// APB_SARADC_SAR1_PATT_TAB2: APB_CTRL_APB_SARADC_SAR1_PATT_TAB2
	// Position of SARADC_SAR1_PATT_TAB2 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB2_SARADC_SAR1_PATT_TAB2_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB2 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB2_SARADC_SAR1_PATT_TAB2_Msk = 0xffffffff

	// APB_SARADC_SAR1_PATT_TAB3: APB_CTRL_APB_SARADC_SAR1_PATT_TAB3
	// Position of SARADC_SAR1_PATT_TAB3 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB3_SARADC_SAR1_PATT_TAB3_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB3 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB3_SARADC_SAR1_PATT_TAB3_Msk = 0xffffffff

	// APB_SARADC_SAR1_PATT_TAB4: APB_CTRL_APB_SARADC_SAR1_PATT_TAB4
	// Position of SARADC_SAR1_PATT_TAB4 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB4_SARADC_SAR1_PATT_TAB4_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB4 field.
	APB_CTRL_APB_SARADC_SAR1_PATT_TAB4_SARADC_SAR1_PATT_TAB4_Msk = 0xffffffff

	// APB_SARADC_SAR2_PATT_TAB1: APB_CTRL_APB_SARADC_SAR2_PATT_TAB1
	// Position of SARADC_SAR2_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB1_SARADC_SAR2_PATT_TAB1_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB1 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB1_SARADC_SAR2_PATT_TAB1_Msk = 0xffffffff

	// APB_SARADC_SAR2_PATT_TAB2: APB_CTRL_APB_SARADC_SAR2_PATT_TAB2
	// Position of SARADC_SAR2_PATT_TAB2 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB2_SARADC_SAR2_PATT_TAB2_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB2 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB2_SARADC_SAR2_PATT_TAB2_Msk = 0xffffffff

	// APB_SARADC_SAR2_PATT_TAB3: APB_CTRL_APB_SARADC_SAR2_PATT_TAB3
	// Position of SARADC_SAR2_PATT_TAB3 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB3_SARADC_SAR2_PATT_TAB3_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB3 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB3_SARADC_SAR2_PATT_TAB3_Msk = 0xffffffff

	// APB_SARADC_SAR2_PATT_TAB4: APB_CTRL_APB_SARADC_SAR2_PATT_TAB4
	// Position of SARADC_SAR2_PATT_TAB4 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB4_SARADC_SAR2_PATT_TAB4_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB4 field.
	APB_CTRL_APB_SARADC_SAR2_PATT_TAB4_SARADC_SAR2_PATT_TAB4_Msk = 0xffffffff

	// APLL_TICK_CONF: APB_CTRL_APLL_TICK_CONF
	// Position of APLL_TICK_NUM field.
	APB_CTRL_APLL_TICK_CONF_APLL_TICK_NUM_Pos = 0x0
	// Bit mask of APLL_TICK_NUM field.
	APB_CTRL_APLL_TICK_CONF_APLL_TICK_NUM_Msk = 0xff

	// DATE: APB_CTRL_DATE
	// Position of DATE field.
	APB_CTRL_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	APB_CTRL_DATE_DATE_Msk = 0xffffffff
)

// Constants for SYSCON
const (
	// SYSCLK_CONF: SYSCON_SYSCLK_CONF
	// Position of QUICK_CLK_CHNG field.
	SYSCON_SYSCLK_CONF_QUICK_CLK_CHNG_Pos = 0xd
	// Bit mask of QUICK_CLK_CHNG field.
	SYSCON_SYSCLK_CONF_QUICK_CLK_CHNG_Msk = 0x2000
	// Bit QUICK_CLK_CHNG.
	SYSCON_SYSCLK_CONF_QUICK_CLK_CHNG = 0x2000
	// Position of RST_TICK_CNT field.
	SYSCON_SYSCLK_CONF_RST_TICK_CNT_Pos = 0xc
	// Bit mask of RST_TICK_CNT field.
	SYSCON_SYSCLK_CONF_RST_TICK_CNT_Msk = 0x1000
	// Bit RST_TICK_CNT.
	SYSCON_SYSCLK_CONF_RST_TICK_CNT = 0x1000
	// Position of CLK_EN field.
	SYSCON_SYSCLK_CONF_CLK_EN_Pos = 0xb
	// Bit mask of CLK_EN field.
	SYSCON_SYSCLK_CONF_CLK_EN_Msk = 0x800
	// Bit CLK_EN.
	SYSCON_SYSCLK_CONF_CLK_EN = 0x800
	// Position of CLK_320M_EN field.
	SYSCON_SYSCLK_CONF_CLK_320M_EN_Pos = 0xa
	// Bit mask of CLK_320M_EN field.
	SYSCON_SYSCLK_CONF_CLK_320M_EN_Msk = 0x400
	// Bit CLK_320M_EN.
	SYSCON_SYSCLK_CONF_CLK_320M_EN = 0x400
	// Position of PRE_DIV_CNT field.
	SYSCON_SYSCLK_CONF_PRE_DIV_CNT_Pos = 0x0
	// Bit mask of PRE_DIV_CNT field.
	SYSCON_SYSCLK_CONF_PRE_DIV_CNT_Msk = 0x3ff

	// XTAL_TICK_CONF: SYSCON_XTAL_TICK_CONF
	// Position of XTAL_TICK_NUM field.
	SYSCON_XTAL_TICK_CONF_XTAL_TICK_NUM_Pos = 0x0
	// Bit mask of XTAL_TICK_NUM field.
	SYSCON_XTAL_TICK_CONF_XTAL_TICK_NUM_Msk = 0xff

	// PLL_TICK_CONF: SYSCON_PLL_TICK_CONF
	// Position of PLL_TICK_NUM field.
	SYSCON_PLL_TICK_CONF_PLL_TICK_NUM_Pos = 0x0
	// Bit mask of PLL_TICK_NUM field.
	SYSCON_PLL_TICK_CONF_PLL_TICK_NUM_Msk = 0xff

	// CK8M_TICK_CONF: SYSCON_CK8M_TICK_CONF
	// Position of CK8M_TICK_NUM field.
	SYSCON_CK8M_TICK_CONF_CK8M_TICK_NUM_Pos = 0x0
	// Bit mask of CK8M_TICK_NUM field.
	SYSCON_CK8M_TICK_CONF_CK8M_TICK_NUM_Msk = 0xff

	// SARADC_CTRL: SYSCON_SARADC_CTRL
	// Position of SARADC_DATA_TO_I2S field.
	SYSCON_SARADC_CTRL_SARADC_DATA_TO_I2S_Pos = 0x1a
	// Bit mask of SARADC_DATA_TO_I2S field.
	SYSCON_SARADC_CTRL_SARADC_DATA_TO_I2S_Msk = 0x4000000
	// Bit SARADC_DATA_TO_I2S.
	SYSCON_SARADC_CTRL_SARADC_DATA_TO_I2S = 0x4000000
	// Position of SARADC_DATA_SAR_SEL field.
	SYSCON_SARADC_CTRL_SARADC_DATA_SAR_SEL_Pos = 0x19
	// Bit mask of SARADC_DATA_SAR_SEL field.
	SYSCON_SARADC_CTRL_SARADC_DATA_SAR_SEL_Msk = 0x2000000
	// Bit SARADC_DATA_SAR_SEL.
	SYSCON_SARADC_CTRL_SARADC_DATA_SAR_SEL = 0x2000000
	// Position of SARADC_SAR2_PATT_P_CLEAR field.
	SYSCON_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR_Pos = 0x18
	// Bit mask of SARADC_SAR2_PATT_P_CLEAR field.
	SYSCON_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR_Msk = 0x1000000
	// Bit SARADC_SAR2_PATT_P_CLEAR.
	SYSCON_SARADC_CTRL_SARADC_SAR2_PATT_P_CLEAR = 0x1000000
	// Position of SARADC_SAR1_PATT_P_CLEAR field.
	SYSCON_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR_Pos = 0x17
	// Bit mask of SARADC_SAR1_PATT_P_CLEAR field.
	SYSCON_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR_Msk = 0x800000
	// Bit SARADC_SAR1_PATT_P_CLEAR.
	SYSCON_SARADC_CTRL_SARADC_SAR1_PATT_P_CLEAR = 0x800000
	// Position of SARADC_SAR2_PATT_LEN field.
	SYSCON_SARADC_CTRL_SARADC_SAR2_PATT_LEN_Pos = 0x13
	// Bit mask of SARADC_SAR2_PATT_LEN field.
	SYSCON_SARADC_CTRL_SARADC_SAR2_PATT_LEN_Msk = 0x780000
	// Position of SARADC_SAR1_PATT_LEN field.
	SYSCON_SARADC_CTRL_SARADC_SAR1_PATT_LEN_Pos = 0xf
	// Bit mask of SARADC_SAR1_PATT_LEN field.
	SYSCON_SARADC_CTRL_SARADC_SAR1_PATT_LEN_Msk = 0x78000
	// Position of SARADC_SAR_CLK_DIV field.
	SYSCON_SARADC_CTRL_SARADC_SAR_CLK_DIV_Pos = 0x7
	// Bit mask of SARADC_SAR_CLK_DIV field.
	SYSCON_SARADC_CTRL_SARADC_SAR_CLK_DIV_Msk = 0x7f80
	// Position of SARADC_SAR_CLK_GATED field.
	SYSCON_SARADC_CTRL_SARADC_SAR_CLK_GATED_Pos = 0x6
	// Bit mask of SARADC_SAR_CLK_GATED field.
	SYSCON_SARADC_CTRL_SARADC_SAR_CLK_GATED_Msk = 0x40
	// Bit SARADC_SAR_CLK_GATED.
	SYSCON_SARADC_CTRL_SARADC_SAR_CLK_GATED = 0x40
	// Position of SARADC_SAR_SEL field.
	SYSCON_SARADC_CTRL_SARADC_SAR_SEL_Pos = 0x5
	// Bit mask of SARADC_SAR_SEL field.
	SYSCON_SARADC_CTRL_SARADC_SAR_SEL_Msk = 0x20
	// Bit SARADC_SAR_SEL.
	SYSCON_SARADC_CTRL_SARADC_SAR_SEL = 0x20
	// Position of SARADC_WORK_MODE field.
	SYSCON_SARADC_CTRL_SARADC_WORK_MODE_Pos = 0x3
	// Bit mask of SARADC_WORK_MODE field.
	SYSCON_SARADC_CTRL_SARADC_WORK_MODE_Msk = 0x18
	// Position of SARADC_SAR2_MUX field.
	SYSCON_SARADC_CTRL_SARADC_SAR2_MUX_Pos = 0x2
	// Bit mask of SARADC_SAR2_MUX field.
	SYSCON_SARADC_CTRL_SARADC_SAR2_MUX_Msk = 0x4
	// Bit SARADC_SAR2_MUX.
	SYSCON_SARADC_CTRL_SARADC_SAR2_MUX = 0x4
	// Position of SARADC_START field.
	SYSCON_SARADC_CTRL_SARADC_START_Pos = 0x1
	// Bit mask of SARADC_START field.
	SYSCON_SARADC_CTRL_SARADC_START_Msk = 0x2
	// Bit SARADC_START.
	SYSCON_SARADC_CTRL_SARADC_START = 0x2
	// Position of SARADC_START_FORCE field.
	SYSCON_SARADC_CTRL_SARADC_START_FORCE_Pos = 0x0
	// Bit mask of SARADC_START_FORCE field.
	SYSCON_SARADC_CTRL_SARADC_START_FORCE_Msk = 0x1
	// Bit SARADC_START_FORCE.
	SYSCON_SARADC_CTRL_SARADC_START_FORCE = 0x1

	// SARADC_CTRL2: SYSCON_SARADC_CTRL2
	// Position of SARADC_SAR2_INV field.
	SYSCON_SARADC_CTRL2_SARADC_SAR2_INV_Pos = 0xa
	// Bit mask of SARADC_SAR2_INV field.
	SYSCON_SARADC_CTRL2_SARADC_SAR2_INV_Msk = 0x400
	// Bit SARADC_SAR2_INV.
	SYSCON_SARADC_CTRL2_SARADC_SAR2_INV = 0x400
	// Position of SARADC_SAR1_INV field.
	SYSCON_SARADC_CTRL2_SARADC_SAR1_INV_Pos = 0x9
	// Bit mask of SARADC_SAR1_INV field.
	SYSCON_SARADC_CTRL2_SARADC_SAR1_INV_Msk = 0x200
	// Bit SARADC_SAR1_INV.
	SYSCON_SARADC_CTRL2_SARADC_SAR1_INV = 0x200
	// Position of SARADC_MAX_MEAS_NUM field.
	SYSCON_SARADC_CTRL2_SARADC_MAX_MEAS_NUM_Pos = 0x1
	// Bit mask of SARADC_MAX_MEAS_NUM field.
	SYSCON_SARADC_CTRL2_SARADC_MAX_MEAS_NUM_Msk = 0x1fe
	// Position of SARADC_MEAS_NUM_LIMIT field.
	SYSCON_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT_Pos = 0x0
	// Bit mask of SARADC_MEAS_NUM_LIMIT field.
	SYSCON_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT_Msk = 0x1
	// Bit SARADC_MEAS_NUM_LIMIT.
	SYSCON_SARADC_CTRL2_SARADC_MEAS_NUM_LIMIT = 0x1

	// SARADC_FSM: SYSCON_SARADC_FSM
	// Position of SARADC_SAMPLE_CYCLE field.
	SYSCON_SARADC_FSM_SARADC_SAMPLE_CYCLE_Pos = 0x18
	// Bit mask of SARADC_SAMPLE_CYCLE field.
	SYSCON_SARADC_FSM_SARADC_SAMPLE_CYCLE_Msk = 0xff000000
	// Position of SARADC_START_WAIT field.
	SYSCON_SARADC_FSM_SARADC_START_WAIT_Pos = 0x10
	// Bit mask of SARADC_START_WAIT field.
	SYSCON_SARADC_FSM_SARADC_START_WAIT_Msk = 0xff0000
	// Position of SARADC_STANDBY_WAIT field.
	SYSCON_SARADC_FSM_SARADC_STANDBY_WAIT_Pos = 0x8
	// Bit mask of SARADC_STANDBY_WAIT field.
	SYSCON_SARADC_FSM_SARADC_STANDBY_WAIT_Msk = 0xff00
	// Position of SARADC_RSTB_WAIT field.
	SYSCON_SARADC_FSM_SARADC_RSTB_WAIT_Pos = 0x0
	// Bit mask of SARADC_RSTB_WAIT field.
	SYSCON_SARADC_FSM_SARADC_RSTB_WAIT_Msk = 0xff

	// SARADC_SAR1_PATT_TAB1: SYSCON_SARADC_SAR1_PATT_TAB1
	// Position of SARADC_SAR1_PATT_TAB1 field.
	SYSCON_SARADC_SAR1_PATT_TAB1_SARADC_SAR1_PATT_TAB1_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB1 field.
	SYSCON_SARADC_SAR1_PATT_TAB1_SARADC_SAR1_PATT_TAB1_Msk = 0xffffffff

	// SARADC_SAR1_PATT_TAB2: SYSCON_SARADC_SAR1_PATT_TAB2
	// Position of SARADC_SAR1_PATT_TAB2 field.
	SYSCON_SARADC_SAR1_PATT_TAB2_SARADC_SAR1_PATT_TAB2_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB2 field.
	SYSCON_SARADC_SAR1_PATT_TAB2_SARADC_SAR1_PATT_TAB2_Msk = 0xffffffff

	// SARADC_SAR1_PATT_TAB3: SYSCON_SARADC_SAR1_PATT_TAB3
	// Position of SARADC_SAR1_PATT_TAB3 field.
	SYSCON_SARADC_SAR1_PATT_TAB3_SARADC_SAR1_PATT_TAB3_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB3 field.
	SYSCON_SARADC_SAR1_PATT_TAB3_SARADC_SAR1_PATT_TAB3_Msk = 0xffffffff

	// SARADC_SAR1_PATT_TAB4: SYSCON_SARADC_SAR1_PATT_TAB4
	// Position of SARADC_SAR1_PATT_TAB4 field.
	SYSCON_SARADC_SAR1_PATT_TAB4_SARADC_SAR1_PATT_TAB4_Pos = 0x0
	// Bit mask of SARADC_SAR1_PATT_TAB4 field.
	SYSCON_SARADC_SAR1_PATT_TAB4_SARADC_SAR1_PATT_TAB4_Msk = 0xffffffff

	// SARADC_SAR2_PATT_TAB1: SYSCON_SARADC_SAR2_PATT_TAB1
	// Position of SARADC_SAR2_PATT_TAB1 field.
	SYSCON_SARADC_SAR2_PATT_TAB1_SARADC_SAR2_PATT_TAB1_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB1 field.
	SYSCON_SARADC_SAR2_PATT_TAB1_SARADC_SAR2_PATT_TAB1_Msk = 0xffffffff

	// SARADC_SAR2_PATT_TAB2: SYSCON_SARADC_SAR2_PATT_TAB2
	// Position of SARADC_SAR2_PATT_TAB2 field.
	SYSCON_SARADC_SAR2_PATT_TAB2_SARADC_SAR2_PATT_TAB2_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB2 field.
	SYSCON_SARADC_SAR2_PATT_TAB2_SARADC_SAR2_PATT_TAB2_Msk = 0xffffffff

	// SARADC_SAR2_PATT_TAB3: SYSCON_SARADC_SAR2_PATT_TAB3
	// Position of SARADC_SAR2_PATT_TAB3 field.
	SYSCON_SARADC_SAR2_PATT_TAB3_SARADC_SAR2_PATT_TAB3_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB3 field.
	SYSCON_SARADC_SAR2_PATT_TAB3_SARADC_SAR2_PATT_TAB3_Msk = 0xffffffff

	// SARADC_SAR2_PATT_TAB4: SYSCON_SARADC_SAR2_PATT_TAB4
	// Position of SARADC_SAR2_PATT_TAB4 field.
	SYSCON_SARADC_SAR2_PATT_TAB4_SARADC_SAR2_PATT_TAB4_Pos = 0x0
	// Bit mask of SARADC_SAR2_PATT_TAB4 field.
	SYSCON_SARADC_SAR2_PATT_TAB4_SARADC_SAR2_PATT_TAB4_Msk = 0xffffffff

	// APLL_TICK_CONF: SYSCON_APLL_TICK_CONF
	// Position of APLL_TICK_NUM field.
	SYSCON_APLL_TICK_CONF_APLL_TICK_NUM_Pos = 0x0
	// Bit mask of APLL_TICK_NUM field.
	SYSCON_APLL_TICK_CONF_APLL_TICK_NUM_Msk = 0xff

	// DATE: SYSCON_DATE
	// Position of DATE field.
	SYSCON_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	SYSCON_DATE_DATE_Msk = 0xffffffff
)

// Constants for FE2
const ()

// Constants for RTC_I2C
const (
	// SCL_LOW_PERIOD: RTC_I2C_SCL_LOW_PERIOD
	// Position of SCL_LOW_PERIOD field.
	RTC_I2C_SCL_LOW_PERIOD_SCL_LOW_PERIOD_Pos = 0x0
	// Bit mask of SCL_LOW_PERIOD field.
	RTC_I2C_SCL_LOW_PERIOD_SCL_LOW_PERIOD_Msk = 0x7ffff

	// CTRL: RTC_I2C_CTRL
	// Position of RX_LSB_FIRST field.
	RTC_I2C_CTRL_RX_LSB_FIRST_Pos = 0x7
	// Bit mask of RX_LSB_FIRST field.
	RTC_I2C_CTRL_RX_LSB_FIRST_Msk = 0x80
	// Bit RX_LSB_FIRST.
	RTC_I2C_CTRL_RX_LSB_FIRST = 0x80
	// Position of TX_LSB_FIRST field.
	RTC_I2C_CTRL_TX_LSB_FIRST_Pos = 0x6
	// Bit mask of TX_LSB_FIRST field.
	RTC_I2C_CTRL_TX_LSB_FIRST_Msk = 0x40
	// Bit TX_LSB_FIRST.
	RTC_I2C_CTRL_TX_LSB_FIRST = 0x40
	// Position of TRANS_START field.
	RTC_I2C_CTRL_TRANS_START_Pos = 0x5
	// Bit mask of TRANS_START field.
	RTC_I2C_CTRL_TRANS_START_Msk = 0x20
	// Bit TRANS_START.
	RTC_I2C_CTRL_TRANS_START = 0x20
	// Position of MS_MODE field.
	RTC_I2C_CTRL_MS_MODE_Pos = 0x4
	// Bit mask of MS_MODE field.
	RTC_I2C_CTRL_MS_MODE_Msk = 0x10
	// Bit MS_MODE.
	RTC_I2C_CTRL_MS_MODE = 0x10
	// Position of SCL_FORCE_OUT field.
	RTC_I2C_CTRL_SCL_FORCE_OUT_Pos = 0x1
	// Bit mask of SCL_FORCE_OUT field.
	RTC_I2C_CTRL_SCL_FORCE_OUT_Msk = 0x2
	// Bit SCL_FORCE_OUT.
	RTC_I2C_CTRL_SCL_FORCE_OUT = 0x2
	// Position of SDA_FORCE_OUT field.
	RTC_I2C_CTRL_SDA_FORCE_OUT_Pos = 0x0
	// Bit mask of SDA_FORCE_OUT field.
	RTC_I2C_CTRL_SDA_FORCE_OUT_Msk = 0x1
	// Bit SDA_FORCE_OUT.
	RTC_I2C_CTRL_SDA_FORCE_OUT = 0x1

	// DEBUG_STATUS: RTC_I2C_DEBUG_STATUS
	// Position of SCL_STATE field.
	RTC_I2C_DEBUG_STATUS_SCL_STATE_Pos = 0x1c
	// Bit mask of SCL_STATE field.
	RTC_I2C_DEBUG_STATUS_SCL_STATE_Msk = 0x70000000
	// Position of MAIN_STATE field.
	RTC_I2C_DEBUG_STATUS_MAIN_STATE_Pos = 0x19
	// Bit mask of MAIN_STATE field.
	RTC_I2C_DEBUG_STATUS_MAIN_STATE_Msk = 0xe000000
	// Position of BYTE_TRANS field.
	RTC_I2C_DEBUG_STATUS_BYTE_TRANS_Pos = 0x6
	// Bit mask of BYTE_TRANS field.
	RTC_I2C_DEBUG_STATUS_BYTE_TRANS_Msk = 0x40
	// Bit BYTE_TRANS.
	RTC_I2C_DEBUG_STATUS_BYTE_TRANS = 0x40
	// Position of SLAVE_ADDR_MATCH field.
	RTC_I2C_DEBUG_STATUS_SLAVE_ADDR_MATCH_Pos = 0x5
	// Bit mask of SLAVE_ADDR_MATCH field.
	RTC_I2C_DEBUG_STATUS_SLAVE_ADDR_MATCH_Msk = 0x20
	// Bit SLAVE_ADDR_MATCH.
	RTC_I2C_DEBUG_STATUS_SLAVE_ADDR_MATCH = 0x20
	// Position of BUS_BUSY field.
	RTC_I2C_DEBUG_STATUS_BUS_BUSY_Pos = 0x4
	// Bit mask of BUS_BUSY field.
	RTC_I2C_DEBUG_STATUS_BUS_BUSY_Msk = 0x10
	// Bit BUS_BUSY.
	RTC_I2C_DEBUG_STATUS_BUS_BUSY = 0x10
	// Position of ARB_LOST field.
	RTC_I2C_DEBUG_STATUS_ARB_LOST_Pos = 0x3
	// Bit mask of ARB_LOST field.
	RTC_I2C_DEBUG_STATUS_ARB_LOST_Msk = 0x8
	// Bit ARB_LOST.
	RTC_I2C_DEBUG_STATUS_ARB_LOST = 0x8
	// Position of TIMED_OUT field.
	RTC_I2C_DEBUG_STATUS_TIMED_OUT_Pos = 0x2
	// Bit mask of TIMED_OUT field.
	RTC_I2C_DEBUG_STATUS_TIMED_OUT_Msk = 0x4
	// Bit TIMED_OUT.
	RTC_I2C_DEBUG_STATUS_TIMED_OUT = 0x4
	// Position of SLAVE_RW field.
	RTC_I2C_DEBUG_STATUS_SLAVE_RW_Pos = 0x1
	// Bit mask of SLAVE_RW field.
	RTC_I2C_DEBUG_STATUS_SLAVE_RW_Msk = 0x2
	// Bit SLAVE_RW.
	RTC_I2C_DEBUG_STATUS_SLAVE_RW = 0x2
	// Position of ACK_VAL field.
	RTC_I2C_DEBUG_STATUS_ACK_VAL_Pos = 0x0
	// Bit mask of ACK_VAL field.
	RTC_I2C_DEBUG_STATUS_ACK_VAL_Msk = 0x1
	// Bit ACK_VAL.
	RTC_I2C_DEBUG_STATUS_ACK_VAL = 0x1

	// TIMEOUT: RTC_I2C_TIMEOUT
	// Position of TIMEOUT field.
	RTC_I2C_TIMEOUT_TIMEOUT_Pos = 0x0
	// Bit mask of TIMEOUT field.
	RTC_I2C_TIMEOUT_TIMEOUT_Msk = 0xfffff

	// SLAVE_ADDR: RTC_I2C_SLAVE_ADDR
	// Position of SLAVE_ADDR_10BIT field.
	RTC_I2C_SLAVE_ADDR_SLAVE_ADDR_10BIT_Pos = 0x1f
	// Bit mask of SLAVE_ADDR_10BIT field.
	RTC_I2C_SLAVE_ADDR_SLAVE_ADDR_10BIT_Msk = 0x80000000
	// Bit SLAVE_ADDR_10BIT.
	RTC_I2C_SLAVE_ADDR_SLAVE_ADDR_10BIT = 0x80000000
	// Position of SLAVE_ADDR field.
	RTC_I2C_SLAVE_ADDR_SLAVE_ADDR_Pos = 0x0
	// Bit mask of SLAVE_ADDR field.
	RTC_I2C_SLAVE_ADDR_SLAVE_ADDR_Msk = 0x7fff

	// INT_RAW: RTC_I2C_INT_RAW
	// Position of TIME_OUT_INT_RAW field.
	RTC_I2C_INT_RAW_TIME_OUT_INT_RAW_Pos = 0x7
	// Bit mask of TIME_OUT_INT_RAW field.
	RTC_I2C_INT_RAW_TIME_OUT_INT_RAW_Msk = 0x80
	// Bit TIME_OUT_INT_RAW.
	RTC_I2C_INT_RAW_TIME_OUT_INT_RAW = 0x80
	// Position of TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Pos = 0x6
	// Bit mask of TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_TRANS_COMPLETE_INT_RAW_Msk = 0x40
	// Bit TRANS_COMPLETE_INT_RAW.
	RTC_I2C_INT_RAW_TRANS_COMPLETE_INT_RAW = 0x40
	// Position of MASTER_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_MASTER_TRANS_COMPLETE_INT_RAW_Pos = 0x5
	// Bit mask of MASTER_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_MASTER_TRANS_COMPLETE_INT_RAW_Msk = 0x20
	// Bit MASTER_TRANS_COMPLETE_INT_RAW.
	RTC_I2C_INT_RAW_MASTER_TRANS_COMPLETE_INT_RAW = 0x20
	// Position of ARBITRATION_LOST_INT_RAW field.
	RTC_I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Pos = 0x4
	// Bit mask of ARBITRATION_LOST_INT_RAW field.
	RTC_I2C_INT_RAW_ARBITRATION_LOST_INT_RAW_Msk = 0x10
	// Bit ARBITRATION_LOST_INT_RAW.
	RTC_I2C_INT_RAW_ARBITRATION_LOST_INT_RAW = 0x10
	// Position of SLAVE_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW_Pos = 0x3
	// Bit mask of SLAVE_TRANS_COMPLETE_INT_RAW field.
	RTC_I2C_INT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW_Msk = 0x8
	// Bit SLAVE_TRANS_COMPLETE_INT_RAW.
	RTC_I2C_INT_RAW_SLAVE_TRANS_COMPLETE_INT_RAW = 0x8

	// INT_CLR: RTC_I2C_INT_CLR
	// Position of TIME_OUT_INT_CLR field.
	RTC_I2C_INT_CLR_TIME_OUT_INT_CLR_Pos = 0x8
	// Bit mask of TIME_OUT_INT_CLR field.
	RTC_I2C_INT_CLR_TIME_OUT_INT_CLR_Msk = 0x100
	// Bit TIME_OUT_INT_CLR.
	RTC_I2C_INT_CLR_TIME_OUT_INT_CLR = 0x100
	// Position of TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Pos = 0x7
	// Bit mask of TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_TRANS_COMPLETE_INT_CLR_Msk = 0x80
	// Bit TRANS_COMPLETE_INT_CLR.
	RTC_I2C_INT_CLR_TRANS_COMPLETE_INT_CLR = 0x80
	// Position of MASTER_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_MASTER_TRANS_COMPLETE_INT_CLR_Pos = 0x6
	// Bit mask of MASTER_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_MASTER_TRANS_COMPLETE_INT_CLR_Msk = 0x40
	// Bit MASTER_TRANS_COMPLETE_INT_CLR.
	RTC_I2C_INT_CLR_MASTER_TRANS_COMPLETE_INT_CLR = 0x40
	// Position of ARBITRATION_LOST_INT_CLR field.
	RTC_I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Pos = 0x5
	// Bit mask of ARBITRATION_LOST_INT_CLR field.
	RTC_I2C_INT_CLR_ARBITRATION_LOST_INT_CLR_Msk = 0x20
	// Bit ARBITRATION_LOST_INT_CLR.
	RTC_I2C_INT_CLR_ARBITRATION_LOST_INT_CLR = 0x20
	// Position of SLAVE_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR_Pos = 0x4
	// Bit mask of SLAVE_TRANS_COMPLETE_INT_CLR field.
	RTC_I2C_INT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR_Msk = 0x10
	// Bit SLAVE_TRANS_COMPLETE_INT_CLR.
	RTC_I2C_INT_CLR_SLAVE_TRANS_COMPLETE_INT_CLR = 0x10

	// SDA_DUTY: RTC_I2C_SDA_DUTY
	// Position of SDA_DUTY field.
	RTC_I2C_SDA_DUTY_SDA_DUTY_Pos = 0x0
	// Bit mask of SDA_DUTY field.
	RTC_I2C_SDA_DUTY_SDA_DUTY_Msk = 0xfffff

	// SCL_HIGH_PERIOD: RTC_I2C_SCL_HIGH_PERIOD
	// Position of SCL_HIGH_PERIOD field.
	RTC_I2C_SCL_HIGH_PERIOD_SCL_HIGH_PERIOD_Pos = 0x0
	// Bit mask of SCL_HIGH_PERIOD field.
	RTC_I2C_SCL_HIGH_PERIOD_SCL_HIGH_PERIOD_Msk = 0xfffff

	// SCL_START_PERIOD: RTC_I2C_SCL_START_PERIOD
	// Position of SCL_START_PERIOD field.
	RTC_I2C_SCL_START_PERIOD_SCL_START_PERIOD_Pos = 0x0
	// Bit mask of SCL_START_PERIOD field.
	RTC_I2C_SCL_START_PERIOD_SCL_START_PERIOD_Msk = 0xfffff

	// SCL_STOP_PERIOD: RTC_I2C_SCL_STOP_PERIOD
	// Position of SCL_STOP_PERIOD field.
	RTC_I2C_SCL_STOP_PERIOD_SCL_STOP_PERIOD_Pos = 0x0
	// Bit mask of SCL_STOP_PERIOD field.
	RTC_I2C_SCL_STOP_PERIOD_SCL_STOP_PERIOD_Msk = 0xfffff
)

// Constants for BT
const ()

// Constants for UART
const (
	// RX_FIFO: UART_RX_FIFO
	// Position of DATA field.
	UART_RX_FIFO_DATA_Pos = 0x0
	// Bit mask of DATA field.
	UART_RX_FIFO_DATA_Msk = 0xff

	// INT_RAW: UART_INT_RAW
	// Position of AT_CMD_CHAR_DET_INT_RAW field.
	UART_INT_RAW_AT_CMD_CHAR_DET_INT_RAW_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_RAW field.
	UART_INT_RAW_AT_CMD_CHAR_DET_INT_RAW_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_RAW.
	UART_INT_RAW_AT_CMD_CHAR_DET_INT_RAW = 0x40000
	// Position of RS485_CLASH_INT_RAW field.
	UART_INT_RAW_RS485_CLASH_INT_RAW_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_RAW field.
	UART_INT_RAW_RS485_CLASH_INT_RAW_Msk = 0x20000
	// Bit RS485_CLASH_INT_RAW.
	UART_INT_RAW_RS485_CLASH_INT_RAW = 0x20000
	// Position of RS485_FRM_ERR_INT_RAW field.
	UART_INT_RAW_RS485_FRM_ERR_INT_RAW_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_RAW field.
	UART_INT_RAW_RS485_FRM_ERR_INT_RAW_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_RAW.
	UART_INT_RAW_RS485_FRM_ERR_INT_RAW = 0x10000
	// Position of RS485_PARITY_ERR_INT_RAW field.
	UART_INT_RAW_RS485_PARITY_ERR_INT_RAW_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_RAW field.
	UART_INT_RAW_RS485_PARITY_ERR_INT_RAW_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_RAW.
	UART_INT_RAW_RS485_PARITY_ERR_INT_RAW = 0x8000
	// Position of TX_DONE_INT_RAW field.
	UART_INT_RAW_TX_DONE_INT_RAW_Pos = 0xe
	// Bit mask of TX_DONE_INT_RAW field.
	UART_INT_RAW_TX_DONE_INT_RAW_Msk = 0x4000
	// Bit TX_DONE_INT_RAW.
	UART_INT_RAW_TX_DONE_INT_RAW = 0x4000
	// Position of TX_BRK_IDLE_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_IDLE_DONE_INT_RAW_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_IDLE_DONE_INT_RAW_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_RAW.
	UART_INT_RAW_TX_BRK_IDLE_DONE_INT_RAW = 0x2000
	// Position of TX_BRK_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_DONE_INT_RAW_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_RAW field.
	UART_INT_RAW_TX_BRK_DONE_INT_RAW_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_RAW.
	UART_INT_RAW_TX_BRK_DONE_INT_RAW = 0x1000
	// Position of GLITCH_DET_INT_RAW field.
	UART_INT_RAW_GLITCH_DET_INT_RAW_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_RAW field.
	UART_INT_RAW_GLITCH_DET_INT_RAW_Msk = 0x800
	// Bit GLITCH_DET_INT_RAW.
	UART_INT_RAW_GLITCH_DET_INT_RAW = 0x800
	// Position of SW_XOFF_INT_RAW field.
	UART_INT_RAW_SW_XOFF_INT_RAW_Pos = 0xa
	// Bit mask of SW_XOFF_INT_RAW field.
	UART_INT_RAW_SW_XOFF_INT_RAW_Msk = 0x400
	// Bit SW_XOFF_INT_RAW.
	UART_INT_RAW_SW_XOFF_INT_RAW = 0x400
	// Position of SW_XON_INT_RAW field.
	UART_INT_RAW_SW_XON_INT_RAW_Pos = 0x9
	// Bit mask of SW_XON_INT_RAW field.
	UART_INT_RAW_SW_XON_INT_RAW_Msk = 0x200
	// Bit SW_XON_INT_RAW.
	UART_INT_RAW_SW_XON_INT_RAW = 0x200
	// Position of RXFIFO_TOUT_INT_RAW field.
	UART_INT_RAW_RXFIFO_TOUT_INT_RAW_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_RAW field.
	UART_INT_RAW_RXFIFO_TOUT_INT_RAW_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_RAW.
	UART_INT_RAW_RXFIFO_TOUT_INT_RAW = 0x100
	// Position of BRK_DET_INT_RAW field.
	UART_INT_RAW_BRK_DET_INT_RAW_Pos = 0x7
	// Bit mask of BRK_DET_INT_RAW field.
	UART_INT_RAW_BRK_DET_INT_RAW_Msk = 0x80
	// Bit BRK_DET_INT_RAW.
	UART_INT_RAW_BRK_DET_INT_RAW = 0x80
	// Position of CTS_CHG_INT_RAW field.
	UART_INT_RAW_CTS_CHG_INT_RAW_Pos = 0x6
	// Bit mask of CTS_CHG_INT_RAW field.
	UART_INT_RAW_CTS_CHG_INT_RAW_Msk = 0x40
	// Bit CTS_CHG_INT_RAW.
	UART_INT_RAW_CTS_CHG_INT_RAW = 0x40
	// Position of DSR_CHG_INT_RAW field.
	UART_INT_RAW_DSR_CHG_INT_RAW_Pos = 0x5
	// Bit mask of DSR_CHG_INT_RAW field.
	UART_INT_RAW_DSR_CHG_INT_RAW_Msk = 0x20
	// Bit DSR_CHG_INT_RAW.
	UART_INT_RAW_DSR_CHG_INT_RAW = 0x20
	// Position of RXFIFO_OVF_INT_RAW field.
	UART_INT_RAW_RXFIFO_OVF_INT_RAW_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_RAW field.
	UART_INT_RAW_RXFIFO_OVF_INT_RAW_Msk = 0x10
	// Bit RXFIFO_OVF_INT_RAW.
	UART_INT_RAW_RXFIFO_OVF_INT_RAW = 0x10
	// Position of FRM_ERR_INT_RAW field.
	UART_INT_RAW_FRM_ERR_INT_RAW_Pos = 0x3
	// Bit mask of FRM_ERR_INT_RAW field.
	UART_INT_RAW_FRM_ERR_INT_RAW_Msk = 0x8
	// Bit FRM_ERR_INT_RAW.
	UART_INT_RAW_FRM_ERR_INT_RAW = 0x8
	// Position of PARITY_ERR_INT_RAW field.
	UART_INT_RAW_PARITY_ERR_INT_RAW_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_RAW field.
	UART_INT_RAW_PARITY_ERR_INT_RAW_Msk = 0x4
	// Bit PARITY_ERR_INT_RAW.
	UART_INT_RAW_PARITY_ERR_INT_RAW = 0x4
	// Position of TXFIFO_EMPTY_INT_RAW field.
	UART_INT_RAW_TXFIFO_EMPTY_INT_RAW_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_RAW field.
	UART_INT_RAW_TXFIFO_EMPTY_INT_RAW_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_RAW.
	UART_INT_RAW_TXFIFO_EMPTY_INT_RAW = 0x2
	// Position of RXFIFO_FULL_INT_RAW field.
	UART_INT_RAW_RXFIFO_FULL_INT_RAW_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_RAW field.
	UART_INT_RAW_RXFIFO_FULL_INT_RAW_Msk = 0x1
	// Bit RXFIFO_FULL_INT_RAW.
	UART_INT_RAW_RXFIFO_FULL_INT_RAW = 0x1

	// INT_ST: UART_INT_ST
	// Position of AT_CMD_CHAR_DET_INT_ST field.
	UART_INT_ST_AT_CMD_CHAR_DET_INT_ST_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_ST field.
	UART_INT_ST_AT_CMD_CHAR_DET_INT_ST_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_ST.
	UART_INT_ST_AT_CMD_CHAR_DET_INT_ST = 0x40000
	// Position of RS485_CLASH_INT_ST field.
	UART_INT_ST_RS485_CLASH_INT_ST_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_ST field.
	UART_INT_ST_RS485_CLASH_INT_ST_Msk = 0x20000
	// Bit RS485_CLASH_INT_ST.
	UART_INT_ST_RS485_CLASH_INT_ST = 0x20000
	// Position of RS485_FRM_ERR_INT_ST field.
	UART_INT_ST_RS485_FRM_ERR_INT_ST_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_ST field.
	UART_INT_ST_RS485_FRM_ERR_INT_ST_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_ST.
	UART_INT_ST_RS485_FRM_ERR_INT_ST = 0x10000
	// Position of RS485_PARITY_ERR_INT_ST field.
	UART_INT_ST_RS485_PARITY_ERR_INT_ST_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_ST field.
	UART_INT_ST_RS485_PARITY_ERR_INT_ST_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_ST.
	UART_INT_ST_RS485_PARITY_ERR_INT_ST = 0x8000
	// Position of TX_DONE_INT_ST field.
	UART_INT_ST_TX_DONE_INT_ST_Pos = 0xe
	// Bit mask of TX_DONE_INT_ST field.
	UART_INT_ST_TX_DONE_INT_ST_Msk = 0x4000
	// Bit TX_DONE_INT_ST.
	UART_INT_ST_TX_DONE_INT_ST = 0x4000
	// Position of TX_BRK_IDLE_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_IDLE_DONE_INT_ST_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_IDLE_DONE_INT_ST_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_ST.
	UART_INT_ST_TX_BRK_IDLE_DONE_INT_ST = 0x2000
	// Position of TX_BRK_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_DONE_INT_ST_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_ST field.
	UART_INT_ST_TX_BRK_DONE_INT_ST_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_ST.
	UART_INT_ST_TX_BRK_DONE_INT_ST = 0x1000
	// Position of GLITCH_DET_INT_ST field.
	UART_INT_ST_GLITCH_DET_INT_ST_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_ST field.
	UART_INT_ST_GLITCH_DET_INT_ST_Msk = 0x800
	// Bit GLITCH_DET_INT_ST.
	UART_INT_ST_GLITCH_DET_INT_ST = 0x800
	// Position of SW_XOFF_INT_ST field.
	UART_INT_ST_SW_XOFF_INT_ST_Pos = 0xa
	// Bit mask of SW_XOFF_INT_ST field.
	UART_INT_ST_SW_XOFF_INT_ST_Msk = 0x400
	// Bit SW_XOFF_INT_ST.
	UART_INT_ST_SW_XOFF_INT_ST = 0x400
	// Position of SW_XON_INT_ST field.
	UART_INT_ST_SW_XON_INT_ST_Pos = 0x9
	// Bit mask of SW_XON_INT_ST field.
	UART_INT_ST_SW_XON_INT_ST_Msk = 0x200
	// Bit SW_XON_INT_ST.
	UART_INT_ST_SW_XON_INT_ST = 0x200
	// Position of RXFIFO_TOUT_INT_ST field.
	UART_INT_ST_RXFIFO_TOUT_INT_ST_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_ST field.
	UART_INT_ST_RXFIFO_TOUT_INT_ST_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_ST.
	UART_INT_ST_RXFIFO_TOUT_INT_ST = 0x100
	// Position of BRK_DET_INT_ST field.
	UART_INT_ST_BRK_DET_INT_ST_Pos = 0x7
	// Bit mask of BRK_DET_INT_ST field.
	UART_INT_ST_BRK_DET_INT_ST_Msk = 0x80
	// Bit BRK_DET_INT_ST.
	UART_INT_ST_BRK_DET_INT_ST = 0x80
	// Position of CTS_CHG_INT_ST field.
	UART_INT_ST_CTS_CHG_INT_ST_Pos = 0x6
	// Bit mask of CTS_CHG_INT_ST field.
	UART_INT_ST_CTS_CHG_INT_ST_Msk = 0x40
	// Bit CTS_CHG_INT_ST.
	UART_INT_ST_CTS_CHG_INT_ST = 0x40
	// Position of DSR_CHG_INT_ST field.
	UART_INT_ST_DSR_CHG_INT_ST_Pos = 0x5
	// Bit mask of DSR_CHG_INT_ST field.
	UART_INT_ST_DSR_CHG_INT_ST_Msk = 0x20
	// Bit DSR_CHG_INT_ST.
	UART_INT_ST_DSR_CHG_INT_ST = 0x20
	// Position of RXFIFO_OVF_INT_ST field.
	UART_INT_ST_RXFIFO_OVF_INT_ST_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_ST field.
	UART_INT_ST_RXFIFO_OVF_INT_ST_Msk = 0x10
	// Bit RXFIFO_OVF_INT_ST.
	UART_INT_ST_RXFIFO_OVF_INT_ST = 0x10
	// Position of FRM_ERR_INT_ST field.
	UART_INT_ST_FRM_ERR_INT_ST_Pos = 0x3
	// Bit mask of FRM_ERR_INT_ST field.
	UART_INT_ST_FRM_ERR_INT_ST_Msk = 0x8
	// Bit FRM_ERR_INT_ST.
	UART_INT_ST_FRM_ERR_INT_ST = 0x8
	// Position of PARITY_ERR_INT_ST field.
	UART_INT_ST_PARITY_ERR_INT_ST_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_ST field.
	UART_INT_ST_PARITY_ERR_INT_ST_Msk = 0x4
	// Bit PARITY_ERR_INT_ST.
	UART_INT_ST_PARITY_ERR_INT_ST = 0x4
	// Position of TXFIFO_EMPTY_INT_ST field.
	UART_INT_ST_TXFIFO_EMPTY_INT_ST_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ST field.
	UART_INT_ST_TXFIFO_EMPTY_INT_ST_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ST.
	UART_INT_ST_TXFIFO_EMPTY_INT_ST = 0x2
	// Position of RXFIFO_FULL_INT_ST field.
	UART_INT_ST_RXFIFO_FULL_INT_ST_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ST field.
	UART_INT_ST_RXFIFO_FULL_INT_ST_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ST.
	UART_INT_ST_RXFIFO_FULL_INT_ST = 0x1

	// INT_ENA: UART_INT_ENA
	// Position of AT_CMD_CHAR_DET_INT_ENA field.
	UART_INT_ENA_AT_CMD_CHAR_DET_INT_ENA_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_ENA field.
	UART_INT_ENA_AT_CMD_CHAR_DET_INT_ENA_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_ENA.
	UART_INT_ENA_AT_CMD_CHAR_DET_INT_ENA = 0x40000
	// Position of RS485_CLASH_INT_ENA field.
	UART_INT_ENA_RS485_CLASH_INT_ENA_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_ENA field.
	UART_INT_ENA_RS485_CLASH_INT_ENA_Msk = 0x20000
	// Bit RS485_CLASH_INT_ENA.
	UART_INT_ENA_RS485_CLASH_INT_ENA = 0x20000
	// Position of RS485_FRM_ERR_INT_ENA field.
	UART_INT_ENA_RS485_FRM_ERR_INT_ENA_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_ENA field.
	UART_INT_ENA_RS485_FRM_ERR_INT_ENA_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_ENA.
	UART_INT_ENA_RS485_FRM_ERR_INT_ENA = 0x10000
	// Position of RS485_PARITY_ERR_INT_ENA field.
	UART_INT_ENA_RS485_PARITY_ERR_INT_ENA_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_ENA field.
	UART_INT_ENA_RS485_PARITY_ERR_INT_ENA_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_ENA.
	UART_INT_ENA_RS485_PARITY_ERR_INT_ENA = 0x8000
	// Position of TX_DONE_INT_ENA field.
	UART_INT_ENA_TX_DONE_INT_ENA_Pos = 0xe
	// Bit mask of TX_DONE_INT_ENA field.
	UART_INT_ENA_TX_DONE_INT_ENA_Msk = 0x4000
	// Bit TX_DONE_INT_ENA.
	UART_INT_ENA_TX_DONE_INT_ENA = 0x4000
	// Position of TX_BRK_IDLE_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_IDLE_DONE_INT_ENA_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_IDLE_DONE_INT_ENA_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_ENA.
	UART_INT_ENA_TX_BRK_IDLE_DONE_INT_ENA = 0x2000
	// Position of TX_BRK_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_DONE_INT_ENA_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_ENA field.
	UART_INT_ENA_TX_BRK_DONE_INT_ENA_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_ENA.
	UART_INT_ENA_TX_BRK_DONE_INT_ENA = 0x1000
	// Position of GLITCH_DET_INT_ENA field.
	UART_INT_ENA_GLITCH_DET_INT_ENA_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_ENA field.
	UART_INT_ENA_GLITCH_DET_INT_ENA_Msk = 0x800
	// Bit GLITCH_DET_INT_ENA.
	UART_INT_ENA_GLITCH_DET_INT_ENA = 0x800
	// Position of SW_XOFF_INT_ENA field.
	UART_INT_ENA_SW_XOFF_INT_ENA_Pos = 0xa
	// Bit mask of SW_XOFF_INT_ENA field.
	UART_INT_ENA_SW_XOFF_INT_ENA_Msk = 0x400
	// Bit SW_XOFF_INT_ENA.
	UART_INT_ENA_SW_XOFF_INT_ENA = 0x400
	// Position of SW_XON_INT_ENA field.
	UART_INT_ENA_SW_XON_INT_ENA_Pos = 0x9
	// Bit mask of SW_XON_INT_ENA field.
	UART_INT_ENA_SW_XON_INT_ENA_Msk = 0x200
	// Bit SW_XON_INT_ENA.
	UART_INT_ENA_SW_XON_INT_ENA = 0x200
	// Position of RXFIFO_TOUT_INT_ENA field.
	UART_INT_ENA_RXFIFO_TOUT_INT_ENA_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_ENA field.
	UART_INT_ENA_RXFIFO_TOUT_INT_ENA_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_ENA.
	UART_INT_ENA_RXFIFO_TOUT_INT_ENA = 0x100
	// Position of BRK_DET_INT_ENA field.
	UART_INT_ENA_BRK_DET_INT_ENA_Pos = 0x7
	// Bit mask of BRK_DET_INT_ENA field.
	UART_INT_ENA_BRK_DET_INT_ENA_Msk = 0x80
	// Bit BRK_DET_INT_ENA.
	UART_INT_ENA_BRK_DET_INT_ENA = 0x80
	// Position of CTS_CHG_INT_ENA field.
	UART_INT_ENA_CTS_CHG_INT_ENA_Pos = 0x6
	// Bit mask of CTS_CHG_INT_ENA field.
	UART_INT_ENA_CTS_CHG_INT_ENA_Msk = 0x40
	// Bit CTS_CHG_INT_ENA.
	UART_INT_ENA_CTS_CHG_INT_ENA = 0x40
	// Position of DSR_CHG_INT_ENA field.
	UART_INT_ENA_DSR_CHG_INT_ENA_Pos = 0x5
	// Bit mask of DSR_CHG_INT_ENA field.
	UART_INT_ENA_DSR_CHG_INT_ENA_Msk = 0x20
	// Bit DSR_CHG_INT_ENA.
	UART_INT_ENA_DSR_CHG_INT_ENA = 0x20
	// Position of RXFIFO_OVF_INT_ENA field.
	UART_INT_ENA_RXFIFO_OVF_INT_ENA_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_ENA field.
	UART_INT_ENA_RXFIFO_OVF_INT_ENA_Msk = 0x10
	// Bit RXFIFO_OVF_INT_ENA.
	UART_INT_ENA_RXFIFO_OVF_INT_ENA = 0x10
	// Position of FRM_ERR_INT_ENA field.
	UART_INT_ENA_FRM_ERR_INT_ENA_Pos = 0x3
	// Bit mask of FRM_ERR_INT_ENA field.
	UART_INT_ENA_FRM_ERR_INT_ENA_Msk = 0x8
	// Bit FRM_ERR_INT_ENA.
	UART_INT_ENA_FRM_ERR_INT_ENA = 0x8
	// Position of PARITY_ERR_INT_ENA field.
	UART_INT_ENA_PARITY_ERR_INT_ENA_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_ENA field.
	UART_INT_ENA_PARITY_ERR_INT_ENA_Msk = 0x4
	// Bit PARITY_ERR_INT_ENA.
	UART_INT_ENA_PARITY_ERR_INT_ENA = 0x4
	// Position of TXFIFO_EMPTY_INT_ENA field.
	UART_INT_ENA_TXFIFO_EMPTY_INT_ENA_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_ENA field.
	UART_INT_ENA_TXFIFO_EMPTY_INT_ENA_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_ENA.
	UART_INT_ENA_TXFIFO_EMPTY_INT_ENA = 0x2
	// Position of RXFIFO_FULL_INT_ENA field.
	UART_INT_ENA_RXFIFO_FULL_INT_ENA_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_ENA field.
	UART_INT_ENA_RXFIFO_FULL_INT_ENA_Msk = 0x1
	// Bit RXFIFO_FULL_INT_ENA.
	UART_INT_ENA_RXFIFO_FULL_INT_ENA = 0x1

	// INT_CLR: UART_INT_CLR
	// Position of AT_CMD_CHAR_DET_INT_CLR field.
	UART_INT_CLR_AT_CMD_CHAR_DET_INT_CLR_Pos = 0x12
	// Bit mask of AT_CMD_CHAR_DET_INT_CLR field.
	UART_INT_CLR_AT_CMD_CHAR_DET_INT_CLR_Msk = 0x40000
	// Bit AT_CMD_CHAR_DET_INT_CLR.
	UART_INT_CLR_AT_CMD_CHAR_DET_INT_CLR = 0x40000
	// Position of RS485_CLASH_INT_CLR field.
	UART_INT_CLR_RS485_CLASH_INT_CLR_Pos = 0x11
	// Bit mask of RS485_CLASH_INT_CLR field.
	UART_INT_CLR_RS485_CLASH_INT_CLR_Msk = 0x20000
	// Bit RS485_CLASH_INT_CLR.
	UART_INT_CLR_RS485_CLASH_INT_CLR = 0x20000
	// Position of RS485_FRM_ERR_INT_CLR field.
	UART_INT_CLR_RS485_FRM_ERR_INT_CLR_Pos = 0x10
	// Bit mask of RS485_FRM_ERR_INT_CLR field.
	UART_INT_CLR_RS485_FRM_ERR_INT_CLR_Msk = 0x10000
	// Bit RS485_FRM_ERR_INT_CLR.
	UART_INT_CLR_RS485_FRM_ERR_INT_CLR = 0x10000
	// Position of RS485_PARITY_ERR_INT_CLR field.
	UART_INT_CLR_RS485_PARITY_ERR_INT_CLR_Pos = 0xf
	// Bit mask of RS485_PARITY_ERR_INT_CLR field.
	UART_INT_CLR_RS485_PARITY_ERR_INT_CLR_Msk = 0x8000
	// Bit RS485_PARITY_ERR_INT_CLR.
	UART_INT_CLR_RS485_PARITY_ERR_INT_CLR = 0x8000
	// Position of TX_DONE_INT_CLR field.
	UART_INT_CLR_TX_DONE_INT_CLR_Pos = 0xe
	// Bit mask of TX_DONE_INT_CLR field.
	UART_INT_CLR_TX_DONE_INT_CLR_Msk = 0x4000
	// Bit TX_DONE_INT_CLR.
	UART_INT_CLR_TX_DONE_INT_CLR = 0x4000
	// Position of TX_BRK_IDLE_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_IDLE_DONE_INT_CLR_Pos = 0xd
	// Bit mask of TX_BRK_IDLE_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_IDLE_DONE_INT_CLR_Msk = 0x2000
	// Bit TX_BRK_IDLE_DONE_INT_CLR.
	UART_INT_CLR_TX_BRK_IDLE_DONE_INT_CLR = 0x2000
	// Position of TX_BRK_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_DONE_INT_CLR_Pos = 0xc
	// Bit mask of TX_BRK_DONE_INT_CLR field.
	UART_INT_CLR_TX_BRK_DONE_INT_CLR_Msk = 0x1000
	// Bit TX_BRK_DONE_INT_CLR.
	UART_INT_CLR_TX_BRK_DONE_INT_CLR = 0x1000
	// Position of GLITCH_DET_INT_CLR field.
	UART_INT_CLR_GLITCH_DET_INT_CLR_Pos = 0xb
	// Bit mask of GLITCH_DET_INT_CLR field.
	UART_INT_CLR_GLITCH_DET_INT_CLR_Msk = 0x800
	// Bit GLITCH_DET_INT_CLR.
	UART_INT_CLR_GLITCH_DET_INT_CLR = 0x800
	// Position of SW_XOFF_INT_CLR field.
	UART_INT_CLR_SW_XOFF_INT_CLR_Pos = 0xa
	// Bit mask of SW_XOFF_INT_CLR field.
	UART_INT_CLR_SW_XOFF_INT_CLR_Msk = 0x400
	// Bit SW_XOFF_INT_CLR.
	UART_INT_CLR_SW_XOFF_INT_CLR = 0x400
	// Position of SW_XON_INT_CLR field.
	UART_INT_CLR_SW_XON_INT_CLR_Pos = 0x9
	// Bit mask of SW_XON_INT_CLR field.
	UART_INT_CLR_SW_XON_INT_CLR_Msk = 0x200
	// Bit SW_XON_INT_CLR.
	UART_INT_CLR_SW_XON_INT_CLR = 0x200
	// Position of RXFIFO_TOUT_INT_CLR field.
	UART_INT_CLR_RXFIFO_TOUT_INT_CLR_Pos = 0x8
	// Bit mask of RXFIFO_TOUT_INT_CLR field.
	UART_INT_CLR_RXFIFO_TOUT_INT_CLR_Msk = 0x100
	// Bit RXFIFO_TOUT_INT_CLR.
	UART_INT_CLR_RXFIFO_TOUT_INT_CLR = 0x100
	// Position of BRK_DET_INT_CLR field.
	UART_INT_CLR_BRK_DET_INT_CLR_Pos = 0x7
	// Bit mask of BRK_DET_INT_CLR field.
	UART_INT_CLR_BRK_DET_INT_CLR_Msk = 0x80
	// Bit BRK_DET_INT_CLR.
	UART_INT_CLR_BRK_DET_INT_CLR = 0x80
	// Position of CTS_CHG_INT_CLR field.
	UART_INT_CLR_CTS_CHG_INT_CLR_Pos = 0x6
	// Bit mask of CTS_CHG_INT_CLR field.
	UART_INT_CLR_CTS_CHG_INT_CLR_Msk = 0x40
	// Bit CTS_CHG_INT_CLR.
	UART_INT_CLR_CTS_CHG_INT_CLR = 0x40
	// Position of DSR_CHG_INT_CLR field.
	UART_INT_CLR_DSR_CHG_INT_CLR_Pos = 0x5
	// Bit mask of DSR_CHG_INT_CLR field.
	UART_INT_CLR_DSR_CHG_INT_CLR_Msk = 0x20
	// Bit DSR_CHG_INT_CLR.
	UART_INT_CLR_DSR_CHG_INT_CLR = 0x20
	// Position of RXFIFO_OVF_INT_CLR field.
	UART_INT_CLR_RXFIFO_OVF_INT_CLR_Pos = 0x4
	// Bit mask of RXFIFO_OVF_INT_CLR field.
	UART_INT_CLR_RXFIFO_OVF_INT_CLR_Msk = 0x10
	// Bit RXFIFO_OVF_INT_CLR.
	UART_INT_CLR_RXFIFO_OVF_INT_CLR = 0x10
	// Position of FRM_ERR_INT_CLR field.
	UART_INT_CLR_FRM_ERR_INT_CLR_Pos = 0x3
	// Bit mask of FRM_ERR_INT_CLR field.
	UART_INT_CLR_FRM_ERR_INT_CLR_Msk = 0x8
	// Bit FRM_ERR_INT_CLR.
	UART_INT_CLR_FRM_ERR_INT_CLR = 0x8
	// Position of PARITY_ERR_INT_CLR field.
	UART_INT_CLR_PARITY_ERR_INT_CLR_Pos = 0x2
	// Bit mask of PARITY_ERR_INT_CLR field.
	UART_INT_CLR_PARITY_ERR_INT_CLR_Msk = 0x4
	// Bit PARITY_ERR_INT_CLR.
	UART_INT_CLR_PARITY_ERR_INT_CLR = 0x4
	// Position of TXFIFO_EMPTY_INT_CLR field.
	UART_INT_CLR_TXFIFO_EMPTY_INT_CLR_Pos = 0x1
	// Bit mask of TXFIFO_EMPTY_INT_CLR field.
	UART_INT_CLR_TXFIFO_EMPTY_INT_CLR_Msk = 0x2
	// Bit TXFIFO_EMPTY_INT_CLR.
	UART_INT_CLR_TXFIFO_EMPTY_INT_CLR = 0x2
	// Position of RXFIFO_FULL_INT_CLR field.
	UART_INT_CLR_RXFIFO_FULL_INT_CLR_Pos = 0x0
	// Bit mask of RXFIFO_FULL_INT_CLR field.
	UART_INT_CLR_RXFIFO_FULL_INT_CLR_Msk = 0x1
	// Bit RXFIFO_FULL_INT_CLR.
	UART_INT_CLR_RXFIFO_FULL_INT_CLR = 0x1

	// CLKDIV: UART_CLKDIV
	// Position of CLKDIV_FRAG field.
	UART_CLKDIV_CLKDIV_FRAG_Pos = 0x14
	// Bit mask of CLKDIV_FRAG field.
	UART_CLKDIV_CLKDIV_FRAG_Msk = 0xf00000
	// Position of CLKDIV field.
	UART_CLKDIV_CLKDIV_Pos = 0x0
	// Bit mask of CLKDIV field.
	UART_CLKDIV_CLKDIV_Msk = 0xfffff

	// AUTOBAUD: UART_AUTOBAUD
	// Position of GLITCH_FILT field.
	UART_AUTOBAUD_GLITCH_FILT_Pos = 0x8
	// Bit mask of GLITCH_FILT field.
	UART_AUTOBAUD_GLITCH_FILT_Msk = 0xff00
	// Position of AUTOBAUD_EN field.
	UART_AUTOBAUD_AUTOBAUD_EN_Pos = 0x0
	// Bit mask of AUTOBAUD_EN field.
	UART_AUTOBAUD_AUTOBAUD_EN_Msk = 0x1
	// Bit AUTOBAUD_EN.
	UART_AUTOBAUD_AUTOBAUD_EN = 0x1

	// STATUS: UART_STATUS
	// Position of TXD field.
	UART_STATUS_TXD_Pos = 0x1f
	// Bit mask of TXD field.
	UART_STATUS_TXD_Msk = 0x80000000
	// Bit TXD.
	UART_STATUS_TXD = 0x80000000
	// Position of RTSN field.
	UART_STATUS_RTSN_Pos = 0x1e
	// Bit mask of RTSN field.
	UART_STATUS_RTSN_Msk = 0x40000000
	// Bit RTSN.
	UART_STATUS_RTSN = 0x40000000
	// Position of DTRN field.
	UART_STATUS_DTRN_Pos = 0x1d
	// Bit mask of DTRN field.
	UART_STATUS_DTRN_Msk = 0x20000000
	// Bit DTRN.
	UART_STATUS_DTRN = 0x20000000
	// Position of ST_UTX_OUT field.
	UART_STATUS_ST_UTX_OUT_Pos = 0x18
	// Bit mask of ST_UTX_OUT field.
	UART_STATUS_ST_UTX_OUT_Msk = 0xf000000
	// TX_IDLE
	UART_STATUS_ST_UTX_OUT_TX_IDLE = 0x0
	// TX_STRT
	UART_STATUS_ST_UTX_OUT_TX_STRT = 0x1
	// TX_DAT0
	UART_STATUS_ST_UTX_OUT_TX_DAT0 = 0x2
	// TX_DAT1
	UART_STATUS_ST_UTX_OUT_TX_DAT1 = 0x3
	// TX_DAT2
	UART_STATUS_ST_UTX_OUT_TX_DAT2 = 0x4
	// TX_DAT3
	UART_STATUS_ST_UTX_OUT_TX_DAT3 = 0x5
	// TX_DAT4
	UART_STATUS_ST_UTX_OUT_TX_DAT4 = 0x6
	// TX_DAT5
	UART_STATUS_ST_UTX_OUT_TX_DAT5 = 0x7
	// TX_DAT6
	UART_STATUS_ST_UTX_OUT_TX_DAT6 = 0x8
	// TX_DAT7
	UART_STATUS_ST_UTX_OUT_TX_DAT7 = 0x9
	// TX_PRTY
	UART_STATUS_ST_UTX_OUT_TX_PRTY = 0xa
	// TX_STP1
	UART_STATUS_ST_UTX_OUT_TX_STP1 = 0xb
	// TX_STP2
	UART_STATUS_ST_UTX_OUT_TX_STP2 = 0xc
	// TX_DL1
	UART_STATUS_ST_UTX_OUT_TX_DL1 = 0xe
	// Position of TXFIFO_CNT field.
	UART_STATUS_TXFIFO_CNT_Pos = 0x10
	// Bit mask of TXFIFO_CNT field.
	UART_STATUS_TXFIFO_CNT_Msk = 0xff0000
	// Position of RXD field.
	UART_STATUS_RXD_Pos = 0xf
	// Bit mask of RXD field.
	UART_STATUS_RXD_Msk = 0x8000
	// Bit RXD.
	UART_STATUS_RXD = 0x8000
	// Position of CTSN field.
	UART_STATUS_CTSN_Pos = 0xe
	// Bit mask of CTSN field.
	UART_STATUS_CTSN_Msk = 0x4000
	// Bit CTSN.
	UART_STATUS_CTSN = 0x4000
	// Position of DSRN field.
	UART_STATUS_DSRN_Pos = 0xd
	// Bit mask of DSRN field.
	UART_STATUS_DSRN_Msk = 0x2000
	// Bit DSRN.
	UART_STATUS_DSRN = 0x2000
	// Position of ST_URX_OUT field.
	UART_STATUS_ST_URX_OUT_Pos = 0x8
	// Bit mask of ST_URX_OUT field.
	UART_STATUS_ST_URX_OUT_Msk = 0xf00
	// RX_IDLE
	UART_STATUS_ST_URX_OUT_RX_IDLE = 0x0
	// RX_STRT
	UART_STATUS_ST_URX_OUT_RX_STRT = 0x1
	// RX_DAT0
	UART_STATUS_ST_URX_OUT_RX_DAT0 = 0x2
	// RX_DAT1
	UART_STATUS_ST_URX_OUT_RX_DAT1 = 0x3
	// RX_DAT2
	UART_STATUS_ST_URX_OUT_RX_DAT2 = 0x4
	// RX_DAT3
	UART_STATUS_ST_URX_OUT_RX_DAT3 = 0x5
	// RX_DAT4
	UART_STATUS_ST_URX_OUT_RX_DAT4 = 0x6
	// RX_DAT5
	UART_STATUS_ST_URX_OUT_RX_DAT5 = 0x7
	// RX_DAT6
	UART_STATUS_ST_URX_OUT_RX_DAT6 = 0x8
	// RX_DAT7
	UART_STATUS_ST_URX_OUT_RX_DAT7 = 0x9
	// RX_PRTY
	UART_STATUS_ST_URX_OUT_RX_PRTY = 0xa
	// RX_STP1
	UART_STATUS_ST_URX_OUT_RX_STP1 = 0xb
	// RX_STP2
	UART_STATUS_ST_URX_OUT_RX_STP2 = 0xc
	// RX_DL1
	UART_STATUS_ST_URX_OUT_RX_DL1 = 0xd
	// Position of RXFIFO_CNT field.
	UART_STATUS_RXFIFO_CNT_Pos = 0x0
	// Bit mask of RXFIFO_CNT field.
	UART_STATUS_RXFIFO_CNT_Msk = 0xff

	// CONF0: UART_CONF0
	// Position of TICK_REF_ALWAYS_ON field.
	UART_CONF0_TICK_REF_ALWAYS_ON_Pos = 0x1b
	// Bit mask of TICK_REF_ALWAYS_ON field.
	UART_CONF0_TICK_REF_ALWAYS_ON_Msk = 0x8000000
	// Bit TICK_REF_ALWAYS_ON.
	UART_CONF0_TICK_REF_ALWAYS_ON = 0x8000000
	// Position of ERR_WR_MASK field.
	UART_CONF0_ERR_WR_MASK_Pos = 0x1a
	// Bit mask of ERR_WR_MASK field.
	UART_CONF0_ERR_WR_MASK_Msk = 0x4000000
	// Bit ERR_WR_MASK.
	UART_CONF0_ERR_WR_MASK = 0x4000000
	// Position of CLK_EN field.
	UART_CONF0_CLK_EN_Pos = 0x19
	// Bit mask of CLK_EN field.
	UART_CONF0_CLK_EN_Msk = 0x2000000
	// Bit CLK_EN.
	UART_CONF0_CLK_EN = 0x2000000
	// Position of DTR_INV field.
	UART_CONF0_DTR_INV_Pos = 0x18
	// Bit mask of DTR_INV field.
	UART_CONF0_DTR_INV_Msk = 0x1000000
	// Bit DTR_INV.
	UART_CONF0_DTR_INV = 0x1000000
	// Position of RTS_INV field.
	UART_CONF0_RTS_INV_Pos = 0x17
	// Bit mask of RTS_INV field.
	UART_CONF0_RTS_INV_Msk = 0x800000
	// Bit RTS_INV.
	UART_CONF0_RTS_INV = 0x800000
	// Position of TXD_INV field.
	UART_CONF0_TXD_INV_Pos = 0x16
	// Bit mask of TXD_INV field.
	UART_CONF0_TXD_INV_Msk = 0x400000
	// Bit TXD_INV.
	UART_CONF0_TXD_INV = 0x400000
	// Position of DSR_INV field.
	UART_CONF0_DSR_INV_Pos = 0x15
	// Bit mask of DSR_INV field.
	UART_CONF0_DSR_INV_Msk = 0x200000
	// Bit DSR_INV.
	UART_CONF0_DSR_INV = 0x200000
	// Position of CTS_INV field.
	UART_CONF0_CTS_INV_Pos = 0x14
	// Bit mask of CTS_INV field.
	UART_CONF0_CTS_INV_Msk = 0x100000
	// Bit CTS_INV.
	UART_CONF0_CTS_INV = 0x100000
	// Position of RXD_INV field.
	UART_CONF0_RXD_INV_Pos = 0x13
	// Bit mask of RXD_INV field.
	UART_CONF0_RXD_INV_Msk = 0x80000
	// Bit RXD_INV.
	UART_CONF0_RXD_INV = 0x80000
	// Position of TXFIFO_RST field.
	UART_CONF0_TXFIFO_RST_Pos = 0x12
	// Bit mask of TXFIFO_RST field.
	UART_CONF0_TXFIFO_RST_Msk = 0x40000
	// Bit TXFIFO_RST.
	UART_CONF0_TXFIFO_RST = 0x40000
	// Position of RXFIFO_RST field.
	UART_CONF0_RXFIFO_RST_Pos = 0x11
	// Bit mask of RXFIFO_RST field.
	UART_CONF0_RXFIFO_RST_Msk = 0x20000
	// Bit RXFIFO_RST.
	UART_CONF0_RXFIFO_RST = 0x20000
	// Position of IRDA_EN field.
	UART_CONF0_IRDA_EN_Pos = 0x10
	// Bit mask of IRDA_EN field.
	UART_CONF0_IRDA_EN_Msk = 0x10000
	// Bit IRDA_EN.
	UART_CONF0_IRDA_EN = 0x10000
	// Position of TX_FLOW_EN field.
	UART_CONF0_TX_FLOW_EN_Pos = 0xf
	// Bit mask of TX_FLOW_EN field.
	UART_CONF0_TX_FLOW_EN_Msk = 0x8000
	// Bit TX_FLOW_EN.
	UART_CONF0_TX_FLOW_EN = 0x8000
	// Position of LOOPBACK field.
	UART_CONF0_LOOPBACK_Pos = 0xe
	// Bit mask of LOOPBACK field.
	UART_CONF0_LOOPBACK_Msk = 0x4000
	// Bit LOOPBACK.
	UART_CONF0_LOOPBACK = 0x4000
	// Position of IRDA_RX_INV field.
	UART_CONF0_IRDA_RX_INV_Pos = 0xd
	// Bit mask of IRDA_RX_INV field.
	UART_CONF0_IRDA_RX_INV_Msk = 0x2000
	// Bit IRDA_RX_INV.
	UART_CONF0_IRDA_RX_INV = 0x2000
	// Position of IRDA_TX_INV field.
	UART_CONF0_IRDA_TX_INV_Pos = 0xc
	// Bit mask of IRDA_TX_INV field.
	UART_CONF0_IRDA_TX_INV_Msk = 0x1000
	// Bit IRDA_TX_INV.
	UART_CONF0_IRDA_TX_INV = 0x1000
	// Position of IRDA_WCTL field.
	UART_CONF0_IRDA_WCTL_Pos = 0xb
	// Bit mask of IRDA_WCTL field.
	UART_CONF0_IRDA_WCTL_Msk = 0x800
	// Bit IRDA_WCTL.
	UART_CONF0_IRDA_WCTL = 0x800
	// Position of IRDA_TX_EN field.
	UART_CONF0_IRDA_TX_EN_Pos = 0xa
	// Bit mask of IRDA_TX_EN field.
	UART_CONF0_IRDA_TX_EN_Msk = 0x400
	// Bit IRDA_TX_EN.
	UART_CONF0_IRDA_TX_EN = 0x400
	// Position of IRDA_DPLX field.
	UART_CONF0_IRDA_DPLX_Pos = 0x9
	// Bit mask of IRDA_DPLX field.
	UART_CONF0_IRDA_DPLX_Msk = 0x200
	// Bit IRDA_DPLX.
	UART_CONF0_IRDA_DPLX = 0x200
	// Position of TXD_BRK field.
	UART_CONF0_TXD_BRK_Pos = 0x8
	// Bit mask of TXD_BRK field.
	UART_CONF0_TXD_BRK_Msk = 0x100
	// Bit TXD_BRK.
	UART_CONF0_TXD_BRK = 0x100
	// Position of SW_DTR field.
	UART_CONF0_SW_DTR_Pos = 0x7
	// Bit mask of SW_DTR field.
	UART_CONF0_SW_DTR_Msk = 0x80
	// Bit SW_DTR.
	UART_CONF0_SW_DTR = 0x80
	// Position of SW_RTS field.
	UART_CONF0_SW_RTS_Pos = 0x6
	// Bit mask of SW_RTS field.
	UART_CONF0_SW_RTS_Msk = 0x40
	// Bit SW_RTS.
	UART_CONF0_SW_RTS = 0x40
	// Position of STOP_BIT_NUM field.
	UART_CONF0_STOP_BIT_NUM_Pos = 0x4
	// Bit mask of STOP_BIT_NUM field.
	UART_CONF0_STOP_BIT_NUM_Msk = 0x30
	// 1 stop bits
	UART_CONF0_STOP_BIT_NUM_STOP_BITS_1 = 0x1
	// 1.5 stop bits
	UART_CONF0_STOP_BIT_NUM_STOP_BITS_1p5 = 0x2
	// 2 stop bits
	UART_CONF0_STOP_BIT_NUM_STOP_BITS_2 = 0x3
	// Position of BIT_NUM field.
	UART_CONF0_BIT_NUM_Pos = 0x2
	// Bit mask of BIT_NUM field.
	UART_CONF0_BIT_NUM_Msk = 0xc
	// 5 data bits
	UART_CONF0_BIT_NUM_DATA_BITS_5 = 0x0
	// 6 data bits
	UART_CONF0_BIT_NUM_DATA_BITS_6 = 0x1
	// 7 data bits
	UART_CONF0_BIT_NUM_DATA_BITS_7 = 0x2
	// 8 data bits
	UART_CONF0_BIT_NUM_DATA_BITS_8 = 0x3
	// Position of PARITY_EN field.
	UART_CONF0_PARITY_EN_Pos = 0x1
	// Bit mask of PARITY_EN field.
	UART_CONF0_PARITY_EN_Msk = 0x2
	// Bit PARITY_EN.
	UART_CONF0_PARITY_EN = 0x2
	// Position of PARITY field.
	UART_CONF0_PARITY_Pos = 0x0
	// Bit mask of PARITY field.
	UART_CONF0_PARITY_Msk = 0x1
	// Bit PARITY.
	UART_CONF0_PARITY = 0x1

	// CONF1: UART_CONF1
	// Position of RX_TOUT_EN field.
	UART_CONF1_RX_TOUT_EN_Pos = 0x1f
	// Bit mask of RX_TOUT_EN field.
	UART_CONF1_RX_TOUT_EN_Msk = 0x80000000
	// Bit RX_TOUT_EN.
	UART_CONF1_RX_TOUT_EN = 0x80000000
	// Position of RX_TOUT_THRHD field.
	UART_CONF1_RX_TOUT_THRHD_Pos = 0x18
	// Bit mask of RX_TOUT_THRHD field.
	UART_CONF1_RX_TOUT_THRHD_Msk = 0x7f000000
	// Position of RX_FLOW_EN field.
	UART_CONF1_RX_FLOW_EN_Pos = 0x17
	// Bit mask of RX_FLOW_EN field.
	UART_CONF1_RX_FLOW_EN_Msk = 0x800000
	// Bit RX_FLOW_EN.
	UART_CONF1_RX_FLOW_EN = 0x800000
	// Position of RX_FLOW_THRHD field.
	UART_CONF1_RX_FLOW_THRHD_Pos = 0x10
	// Bit mask of RX_FLOW_THRHD field.
	UART_CONF1_RX_FLOW_THRHD_Msk = 0x7f0000
	// Position of TXFIFO_EMPTY_THRHD field.
	UART_CONF1_TXFIFO_EMPTY_THRHD_Pos = 0x8
	// Bit mask of TXFIFO_EMPTY_THRHD field.
	UART_CONF1_TXFIFO_EMPTY_THRHD_Msk = 0x7f00
	// Position of RXFIFO_FULL_THRHD field.
	UART_CONF1_RXFIFO_FULL_THRHD_Pos = 0x0
	// Bit mask of RXFIFO_FULL_THRHD field.
	UART_CONF1_RXFIFO_FULL_THRHD_Msk = 0x7f

	// LOWPULSE: UART_LOWPULSE
	// Position of LOWPULSE_MIN_CNT field.
	UART_LOWPULSE_LOWPULSE_MIN_CNT_Pos = 0x0
	// Bit mask of LOWPULSE_MIN_CNT field.
	UART_LOWPULSE_LOWPULSE_MIN_CNT_Msk = 0xfffff

	// HIGHPULSE: UART_HIGHPULSE
	// Position of HIGHPULSE_MIN_CNT field.
	UART_HIGHPULSE_HIGHPULSE_MIN_CNT_Pos = 0x0
	// Bit mask of HIGHPULSE_MIN_CNT field.
	UART_HIGHPULSE_HIGHPULSE_MIN_CNT_Msk = 0xfffff

	// RXD_CNT: UART_RXD_CNT
	// Position of RXD_EDGE_CNT field.
	UART_RXD_CNT_RXD_EDGE_CNT_Pos = 0x0
	// Bit mask of RXD_EDGE_CNT field.
	UART_RXD_CNT_RXD_EDGE_CNT_Msk = 0x3ff

	// FLOW_CONF: UART_FLOW_CONF
	// Position of SEND_XOFF field.
	UART_FLOW_CONF_SEND_XOFF_Pos = 0x5
	// Bit mask of SEND_XOFF field.
	UART_FLOW_CONF_SEND_XOFF_Msk = 0x20
	// Bit SEND_XOFF.
	UART_FLOW_CONF_SEND_XOFF = 0x20
	// Position of SEND_XON field.
	UART_FLOW_CONF_SEND_XON_Pos = 0x4
	// Bit mask of SEND_XON field.
	UART_FLOW_CONF_SEND_XON_Msk = 0x10
	// Bit SEND_XON.
	UART_FLOW_CONF_SEND_XON = 0x10
	// Position of FORCE_XOFF field.
	UART_FLOW_CONF_FORCE_XOFF_Pos = 0x3
	// Bit mask of FORCE_XOFF field.
	UART_FLOW_CONF_FORCE_XOFF_Msk = 0x8
	// Bit FORCE_XOFF.
	UART_FLOW_CONF_FORCE_XOFF = 0x8
	// Position of FORCE_XON field.
	UART_FLOW_CONF_FORCE_XON_Pos = 0x2
	// Bit mask of FORCE_XON field.
	UART_FLOW_CONF_FORCE_XON_Msk = 0x4
	// Bit FORCE_XON.
	UART_FLOW_CONF_FORCE_XON = 0x4
	// Position of XONOFF_DEL field.
	UART_FLOW_CONF_XONOFF_DEL_Pos = 0x1
	// Bit mask of XONOFF_DEL field.
	UART_FLOW_CONF_XONOFF_DEL_Msk = 0x2
	// Bit XONOFF_DEL.
	UART_FLOW_CONF_XONOFF_DEL = 0x2
	// Position of SW_FLOW_CON_EN field.
	UART_FLOW_CONF_SW_FLOW_CON_EN_Pos = 0x0
	// Bit mask of SW_FLOW_CON_EN field.
	UART_FLOW_CONF_SW_FLOW_CON_EN_Msk = 0x1
	// Bit SW_FLOW_CON_EN.
	UART_FLOW_CONF_SW_FLOW_CON_EN = 0x1

	// SLEEP_CONF: UART_SLEEP_CONF
	// Position of ACTIVE_THRESHOLD field.
	UART_SLEEP_CONF_ACTIVE_THRESHOLD_Pos = 0x0
	// Bit mask of ACTIVE_THRESHOLD field.
	UART_SLEEP_CONF_ACTIVE_THRESHOLD_Msk = 0x3ff

	// SWFC_CONF: UART_SWFC_CONF
	// Position of XOFF_CHAR field.
	UART_SWFC_CONF_XOFF_CHAR_Pos = 0x18
	// Bit mask of XOFF_CHAR field.
	UART_SWFC_CONF_XOFF_CHAR_Msk = 0xff000000
	// Position of XON_CHAR field.
	UART_SWFC_CONF_XON_CHAR_Pos = 0x10
	// Bit mask of XON_CHAR field.
	UART_SWFC_CONF_XON_CHAR_Msk = 0xff0000
	// Position of XOFF_THRESHOLD field.
	UART_SWFC_CONF_XOFF_THRESHOLD_Pos = 0x8
	// Bit mask of XOFF_THRESHOLD field.
	UART_SWFC_CONF_XOFF_THRESHOLD_Msk = 0xff00
	// Position of XON_THRESHOLD field.
	UART_SWFC_CONF_XON_THRESHOLD_Pos = 0x0
	// Bit mask of XON_THRESHOLD field.
	UART_SWFC_CONF_XON_THRESHOLD_Msk = 0xff

	// IDLE_CONF: UART_IDLE_CONF
	// Position of TX_BRK_NUM field.
	UART_IDLE_CONF_TX_BRK_NUM_Pos = 0x14
	// Bit mask of TX_BRK_NUM field.
	UART_IDLE_CONF_TX_BRK_NUM_Msk = 0xff00000
	// Position of TX_IDLE_NUM field.
	UART_IDLE_CONF_TX_IDLE_NUM_Pos = 0xa
	// Bit mask of TX_IDLE_NUM field.
	UART_IDLE_CONF_TX_IDLE_NUM_Msk = 0xffc00
	// Position of RX_IDLE_THRHD field.
	UART_IDLE_CONF_RX_IDLE_THRHD_Pos = 0x0
	// Bit mask of RX_IDLE_THRHD field.
	UART_IDLE_CONF_RX_IDLE_THRHD_Msk = 0x3ff

	// RS485_CONF: UART_RS485_CONF
	// Position of RS485_TX_DLY_NUM field.
	UART_RS485_CONF_RS485_TX_DLY_NUM_Pos = 0x6
	// Bit mask of RS485_TX_DLY_NUM field.
	UART_RS485_CONF_RS485_TX_DLY_NUM_Msk = 0x3c0
	// Position of RS485_RX_DLY_NUM field.
	UART_RS485_CONF_RS485_RX_DLY_NUM_Pos = 0x5
	// Bit mask of RS485_RX_DLY_NUM field.
	UART_RS485_CONF_RS485_RX_DLY_NUM_Msk = 0x20
	// Bit RS485_RX_DLY_NUM.
	UART_RS485_CONF_RS485_RX_DLY_NUM = 0x20
	// Position of RS485RXBY_TX_EN field.
	UART_RS485_CONF_RS485RXBY_TX_EN_Pos = 0x4
	// Bit mask of RS485RXBY_TX_EN field.
	UART_RS485_CONF_RS485RXBY_TX_EN_Msk = 0x10
	// Bit RS485RXBY_TX_EN.
	UART_RS485_CONF_RS485RXBY_TX_EN = 0x10
	// Position of RS485TX_RX_EN field.
	UART_RS485_CONF_RS485TX_RX_EN_Pos = 0x3
	// Bit mask of RS485TX_RX_EN field.
	UART_RS485_CONF_RS485TX_RX_EN_Msk = 0x8
	// Bit RS485TX_RX_EN.
	UART_RS485_CONF_RS485TX_RX_EN = 0x8
	// Position of DL1_EN field.
	UART_RS485_CONF_DL1_EN_Pos = 0x2
	// Bit mask of DL1_EN field.
	UART_RS485_CONF_DL1_EN_Msk = 0x4
	// Bit DL1_EN.
	UART_RS485_CONF_DL1_EN = 0x4
	// Position of DL0_EN field.
	UART_RS485_CONF_DL0_EN_Pos = 0x1
	// Bit mask of DL0_EN field.
	UART_RS485_CONF_DL0_EN_Msk = 0x2
	// Bit DL0_EN.
	UART_RS485_CONF_DL0_EN = 0x2
	// Position of RS485_EN field.
	UART_RS485_CONF_RS485_EN_Pos = 0x0
	// Bit mask of RS485_EN field.
	UART_RS485_CONF_RS485_EN_Msk = 0x1
	// Bit RS485_EN.
	UART_RS485_CONF_RS485_EN = 0x1

	// AT_CMD_PRECNT: UART_AT_CMD_PRECNT
	// Position of PRE_IDLE_NUM field.
	UART_AT_CMD_PRECNT_PRE_IDLE_NUM_Pos = 0x0
	// Bit mask of PRE_IDLE_NUM field.
	UART_AT_CMD_PRECNT_PRE_IDLE_NUM_Msk = 0xffffff

	// AT_CMD_POSTCNT: UART_AT_CMD_POSTCNT
	// Position of POST_IDLE_NUM field.
	UART_AT_CMD_POSTCNT_POST_IDLE_NUM_Pos = 0x0
	// Bit mask of POST_IDLE_NUM field.
	UART_AT_CMD_POSTCNT_POST_IDLE_NUM_Msk = 0xffffff

	// AT_CMD_GAPTOUT: UART_AT_CMD_GAPTOUT
	// Position of RX_GAP_TOUT field.
	UART_AT_CMD_GAPTOUT_RX_GAP_TOUT_Pos = 0x0
	// Bit mask of RX_GAP_TOUT field.
	UART_AT_CMD_GAPTOUT_RX_GAP_TOUT_Msk = 0xffffff

	// AT_CMD_CHAR: UART_AT_CMD_CHAR
	// Position of CHAR_NUM field.
	UART_AT_CMD_CHAR_CHAR_NUM_Pos = 0x8
	// Bit mask of CHAR_NUM field.
	UART_AT_CMD_CHAR_CHAR_NUM_Msk = 0xff00
	// Position of AT_CMD_CHAR field.
	UART_AT_CMD_CHAR_AT_CMD_CHAR_Pos = 0x0
	// Bit mask of AT_CMD_CHAR field.
	UART_AT_CMD_CHAR_AT_CMD_CHAR_Msk = 0xff

	// MEM_CONF: UART_MEM_CONF
	// Position of TX_MEM_EMPTY_THRHD field.
	UART_MEM_CONF_TX_MEM_EMPTY_THRHD_Pos = 0x1c
	// Bit mask of TX_MEM_EMPTY_THRHD field.
	UART_MEM_CONF_TX_MEM_EMPTY_THRHD_Msk = 0x70000000
	// Position of RX_MEM_FULL_THRHD field.
	UART_MEM_CONF_RX_MEM_FULL_THRHD_Pos = 0x19
	// Bit mask of RX_MEM_FULL_THRHD field.
	UART_MEM_CONF_RX_MEM_FULL_THRHD_Msk = 0xe000000
	// Position of XOFF_THRESHOLD_H2 field.
	UART_MEM_CONF_XOFF_THRESHOLD_H2_Pos = 0x17
	// Bit mask of XOFF_THRESHOLD_H2 field.
	UART_MEM_CONF_XOFF_THRESHOLD_H2_Msk = 0x1800000
	// Position of XON_THRESHOLD_H2 field.
	UART_MEM_CONF_XON_THRESHOLD_H2_Pos = 0x15
	// Bit mask of XON_THRESHOLD_H2 field.
	UART_MEM_CONF_XON_THRESHOLD_H2_Msk = 0x600000
	// Position of RX_TOUT_THRHD_H3 field.
	UART_MEM_CONF_RX_TOUT_THRHD_H3_Pos = 0x12
	// Bit mask of RX_TOUT_THRHD_H3 field.
	UART_MEM_CONF_RX_TOUT_THRHD_H3_Msk = 0x1c0000
	// Position of RX_FLOW_THRHD_H3 field.
	UART_MEM_CONF_RX_FLOW_THRHD_H3_Pos = 0xf
	// Bit mask of RX_FLOW_THRHD_H3 field.
	UART_MEM_CONF_RX_FLOW_THRHD_H3_Msk = 0x38000
	// Position of TX_SIZE field.
	UART_MEM_CONF_TX_SIZE_Pos = 0x7
	// Bit mask of TX_SIZE field.
	UART_MEM_CONF_TX_SIZE_Msk = 0x780
	// Position of RX_SIZE field.
	UART_MEM_CONF_RX_SIZE_Pos = 0x3
	// Bit mask of RX_SIZE field.
	UART_MEM_CONF_RX_SIZE_Msk = 0x78
	// Position of MEM_PD field.
	UART_MEM_CONF_MEM_PD_Pos = 0x0
	// Bit mask of MEM_PD field.
	UART_MEM_CONF_MEM_PD_Msk = 0x1
	// Bit MEM_PD.
	UART_MEM_CONF_MEM_PD = 0x1

	// MEM_TX_STATUS: UART_MEM_TX_STATUS
	// Position of MEM_TX_STATUS field.
	UART_MEM_TX_STATUS_MEM_TX_STATUS_Pos = 0x0
	// Bit mask of MEM_TX_STATUS field.
	UART_MEM_TX_STATUS_MEM_TX_STATUS_Msk = 0xffffff

	// MEM_RX_STATUS: UART_MEM_RX_STATUS
	// Position of MEM_RX_STATUS field.
	UART_MEM_RX_STATUS_MEM_RX_STATUS_Pos = 0x0
	// Bit mask of MEM_RX_STATUS field.
	UART_MEM_RX_STATUS_MEM_RX_STATUS_Msk = 0xffffff
	// Position of MEM_RX_RD_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_RD_ADDR_Pos = 0x2
	// Bit mask of MEM_RX_RD_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_RD_ADDR_Msk = 0x1ffc
	// Position of MEM_RX_WR_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_WR_ADDR_Pos = 0xd
	// Bit mask of MEM_RX_WR_ADDR field.
	UART_MEM_RX_STATUS_MEM_RX_WR_ADDR_Msk = 0xffe000

	// MEM_CNT_STATUS: UART_MEM_CNT_STATUS
	// Position of TX_MEM_CNT field.
	UART_MEM_CNT_STATUS_TX_MEM_CNT_Pos = 0x3
	// Bit mask of TX_MEM_CNT field.
	UART_MEM_CNT_STATUS_TX_MEM_CNT_Msk = 0x38
	// Position of RX_MEM_CNT field.
	UART_MEM_CNT_STATUS_RX_MEM_CNT_Pos = 0x0
	// Bit mask of RX_MEM_CNT field.
	UART_MEM_CNT_STATUS_RX_MEM_CNT_Msk = 0x7

	// POSPULSE: UART_POSPULSE
	// Position of POSEDGE_MIN_CNT field.
	UART_POSPULSE_POSEDGE_MIN_CNT_Pos = 0x0
	// Bit mask of POSEDGE_MIN_CNT field.
	UART_POSPULSE_POSEDGE_MIN_CNT_Msk = 0xfffff

	// NEGPULSE: UART_NEGPULSE
	// Position of NEGEDGE_MIN_CNT field.
	UART_NEGPULSE_NEGEDGE_MIN_CNT_Pos = 0x0
	// Bit mask of NEGEDGE_MIN_CNT field.
	UART_NEGPULSE_NEGEDGE_MIN_CNT_Msk = 0xfffff

	// DATE: UART_DATE
	// Position of DATE field.
	UART_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	UART_DATE_DATE_Msk = 0xffffffff

	// ID: UART_ID
	// Position of ID field.
	UART_ID_ID_Pos = 0x0
	// Bit mask of ID field.
	UART_ID_ID_Msk = 0xffffffff

	// TX_FIFO: UART_TX_FIFO
	// Position of DATA field.
	UART_TX_FIFO_DATA_Pos = 0x0
	// Bit mask of DATA field.
	UART_TX_FIFO_DATA_Msk = 0xff
)

// Constants for LEDC
const (
	// HSCH0_CONF0: LEDC_HSCH0_CONF0
	// Position of CLK_EN field.
	LEDC_HSCH0_CONF0_CLK_EN_Pos = 0x1f
	// Bit mask of CLK_EN field.
	LEDC_HSCH0_CONF0_CLK_EN_Msk = 0x80000000
	// Bit CLK_EN.
	LEDC_HSCH0_CONF0_CLK_EN = 0x80000000
	// Position of IDLE_LV_HSCH0 field.
	LEDC_HSCH0_CONF0_IDLE_LV_HSCH0_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH0 field.
	LEDC_HSCH0_CONF0_IDLE_LV_HSCH0_Msk = 0x8
	// Bit IDLE_LV_HSCH0.
	LEDC_HSCH0_CONF0_IDLE_LV_HSCH0 = 0x8
	// Position of SIG_OUT_EN_HSCH0 field.
	LEDC_HSCH0_CONF0_SIG_OUT_EN_HSCH0_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH0 field.
	LEDC_HSCH0_CONF0_SIG_OUT_EN_HSCH0_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH0.
	LEDC_HSCH0_CONF0_SIG_OUT_EN_HSCH0 = 0x4
	// Position of TIMER_SEL_HSCH0 field.
	LEDC_HSCH0_CONF0_TIMER_SEL_HSCH0_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH0 field.
	LEDC_HSCH0_CONF0_TIMER_SEL_HSCH0_Msk = 0x3

	// HSCH0_HPOINT: LEDC_HSCH0_HPOINT
	// Position of HPOINT_HSCH0 field.
	LEDC_HSCH0_HPOINT_HPOINT_HSCH0_Pos = 0x0
	// Bit mask of HPOINT_HSCH0 field.
	LEDC_HSCH0_HPOINT_HPOINT_HSCH0_Msk = 0xfffff

	// HSCH0_DUTY: LEDC_HSCH0_DUTY
	// Position of DUTY_HSCH0 field.
	LEDC_HSCH0_DUTY_DUTY_HSCH0_Pos = 0x0
	// Bit mask of DUTY_HSCH0 field.
	LEDC_HSCH0_DUTY_DUTY_HSCH0_Msk = 0x1ffffff

	// HSCH0_CONF1: LEDC_HSCH0_CONF1
	// Position of DUTY_START_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_START_HSCH0_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_START_HSCH0_Msk = 0x80000000
	// Bit DUTY_START_HSCH0.
	LEDC_HSCH0_CONF1_DUTY_START_HSCH0 = 0x80000000
	// Position of DUTY_INC_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_INC_HSCH0_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_INC_HSCH0_Msk = 0x40000000
	// Bit DUTY_INC_HSCH0.
	LEDC_HSCH0_CONF1_DUTY_INC_HSCH0 = 0x40000000
	// Position of DUTY_NUM_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_NUM_HSCH0_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_NUM_HSCH0_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_CYCLE_HSCH0_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_CYCLE_HSCH0_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_SCALE_HSCH0_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH0 field.
	LEDC_HSCH0_CONF1_DUTY_SCALE_HSCH0_Msk = 0x3ff

	// HSCH0_DUTY_R: LEDC_HSCH0_DUTY_R
	// Position of DUTY_HSCH0 field.
	LEDC_HSCH0_DUTY_R_DUTY_HSCH0_Pos = 0x0
	// Bit mask of DUTY_HSCH0 field.
	LEDC_HSCH0_DUTY_R_DUTY_HSCH0_Msk = 0x1ffffff

	// HSCH1_CONF0: LEDC_HSCH1_CONF0
	// Position of IDLE_LV_HSCH1 field.
	LEDC_HSCH1_CONF0_IDLE_LV_HSCH1_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH1 field.
	LEDC_HSCH1_CONF0_IDLE_LV_HSCH1_Msk = 0x8
	// Bit IDLE_LV_HSCH1.
	LEDC_HSCH1_CONF0_IDLE_LV_HSCH1 = 0x8
	// Position of SIG_OUT_EN_HSCH1 field.
	LEDC_HSCH1_CONF0_SIG_OUT_EN_HSCH1_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH1 field.
	LEDC_HSCH1_CONF0_SIG_OUT_EN_HSCH1_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH1.
	LEDC_HSCH1_CONF0_SIG_OUT_EN_HSCH1 = 0x4
	// Position of TIMER_SEL_HSCH1 field.
	LEDC_HSCH1_CONF0_TIMER_SEL_HSCH1_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH1 field.
	LEDC_HSCH1_CONF0_TIMER_SEL_HSCH1_Msk = 0x3

	// HSCH1_HPOINT: LEDC_HSCH1_HPOINT
	// Position of HPOINT_HSCH1 field.
	LEDC_HSCH1_HPOINT_HPOINT_HSCH1_Pos = 0x0
	// Bit mask of HPOINT_HSCH1 field.
	LEDC_HSCH1_HPOINT_HPOINT_HSCH1_Msk = 0xfffff

	// HSCH1_DUTY: LEDC_HSCH1_DUTY
	// Position of DUTY_HSCH1 field.
	LEDC_HSCH1_DUTY_DUTY_HSCH1_Pos = 0x0
	// Bit mask of DUTY_HSCH1 field.
	LEDC_HSCH1_DUTY_DUTY_HSCH1_Msk = 0x1ffffff

	// HSCH1_CONF1: LEDC_HSCH1_CONF1
	// Position of DUTY_START_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_START_HSCH1_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_START_HSCH1_Msk = 0x80000000
	// Bit DUTY_START_HSCH1.
	LEDC_HSCH1_CONF1_DUTY_START_HSCH1 = 0x80000000
	// Position of DUTY_INC_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_INC_HSCH1_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_INC_HSCH1_Msk = 0x40000000
	// Bit DUTY_INC_HSCH1.
	LEDC_HSCH1_CONF1_DUTY_INC_HSCH1 = 0x40000000
	// Position of DUTY_NUM_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_NUM_HSCH1_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_NUM_HSCH1_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_CYCLE_HSCH1_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_CYCLE_HSCH1_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_SCALE_HSCH1_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH1 field.
	LEDC_HSCH1_CONF1_DUTY_SCALE_HSCH1_Msk = 0x3ff

	// HSCH1_DUTY_R: LEDC_HSCH1_DUTY_R
	// Position of DUTY_HSCH1 field.
	LEDC_HSCH1_DUTY_R_DUTY_HSCH1_Pos = 0x0
	// Bit mask of DUTY_HSCH1 field.
	LEDC_HSCH1_DUTY_R_DUTY_HSCH1_Msk = 0x1ffffff

	// HSCH2_CONF0: LEDC_HSCH2_CONF0
	// Position of IDLE_LV_HSCH2 field.
	LEDC_HSCH2_CONF0_IDLE_LV_HSCH2_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH2 field.
	LEDC_HSCH2_CONF0_IDLE_LV_HSCH2_Msk = 0x8
	// Bit IDLE_LV_HSCH2.
	LEDC_HSCH2_CONF0_IDLE_LV_HSCH2 = 0x8
	// Position of SIG_OUT_EN_HSCH2 field.
	LEDC_HSCH2_CONF0_SIG_OUT_EN_HSCH2_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH2 field.
	LEDC_HSCH2_CONF0_SIG_OUT_EN_HSCH2_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH2.
	LEDC_HSCH2_CONF0_SIG_OUT_EN_HSCH2 = 0x4
	// Position of TIMER_SEL_HSCH2 field.
	LEDC_HSCH2_CONF0_TIMER_SEL_HSCH2_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH2 field.
	LEDC_HSCH2_CONF0_TIMER_SEL_HSCH2_Msk = 0x3

	// HSCH2_HPOINT: LEDC_HSCH2_HPOINT
	// Position of HPOINT_HSCH2 field.
	LEDC_HSCH2_HPOINT_HPOINT_HSCH2_Pos = 0x0
	// Bit mask of HPOINT_HSCH2 field.
	LEDC_HSCH2_HPOINT_HPOINT_HSCH2_Msk = 0xfffff

	// HSCH2_DUTY: LEDC_HSCH2_DUTY
	// Position of DUTY_HSCH2 field.
	LEDC_HSCH2_DUTY_DUTY_HSCH2_Pos = 0x0
	// Bit mask of DUTY_HSCH2 field.
	LEDC_HSCH2_DUTY_DUTY_HSCH2_Msk = 0x1ffffff

	// HSCH2_CONF1: LEDC_HSCH2_CONF1
	// Position of DUTY_START_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_START_HSCH2_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_START_HSCH2_Msk = 0x80000000
	// Bit DUTY_START_HSCH2.
	LEDC_HSCH2_CONF1_DUTY_START_HSCH2 = 0x80000000
	// Position of DUTY_INC_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_INC_HSCH2_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_INC_HSCH2_Msk = 0x40000000
	// Bit DUTY_INC_HSCH2.
	LEDC_HSCH2_CONF1_DUTY_INC_HSCH2 = 0x40000000
	// Position of DUTY_NUM_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_NUM_HSCH2_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_NUM_HSCH2_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_CYCLE_HSCH2_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_CYCLE_HSCH2_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_SCALE_HSCH2_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH2 field.
	LEDC_HSCH2_CONF1_DUTY_SCALE_HSCH2_Msk = 0x3ff

	// HSCH2_DUTY_R: LEDC_HSCH2_DUTY_R
	// Position of DUTY_HSCH2 field.
	LEDC_HSCH2_DUTY_R_DUTY_HSCH2_Pos = 0x0
	// Bit mask of DUTY_HSCH2 field.
	LEDC_HSCH2_DUTY_R_DUTY_HSCH2_Msk = 0x1ffffff

	// HSCH3_CONF0: LEDC_HSCH3_CONF0
	// Position of IDLE_LV_HSCH3 field.
	LEDC_HSCH3_CONF0_IDLE_LV_HSCH3_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH3 field.
	LEDC_HSCH3_CONF0_IDLE_LV_HSCH3_Msk = 0x8
	// Bit IDLE_LV_HSCH3.
	LEDC_HSCH3_CONF0_IDLE_LV_HSCH3 = 0x8
	// Position of SIG_OUT_EN_HSCH3 field.
	LEDC_HSCH3_CONF0_SIG_OUT_EN_HSCH3_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH3 field.
	LEDC_HSCH3_CONF0_SIG_OUT_EN_HSCH3_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH3.
	LEDC_HSCH3_CONF0_SIG_OUT_EN_HSCH3 = 0x4
	// Position of TIMER_SEL_HSCH3 field.
	LEDC_HSCH3_CONF0_TIMER_SEL_HSCH3_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH3 field.
	LEDC_HSCH3_CONF0_TIMER_SEL_HSCH3_Msk = 0x3

	// HSCH3_HPOINT: LEDC_HSCH3_HPOINT
	// Position of HPOINT_HSCH3 field.
	LEDC_HSCH3_HPOINT_HPOINT_HSCH3_Pos = 0x0
	// Bit mask of HPOINT_HSCH3 field.
	LEDC_HSCH3_HPOINT_HPOINT_HSCH3_Msk = 0xfffff

	// HSCH3_DUTY: LEDC_HSCH3_DUTY
	// Position of DUTY_HSCH3 field.
	LEDC_HSCH3_DUTY_DUTY_HSCH3_Pos = 0x0
	// Bit mask of DUTY_HSCH3 field.
	LEDC_HSCH3_DUTY_DUTY_HSCH3_Msk = 0x1ffffff

	// HSCH3_CONF1: LEDC_HSCH3_CONF1
	// Position of DUTY_START_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_START_HSCH3_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_START_HSCH3_Msk = 0x80000000
	// Bit DUTY_START_HSCH3.
	LEDC_HSCH3_CONF1_DUTY_START_HSCH3 = 0x80000000
	// Position of DUTY_INC_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_INC_HSCH3_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_INC_HSCH3_Msk = 0x40000000
	// Bit DUTY_INC_HSCH3.
	LEDC_HSCH3_CONF1_DUTY_INC_HSCH3 = 0x40000000
	// Position of DUTY_NUM_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_NUM_HSCH3_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_NUM_HSCH3_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_CYCLE_HSCH3_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_CYCLE_HSCH3_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_SCALE_HSCH3_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH3 field.
	LEDC_HSCH3_CONF1_DUTY_SCALE_HSCH3_Msk = 0x3ff

	// HSCH3_DUTY_R: LEDC_HSCH3_DUTY_R
	// Position of DUTY_HSCH3 field.
	LEDC_HSCH3_DUTY_R_DUTY_HSCH3_Pos = 0x0
	// Bit mask of DUTY_HSCH3 field.
	LEDC_HSCH3_DUTY_R_DUTY_HSCH3_Msk = 0x1ffffff

	// HSCH4_CONF0: LEDC_HSCH4_CONF0
	// Position of IDLE_LV_HSCH4 field.
	LEDC_HSCH4_CONF0_IDLE_LV_HSCH4_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH4 field.
	LEDC_HSCH4_CONF0_IDLE_LV_HSCH4_Msk = 0x8
	// Bit IDLE_LV_HSCH4.
	LEDC_HSCH4_CONF0_IDLE_LV_HSCH4 = 0x8
	// Position of SIG_OUT_EN_HSCH4 field.
	LEDC_HSCH4_CONF0_SIG_OUT_EN_HSCH4_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH4 field.
	LEDC_HSCH4_CONF0_SIG_OUT_EN_HSCH4_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH4.
	LEDC_HSCH4_CONF0_SIG_OUT_EN_HSCH4 = 0x4
	// Position of TIMER_SEL_HSCH4 field.
	LEDC_HSCH4_CONF0_TIMER_SEL_HSCH4_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH4 field.
	LEDC_HSCH4_CONF0_TIMER_SEL_HSCH4_Msk = 0x3

	// HSCH4_HPOINT: LEDC_HSCH4_HPOINT
	// Position of HPOINT_HSCH4 field.
	LEDC_HSCH4_HPOINT_HPOINT_HSCH4_Pos = 0x0
	// Bit mask of HPOINT_HSCH4 field.
	LEDC_HSCH4_HPOINT_HPOINT_HSCH4_Msk = 0xfffff

	// HSCH4_DUTY: LEDC_HSCH4_DUTY
	// Position of DUTY_HSCH4 field.
	LEDC_HSCH4_DUTY_DUTY_HSCH4_Pos = 0x0
	// Bit mask of DUTY_HSCH4 field.
	LEDC_HSCH4_DUTY_DUTY_HSCH4_Msk = 0x1ffffff

	// HSCH4_CONF1: LEDC_HSCH4_CONF1
	// Position of DUTY_START_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_START_HSCH4_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_START_HSCH4_Msk = 0x80000000
	// Bit DUTY_START_HSCH4.
	LEDC_HSCH4_CONF1_DUTY_START_HSCH4 = 0x80000000
	// Position of DUTY_INC_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_INC_HSCH4_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_INC_HSCH4_Msk = 0x40000000
	// Bit DUTY_INC_HSCH4.
	LEDC_HSCH4_CONF1_DUTY_INC_HSCH4 = 0x40000000
	// Position of DUTY_NUM_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_NUM_HSCH4_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_NUM_HSCH4_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_CYCLE_HSCH4_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_CYCLE_HSCH4_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_SCALE_HSCH4_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH4 field.
	LEDC_HSCH4_CONF1_DUTY_SCALE_HSCH4_Msk = 0x3ff

	// HSCH4_DUTY_R: LEDC_HSCH4_DUTY_R
	// Position of DUTY_HSCH4 field.
	LEDC_HSCH4_DUTY_R_DUTY_HSCH4_Pos = 0x0
	// Bit mask of DUTY_HSCH4 field.
	LEDC_HSCH4_DUTY_R_DUTY_HSCH4_Msk = 0x1ffffff

	// HSCH5_CONF0: LEDC_HSCH5_CONF0
	// Position of IDLE_LV_HSCH5 field.
	LEDC_HSCH5_CONF0_IDLE_LV_HSCH5_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH5 field.
	LEDC_HSCH5_CONF0_IDLE_LV_HSCH5_Msk = 0x8
	// Bit IDLE_LV_HSCH5.
	LEDC_HSCH5_CONF0_IDLE_LV_HSCH5 = 0x8
	// Position of SIG_OUT_EN_HSCH5 field.
	LEDC_HSCH5_CONF0_SIG_OUT_EN_HSCH5_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH5 field.
	LEDC_HSCH5_CONF0_SIG_OUT_EN_HSCH5_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH5.
	LEDC_HSCH5_CONF0_SIG_OUT_EN_HSCH5 = 0x4
	// Position of TIMER_SEL_HSCH5 field.
	LEDC_HSCH5_CONF0_TIMER_SEL_HSCH5_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH5 field.
	LEDC_HSCH5_CONF0_TIMER_SEL_HSCH5_Msk = 0x3

	// HSCH5_HPOINT: LEDC_HSCH5_HPOINT
	// Position of HPOINT_HSCH5 field.
	LEDC_HSCH5_HPOINT_HPOINT_HSCH5_Pos = 0x0
	// Bit mask of HPOINT_HSCH5 field.
	LEDC_HSCH5_HPOINT_HPOINT_HSCH5_Msk = 0xfffff

	// HSCH5_DUTY: LEDC_HSCH5_DUTY
	// Position of DUTY_HSCH5 field.
	LEDC_HSCH5_DUTY_DUTY_HSCH5_Pos = 0x0
	// Bit mask of DUTY_HSCH5 field.
	LEDC_HSCH5_DUTY_DUTY_HSCH5_Msk = 0x1ffffff

	// HSCH5_CONF1: LEDC_HSCH5_CONF1
	// Position of DUTY_START_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_START_HSCH5_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_START_HSCH5_Msk = 0x80000000
	// Bit DUTY_START_HSCH5.
	LEDC_HSCH5_CONF1_DUTY_START_HSCH5 = 0x80000000
	// Position of DUTY_INC_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_INC_HSCH5_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_INC_HSCH5_Msk = 0x40000000
	// Bit DUTY_INC_HSCH5.
	LEDC_HSCH5_CONF1_DUTY_INC_HSCH5 = 0x40000000
	// Position of DUTY_NUM_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_NUM_HSCH5_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_NUM_HSCH5_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_CYCLE_HSCH5_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_CYCLE_HSCH5_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_SCALE_HSCH5_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH5 field.
	LEDC_HSCH5_CONF1_DUTY_SCALE_HSCH5_Msk = 0x3ff

	// HSCH5_DUTY_R: LEDC_HSCH5_DUTY_R
	// Position of DUTY_HSCH5 field.
	LEDC_HSCH5_DUTY_R_DUTY_HSCH5_Pos = 0x0
	// Bit mask of DUTY_HSCH5 field.
	LEDC_HSCH5_DUTY_R_DUTY_HSCH5_Msk = 0x1ffffff

	// HSCH6_CONF0: LEDC_HSCH6_CONF0
	// Position of IDLE_LV_HSCH6 field.
	LEDC_HSCH6_CONF0_IDLE_LV_HSCH6_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH6 field.
	LEDC_HSCH6_CONF0_IDLE_LV_HSCH6_Msk = 0x8
	// Bit IDLE_LV_HSCH6.
	LEDC_HSCH6_CONF0_IDLE_LV_HSCH6 = 0x8
	// Position of SIG_OUT_EN_HSCH6 field.
	LEDC_HSCH6_CONF0_SIG_OUT_EN_HSCH6_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH6 field.
	LEDC_HSCH6_CONF0_SIG_OUT_EN_HSCH6_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH6.
	LEDC_HSCH6_CONF0_SIG_OUT_EN_HSCH6 = 0x4
	// Position of TIMER_SEL_HSCH6 field.
	LEDC_HSCH6_CONF0_TIMER_SEL_HSCH6_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH6 field.
	LEDC_HSCH6_CONF0_TIMER_SEL_HSCH6_Msk = 0x3

	// HSCH6_HPOINT: LEDC_HSCH6_HPOINT
	// Position of HPOINT_HSCH6 field.
	LEDC_HSCH6_HPOINT_HPOINT_HSCH6_Pos = 0x0
	// Bit mask of HPOINT_HSCH6 field.
	LEDC_HSCH6_HPOINT_HPOINT_HSCH6_Msk = 0xfffff

	// HSCH6_DUTY: LEDC_HSCH6_DUTY
	// Position of DUTY_HSCH6 field.
	LEDC_HSCH6_DUTY_DUTY_HSCH6_Pos = 0x0
	// Bit mask of DUTY_HSCH6 field.
	LEDC_HSCH6_DUTY_DUTY_HSCH6_Msk = 0x1ffffff

	// HSCH6_CONF1: LEDC_HSCH6_CONF1
	// Position of DUTY_START_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_START_HSCH6_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_START_HSCH6_Msk = 0x80000000
	// Bit DUTY_START_HSCH6.
	LEDC_HSCH6_CONF1_DUTY_START_HSCH6 = 0x80000000
	// Position of DUTY_INC_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_INC_HSCH6_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_INC_HSCH6_Msk = 0x40000000
	// Bit DUTY_INC_HSCH6.
	LEDC_HSCH6_CONF1_DUTY_INC_HSCH6 = 0x40000000
	// Position of DUTY_NUM_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_NUM_HSCH6_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_NUM_HSCH6_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_CYCLE_HSCH6_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_CYCLE_HSCH6_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_SCALE_HSCH6_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH6 field.
	LEDC_HSCH6_CONF1_DUTY_SCALE_HSCH6_Msk = 0x3ff

	// HSCH6_DUTY_R: LEDC_HSCH6_DUTY_R
	// Position of DUTY_HSCH6 field.
	LEDC_HSCH6_DUTY_R_DUTY_HSCH6_Pos = 0x0
	// Bit mask of DUTY_HSCH6 field.
	LEDC_HSCH6_DUTY_R_DUTY_HSCH6_Msk = 0x1ffffff

	// HSCH7_CONF0: LEDC_HSCH7_CONF0
	// Position of IDLE_LV_HSCH7 field.
	LEDC_HSCH7_CONF0_IDLE_LV_HSCH7_Pos = 0x3
	// Bit mask of IDLE_LV_HSCH7 field.
	LEDC_HSCH7_CONF0_IDLE_LV_HSCH7_Msk = 0x8
	// Bit IDLE_LV_HSCH7.
	LEDC_HSCH7_CONF0_IDLE_LV_HSCH7 = 0x8
	// Position of SIG_OUT_EN_HSCH7 field.
	LEDC_HSCH7_CONF0_SIG_OUT_EN_HSCH7_Pos = 0x2
	// Bit mask of SIG_OUT_EN_HSCH7 field.
	LEDC_HSCH7_CONF0_SIG_OUT_EN_HSCH7_Msk = 0x4
	// Bit SIG_OUT_EN_HSCH7.
	LEDC_HSCH7_CONF0_SIG_OUT_EN_HSCH7 = 0x4
	// Position of TIMER_SEL_HSCH7 field.
	LEDC_HSCH7_CONF0_TIMER_SEL_HSCH7_Pos = 0x0
	// Bit mask of TIMER_SEL_HSCH7 field.
	LEDC_HSCH7_CONF0_TIMER_SEL_HSCH7_Msk = 0x3

	// HSCH7_HPOINT: LEDC_HSCH7_HPOINT
	// Position of HPOINT_HSCH7 field.
	LEDC_HSCH7_HPOINT_HPOINT_HSCH7_Pos = 0x0
	// Bit mask of HPOINT_HSCH7 field.
	LEDC_HSCH7_HPOINT_HPOINT_HSCH7_Msk = 0xfffff

	// HSCH7_DUTY: LEDC_HSCH7_DUTY
	// Position of DUTY_HSCH7 field.
	LEDC_HSCH7_DUTY_DUTY_HSCH7_Pos = 0x0
	// Bit mask of DUTY_HSCH7 field.
	LEDC_HSCH7_DUTY_DUTY_HSCH7_Msk = 0x1ffffff

	// HSCH7_CONF1: LEDC_HSCH7_CONF1
	// Position of DUTY_START_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_START_HSCH7_Pos = 0x1f
	// Bit mask of DUTY_START_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_START_HSCH7_Msk = 0x80000000
	// Bit DUTY_START_HSCH7.
	LEDC_HSCH7_CONF1_DUTY_START_HSCH7 = 0x80000000
	// Position of DUTY_INC_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_INC_HSCH7_Pos = 0x1e
	// Bit mask of DUTY_INC_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_INC_HSCH7_Msk = 0x40000000
	// Bit DUTY_INC_HSCH7.
	LEDC_HSCH7_CONF1_DUTY_INC_HSCH7 = 0x40000000
	// Position of DUTY_NUM_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_NUM_HSCH7_Pos = 0x14
	// Bit mask of DUTY_NUM_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_NUM_HSCH7_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_CYCLE_HSCH7_Pos = 0xa
	// Bit mask of DUTY_CYCLE_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_CYCLE_HSCH7_Msk = 0xffc00
	// Position of DUTY_SCALE_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_SCALE_HSCH7_Pos = 0x0
	// Bit mask of DUTY_SCALE_HSCH7 field.
	LEDC_HSCH7_CONF1_DUTY_SCALE_HSCH7_Msk = 0x3ff

	// HSCH7_DUTY_R: LEDC_HSCH7_DUTY_R
	// Position of DUTY_HSCH7 field.
	LEDC_HSCH7_DUTY_R_DUTY_HSCH7_Pos = 0x0
	// Bit mask of DUTY_HSCH7 field.
	LEDC_HSCH7_DUTY_R_DUTY_HSCH7_Msk = 0x1ffffff

	// LSCH0_CONF0: LEDC_LSCH0_CONF0
	// Position of PARA_UP_LSCH0 field.
	LEDC_LSCH0_CONF0_PARA_UP_LSCH0_Pos = 0x4
	// Bit mask of PARA_UP_LSCH0 field.
	LEDC_LSCH0_CONF0_PARA_UP_LSCH0_Msk = 0x10
	// Bit PARA_UP_LSCH0.
	LEDC_LSCH0_CONF0_PARA_UP_LSCH0 = 0x10
	// Position of IDLE_LV_LSCH0 field.
	LEDC_LSCH0_CONF0_IDLE_LV_LSCH0_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH0 field.
	LEDC_LSCH0_CONF0_IDLE_LV_LSCH0_Msk = 0x8
	// Bit IDLE_LV_LSCH0.
	LEDC_LSCH0_CONF0_IDLE_LV_LSCH0 = 0x8
	// Position of SIG_OUT_EN_LSCH0 field.
	LEDC_LSCH0_CONF0_SIG_OUT_EN_LSCH0_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH0 field.
	LEDC_LSCH0_CONF0_SIG_OUT_EN_LSCH0_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH0.
	LEDC_LSCH0_CONF0_SIG_OUT_EN_LSCH0 = 0x4
	// Position of TIMER_SEL_LSCH0 field.
	LEDC_LSCH0_CONF0_TIMER_SEL_LSCH0_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH0 field.
	LEDC_LSCH0_CONF0_TIMER_SEL_LSCH0_Msk = 0x3

	// LSCH0_HPOINT: LEDC_LSCH0_HPOINT
	// Position of HPOINT_LSCH0 field.
	LEDC_LSCH0_HPOINT_HPOINT_LSCH0_Pos = 0x0
	// Bit mask of HPOINT_LSCH0 field.
	LEDC_LSCH0_HPOINT_HPOINT_LSCH0_Msk = 0xfffff

	// LSCH0_DUTY: LEDC_LSCH0_DUTY
	// Position of DUTY_LSCH0 field.
	LEDC_LSCH0_DUTY_DUTY_LSCH0_Pos = 0x0
	// Bit mask of DUTY_LSCH0 field.
	LEDC_LSCH0_DUTY_DUTY_LSCH0_Msk = 0x1ffffff

	// LSCH0_CONF1: LEDC_LSCH0_CONF1
	// Position of DUTY_START_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_START_LSCH0_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_START_LSCH0_Msk = 0x80000000
	// Bit DUTY_START_LSCH0.
	LEDC_LSCH0_CONF1_DUTY_START_LSCH0 = 0x80000000
	// Position of DUTY_INC_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_INC_LSCH0_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_INC_LSCH0_Msk = 0x40000000
	// Bit DUTY_INC_LSCH0.
	LEDC_LSCH0_CONF1_DUTY_INC_LSCH0 = 0x40000000
	// Position of DUTY_NUM_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_NUM_LSCH0_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_NUM_LSCH0_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_CYCLE_LSCH0_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_CYCLE_LSCH0_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_SCALE_LSCH0_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH0 field.
	LEDC_LSCH0_CONF1_DUTY_SCALE_LSCH0_Msk = 0x3ff

	// LSCH0_DUTY_R: LEDC_LSCH0_DUTY_R
	// Position of DUTY_LSCH0 field.
	LEDC_LSCH0_DUTY_R_DUTY_LSCH0_Pos = 0x0
	// Bit mask of DUTY_LSCH0 field.
	LEDC_LSCH0_DUTY_R_DUTY_LSCH0_Msk = 0x1ffffff

	// LSCH1_CONF0: LEDC_LSCH1_CONF0
	// Position of PARA_UP_LSCH1 field.
	LEDC_LSCH1_CONF0_PARA_UP_LSCH1_Pos = 0x4
	// Bit mask of PARA_UP_LSCH1 field.
	LEDC_LSCH1_CONF0_PARA_UP_LSCH1_Msk = 0x10
	// Bit PARA_UP_LSCH1.
	LEDC_LSCH1_CONF0_PARA_UP_LSCH1 = 0x10
	// Position of IDLE_LV_LSCH1 field.
	LEDC_LSCH1_CONF0_IDLE_LV_LSCH1_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH1 field.
	LEDC_LSCH1_CONF0_IDLE_LV_LSCH1_Msk = 0x8
	// Bit IDLE_LV_LSCH1.
	LEDC_LSCH1_CONF0_IDLE_LV_LSCH1 = 0x8
	// Position of SIG_OUT_EN_LSCH1 field.
	LEDC_LSCH1_CONF0_SIG_OUT_EN_LSCH1_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH1 field.
	LEDC_LSCH1_CONF0_SIG_OUT_EN_LSCH1_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH1.
	LEDC_LSCH1_CONF0_SIG_OUT_EN_LSCH1 = 0x4
	// Position of TIMER_SEL_LSCH1 field.
	LEDC_LSCH1_CONF0_TIMER_SEL_LSCH1_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH1 field.
	LEDC_LSCH1_CONF0_TIMER_SEL_LSCH1_Msk = 0x3

	// LSCH1_HPOINT: LEDC_LSCH1_HPOINT
	// Position of HPOINT_LSCH1 field.
	LEDC_LSCH1_HPOINT_HPOINT_LSCH1_Pos = 0x0
	// Bit mask of HPOINT_LSCH1 field.
	LEDC_LSCH1_HPOINT_HPOINT_LSCH1_Msk = 0xfffff

	// LSCH1_DUTY: LEDC_LSCH1_DUTY
	// Position of DUTY_LSCH1 field.
	LEDC_LSCH1_DUTY_DUTY_LSCH1_Pos = 0x0
	// Bit mask of DUTY_LSCH1 field.
	LEDC_LSCH1_DUTY_DUTY_LSCH1_Msk = 0x1ffffff

	// LSCH1_CONF1: LEDC_LSCH1_CONF1
	// Position of DUTY_START_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_START_LSCH1_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_START_LSCH1_Msk = 0x80000000
	// Bit DUTY_START_LSCH1.
	LEDC_LSCH1_CONF1_DUTY_START_LSCH1 = 0x80000000
	// Position of DUTY_INC_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_INC_LSCH1_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_INC_LSCH1_Msk = 0x40000000
	// Bit DUTY_INC_LSCH1.
	LEDC_LSCH1_CONF1_DUTY_INC_LSCH1 = 0x40000000
	// Position of DUTY_NUM_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_NUM_LSCH1_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_NUM_LSCH1_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_CYCLE_LSCH1_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_CYCLE_LSCH1_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_SCALE_LSCH1_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH1 field.
	LEDC_LSCH1_CONF1_DUTY_SCALE_LSCH1_Msk = 0x3ff

	// LSCH1_DUTY_R: LEDC_LSCH1_DUTY_R
	// Position of DUTY_LSCH1 field.
	LEDC_LSCH1_DUTY_R_DUTY_LSCH1_Pos = 0x0
	// Bit mask of DUTY_LSCH1 field.
	LEDC_LSCH1_DUTY_R_DUTY_LSCH1_Msk = 0x1ffffff

	// LSCH2_CONF0: LEDC_LSCH2_CONF0
	// Position of PARA_UP_LSCH2 field.
	LEDC_LSCH2_CONF0_PARA_UP_LSCH2_Pos = 0x4
	// Bit mask of PARA_UP_LSCH2 field.
	LEDC_LSCH2_CONF0_PARA_UP_LSCH2_Msk = 0x10
	// Bit PARA_UP_LSCH2.
	LEDC_LSCH2_CONF0_PARA_UP_LSCH2 = 0x10
	// Position of IDLE_LV_LSCH2 field.
	LEDC_LSCH2_CONF0_IDLE_LV_LSCH2_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH2 field.
	LEDC_LSCH2_CONF0_IDLE_LV_LSCH2_Msk = 0x8
	// Bit IDLE_LV_LSCH2.
	LEDC_LSCH2_CONF0_IDLE_LV_LSCH2 = 0x8
	// Position of SIG_OUT_EN_LSCH2 field.
	LEDC_LSCH2_CONF0_SIG_OUT_EN_LSCH2_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH2 field.
	LEDC_LSCH2_CONF0_SIG_OUT_EN_LSCH2_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH2.
	LEDC_LSCH2_CONF0_SIG_OUT_EN_LSCH2 = 0x4
	// Position of TIMER_SEL_LSCH2 field.
	LEDC_LSCH2_CONF0_TIMER_SEL_LSCH2_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH2 field.
	LEDC_LSCH2_CONF0_TIMER_SEL_LSCH2_Msk = 0x3

	// LSCH2_HPOINT: LEDC_LSCH2_HPOINT
	// Position of HPOINT_LSCH2 field.
	LEDC_LSCH2_HPOINT_HPOINT_LSCH2_Pos = 0x0
	// Bit mask of HPOINT_LSCH2 field.
	LEDC_LSCH2_HPOINT_HPOINT_LSCH2_Msk = 0xfffff

	// LSCH2_DUTY: LEDC_LSCH2_DUTY
	// Position of DUTY_LSCH2 field.
	LEDC_LSCH2_DUTY_DUTY_LSCH2_Pos = 0x0
	// Bit mask of DUTY_LSCH2 field.
	LEDC_LSCH2_DUTY_DUTY_LSCH2_Msk = 0x1ffffff

	// LSCH2_CONF1: LEDC_LSCH2_CONF1
	// Position of DUTY_START_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_START_LSCH2_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_START_LSCH2_Msk = 0x80000000
	// Bit DUTY_START_LSCH2.
	LEDC_LSCH2_CONF1_DUTY_START_LSCH2 = 0x80000000
	// Position of DUTY_INC_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_INC_LSCH2_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_INC_LSCH2_Msk = 0x40000000
	// Bit DUTY_INC_LSCH2.
	LEDC_LSCH2_CONF1_DUTY_INC_LSCH2 = 0x40000000
	// Position of DUTY_NUM_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_NUM_LSCH2_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_NUM_LSCH2_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_CYCLE_LSCH2_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_CYCLE_LSCH2_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_SCALE_LSCH2_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH2 field.
	LEDC_LSCH2_CONF1_DUTY_SCALE_LSCH2_Msk = 0x3ff

	// LSCH2_DUTY_R: LEDC_LSCH2_DUTY_R
	// Position of DUTY_LSCH2 field.
	LEDC_LSCH2_DUTY_R_DUTY_LSCH2_Pos = 0x0
	// Bit mask of DUTY_LSCH2 field.
	LEDC_LSCH2_DUTY_R_DUTY_LSCH2_Msk = 0x1ffffff

	// LSCH3_CONF0: LEDC_LSCH3_CONF0
	// Position of PARA_UP_LSCH3 field.
	LEDC_LSCH3_CONF0_PARA_UP_LSCH3_Pos = 0x4
	// Bit mask of PARA_UP_LSCH3 field.
	LEDC_LSCH3_CONF0_PARA_UP_LSCH3_Msk = 0x10
	// Bit PARA_UP_LSCH3.
	LEDC_LSCH3_CONF0_PARA_UP_LSCH3 = 0x10
	// Position of IDLE_LV_LSCH3 field.
	LEDC_LSCH3_CONF0_IDLE_LV_LSCH3_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH3 field.
	LEDC_LSCH3_CONF0_IDLE_LV_LSCH3_Msk = 0x8
	// Bit IDLE_LV_LSCH3.
	LEDC_LSCH3_CONF0_IDLE_LV_LSCH3 = 0x8
	// Position of SIG_OUT_EN_LSCH3 field.
	LEDC_LSCH3_CONF0_SIG_OUT_EN_LSCH3_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH3 field.
	LEDC_LSCH3_CONF0_SIG_OUT_EN_LSCH3_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH3.
	LEDC_LSCH3_CONF0_SIG_OUT_EN_LSCH3 = 0x4
	// Position of TIMER_SEL_LSCH3 field.
	LEDC_LSCH3_CONF0_TIMER_SEL_LSCH3_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH3 field.
	LEDC_LSCH3_CONF0_TIMER_SEL_LSCH3_Msk = 0x3

	// LSCH3_HPOINT: LEDC_LSCH3_HPOINT
	// Position of HPOINT_LSCH3 field.
	LEDC_LSCH3_HPOINT_HPOINT_LSCH3_Pos = 0x0
	// Bit mask of HPOINT_LSCH3 field.
	LEDC_LSCH3_HPOINT_HPOINT_LSCH3_Msk = 0xfffff

	// LSCH3_DUTY: LEDC_LSCH3_DUTY
	// Position of DUTY_LSCH3 field.
	LEDC_LSCH3_DUTY_DUTY_LSCH3_Pos = 0x0
	// Bit mask of DUTY_LSCH3 field.
	LEDC_LSCH3_DUTY_DUTY_LSCH3_Msk = 0x1ffffff

	// LSCH3_CONF1: LEDC_LSCH3_CONF1
	// Position of DUTY_START_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_START_LSCH3_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_START_LSCH3_Msk = 0x80000000
	// Bit DUTY_START_LSCH3.
	LEDC_LSCH3_CONF1_DUTY_START_LSCH3 = 0x80000000
	// Position of DUTY_INC_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_INC_LSCH3_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_INC_LSCH3_Msk = 0x40000000
	// Bit DUTY_INC_LSCH3.
	LEDC_LSCH3_CONF1_DUTY_INC_LSCH3 = 0x40000000
	// Position of DUTY_NUM_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_NUM_LSCH3_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_NUM_LSCH3_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_CYCLE_LSCH3_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_CYCLE_LSCH3_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_SCALE_LSCH3_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH3 field.
	LEDC_LSCH3_CONF1_DUTY_SCALE_LSCH3_Msk = 0x3ff

	// LSCH3_DUTY_R: LEDC_LSCH3_DUTY_R
	// Position of DUTY_LSCH3 field.
	LEDC_LSCH3_DUTY_R_DUTY_LSCH3_Pos = 0x0
	// Bit mask of DUTY_LSCH3 field.
	LEDC_LSCH3_DUTY_R_DUTY_LSCH3_Msk = 0x1ffffff

	// LSCH4_CONF0: LEDC_LSCH4_CONF0
	// Position of PARA_UP_LSCH4 field.
	LEDC_LSCH4_CONF0_PARA_UP_LSCH4_Pos = 0x4
	// Bit mask of PARA_UP_LSCH4 field.
	LEDC_LSCH4_CONF0_PARA_UP_LSCH4_Msk = 0x10
	// Bit PARA_UP_LSCH4.
	LEDC_LSCH4_CONF0_PARA_UP_LSCH4 = 0x10
	// Position of IDLE_LV_LSCH4 field.
	LEDC_LSCH4_CONF0_IDLE_LV_LSCH4_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH4 field.
	LEDC_LSCH4_CONF0_IDLE_LV_LSCH4_Msk = 0x8
	// Bit IDLE_LV_LSCH4.
	LEDC_LSCH4_CONF0_IDLE_LV_LSCH4 = 0x8
	// Position of SIG_OUT_EN_LSCH4 field.
	LEDC_LSCH4_CONF0_SIG_OUT_EN_LSCH4_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH4 field.
	LEDC_LSCH4_CONF0_SIG_OUT_EN_LSCH4_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH4.
	LEDC_LSCH4_CONF0_SIG_OUT_EN_LSCH4 = 0x4
	// Position of TIMER_SEL_LSCH4 field.
	LEDC_LSCH4_CONF0_TIMER_SEL_LSCH4_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH4 field.
	LEDC_LSCH4_CONF0_TIMER_SEL_LSCH4_Msk = 0x3

	// LSCH4_HPOINT: LEDC_LSCH4_HPOINT
	// Position of HPOINT_LSCH4 field.
	LEDC_LSCH4_HPOINT_HPOINT_LSCH4_Pos = 0x0
	// Bit mask of HPOINT_LSCH4 field.
	LEDC_LSCH4_HPOINT_HPOINT_LSCH4_Msk = 0xfffff

	// LSCH4_DUTY: LEDC_LSCH4_DUTY
	// Position of DUTY_LSCH4 field.
	LEDC_LSCH4_DUTY_DUTY_LSCH4_Pos = 0x0
	// Bit mask of DUTY_LSCH4 field.
	LEDC_LSCH4_DUTY_DUTY_LSCH4_Msk = 0x1ffffff

	// LSCH4_CONF1: LEDC_LSCH4_CONF1
	// Position of DUTY_START_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_START_LSCH4_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_START_LSCH4_Msk = 0x80000000
	// Bit DUTY_START_LSCH4.
	LEDC_LSCH4_CONF1_DUTY_START_LSCH4 = 0x80000000
	// Position of DUTY_INC_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_INC_LSCH4_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_INC_LSCH4_Msk = 0x40000000
	// Bit DUTY_INC_LSCH4.
	LEDC_LSCH4_CONF1_DUTY_INC_LSCH4 = 0x40000000
	// Position of DUTY_NUM_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_NUM_LSCH4_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_NUM_LSCH4_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_CYCLE_LSCH4_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_CYCLE_LSCH4_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_SCALE_LSCH4_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH4 field.
	LEDC_LSCH4_CONF1_DUTY_SCALE_LSCH4_Msk = 0x3ff

	// LSCH4_DUTY_R: LEDC_LSCH4_DUTY_R
	// Position of DUTY_LSCH4 field.
	LEDC_LSCH4_DUTY_R_DUTY_LSCH4_Pos = 0x0
	// Bit mask of DUTY_LSCH4 field.
	LEDC_LSCH4_DUTY_R_DUTY_LSCH4_Msk = 0x1ffffff

	// LSCH5_CONF0: LEDC_LSCH5_CONF0
	// Position of PARA_UP_LSCH5 field.
	LEDC_LSCH5_CONF0_PARA_UP_LSCH5_Pos = 0x4
	// Bit mask of PARA_UP_LSCH5 field.
	LEDC_LSCH5_CONF0_PARA_UP_LSCH5_Msk = 0x10
	// Bit PARA_UP_LSCH5.
	LEDC_LSCH5_CONF0_PARA_UP_LSCH5 = 0x10
	// Position of IDLE_LV_LSCH5 field.
	LEDC_LSCH5_CONF0_IDLE_LV_LSCH5_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH5 field.
	LEDC_LSCH5_CONF0_IDLE_LV_LSCH5_Msk = 0x8
	// Bit IDLE_LV_LSCH5.
	LEDC_LSCH5_CONF0_IDLE_LV_LSCH5 = 0x8
	// Position of SIG_OUT_EN_LSCH5 field.
	LEDC_LSCH5_CONF0_SIG_OUT_EN_LSCH5_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH5 field.
	LEDC_LSCH5_CONF0_SIG_OUT_EN_LSCH5_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH5.
	LEDC_LSCH5_CONF0_SIG_OUT_EN_LSCH5 = 0x4
	// Position of TIMER_SEL_LSCH5 field.
	LEDC_LSCH5_CONF0_TIMER_SEL_LSCH5_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH5 field.
	LEDC_LSCH5_CONF0_TIMER_SEL_LSCH5_Msk = 0x3

	// LSCH5_HPOINT: LEDC_LSCH5_HPOINT
	// Position of HPOINT_LSCH5 field.
	LEDC_LSCH5_HPOINT_HPOINT_LSCH5_Pos = 0x0
	// Bit mask of HPOINT_LSCH5 field.
	LEDC_LSCH5_HPOINT_HPOINT_LSCH5_Msk = 0xfffff

	// LSCH5_DUTY: LEDC_LSCH5_DUTY
	// Position of DUTY_LSCH5 field.
	LEDC_LSCH5_DUTY_DUTY_LSCH5_Pos = 0x0
	// Bit mask of DUTY_LSCH5 field.
	LEDC_LSCH5_DUTY_DUTY_LSCH5_Msk = 0x1ffffff

	// LSCH5_CONF1: LEDC_LSCH5_CONF1
	// Position of DUTY_START_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_START_LSCH5_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_START_LSCH5_Msk = 0x80000000
	// Bit DUTY_START_LSCH5.
	LEDC_LSCH5_CONF1_DUTY_START_LSCH5 = 0x80000000
	// Position of DUTY_INC_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_INC_LSCH5_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_INC_LSCH5_Msk = 0x40000000
	// Bit DUTY_INC_LSCH5.
	LEDC_LSCH5_CONF1_DUTY_INC_LSCH5 = 0x40000000
	// Position of DUTY_NUM_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_NUM_LSCH5_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_NUM_LSCH5_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_CYCLE_LSCH5_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_CYCLE_LSCH5_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_SCALE_LSCH5_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH5 field.
	LEDC_LSCH5_CONF1_DUTY_SCALE_LSCH5_Msk = 0x3ff

	// LSCH5_DUTY_R: LEDC_LSCH5_DUTY_R
	// Position of DUTY_LSCH5 field.
	LEDC_LSCH5_DUTY_R_DUTY_LSCH5_Pos = 0x0
	// Bit mask of DUTY_LSCH5 field.
	LEDC_LSCH5_DUTY_R_DUTY_LSCH5_Msk = 0x1ffffff

	// LSCH6_CONF0: LEDC_LSCH6_CONF0
	// Position of PARA_UP_LSCH6 field.
	LEDC_LSCH6_CONF0_PARA_UP_LSCH6_Pos = 0x4
	// Bit mask of PARA_UP_LSCH6 field.
	LEDC_LSCH6_CONF0_PARA_UP_LSCH6_Msk = 0x10
	// Bit PARA_UP_LSCH6.
	LEDC_LSCH6_CONF0_PARA_UP_LSCH6 = 0x10
	// Position of IDLE_LV_LSCH6 field.
	LEDC_LSCH6_CONF0_IDLE_LV_LSCH6_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH6 field.
	LEDC_LSCH6_CONF0_IDLE_LV_LSCH6_Msk = 0x8
	// Bit IDLE_LV_LSCH6.
	LEDC_LSCH6_CONF0_IDLE_LV_LSCH6 = 0x8
	// Position of SIG_OUT_EN_LSCH6 field.
	LEDC_LSCH6_CONF0_SIG_OUT_EN_LSCH6_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH6 field.
	LEDC_LSCH6_CONF0_SIG_OUT_EN_LSCH6_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH6.
	LEDC_LSCH6_CONF0_SIG_OUT_EN_LSCH6 = 0x4
	// Position of TIMER_SEL_LSCH6 field.
	LEDC_LSCH6_CONF0_TIMER_SEL_LSCH6_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH6 field.
	LEDC_LSCH6_CONF0_TIMER_SEL_LSCH6_Msk = 0x3

	// LSCH6_HPOINT: LEDC_LSCH6_HPOINT
	// Position of HPOINT_LSCH6 field.
	LEDC_LSCH6_HPOINT_HPOINT_LSCH6_Pos = 0x0
	// Bit mask of HPOINT_LSCH6 field.
	LEDC_LSCH6_HPOINT_HPOINT_LSCH6_Msk = 0xfffff

	// LSCH6_DUTY: LEDC_LSCH6_DUTY
	// Position of DUTY_LSCH6 field.
	LEDC_LSCH6_DUTY_DUTY_LSCH6_Pos = 0x0
	// Bit mask of DUTY_LSCH6 field.
	LEDC_LSCH6_DUTY_DUTY_LSCH6_Msk = 0x1ffffff

	// LSCH6_CONF1: LEDC_LSCH6_CONF1
	// Position of DUTY_START_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_START_LSCH6_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_START_LSCH6_Msk = 0x80000000
	// Bit DUTY_START_LSCH6.
	LEDC_LSCH6_CONF1_DUTY_START_LSCH6 = 0x80000000
	// Position of DUTY_INC_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_INC_LSCH6_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_INC_LSCH6_Msk = 0x40000000
	// Bit DUTY_INC_LSCH6.
	LEDC_LSCH6_CONF1_DUTY_INC_LSCH6 = 0x40000000
	// Position of DUTY_NUM_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_NUM_LSCH6_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_NUM_LSCH6_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_CYCLE_LSCH6_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_CYCLE_LSCH6_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_SCALE_LSCH6_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH6 field.
	LEDC_LSCH6_CONF1_DUTY_SCALE_LSCH6_Msk = 0x3ff

	// LSCH6_DUTY_R: LEDC_LSCH6_DUTY_R
	// Position of DUTY_LSCH6 field.
	LEDC_LSCH6_DUTY_R_DUTY_LSCH6_Pos = 0x0
	// Bit mask of DUTY_LSCH6 field.
	LEDC_LSCH6_DUTY_R_DUTY_LSCH6_Msk = 0x1ffffff

	// LSCH7_CONF0: LEDC_LSCH7_CONF0
	// Position of PARA_UP_LSCH7 field.
	LEDC_LSCH7_CONF0_PARA_UP_LSCH7_Pos = 0x4
	// Bit mask of PARA_UP_LSCH7 field.
	LEDC_LSCH7_CONF0_PARA_UP_LSCH7_Msk = 0x10
	// Bit PARA_UP_LSCH7.
	LEDC_LSCH7_CONF0_PARA_UP_LSCH7 = 0x10
	// Position of IDLE_LV_LSCH7 field.
	LEDC_LSCH7_CONF0_IDLE_LV_LSCH7_Pos = 0x3
	// Bit mask of IDLE_LV_LSCH7 field.
	LEDC_LSCH7_CONF0_IDLE_LV_LSCH7_Msk = 0x8
	// Bit IDLE_LV_LSCH7.
	LEDC_LSCH7_CONF0_IDLE_LV_LSCH7 = 0x8
	// Position of SIG_OUT_EN_LSCH7 field.
	LEDC_LSCH7_CONF0_SIG_OUT_EN_LSCH7_Pos = 0x2
	// Bit mask of SIG_OUT_EN_LSCH7 field.
	LEDC_LSCH7_CONF0_SIG_OUT_EN_LSCH7_Msk = 0x4
	// Bit SIG_OUT_EN_LSCH7.
	LEDC_LSCH7_CONF0_SIG_OUT_EN_LSCH7 = 0x4
	// Position of TIMER_SEL_LSCH7 field.
	LEDC_LSCH7_CONF0_TIMER_SEL_LSCH7_Pos = 0x0
	// Bit mask of TIMER_SEL_LSCH7 field.
	LEDC_LSCH7_CONF0_TIMER_SEL_LSCH7_Msk = 0x3

	// LSCH7_HPOINT: LEDC_LSCH7_HPOINT
	// Position of HPOINT_LSCH7 field.
	LEDC_LSCH7_HPOINT_HPOINT_LSCH7_Pos = 0x0
	// Bit mask of HPOINT_LSCH7 field.
	LEDC_LSCH7_HPOINT_HPOINT_LSCH7_Msk = 0xfffff

	// LSCH7_DUTY: LEDC_LSCH7_DUTY
	// Position of DUTY_LSCH7 field.
	LEDC_LSCH7_DUTY_DUTY_LSCH7_Pos = 0x0
	// Bit mask of DUTY_LSCH7 field.
	LEDC_LSCH7_DUTY_DUTY_LSCH7_Msk = 0x1ffffff

	// LSCH7_CONF1: LEDC_LSCH7_CONF1
	// Position of DUTY_START_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_START_LSCH7_Pos = 0x1f
	// Bit mask of DUTY_START_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_START_LSCH7_Msk = 0x80000000
	// Bit DUTY_START_LSCH7.
	LEDC_LSCH7_CONF1_DUTY_START_LSCH7 = 0x80000000
	// Position of DUTY_INC_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_INC_LSCH7_Pos = 0x1e
	// Bit mask of DUTY_INC_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_INC_LSCH7_Msk = 0x40000000
	// Bit DUTY_INC_LSCH7.
	LEDC_LSCH7_CONF1_DUTY_INC_LSCH7 = 0x40000000
	// Position of DUTY_NUM_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_NUM_LSCH7_Pos = 0x14
	// Bit mask of DUTY_NUM_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_NUM_LSCH7_Msk = 0x3ff00000
	// Position of DUTY_CYCLE_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_CYCLE_LSCH7_Pos = 0xa
	// Bit mask of DUTY_CYCLE_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_CYCLE_LSCH7_Msk = 0xffc00
	// Position of DUTY_SCALE_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_SCALE_LSCH7_Pos = 0x0
	// Bit mask of DUTY_SCALE_LSCH7 field.
	LEDC_LSCH7_CONF1_DUTY_SCALE_LSCH7_Msk = 0x3ff

	// LSCH7_DUTY_R: LEDC_LSCH7_DUTY_R
	// Position of DUTY_LSCH7 field.
	LEDC_LSCH7_DUTY_R_DUTY_LSCH7_Pos = 0x0
	// Bit mask of DUTY_LSCH7 field.
	LEDC_LSCH7_DUTY_R_DUTY_LSCH7_Msk = 0x1ffffff

	// HSTIMER0_CONF: LEDC_HSTIMER0_CONF
	// Position of TICK_SEL_HSTIMER0 field.
	LEDC_HSTIMER0_CONF_TICK_SEL_HSTIMER0_Pos = 0x19
	// Bit mask of TICK_SEL_HSTIMER0 field.
	LEDC_HSTIMER0_CONF_TICK_SEL_HSTIMER0_Msk = 0x2000000
	// Bit TICK_SEL_HSTIMER0.
	LEDC_HSTIMER0_CONF_TICK_SEL_HSTIMER0 = 0x2000000
	// Position of HSTIMER0_RST field.
	LEDC_HSTIMER0_CONF_HSTIMER0_RST_Pos = 0x18
	// Bit mask of HSTIMER0_RST field.
	LEDC_HSTIMER0_CONF_HSTIMER0_RST_Msk = 0x1000000
	// Bit HSTIMER0_RST.
	LEDC_HSTIMER0_CONF_HSTIMER0_RST = 0x1000000
	// Position of HSTIMER0_PAUSE field.
	LEDC_HSTIMER0_CONF_HSTIMER0_PAUSE_Pos = 0x17
	// Bit mask of HSTIMER0_PAUSE field.
	LEDC_HSTIMER0_CONF_HSTIMER0_PAUSE_Msk = 0x800000
	// Bit HSTIMER0_PAUSE.
	LEDC_HSTIMER0_CONF_HSTIMER0_PAUSE = 0x800000
	// Position of DIV_NUM_HSTIMER0 field.
	LEDC_HSTIMER0_CONF_DIV_NUM_HSTIMER0_Pos = 0x5
	// Bit mask of DIV_NUM_HSTIMER0 field.
	LEDC_HSTIMER0_CONF_DIV_NUM_HSTIMER0_Msk = 0x7fffe0
	// Position of HSTIMER0_LIM field.
	LEDC_HSTIMER0_CONF_HSTIMER0_LIM_Pos = 0x0
	// Bit mask of HSTIMER0_LIM field.
	LEDC_HSTIMER0_CONF_HSTIMER0_LIM_Msk = 0x1f

	// HSTIMER0_VALUE: LEDC_HSTIMER0_VALUE
	// Position of HSTIMER0_CNT field.
	LEDC_HSTIMER0_VALUE_HSTIMER0_CNT_Pos = 0x0
	// Bit mask of HSTIMER0_CNT field.
	LEDC_HSTIMER0_VALUE_HSTIMER0_CNT_Msk = 0xfffff

	// HSTIMER1_CONF: LEDC_HSTIMER1_CONF
	// Position of TICK_SEL_HSTIMER1 field.
	LEDC_HSTIMER1_CONF_TICK_SEL_HSTIMER1_Pos = 0x19
	// Bit mask of TICK_SEL_HSTIMER1 field.
	LEDC_HSTIMER1_CONF_TICK_SEL_HSTIMER1_Msk = 0x2000000
	// Bit TICK_SEL_HSTIMER1.
	LEDC_HSTIMER1_CONF_TICK_SEL_HSTIMER1 = 0x2000000
	// Position of HSTIMER1_RST field.
	LEDC_HSTIMER1_CONF_HSTIMER1_RST_Pos = 0x18
	// Bit mask of HSTIMER1_RST field.
	LEDC_HSTIMER1_CONF_HSTIMER1_RST_Msk = 0x1000000
	// Bit HSTIMER1_RST.
	LEDC_HSTIMER1_CONF_HSTIMER1_RST = 0x1000000
	// Position of HSTIMER1_PAUSE field.
	LEDC_HSTIMER1_CONF_HSTIMER1_PAUSE_Pos = 0x17
	// Bit mask of HSTIMER1_PAUSE field.
	LEDC_HSTIMER1_CONF_HSTIMER1_PAUSE_Msk = 0x800000
	// Bit HSTIMER1_PAUSE.
	LEDC_HSTIMER1_CONF_HSTIMER1_PAUSE = 0x800000
	// Position of DIV_NUM_HSTIMER1 field.
	LEDC_HSTIMER1_CONF_DIV_NUM_HSTIMER1_Pos = 0x5
	// Bit mask of DIV_NUM_HSTIMER1 field.
	LEDC_HSTIMER1_CONF_DIV_NUM_HSTIMER1_Msk = 0x7fffe0
	// Position of HSTIMER1_LIM field.
	LEDC_HSTIMER1_CONF_HSTIMER1_LIM_Pos = 0x0
	// Bit mask of HSTIMER1_LIM field.
	LEDC_HSTIMER1_CONF_HSTIMER1_LIM_Msk = 0x1f

	// HSTIMER1_VALUE: LEDC_HSTIMER1_VALUE
	// Position of HSTIMER1_CNT field.
	LEDC_HSTIMER1_VALUE_HSTIMER1_CNT_Pos = 0x0
	// Bit mask of HSTIMER1_CNT field.
	LEDC_HSTIMER1_VALUE_HSTIMER1_CNT_Msk = 0xfffff

	// HSTIMER2_CONF: LEDC_HSTIMER2_CONF
	// Position of TICK_SEL_HSTIMER2 field.
	LEDC_HSTIMER2_CONF_TICK_SEL_HSTIMER2_Pos = 0x19
	// Bit mask of TICK_SEL_HSTIMER2 field.
	LEDC_HSTIMER2_CONF_TICK_SEL_HSTIMER2_Msk = 0x2000000
	// Bit TICK_SEL_HSTIMER2.
	LEDC_HSTIMER2_CONF_TICK_SEL_HSTIMER2 = 0x2000000
	// Position of HSTIMER2_RST field.
	LEDC_HSTIMER2_CONF_HSTIMER2_RST_Pos = 0x18
	// Bit mask of HSTIMER2_RST field.
	LEDC_HSTIMER2_CONF_HSTIMER2_RST_Msk = 0x1000000
	// Bit HSTIMER2_RST.
	LEDC_HSTIMER2_CONF_HSTIMER2_RST = 0x1000000
	// Position of HSTIMER2_PAUSE field.
	LEDC_HSTIMER2_CONF_HSTIMER2_PAUSE_Pos = 0x17
	// Bit mask of HSTIMER2_PAUSE field.
	LEDC_HSTIMER2_CONF_HSTIMER2_PAUSE_Msk = 0x800000
	// Bit HSTIMER2_PAUSE.
	LEDC_HSTIMER2_CONF_HSTIMER2_PAUSE = 0x800000
	// Position of DIV_NUM_HSTIMER2 field.
	LEDC_HSTIMER2_CONF_DIV_NUM_HSTIMER2_Pos = 0x5
	// Bit mask of DIV_NUM_HSTIMER2 field.
	LEDC_HSTIMER2_CONF_DIV_NUM_HSTIMER2_Msk = 0x7fffe0
	// Position of HSTIMER2_LIM field.
	LEDC_HSTIMER2_CONF_HSTIMER2_LIM_Pos = 0x0
	// Bit mask of HSTIMER2_LIM field.
	LEDC_HSTIMER2_CONF_HSTIMER2_LIM_Msk = 0x1f

	// HSTIMER2_VALUE: LEDC_HSTIMER2_VALUE
	// Position of HSTIMER2_CNT field.
	LEDC_HSTIMER2_VALUE_HSTIMER2_CNT_Pos = 0x0
	// Bit mask of HSTIMER2_CNT field.
	LEDC_HSTIMER2_VALUE_HSTIMER2_CNT_Msk = 0xfffff

	// HSTIMER3_CONF: LEDC_HSTIMER3_CONF
	// Position of TICK_SEL_HSTIMER3 field.
	LEDC_HSTIMER3_CONF_TICK_SEL_HSTIMER3_Pos = 0x19
	// Bit mask of TICK_SEL_HSTIMER3 field.
	LEDC_HSTIMER3_CONF_TICK_SEL_HSTIMER3_Msk = 0x2000000
	// Bit TICK_SEL_HSTIMER3.
	LEDC_HSTIMER3_CONF_TICK_SEL_HSTIMER3 = 0x2000000
	// Position of HSTIMER3_RST field.
	LEDC_HSTIMER3_CONF_HSTIMER3_RST_Pos = 0x18
	// Bit mask of HSTIMER3_RST field.
	LEDC_HSTIMER3_CONF_HSTIMER3_RST_Msk = 0x1000000
	// Bit HSTIMER3_RST.
	LEDC_HSTIMER3_CONF_HSTIMER3_RST = 0x1000000
	// Position of HSTIMER3_PAUSE field.
	LEDC_HSTIMER3_CONF_HSTIMER3_PAUSE_Pos = 0x17
	// Bit mask of HSTIMER3_PAUSE field.
	LEDC_HSTIMER3_CONF_HSTIMER3_PAUSE_Msk = 0x800000
	// Bit HSTIMER3_PAUSE.
	LEDC_HSTIMER3_CONF_HSTIMER3_PAUSE = 0x800000
	// Position of DIV_NUM_HSTIMER3 field.
	LEDC_HSTIMER3_CONF_DIV_NUM_HSTIMER3_Pos = 0x5
	// Bit mask of DIV_NUM_HSTIMER3 field.
	LEDC_HSTIMER3_CONF_DIV_NUM_HSTIMER3_Msk = 0x7fffe0
	// Position of HSTIMER3_LIM field.
	LEDC_HSTIMER3_CONF_HSTIMER3_LIM_Pos = 0x0
	// Bit mask of HSTIMER3_LIM field.
	LEDC_HSTIMER3_CONF_HSTIMER3_LIM_Msk = 0x1f

	// HSTIMER3_VALUE: LEDC_HSTIMER3_VALUE
	// Position of HSTIMER3_CNT field.
	LEDC_HSTIMER3_VALUE_HSTIMER3_CNT_Pos = 0x0
	// Bit mask of HSTIMER3_CNT field.
	LEDC_HSTIMER3_VALUE_HSTIMER3_CNT_Msk = 0xfffff

	// LSTIMER0_CONF: LEDC_LSTIMER0_CONF
	// Position of LSTIMER0_PARA_UP field.
	LEDC_LSTIMER0_CONF_LSTIMER0_PARA_UP_Pos = 0x1a
	// Bit mask of LSTIMER0_PARA_UP field.
	LEDC_LSTIMER0_CONF_LSTIMER0_PARA_UP_Msk = 0x4000000
	// Bit LSTIMER0_PARA_UP.
	LEDC_LSTIMER0_CONF_LSTIMER0_PARA_UP = 0x4000000
	// Position of TICK_SEL_LSTIMER0 field.
	LEDC_LSTIMER0_CONF_TICK_SEL_LSTIMER0_Pos = 0x19
	// Bit mask of TICK_SEL_LSTIMER0 field.
	LEDC_LSTIMER0_CONF_TICK_SEL_LSTIMER0_Msk = 0x2000000
	// Bit TICK_SEL_LSTIMER0.
	LEDC_LSTIMER0_CONF_TICK_SEL_LSTIMER0 = 0x2000000
	// Position of LSTIMER0_RST field.
	LEDC_LSTIMER0_CONF_LSTIMER0_RST_Pos = 0x18
	// Bit mask of LSTIMER0_RST field.
	LEDC_LSTIMER0_CONF_LSTIMER0_RST_Msk = 0x1000000
	// Bit LSTIMER0_RST.
	LEDC_LSTIMER0_CONF_LSTIMER0_RST = 0x1000000
	// Position of LSTIMER0_PAUSE field.
	LEDC_LSTIMER0_CONF_LSTIMER0_PAUSE_Pos = 0x17
	// Bit mask of LSTIMER0_PAUSE field.
	LEDC_LSTIMER0_CONF_LSTIMER0_PAUSE_Msk = 0x800000
	// Bit LSTIMER0_PAUSE.
	LEDC_LSTIMER0_CONF_LSTIMER0_PAUSE = 0x800000
	// Position of DIV_NUM_LSTIMER0 field.
	LEDC_LSTIMER0_CONF_DIV_NUM_LSTIMER0_Pos = 0x5
	// Bit mask of DIV_NUM_LSTIMER0 field.
	LEDC_LSTIMER0_CONF_DIV_NUM_LSTIMER0_Msk = 0x7fffe0
	// Position of LSTIMER0_LIM field.
	LEDC_LSTIMER0_CONF_LSTIMER0_LIM_Pos = 0x0
	// Bit mask of LSTIMER0_LIM field.
	LEDC_LSTIMER0_CONF_LSTIMER0_LIM_Msk = 0x1f

	// LSTIMER0_VALUE: LEDC_LSTIMER0_VALUE
	// Position of LSTIMER0_CNT field.
	LEDC_LSTIMER0_VALUE_LSTIMER0_CNT_Pos = 0x0
	// Bit mask of LSTIMER0_CNT field.
	LEDC_LSTIMER0_VALUE_LSTIMER0_CNT_Msk = 0xfffff

	// LSTIMER1_CONF: LEDC_LSTIMER1_CONF
	// Position of LSTIMER1_PARA_UP field.
	LEDC_LSTIMER1_CONF_LSTIMER1_PARA_UP_Pos = 0x1a
	// Bit mask of LSTIMER1_PARA_UP field.
	LEDC_LSTIMER1_CONF_LSTIMER1_PARA_UP_Msk = 0x4000000
	// Bit LSTIMER1_PARA_UP.
	LEDC_LSTIMER1_CONF_LSTIMER1_PARA_UP = 0x4000000
	// Position of TICK_SEL_LSTIMER1 field.
	LEDC_LSTIMER1_CONF_TICK_SEL_LSTIMER1_Pos = 0x19
	// Bit mask of TICK_SEL_LSTIMER1 field.
	LEDC_LSTIMER1_CONF_TICK_SEL_LSTIMER1_Msk = 0x2000000
	// Bit TICK_SEL_LSTIMER1.
	LEDC_LSTIMER1_CONF_TICK_SEL_LSTIMER1 = 0x2000000
	// Position of LSTIMER1_RST field.
	LEDC_LSTIMER1_CONF_LSTIMER1_RST_Pos = 0x18
	// Bit mask of LSTIMER1_RST field.
	LEDC_LSTIMER1_CONF_LSTIMER1_RST_Msk = 0x1000000
	// Bit LSTIMER1_RST.
	LEDC_LSTIMER1_CONF_LSTIMER1_RST = 0x1000000
	// Position of LSTIMER1_PAUSE field.
	LEDC_LSTIMER1_CONF_LSTIMER1_PAUSE_Pos = 0x17
	// Bit mask of LSTIMER1_PAUSE field.
	LEDC_LSTIMER1_CONF_LSTIMER1_PAUSE_Msk = 0x800000
	// Bit LSTIMER1_PAUSE.
	LEDC_LSTIMER1_CONF_LSTIMER1_PAUSE = 0x800000
	// Position of DIV_NUM_LSTIMER1 field.
	LEDC_LSTIMER1_CONF_DIV_NUM_LSTIMER1_Pos = 0x5
	// Bit mask of DIV_NUM_LSTIMER1 field.
	LEDC_LSTIMER1_CONF_DIV_NUM_LSTIMER1_Msk = 0x7fffe0
	// Position of LSTIMER1_LIM field.
	LEDC_LSTIMER1_CONF_LSTIMER1_LIM_Pos = 0x0
	// Bit mask of LSTIMER1_LIM field.
	LEDC_LSTIMER1_CONF_LSTIMER1_LIM_Msk = 0x1f

	// LSTIMER1_VALUE: LEDC_LSTIMER1_VALUE
	// Position of LSTIMER1_CNT field.
	LEDC_LSTIMER1_VALUE_LSTIMER1_CNT_Pos = 0x0
	// Bit mask of LSTIMER1_CNT field.
	LEDC_LSTIMER1_VALUE_LSTIMER1_CNT_Msk = 0xfffff

	// LSTIMER2_CONF: LEDC_LSTIMER2_CONF
	// Position of LSTIMER2_PARA_UP field.
	LEDC_LSTIMER2_CONF_LSTIMER2_PARA_UP_Pos = 0x1a
	// Bit mask of LSTIMER2_PARA_UP field.
	LEDC_LSTIMER2_CONF_LSTIMER2_PARA_UP_Msk = 0x4000000
	// Bit LSTIMER2_PARA_UP.
	LEDC_LSTIMER2_CONF_LSTIMER2_PARA_UP = 0x4000000
	// Position of TICK_SEL_LSTIMER2 field.
	LEDC_LSTIMER2_CONF_TICK_SEL_LSTIMER2_Pos = 0x19
	// Bit mask of TICK_SEL_LSTIMER2 field.
	LEDC_LSTIMER2_CONF_TICK_SEL_LSTIMER2_Msk = 0x2000000
	// Bit TICK_SEL_LSTIMER2.
	LEDC_LSTIMER2_CONF_TICK_SEL_LSTIMER2 = 0x2000000
	// Position of LSTIMER2_RST field.
	LEDC_LSTIMER2_CONF_LSTIMER2_RST_Pos = 0x18
	// Bit mask of LSTIMER2_RST field.
	LEDC_LSTIMER2_CONF_LSTIMER2_RST_Msk = 0x1000000
	// Bit LSTIMER2_RST.
	LEDC_LSTIMER2_CONF_LSTIMER2_RST = 0x1000000
	// Position of LSTIMER2_PAUSE field.
	LEDC_LSTIMER2_CONF_LSTIMER2_PAUSE_Pos = 0x17
	// Bit mask of LSTIMER2_PAUSE field.
	LEDC_LSTIMER2_CONF_LSTIMER2_PAUSE_Msk = 0x800000
	// Bit LSTIMER2_PAUSE.
	LEDC_LSTIMER2_CONF_LSTIMER2_PAUSE = 0x800000
	// Position of DIV_NUM_LSTIMER2 field.
	LEDC_LSTIMER2_CONF_DIV_NUM_LSTIMER2_Pos = 0x5
	// Bit mask of DIV_NUM_LSTIMER2 field.
	LEDC_LSTIMER2_CONF_DIV_NUM_LSTIMER2_Msk = 0x7fffe0
	// Position of LSTIMER2_LIM field.
	LEDC_LSTIMER2_CONF_LSTIMER2_LIM_Pos = 0x0
	// Bit mask of LSTIMER2_LIM field.
	LEDC_LSTIMER2_CONF_LSTIMER2_LIM_Msk = 0x1f

	// LSTIMER2_VALUE: LEDC_LSTIMER2_VALUE
	// Position of LSTIMER2_CNT field.
	LEDC_LSTIMER2_VALUE_LSTIMER2_CNT_Pos = 0x0
	// Bit mask of LSTIMER2_CNT field.
	LEDC_LSTIMER2_VALUE_LSTIMER2_CNT_Msk = 0xfffff

	// LSTIMER3_CONF: LEDC_LSTIMER3_CONF
	// Position of LSTIMER3_PARA_UP field.
	LEDC_LSTIMER3_CONF_LSTIMER3_PARA_UP_Pos = 0x1a
	// Bit mask of LSTIMER3_PARA_UP field.
	LEDC_LSTIMER3_CONF_LSTIMER3_PARA_UP_Msk = 0x4000000
	// Bit LSTIMER3_PARA_UP.
	LEDC_LSTIMER3_CONF_LSTIMER3_PARA_UP = 0x4000000
	// Position of TICK_SEL_LSTIMER3 field.
	LEDC_LSTIMER3_CONF_TICK_SEL_LSTIMER3_Pos = 0x19
	// Bit mask of TICK_SEL_LSTIMER3 field.
	LEDC_LSTIMER3_CONF_TICK_SEL_LSTIMER3_Msk = 0x2000000
	// Bit TICK_SEL_LSTIMER3.
	LEDC_LSTIMER3_CONF_TICK_SEL_LSTIMER3 = 0x2000000
	// Position of LSTIMER3_RST field.
	LEDC_LSTIMER3_CONF_LSTIMER3_RST_Pos = 0x18
	// Bit mask of LSTIMER3_RST field.
	LEDC_LSTIMER3_CONF_LSTIMER3_RST_Msk = 0x1000000
	// Bit LSTIMER3_RST.
	LEDC_LSTIMER3_CONF_LSTIMER3_RST = 0x1000000
	// Position of LSTIMER3_PAUSE field.
	LEDC_LSTIMER3_CONF_LSTIMER3_PAUSE_Pos = 0x17
	// Bit mask of LSTIMER3_PAUSE field.
	LEDC_LSTIMER3_CONF_LSTIMER3_PAUSE_Msk = 0x800000
	// Bit LSTIMER3_PAUSE.
	LEDC_LSTIMER3_CONF_LSTIMER3_PAUSE = 0x800000
	// Position of DIV_NUM_LSTIMER3 field.
	LEDC_LSTIMER3_CONF_DIV_NUM_LSTIMER3_Pos = 0x5
	// Bit mask of DIV_NUM_LSTIMER3 field.
	LEDC_LSTIMER3_CONF_DIV_NUM_LSTIMER3_Msk = 0x7fffe0
	// Position of LSTIMER3_LIM field.
	LEDC_LSTIMER3_CONF_LSTIMER3_LIM_Pos = 0x0
	// Bit mask of LSTIMER3_LIM field.
	LEDC_LSTIMER3_CONF_LSTIMER3_LIM_Msk = 0x1f

	// LSTIMER3_VALUE: LEDC_LSTIMER3_VALUE
	// Position of LSTIMER3_CNT field.
	LEDC_LSTIMER3_VALUE_LSTIMER3_CNT_Pos = 0x0
	// Bit mask of LSTIMER3_CNT field.
	LEDC_LSTIMER3_VALUE_LSTIMER3_CNT_Msk = 0xfffff

	// INT_RAW: LEDC_INT_RAW
	// Position of DUTY_CHNG_END_LSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH7_INT_RAW = 0x800000
	// Position of DUTY_CHNG_END_LSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH6_INT_RAW = 0x400000
	// Position of DUTY_CHNG_END_LSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH5_INT_RAW = 0x200000
	// Position of DUTY_CHNG_END_LSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH4_INT_RAW = 0x100000
	// Position of DUTY_CHNG_END_LSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH3_INT_RAW = 0x80000
	// Position of DUTY_CHNG_END_LSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH2_INT_RAW = 0x40000
	// Position of DUTY_CHNG_END_LSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH1_INT_RAW = 0x20000
	// Position of DUTY_CHNG_END_LSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_LSCH0_INT_RAW = 0x10000
	// Position of DUTY_CHNG_END_HSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH7_INT_RAW = 0x8000
	// Position of DUTY_CHNG_END_HSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH6_INT_RAW = 0x4000
	// Position of DUTY_CHNG_END_HSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH5_INT_RAW = 0x2000
	// Position of DUTY_CHNG_END_HSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH4_INT_RAW = 0x1000
	// Position of DUTY_CHNG_END_HSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH3_INT_RAW = 0x800
	// Position of DUTY_CHNG_END_HSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH2_INT_RAW = 0x400
	// Position of DUTY_CHNG_END_HSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH1_INT_RAW = 0x200
	// Position of DUTY_CHNG_END_HSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_RAW field.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_RAW.
	LEDC_INT_RAW_DUTY_CHNG_END_HSCH0_INT_RAW = 0x100
	// Position of LSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER3_OVF_INT_RAW_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER3_OVF_INT_RAW_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER3_OVF_INT_RAW = 0x80
	// Position of LSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER2_OVF_INT_RAW_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER2_OVF_INT_RAW_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER2_OVF_INT_RAW = 0x40
	// Position of LSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER1_OVF_INT_RAW_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER1_OVF_INT_RAW_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER1_OVF_INT_RAW = 0x20
	// Position of LSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER0_OVF_INT_RAW_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_LSTIMER0_OVF_INT_RAW_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_RAW.
	LEDC_INT_RAW_LSTIMER0_OVF_INT_RAW = 0x10
	// Position of HSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER3_OVF_INT_RAW_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER3_OVF_INT_RAW_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER3_OVF_INT_RAW = 0x8
	// Position of HSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER2_OVF_INT_RAW_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER2_OVF_INT_RAW_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER2_OVF_INT_RAW = 0x4
	// Position of HSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER1_OVF_INT_RAW_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER1_OVF_INT_RAW_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER1_OVF_INT_RAW = 0x2
	// Position of HSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER0_OVF_INT_RAW_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_RAW field.
	LEDC_INT_RAW_HSTIMER0_OVF_INT_RAW_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_RAW.
	LEDC_INT_RAW_HSTIMER0_OVF_INT_RAW = 0x1

	// INT_ST: LEDC_INT_ST
	// Position of DUTY_CHNG_END_LSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH7_INT_ST_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH7_INT_ST_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH7_INT_ST = 0x800000
	// Position of DUTY_CHNG_END_LSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH6_INT_ST_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH6_INT_ST_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH6_INT_ST = 0x400000
	// Position of DUTY_CHNG_END_LSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH5_INT_ST_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH5_INT_ST_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH5_INT_ST = 0x200000
	// Position of DUTY_CHNG_END_LSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH4_INT_ST_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH4_INT_ST_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH4_INT_ST = 0x100000
	// Position of DUTY_CHNG_END_LSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH3_INT_ST_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH3_INT_ST_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH3_INT_ST = 0x80000
	// Position of DUTY_CHNG_END_LSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH2_INT_ST_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH2_INT_ST_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH2_INT_ST = 0x40000
	// Position of DUTY_CHNG_END_LSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH1_INT_ST_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH1_INT_ST_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH1_INT_ST = 0x20000
	// Position of DUTY_CHNG_END_LSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH0_INT_ST_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH0_INT_ST_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_LSCH0_INT_ST = 0x10000
	// Position of DUTY_CHNG_END_HSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH7_INT_ST_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH7_INT_ST_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH7_INT_ST = 0x8000
	// Position of DUTY_CHNG_END_HSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH6_INT_ST_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH6_INT_ST_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH6_INT_ST = 0x4000
	// Position of DUTY_CHNG_END_HSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH5_INT_ST_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH5_INT_ST_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH5_INT_ST = 0x2000
	// Position of DUTY_CHNG_END_HSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH4_INT_ST_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH4_INT_ST_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH4_INT_ST = 0x1000
	// Position of DUTY_CHNG_END_HSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH3_INT_ST_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH3_INT_ST_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH3_INT_ST = 0x800
	// Position of DUTY_CHNG_END_HSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH2_INT_ST_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH2_INT_ST_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH2_INT_ST = 0x400
	// Position of DUTY_CHNG_END_HSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH1_INT_ST_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH1_INT_ST_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH1_INT_ST = 0x200
	// Position of DUTY_CHNG_END_HSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH0_INT_ST_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_ST field.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH0_INT_ST_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_ST.
	LEDC_INT_ST_DUTY_CHNG_END_HSCH0_INT_ST = 0x100
	// Position of LSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER3_OVF_INT_ST_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER3_OVF_INT_ST_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER3_OVF_INT_ST = 0x80
	// Position of LSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER2_OVF_INT_ST_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER2_OVF_INT_ST_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER2_OVF_INT_ST = 0x40
	// Position of LSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER1_OVF_INT_ST_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER1_OVF_INT_ST_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER1_OVF_INT_ST = 0x20
	// Position of LSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER0_OVF_INT_ST_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_LSTIMER0_OVF_INT_ST_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_ST.
	LEDC_INT_ST_LSTIMER0_OVF_INT_ST = 0x10
	// Position of HSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER3_OVF_INT_ST_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER3_OVF_INT_ST_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER3_OVF_INT_ST = 0x8
	// Position of HSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER2_OVF_INT_ST_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER2_OVF_INT_ST_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER2_OVF_INT_ST = 0x4
	// Position of HSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER1_OVF_INT_ST_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER1_OVF_INT_ST_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER1_OVF_INT_ST = 0x2
	// Position of HSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER0_OVF_INT_ST_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_ST field.
	LEDC_INT_ST_HSTIMER0_OVF_INT_ST_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_ST.
	LEDC_INT_ST_HSTIMER0_OVF_INT_ST = 0x1

	// INT_ENA: LEDC_INT_ENA
	// Position of DUTY_CHNG_END_LSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH7_INT_ENA = 0x800000
	// Position of DUTY_CHNG_END_LSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH6_INT_ENA = 0x400000
	// Position of DUTY_CHNG_END_LSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH5_INT_ENA = 0x200000
	// Position of DUTY_CHNG_END_LSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH4_INT_ENA = 0x100000
	// Position of DUTY_CHNG_END_LSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH3_INT_ENA = 0x80000
	// Position of DUTY_CHNG_END_LSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH2_INT_ENA = 0x40000
	// Position of DUTY_CHNG_END_LSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH1_INT_ENA = 0x20000
	// Position of DUTY_CHNG_END_LSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_LSCH0_INT_ENA = 0x10000
	// Position of DUTY_CHNG_END_HSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH7_INT_ENA = 0x8000
	// Position of DUTY_CHNG_END_HSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH6_INT_ENA = 0x4000
	// Position of DUTY_CHNG_END_HSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH5_INT_ENA = 0x2000
	// Position of DUTY_CHNG_END_HSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH4_INT_ENA = 0x1000
	// Position of DUTY_CHNG_END_HSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH3_INT_ENA = 0x800
	// Position of DUTY_CHNG_END_HSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH2_INT_ENA = 0x400
	// Position of DUTY_CHNG_END_HSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH1_INT_ENA = 0x200
	// Position of DUTY_CHNG_END_HSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_ENA field.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_ENA.
	LEDC_INT_ENA_DUTY_CHNG_END_HSCH0_INT_ENA = 0x100
	// Position of LSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER3_OVF_INT_ENA_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER3_OVF_INT_ENA_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER3_OVF_INT_ENA = 0x80
	// Position of LSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER2_OVF_INT_ENA_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER2_OVF_INT_ENA_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER2_OVF_INT_ENA = 0x40
	// Position of LSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER1_OVF_INT_ENA_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER1_OVF_INT_ENA_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER1_OVF_INT_ENA = 0x20
	// Position of LSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER0_OVF_INT_ENA_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_LSTIMER0_OVF_INT_ENA_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_ENA.
	LEDC_INT_ENA_LSTIMER0_OVF_INT_ENA = 0x10
	// Position of HSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER3_OVF_INT_ENA_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER3_OVF_INT_ENA_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER3_OVF_INT_ENA = 0x8
	// Position of HSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER2_OVF_INT_ENA_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER2_OVF_INT_ENA_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER2_OVF_INT_ENA = 0x4
	// Position of HSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER1_OVF_INT_ENA_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER1_OVF_INT_ENA_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER1_OVF_INT_ENA = 0x2
	// Position of HSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER0_OVF_INT_ENA_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_ENA field.
	LEDC_INT_ENA_HSTIMER0_OVF_INT_ENA_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_ENA.
	LEDC_INT_ENA_HSTIMER0_OVF_INT_ENA = 0x1

	// INT_CLR: LEDC_INT_CLR
	// Position of DUTY_CHNG_END_LSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR_Pos = 0x17
	// Bit mask of DUTY_CHNG_END_LSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR_Msk = 0x800000
	// Bit DUTY_CHNG_END_LSCH7_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH7_INT_CLR = 0x800000
	// Position of DUTY_CHNG_END_LSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR_Pos = 0x16
	// Bit mask of DUTY_CHNG_END_LSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR_Msk = 0x400000
	// Bit DUTY_CHNG_END_LSCH6_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH6_INT_CLR = 0x400000
	// Position of DUTY_CHNG_END_LSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR_Pos = 0x15
	// Bit mask of DUTY_CHNG_END_LSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR_Msk = 0x200000
	// Bit DUTY_CHNG_END_LSCH5_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH5_INT_CLR = 0x200000
	// Position of DUTY_CHNG_END_LSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR_Pos = 0x14
	// Bit mask of DUTY_CHNG_END_LSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR_Msk = 0x100000
	// Bit DUTY_CHNG_END_LSCH4_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH4_INT_CLR = 0x100000
	// Position of DUTY_CHNG_END_LSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR_Pos = 0x13
	// Bit mask of DUTY_CHNG_END_LSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR_Msk = 0x80000
	// Bit DUTY_CHNG_END_LSCH3_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH3_INT_CLR = 0x80000
	// Position of DUTY_CHNG_END_LSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR_Pos = 0x12
	// Bit mask of DUTY_CHNG_END_LSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR_Msk = 0x40000
	// Bit DUTY_CHNG_END_LSCH2_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH2_INT_CLR = 0x40000
	// Position of DUTY_CHNG_END_LSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR_Pos = 0x11
	// Bit mask of DUTY_CHNG_END_LSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR_Msk = 0x20000
	// Bit DUTY_CHNG_END_LSCH1_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH1_INT_CLR = 0x20000
	// Position of DUTY_CHNG_END_LSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR_Pos = 0x10
	// Bit mask of DUTY_CHNG_END_LSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR_Msk = 0x10000
	// Bit DUTY_CHNG_END_LSCH0_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_LSCH0_INT_CLR = 0x10000
	// Position of DUTY_CHNG_END_HSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR_Pos = 0xf
	// Bit mask of DUTY_CHNG_END_HSCH7_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR_Msk = 0x8000
	// Bit DUTY_CHNG_END_HSCH7_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH7_INT_CLR = 0x8000
	// Position of DUTY_CHNG_END_HSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR_Pos = 0xe
	// Bit mask of DUTY_CHNG_END_HSCH6_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR_Msk = 0x4000
	// Bit DUTY_CHNG_END_HSCH6_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH6_INT_CLR = 0x4000
	// Position of DUTY_CHNG_END_HSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR_Pos = 0xd
	// Bit mask of DUTY_CHNG_END_HSCH5_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR_Msk = 0x2000
	// Bit DUTY_CHNG_END_HSCH5_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH5_INT_CLR = 0x2000
	// Position of DUTY_CHNG_END_HSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR_Pos = 0xc
	// Bit mask of DUTY_CHNG_END_HSCH4_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR_Msk = 0x1000
	// Bit DUTY_CHNG_END_HSCH4_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH4_INT_CLR = 0x1000
	// Position of DUTY_CHNG_END_HSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR_Pos = 0xb
	// Bit mask of DUTY_CHNG_END_HSCH3_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR_Msk = 0x800
	// Bit DUTY_CHNG_END_HSCH3_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH3_INT_CLR = 0x800
	// Position of DUTY_CHNG_END_HSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR_Pos = 0xa
	// Bit mask of DUTY_CHNG_END_HSCH2_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR_Msk = 0x400
	// Bit DUTY_CHNG_END_HSCH2_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH2_INT_CLR = 0x400
	// Position of DUTY_CHNG_END_HSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR_Pos = 0x9
	// Bit mask of DUTY_CHNG_END_HSCH1_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR_Msk = 0x200
	// Bit DUTY_CHNG_END_HSCH1_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH1_INT_CLR = 0x200
	// Position of DUTY_CHNG_END_HSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR_Pos = 0x8
	// Bit mask of DUTY_CHNG_END_HSCH0_INT_CLR field.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR_Msk = 0x100
	// Bit DUTY_CHNG_END_HSCH0_INT_CLR.
	LEDC_INT_CLR_DUTY_CHNG_END_HSCH0_INT_CLR = 0x100
	// Position of LSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER3_OVF_INT_CLR_Pos = 0x7
	// Bit mask of LSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER3_OVF_INT_CLR_Msk = 0x80
	// Bit LSTIMER3_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER3_OVF_INT_CLR = 0x80
	// Position of LSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER2_OVF_INT_CLR_Pos = 0x6
	// Bit mask of LSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER2_OVF_INT_CLR_Msk = 0x40
	// Bit LSTIMER2_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER2_OVF_INT_CLR = 0x40
	// Position of LSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER1_OVF_INT_CLR_Pos = 0x5
	// Bit mask of LSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER1_OVF_INT_CLR_Msk = 0x20
	// Bit LSTIMER1_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER1_OVF_INT_CLR = 0x20
	// Position of LSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER0_OVF_INT_CLR_Pos = 0x4
	// Bit mask of LSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_LSTIMER0_OVF_INT_CLR_Msk = 0x10
	// Bit LSTIMER0_OVF_INT_CLR.
	LEDC_INT_CLR_LSTIMER0_OVF_INT_CLR = 0x10
	// Position of HSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER3_OVF_INT_CLR_Pos = 0x3
	// Bit mask of HSTIMER3_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER3_OVF_INT_CLR_Msk = 0x8
	// Bit HSTIMER3_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER3_OVF_INT_CLR = 0x8
	// Position of HSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER2_OVF_INT_CLR_Pos = 0x2
	// Bit mask of HSTIMER2_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER2_OVF_INT_CLR_Msk = 0x4
	// Bit HSTIMER2_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER2_OVF_INT_CLR = 0x4
	// Position of HSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER1_OVF_INT_CLR_Pos = 0x1
	// Bit mask of HSTIMER1_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER1_OVF_INT_CLR_Msk = 0x2
	// Bit HSTIMER1_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER1_OVF_INT_CLR = 0x2
	// Position of HSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER0_OVF_INT_CLR_Pos = 0x0
	// Bit mask of HSTIMER0_OVF_INT_CLR field.
	LEDC_INT_CLR_HSTIMER0_OVF_INT_CLR_Msk = 0x1
	// Bit HSTIMER0_OVF_INT_CLR.
	LEDC_INT_CLR_HSTIMER0_OVF_INT_CLR = 0x1

	// CONF: LEDC_CONF
	// Position of APB_CLK_SEL field.
	LEDC_CONF_APB_CLK_SEL_Pos = 0x0
	// Bit mask of APB_CLK_SEL field.
	LEDC_CONF_APB_CLK_SEL_Msk = 0x1
	// Bit APB_CLK_SEL.
	LEDC_CONF_APB_CLK_SEL = 0x1

	// DATE: LEDC_DATE
	// Position of DATE field.
	LEDC_DATE_DATE_Pos = 0x0
	// Bit mask of DATE field.
	LEDC_DATE_DATE_Msk = 0xffffffff
)

// Constants for MCPWM
const (
	// CLK_CFG: MCPWM_CLK_CFG
	// Position of CLK_PRESCALE field.
	MCPWM_CLK_CFG_CLK_PRESCALE_Pos = 0x0
	// Bit mask of CLK_PRESCALE field.
	MCPWM_CLK_CFG_CLK_PRESCALE_Msk = 0xff

	// TIMER0_CFG0: MCPWM_TIMER0_CFG0
	// Position of TIMER0_PERIOD_UPMETHOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_UPMETHOD_Pos = 0x18
	// Bit mask of TIMER0_PERIOD_UPMETHOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_UPMETHOD_Msk = 0x3000000
	// Position of TIMER0_PERIOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_Pos = 0x8
	// Bit mask of TIMER0_PERIOD field.
	MCPWM_TIMER0_CFG0_TIMER0_PERIOD_Msk = 0xffff00
	// Position of TIMER0_PRESCALE field.
	MCPWM_TIMER0_CFG0_TIMER0_PRESCALE_Pos = 0x0
	// Bit mask of TIMER0_PRESCALE field.
	MCPWM_TIMER0_CFG0_TIMER0_PRESCALE_Msk = 0xff

	// TIMER0_CFG1: MCPWM_TIMER0_CFG1
	// Position of TIMER0_MOD field.
	MCPWM_TIMER0_CFG1_TIMER0_MOD_Pos = 0x3
	// Bit mask of TIMER0_MOD field.
	MCPWM_TIMER0_CFG1_TIMER0_MOD_Msk = 0x18
	// Position of TIMER0_START field.
	MCPWM_TIMER0_CFG1_TIMER0_START_Pos = 0x0
	// Bit mask of TIMER0_START field.
	MCPWM_TIMER0_CFG1_TIMER0_START_Msk = 0x7

	// TIMER0_SYNC: MCPWM_TIMER0_SYNC
	// Position of TIMER0_PHASE field.
	MCPWM_TIMER0_SYNC_TIMER0_PHASE_Pos = 0x4
	// Bit mask of TIMER0_PHASE field.
	MCPWM_TIMER0_SYNC_TIMER0_PHASE_Msk = 0x1ffff0
	// Position of TIMER0_SYNCO_SEL field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCO_SEL_Pos = 0x2
	// Bit mask of TIMER0_SYNCO_SEL field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCO_SEL_Msk = 0xc
	// Position of TIMER0_SYNC_SW field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNC_SW_Pos = 0x1
	// Bit mask of TIMER0_SYNC_SW field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNC_SW_Msk = 0x2
	// Bit TIMER0_SYNC_SW.
	MCPWM_TIMER0_SYNC_TIMER0_SYNC_SW = 0x2
	// Position of TIMER0_SYNCI_EN field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCI_EN_Pos = 0x0
	// Bit mask of TIMER0_SYNCI_EN field.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCI_EN_Msk = 0x1
	// Bit TIMER0_SYNCI_EN.
	MCPWM_TIMER0_SYNC_TIMER0_SYNCI_EN = 0x1

	// TIMER0_STATUS: MCPWM_TIMER0_STATUS
	// Position of TIMER0_DIRECTION field.
	MCPWM_TIMER0_STATUS_TIMER0_DIRECTION_Pos = 0x10
	// Bit mask of TIMER0_DIRECTION field.
	MCPWM_TIMER0_STATUS_TIMER0_DIRECTION_Msk = 0x10000
	// Bit TIMER0_DIRECTION.
	MCPWM_TIMER0_STATUS_TIMER0_DIRECTION = 0x10000
	// Position of TIMER0_VALUE field.
	MCPWM_TIMER0_STATUS_TIMER0_VALUE_Pos = 0x0
	// Bit mask of TIMER0_VALUE field.
	MCPWM_TIMER0_STATUS_TIMER0_VALUE_Msk = 0xffff

	// TIMER1_CFG0: MCPWM_TIMER1_CFG0
	// Position of TIMER1_PERIOD_UPMETHOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_UPMETHOD_Pos = 0x18
	// Bit mask of TIMER1_PERIOD_UPMETHOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_UPMETHOD_Msk = 0x3000000
	// Position of TIMER1_PERIOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_Pos = 0x8
	// Bit mask of TIMER1_PERIOD field.
	MCPWM_TIMER1_CFG0_TIMER1_PERIOD_Msk = 0xffff00
	// Position of TIMER1_PRESCALE field.
	MCPWM_TIMER1_CFG0_TIMER1_PRESCALE_Pos = 0x0
	// Bit mask of TIMER1_PRESCALE field.
	MCPWM_TIMER1_CFG0_TIMER1_PRESCALE_Msk = 0xff

	// TIMER1_CFG1: MCPWM_TIMER1_CFG1
	// Position of TIMER1_MOD field.
	MCPWM_TIMER1_CFG1_TIMER1_MOD_Pos = 0x3
	// Bit mask of TIMER1_MOD field.
	MCPWM_TIMER1_CFG1_TIMER1_MOD_Msk = 0x18
	// Position of TIMER1_START field.
	MCPWM_TIMER1_CFG1_TIMER1_START_Pos = 0x0
	// Bit mask of TIMER1_START field.
	MCPWM_TIMER1_CFG1_TIMER1_START_Msk = 0x7

	// TIMER1_SYNC: MCPWM_TIMER1_SYNC
	// Position of TIMER1_PHASE field.
	MCPWM_TIMER1_SYNC_TIMER1_PHASE_Pos = 0x4
	// Bit mask of TIMER1_PHASE field.
	MCPWM_TIMER1_SYNC_TIMER1_PHASE_Msk = 0x1ffff0
	// Position of TIMER1_SYNCO_SEL field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCO_SEL_Pos = 0x2
	// Bit mask of TIMER1_SYNCO_SEL field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCO_SEL_Msk = 0xc
	// Position of TIMER1_SYNC_SW field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNC_SW_Pos = 0x1
	// Bit mask of TIMER1_SYNC_SW field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNC_SW_Msk = 0x2
	// Bit TIMER1_SYNC_SW.
	MCPWM_TIMER1_SYNC_TIMER1_SYNC_SW = 0x2
	// Position of TIMER1_SYNCI_EN field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCI_EN_Pos = 0x0
	// Bit mask of TIMER1_SYNCI_EN field.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCI_EN_Msk = 0x1
	// Bit TIMER1_SYNCI_EN.
	MCPWM_TIMER1_SYNC_TIMER1_SYNCI_EN = 0x1

	// TIMER1_STATUS: MCPWM_TIMER1_STATUS
	// Position of TIMER1_DIRECTION field.
	MCPWM_TIMER1_STATUS_TIMER1_DIRECTION_Pos = 0x10
	// Bit mask of TIMER1_DIRECTION field.
	MCPWM_TIMER1_STATUS_TIMER1_DIRECTION_Msk = 0x10000
	// Bit TIMER1_DIRECTION.
	MCPWM_TIMER1_STATUS_TIMER1_DIRECTION = 0x10000
	// Position of TIMER1_VALUE field.
	MCPWM_TIMER1_STATUS_TIMER1_VALUE_Pos = 0x0
	// Bit mask of TIMER1_VALUE field.
	MCPWM_TIMER1_STATUS_TIMER1_VALUE_Msk = 0xffff

	// TIMER2_CFG0: MCPWM_TIMER2_CFG0
	// Position of TIMER2_PERIOD_UPMETHOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_UPMETHOD_Pos = 0x18
	// Bit mask of TIMER2_PERIOD_UPMETHOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_UPMETHOD_Msk = 0x3000000
	// Position of TIMER2_PERIOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_Pos = 0x8
	// Bit mask of TIMER2_PERIOD field.
	MCPWM_TIMER2_CFG0_TIMER2_PERIOD_Msk = 0xffff00
	// Position of TIMER2_PRESCALE field.
	MCPWM_TIMER2_CFG0_TIMER2_PRESCALE_Pos = 0x0
	// Bit mask of TIMER2_PRESCALE field.
	MCPWM_TIMER2_CFG0_TIMER2_PRESCALE_Msk = 0xff

	// TIMER2_CFG1: MCPWM_TIMER2_CFG1
	// Position of TIMER2_MOD field.
	MCPWM_TIMER2_CFG1_TIMER2_MOD_Pos = 0x3
	// Bit mask of TIMER2_MOD field.
	MCPWM_TIMER2_CFG1_TIMER2_MOD_Msk = 0x18
	// Position of TIMER2_START field.
	MCPWM_TIMER2_CFG1_TIMER2_START_Pos = 0x0
	// Bit mask of TIMER2_START field.
	MCPWM_TIMER2_CFG1_TIMER2_START_Msk = 0x7

	// TIMER2_SYNC: MCPWM_TIMER2_SYNC
	// Position of TIMER2_PHASE field.
	MCPWM_TIMER2_SYNC_TIMER2_PHASE_Pos = 0x4
	// Bit mask of TIMER2_PHASE field.
	MCPWM_TIMER2_SYNC_TIMER2_PHASE_Msk = 0x1ffff0
	// Position of TIMER2_SYNCO_SEL field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCO_SEL_Pos = 0x2
	// Bit mask of TIMER2_SYNCO_SEL field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCO_SEL_Msk = 0xc
	// Position of TIMER2_SYNC_SW field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNC_SW_Pos = 0x1
	// Bit mask of TIMER2_SYNC_SW field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNC_SW_Msk = 0x2
	// Bit TIMER2_SYNC_SW.
	MCPWM_TIMER2_SYNC_TIMER2_SYNC_SW = 0x2
	// Position of TIMER2_SYNCI_EN field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCI_EN_Pos = 0x0
	// Bit mask of TIMER2_SYNCI_EN field.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCI_EN_Msk = 0x1
	// Bit TIMER2_SYNCI_EN.
	MCPWM_TIMER2_SYNC_TIMER2_SYNCI_EN = 0x1

	// TIMER2_STATUS: MCPWM_TIMER2_STATUS
	// Position of TIMER2_DIRECTION field.
	MCPWM_TIMER2_STATUS_TIMER2_DIRECTION_Pos = 0x10
	// Bit mask of TIMER2_DIRECTION field.
	MCPWM_TIMER2_STATUS_TIMER2_DIRECTION_Msk = 0x10000
	// Bit TIMER2_DIRECTION.
	MCPWM_TIMER2_STATUS_TIMER2_DIRECTION = 0x10000
	// Position of TIMER2_VALUE field.
	MCPWM_TIMER2_STATUS_TIMER2_VALUE_Pos = 0x0
	// Bit mask of TIMER2_VALUE field.
	MCPWM_TIMER2_STATUS_TIMER2_VALUE_Msk = 0xffff

	// TIMER_SYNCI_CFG: MCPWM_TIMER_SYNCI_CFG
	// Position of EXTERNAL_SYNCI2_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT_Pos = 0xb
	// Bit mask of EXTERNAL_SYNCI2_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT_Msk = 0x800
	// Bit EXTERNAL_SYNCI2_INVERT.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI2_INVERT = 0x800
	// Position of EXTERNAL_SYNCI1_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT_Pos = 0xa
	// Bit mask of EXTERNAL_SYNCI1_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT_Msk = 0x400
	// Bit EXTERNAL_SYNCI1_INVERT.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI1_INVERT = 0x400
	// Position of EXTERNAL_SYNCI0_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT_Pos = 0x9
	// Bit mask of EXTERNAL_SYNCI0_INVERT field.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT_Msk = 0x200
	// Bit EXTERNAL_SYNCI0_INVERT.
	MCPWM_TIMER_SYNCI_CFG_EXTERNAL_SYNCI0_INVERT = 0x200
	// Position of TIMER2_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER2_SYNCISEL_Pos = 0x6
	// Bit mask of TIMER2_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER2_SYNCISEL_Msk = 0x1c0
	// Position of TIMER1_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER1_SYNCISEL_Pos = 0x3
	// Bit mask of TIMER1_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER1_SYNCISEL_Msk = 0x38
	// Position of TIMER0_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER0_SYNCISEL_Pos = 0x0
	// Bit mask of TIMER0_SYNCISEL field.
	MCPWM_TIMER_SYNCI_CFG_TIMER0_SYNCISEL_Msk = 0x7

	// OPERATOR_TIMERSEL: MCPWM_OPERATOR_TIMERSEL
	// Position of OPERATOR2_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR2_TIMERSEL_Pos = 0x4
	// Bit mask of OPERATOR2_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR2_TIMERSEL_Msk = 0x30
	// Position of OPERATOR1_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR1_TIMERSEL_Pos = 0x2
	// Bit mask of OPERATOR1_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR1_TIMERSEL_Msk = 0xc
	// Position of OPERATOR0_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR0_TIMERSEL_Pos = 0x0
	// Bit mask of OPERATOR0_TIMERSEL field.
	MCPWM_OPERATOR_TIMERSEL_OPERATOR0_TIMERSEL_Msk = 0x3

	// GEN0_STMP_CFG: MCPWM_GEN0_STMP_CFG
	// Position of GEN0_B_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_SHDW_FULL_Pos = 0x9
	// Bit mask of GEN0_B_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_SHDW_FULL_Msk = 0x200
	// Bit GEN0_B_SHDW_FULL.
	MCPWM_GEN0_STMP_CFG_GEN0_B_SHDW_FULL = 0x200
	// Position of GEN0_A_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_SHDW_FULL_Pos = 0x8
	// Bit mask of GEN0_A_SHDW_FULL field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_SHDW_FULL_Msk = 0x100
	// Bit GEN0_A_SHDW_FULL.
	MCPWM_GEN0_STMP_CFG_GEN0_A_SHDW_FULL = 0x100
	// Position of GEN0_B_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_UPMETHOD_Pos = 0x4
	// Bit mask of GEN0_B_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_B_UPMETHOD_Msk = 0xf0
	// Position of GEN0_A_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_UPMETHOD_Pos = 0x0
	// Bit mask of GEN0_A_UPMETHOD field.
	MCPWM_GEN0_STMP_CFG_GEN0_A_UPMETHOD_Msk = 0xf

	// GEN0_TSTMP_A: MCPWM_GEN0_TSTMP_A
	// Position of GEN0_A field.
	MCPWM_GEN0_TSTMP_A_GEN0_A_Pos = 0x0
	// Bit mask of GEN0_A field.
	MCPWM_GEN0_TSTMP_A_GEN0_A_Msk = 0xffff

	// GEN0_TSTMP_B: MCPWM_GEN0_TSTMP_B
	// Position of GEN0_B field.
	MCPWM_GEN0_TSTMP_B_GEN0_B_Pos = 0x0
	// Bit mask of GEN0_B field.
	MCPWM_GEN0_TSTMP_B_GEN0_B_Msk = 0xffff

	// GEN0_CFG0: MCPWM_GEN0_CFG0
	// Position of GEN0_T1_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T1_SEL_Pos = 0x7
	// Bit mask of GEN0_T1_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T1_SEL_Msk = 0x380
	// Position of GEN0_T0_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T0_SEL_Pos = 0x4
	// Bit mask of GEN0_T0_SEL field.
	MCPWM_GEN0_CFG0_GEN0_T0_SEL_Msk = 0x70
	// Position of GEN0_CFG_UPMETHOD field.
	MCPWM_GEN0_CFG0_GEN0_CFG_UPMETHOD_Pos = 0x0
	// Bit mask of GEN0_CFG_UPMETHOD field.
	MCPWM_GEN0_CFG0_GEN0_CFG_UPMETHOD_Msk = 0xf

	// GEN0_FORCE: MCPWM_GEN0_FORCE
	// Position of GEN0_B_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_MODE_Pos = 0xe
	// Bit mask of GEN0_B_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_MODE_Msk = 0xc000
	// Position of GEN0_B_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_Pos = 0xd
	// Bit mask of GEN0_B_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE_Msk = 0x2000
	// Bit GEN0_B_NCIFORCE.
	MCPWM_GEN0_FORCE_GEN0_B_NCIFORCE = 0x2000
	// Position of GEN0_A_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_MODE_Pos = 0xb
	// Bit mask of GEN0_A_NCIFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_MODE_Msk = 0x1800
	// Position of GEN0_A_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_Pos = 0xa
	// Bit mask of GEN0_A_NCIFORCE field.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE_Msk = 0x400
	// Bit GEN0_A_NCIFORCE.
	MCPWM_GEN0_FORCE_GEN0_A_NCIFORCE = 0x400
	// Position of GEN0_B_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_CNTUFORCE_MODE_Pos = 0x8
	// Bit mask of GEN0_B_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_B_CNTUFORCE_MODE_Msk = 0x300
	// Position of GEN0_A_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_CNTUFORCE_MODE_Pos = 0x6
	// Bit mask of GEN0_A_CNTUFORCE_MODE field.
	MCPWM_GEN0_FORCE_GEN0_A_CNTUFORCE_MODE_Msk = 0xc0
	// Position of GEN0_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD_Pos = 0x0
	// Bit mask of GEN0_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN0_FORCE_GEN0_CNTUFORCE_UPMETHOD_Msk = 0x3f

	// GEN0_A: MCPWM_GEN0_A
	// Position of GEN0_A_DT1 field.
	MCPWM_GEN0_A_GEN0_A_DT1_Pos = 0x16
	// Bit mask of GEN0_A_DT1 field.
	MCPWM_GEN0_A_GEN0_A_DT1_Msk = 0xc00000
	// Position of GEN0_A_DT0 field.
	MCPWM_GEN0_A_GEN0_A_DT0_Pos = 0x14
	// Bit mask of GEN0_A_DT0 field.
	MCPWM_GEN0_A_GEN0_A_DT0_Msk = 0x300000
	// Position of GEN0_A_DTEB field.
	MCPWM_GEN0_A_GEN0_A_DTEB_Pos = 0x12
	// Bit mask of GEN0_A_DTEB field.
	MCPWM_GEN0_A_GEN0_A_DTEB_Msk = 0xc0000
	// Position of GEN0_A_DTEA field.
	MCPWM_GEN0_A_GEN0_A_DTEA_Pos = 0x10
	// Bit mask of GEN0_A_DTEA field.
	MCPWM_GEN0_A_GEN0_A_DTEA_Msk = 0x30000
	// Position of GEN0_A_DTEP field.
	MCPWM_GEN0_A_GEN0_A_DTEP_Pos = 0xe
	// Bit mask of GEN0_A_DTEP field.
	MCPWM_GEN0_A_GEN0_A_DTEP_Msk = 0xc000
	// Position of GEN0_A_DTEZ field.
	MCPWM_GEN0_A_GEN0_A_DTEZ_Pos = 0xc
	// Bit mask of GEN0_A_DTEZ field.
	MCPWM_GEN0_A_GEN0_A_DTEZ_Msk = 0x3000
	// Position of GEN0_A_UT1 field.
	MCPWM_GEN0_A_GEN0_A_UT1_Pos = 0xa
	// Bit mask of GEN0_A_UT1 field.
	MCPWM_GEN0_A_GEN0_A_UT1_Msk = 0xc00
	// Position of GEN0_A_UT0 field.
	MCPWM_GEN0_A_GEN0_A_UT0_Pos = 0x8
	// Bit mask of GEN0_A_UT0 field.
	MCPWM_GEN0_A_GEN0_A_UT0_Msk = 0x300
	// Position of GEN0_A_UTEB field.
	MCPWM_GEN0_A_GEN0_A_UTEB_Pos = 0x6
	// Bit mask of GEN0_A_UTEB field.
	MCPWM_GEN0_A_GEN0_A_UTEB_Msk = 0xc0
	// Position of GEN0_A_UTEA field.
	MCPWM_GEN0_A_GEN0_A_UTEA_Pos = 0x4
	// Bit mask of GEN0_A_UTEA field.
	MCPWM_GEN0_A_GEN0_A_UTEA_Msk = 0x30
	// Position of GEN0_A_UTEP field.
	MCPWM_GEN0_A_GEN0_A_UTEP_Pos = 0x2
	// Bit mask of GEN0_A_UTEP field.
	MCPWM_GEN0_A_GEN0_A_UTEP_Msk = 0xc
	// Position of GEN0_A_UTEZ field.
	MCPWM_GEN0_A_GEN0_A_UTEZ_Pos = 0x0
	// Bit mask of GEN0_A_UTEZ field.
	MCPWM_GEN0_A_GEN0_A_UTEZ_Msk = 0x3

	// GEN0_B: MCPWM_GEN0_B
	// Position of GEN0_B_DT1 field.
	MCPWM_GEN0_B_GEN0_B_DT1_Pos = 0x16
	// Bit mask of GEN0_B_DT1 field.
	MCPWM_GEN0_B_GEN0_B_DT1_Msk = 0xc00000
	// Position of GEN0_B_DT0 field.
	MCPWM_GEN0_B_GEN0_B_DT0_Pos = 0x14
	// Bit mask of GEN0_B_DT0 field.
	MCPWM_GEN0_B_GEN0_B_DT0_Msk = 0x300000
	// Position of GEN0_B_DTEB field.
	MCPWM_GEN0_B_GEN0_B_DTEB_Pos = 0x12
	// Bit mask of GEN0_B_DTEB field.
	MCPWM_GEN0_B_GEN0_B_DTEB_Msk = 0xc0000
	// Position of GEN0_B_DTEA field.
	MCPWM_GEN0_B_GEN0_B_DTEA_Pos = 0x10
	// Bit mask of GEN0_B_DTEA field.
	MCPWM_GEN0_B_GEN0_B_DTEA_Msk = 0x30000
	// Position of GEN0_B_DTEP field.
	MCPWM_GEN0_B_GEN0_B_DTEP_Pos = 0xe
	// Bit mask of GEN0_B_DTEP field.
	MCPWM_GEN0_B_GEN0_B_DTEP_Msk = 0xc000
	// Position of GEN0_B_DTEZ field.
	MCPWM_GEN0_B_GEN0_B_DTEZ_Pos = 0xc
	// Bit mask of GEN0_B_DTEZ field.
	MCPWM_GEN0_B_GEN0_B_DTEZ_Msk = 0x3000
	// Position of GEN0_B_UT1 field.
	MCPWM_GEN0_B_GEN0_B_UT1_Pos = 0xa
	// Bit mask of GEN0_B_UT1 field.
	MCPWM_GEN0_B_GEN0_B_UT1_Msk = 0xc00
	// Position of GEN0_B_UT0 field.
	MCPWM_GEN0_B_GEN0_B_UT0_Pos = 0x8
	// Bit mask of GEN0_B_UT0 field.
	MCPWM_GEN0_B_GEN0_B_UT0_Msk = 0x300
	// Position of GEN0_B_UTEB field.
	MCPWM_GEN0_B_GEN0_B_UTEB_Pos = 0x6
	// Bit mask of GEN0_B_UTEB field.
	MCPWM_GEN0_B_GEN0_B_UTEB_Msk = 0xc0
	// Position of GEN0_B_UTEA field.
	MCPWM_GEN0_B_GEN0_B_UTEA_Pos = 0x4
	// Bit mask of GEN0_B_UTEA field.
	MCPWM_GEN0_B_GEN0_B_UTEA_Msk = 0x30
	// Position of GEN0_B_UTEP field.
	MCPWM_GEN0_B_GEN0_B_UTEP_Pos = 0x2
	// Bit mask of GEN0_B_UTEP field.
	MCPWM_GEN0_B_GEN0_B_UTEP_Msk = 0xc
	// Position of GEN0_B_UTEZ field.
	MCPWM_GEN0_B_GEN0_B_UTEZ_Pos = 0x0
	// Bit mask of GEN0_B_UTEZ field.
	MCPWM_GEN0_B_GEN0_B_UTEZ_Msk = 0x3

	// DT0_CFG: MCPWM_DT0_CFG
	// Position of DT0_CLK_SEL field.
	MCPWM_DT0_CFG_DT0_CLK_SEL_Pos = 0x11
	// Bit mask of DT0_CLK_SEL field.
	MCPWM_DT0_CFG_DT0_CLK_SEL_Msk = 0x20000
	// Bit DT0_CLK_SEL.
	MCPWM_DT0_CFG_DT0_CLK_SEL = 0x20000
	// Position of DT0_B_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_B_OUTBYPASS_Pos = 0x10
	// Bit mask of DT0_B_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_B_OUTBYPASS_Msk = 0x10000
	// Bit DT0_B_OUTBYPASS.
	MCPWM_DT0_CFG_DT0_B_OUTBYPASS = 0x10000
	// Position of DT0_A_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_A_OUTBYPASS_Pos = 0xf
	// Bit mask of DT0_A_OUTBYPASS field.
	MCPWM_DT0_CFG_DT0_A_OUTBYPASS_Msk = 0x8000
	// Bit DT0_A_OUTBYPASS.
	MCPWM_DT0_CFG_DT0_A_OUTBYPASS = 0x8000
	// Position of DT0_FED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_FED_OUTINVERT_Pos = 0xe
	// Bit mask of DT0_FED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_FED_OUTINVERT_Msk = 0x4000
	// Bit DT0_FED_OUTINVERT.
	MCPWM_DT0_CFG_DT0_FED_OUTINVERT = 0x4000
	// Position of DT0_RED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_RED_OUTINVERT_Pos = 0xd
	// Bit mask of DT0_RED_OUTINVERT field.
	MCPWM_DT0_CFG_DT0_RED_OUTINVERT_Msk = 0x2000
	// Bit DT0_RED_OUTINVERT.
	MCPWM_DT0_CFG_DT0_RED_OUTINVERT = 0x2000
	// Position of DT0_FED_INSEL field.
	MCPWM_DT0_CFG_DT0_FED_INSEL_Pos = 0xc
	// Bit mask of DT0_FED_INSEL field.
	MCPWM_DT0_CFG_DT0_FED_INSEL_Msk = 0x1000
	// Bit DT0_FED_INSEL.
	MCPWM_DT0_CFG_DT0_FED_INSEL = 0x1000
	// Position of DT0_RED_INSEL field.
	MCPWM_DT0_CFG_DT0_RED_INSEL_Pos = 0xb
	// Bit mask of DT0_RED_INSEL field.
	MCPWM_DT0_CFG_DT0_RED_INSEL_Msk = 0x800
	// Bit DT0_RED_INSEL.
	MCPWM_DT0_CFG_DT0_RED_INSEL = 0x800
	// Position of DT0_B_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_B_OUTSWAP_Pos = 0xa
	// Bit mask of DT0_B_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_B_OUTSWAP_Msk = 0x400
	// Bit DT0_B_OUTSWAP.
	MCPWM_DT0_CFG_DT0_B_OUTSWAP = 0x400
	// Position of DT0_A_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_A_OUTSWAP_Pos = 0x9
	// Bit mask of DT0_A_OUTSWAP field.
	MCPWM_DT0_CFG_DT0_A_OUTSWAP_Msk = 0x200
	// Bit DT0_A_OUTSWAP.
	MCPWM_DT0_CFG_DT0_A_OUTSWAP = 0x200
	// Position of DT0_DEB_MODE field.
	MCPWM_DT0_CFG_DT0_DEB_MODE_Pos = 0x8
	// Bit mask of DT0_DEB_MODE field.
	MCPWM_DT0_CFG_DT0_DEB_MODE_Msk = 0x100
	// Bit DT0_DEB_MODE.
	MCPWM_DT0_CFG_DT0_DEB_MODE = 0x100
	// Position of DT0_RED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_RED_UPMETHOD_Pos = 0x4
	// Bit mask of DT0_RED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_RED_UPMETHOD_Msk = 0xf0
	// Position of DT0_FED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_FED_UPMETHOD_Pos = 0x0
	// Bit mask of DT0_FED_UPMETHOD field.
	MCPWM_DT0_CFG_DT0_FED_UPMETHOD_Msk = 0xf

	// DT0_FED_CFG: MCPWM_DT0_FED_CFG
	// Position of DT0_FED field.
	MCPWM_DT0_FED_CFG_DT0_FED_Pos = 0x0
	// Bit mask of DT0_FED field.
	MCPWM_DT0_FED_CFG_DT0_FED_Msk = 0xffff

	// DT0_RED_CFG: MCPWM_DT0_RED_CFG
	// Position of DT0_RED field.
	MCPWM_DT0_RED_CFG_DT0_RED_Pos = 0x0
	// Bit mask of DT0_RED field.
	MCPWM_DT0_RED_CFG_DT0_RED_Msk = 0xffff

	// CARRIER0_CFG: MCPWM_CARRIER0_CFG
	// Position of CARRIER0_IN_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_IN_INVERT_Pos = 0xd
	// Bit mask of CARRIER0_IN_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_IN_INVERT_Msk = 0x2000
	// Bit CARRIER0_IN_INVERT.
	MCPWM_CARRIER0_CFG_CARRIER0_IN_INVERT = 0x2000
	// Position of CARRIER0_OUT_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_OUT_INVERT_Pos = 0xc
	// Bit mask of CARRIER0_OUT_INVERT field.
	MCPWM_CARRIER0_CFG_CARRIER0_OUT_INVERT_Msk = 0x1000
	// Bit CARRIER0_OUT_INVERT.
	MCPWM_CARRIER0_CFG_CARRIER0_OUT_INVERT = 0x1000
	// Position of CARRIER0_OSHWTH field.
	MCPWM_CARRIER0_CFG_CARRIER0_OSHWTH_Pos = 0x8
	// Bit mask of CARRIER0_OSHWTH field.
	MCPWM_CARRIER0_CFG_CARRIER0_OSHWTH_Msk = 0xf00
	// Position of CARRIER0_DUTY field.
	MCPWM_CARRIER0_CFG_CARRIER0_DUTY_Pos = 0x5
	// Bit mask of CARRIER0_DUTY field.
	MCPWM_CARRIER0_CFG_CARRIER0_DUTY_Msk = 0xe0
	// Position of CARRIER0_PRESCALE field.
	MCPWM_CARRIER0_CFG_CARRIER0_PRESCALE_Pos = 0x1
	// Bit mask of CARRIER0_PRESCALE field.
	MCPWM_CARRIER0_CFG_CARRIER0_PRESCALE_Msk = 0x1e
	// Position of CARRIER0_EN field.
	MCPWM_CARRIER0_CFG_CARRIER0_EN_Pos = 0x0
	// Bit mask of CARRIER0_EN field.
	MCPWM_CARRIER0_CFG_CARRIER0_EN_Msk = 0x1
	// Bit CARRIER0_EN.
	MCPWM_CARRIER0_CFG_CARRIER0_EN = 0x1

	// FH0_CFG0: MCPWM_FH0_CFG0
	// Position of FH0_B_OST_U field.
	MCPWM_FH0_CFG0_FH0_B_OST_U_Pos = 0x16
	// Bit mask of FH0_B_OST_U field.
	MCPWM_FH0_CFG0_FH0_B_OST_U_Msk = 0xc00000
	// Position of FH0_B_OST_D field.
	MCPWM_FH0_CFG0_FH0_B_OST_D_Pos = 0x14
	// Bit mask of FH0_B_OST_D field.
	MCPWM_FH0_CFG0_FH0_B_OST_D_Msk = 0x300000
	// Position of FH0_B_CBC_U field.
	MCPWM_FH0_CFG0_FH0_B_CBC_U_Pos = 0x12
	// Bit mask of FH0_B_CBC_U field.
	MCPWM_FH0_CFG0_FH0_B_CBC_U_Msk = 0xc0000
	// Position of FH0_B_CBC_D field.
	MCPWM_FH0_CFG0_FH0_B_CBC_D_Pos = 0x10
	// Bit mask of FH0_B_CBC_D field.
	MCPWM_FH0_CFG0_FH0_B_CBC_D_Msk = 0x30000
	// Position of FH0_A_OST_U field.
	MCPWM_FH0_CFG0_FH0_A_OST_U_Pos = 0xe
	// Bit mask of FH0_A_OST_U field.
	MCPWM_FH0_CFG0_FH0_A_OST_U_Msk = 0xc000
	// Position of FH0_A_OST_D field.
	MCPWM_FH0_CFG0_FH0_A_OST_D_Pos = 0xc
	// Bit mask of FH0_A_OST_D field.
	MCPWM_FH0_CFG0_FH0_A_OST_D_Msk = 0x3000
	// Position of FH0_A_CBC_U field.
	MCPWM_FH0_CFG0_FH0_A_CBC_U_Pos = 0xa
	// Bit mask of FH0_A_CBC_U field.
	MCPWM_FH0_CFG0_FH0_A_CBC_U_Msk = 0xc00
	// Position of FH0_A_CBC_D field.
	MCPWM_FH0_CFG0_FH0_A_CBC_D_Pos = 0x8
	// Bit mask of FH0_A_CBC_D field.
	MCPWM_FH0_CFG0_FH0_A_CBC_D_Msk = 0x300
	// Position of FH0_F0_OST field.
	MCPWM_FH0_CFG0_FH0_F0_OST_Pos = 0x7
	// Bit mask of FH0_F0_OST field.
	MCPWM_FH0_CFG0_FH0_F0_OST_Msk = 0x80
	// Bit FH0_F0_OST.
	MCPWM_FH0_CFG0_FH0_F0_OST = 0x80
	// Position of FH0_F1_OST field.
	MCPWM_FH0_CFG0_FH0_F1_OST_Pos = 0x6
	// Bit mask of FH0_F1_OST field.
	MCPWM_FH0_CFG0_FH0_F1_OST_Msk = 0x40
	// Bit FH0_F1_OST.
	MCPWM_FH0_CFG0_FH0_F1_OST = 0x40
	// Position of FH0_F2_OST field.
	MCPWM_FH0_CFG0_FH0_F2_OST_Pos = 0x5
	// Bit mask of FH0_F2_OST field.
	MCPWM_FH0_CFG0_FH0_F2_OST_Msk = 0x20
	// Bit FH0_F2_OST.
	MCPWM_FH0_CFG0_FH0_F2_OST = 0x20
	// Position of FH0_SW_OST field.
	MCPWM_FH0_CFG0_FH0_SW_OST_Pos = 0x4
	// Bit mask of FH0_SW_OST field.
	MCPWM_FH0_CFG0_FH0_SW_OST_Msk = 0x10
	// Bit FH0_SW_OST.
	MCPWM_FH0_CFG0_FH0_SW_OST = 0x10
	// Position of FH0_F0_CBC field.
	MCPWM_FH0_CFG0_FH0_F0_CBC_Pos = 0x3
	// Bit mask of FH0_F0_CBC field.
	MCPWM_FH0_CFG0_FH0_F0_CBC_Msk = 0x8
	// Bit FH0_F0_CBC.
	MCPWM_FH0_CFG0_FH0_F0_CBC = 0x8
	// Position of FH0_F1_CBC field.
	MCPWM_FH0_CFG0_FH0_F1_CBC_Pos = 0x2
	// Bit mask of FH0_F1_CBC field.
	MCPWM_FH0_CFG0_FH0_F1_CBC_Msk = 0x4
	// Bit FH0_F1_CBC.
	MCPWM_FH0_CFG0_FH0_F1_CBC = 0x4
	// Position of FH0_F2_CBC field.
	MCPWM_FH0_CFG0_FH0_F2_CBC_Pos = 0x1
	// Bit mask of FH0_F2_CBC field.
	MCPWM_FH0_CFG0_FH0_F2_CBC_Msk = 0x2
	// Bit FH0_F2_CBC.
	MCPWM_FH0_CFG0_FH0_F2_CBC = 0x2
	// Position of FH0_SW_CBC field.
	MCPWM_FH0_CFG0_FH0_SW_CBC_Pos = 0x0
	// Bit mask of FH0_SW_CBC field.
	MCPWM_FH0_CFG0_FH0_SW_CBC_Msk = 0x1
	// Bit FH0_SW_CBC.
	MCPWM_FH0_CFG0_FH0_SW_CBC = 0x1

	// FH0_CFG1: MCPWM_FH0_CFG1
	// Position of FH0_FORCE_OST field.
	MCPWM_FH0_CFG1_FH0_FORCE_OST_Pos = 0x4
	// Bit mask of FH0_FORCE_OST field.
	MCPWM_FH0_CFG1_FH0_FORCE_OST_Msk = 0x10
	// Bit FH0_FORCE_OST.
	MCPWM_FH0_CFG1_FH0_FORCE_OST = 0x10
	// Position of FH0_FORCE_CBC field.
	MCPWM_FH0_CFG1_FH0_FORCE_CBC_Pos = 0x3
	// Bit mask of FH0_FORCE_CBC field.
	MCPWM_FH0_CFG1_FH0_FORCE_CBC_Msk = 0x8
	// Bit FH0_FORCE_CBC.
	MCPWM_FH0_CFG1_FH0_FORCE_CBC = 0x8
	// Position of FH0_CBCPULSE field.
	MCPWM_FH0_CFG1_FH0_CBCPULSE_Pos = 0x1
	// Bit mask of FH0_CBCPULSE field.
	MCPWM_FH0_CFG1_FH0_CBCPULSE_Msk = 0x6
	// Position of FH0_CLR_OST field.
	MCPWM_FH0_CFG1_FH0_CLR_OST_Pos = 0x0
	// Bit mask of FH0_CLR_OST field.
	MCPWM_FH0_CFG1_FH0_CLR_OST_Msk = 0x1
	// Bit FH0_CLR_OST.
	MCPWM_FH0_CFG1_FH0_CLR_OST = 0x1

	// FH0_STATUS: MCPWM_FH0_STATUS
	// Position of FH0_OST_ON field.
	MCPWM_FH0_STATUS_FH0_OST_ON_Pos = 0x1
	// Bit mask of FH0_OST_ON field.
	MCPWM_FH0_STATUS_FH0_OST_ON_Msk = 0x2
	// Bit FH0_OST_ON.
	MCPWM_FH0_STATUS_FH0_OST_ON = 0x2
	// Position of FH0_CBC_ON field.
	MCPWM_FH0_STATUS_FH0_CBC_ON_Pos = 0x0
	// Bit mask of FH0_CBC_ON field.
	MCPWM_FH0_STATUS_FH0_CBC_ON_Msk = 0x1
	// Bit FH0_CBC_ON.
	MCPWM_FH0_STATUS_FH0_CBC_ON = 0x1

	// GEN1_STMP_CFG: MCPWM_GEN1_STMP_CFG
	// Position of GEN1_B_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_SHDW_FULL_Pos = 0x9
	// Bit mask of GEN1_B_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_SHDW_FULL_Msk = 0x200
	// Bit GEN1_B_SHDW_FULL.
	MCPWM_GEN1_STMP_CFG_GEN1_B_SHDW_FULL = 0x200
	// Position of GEN1_A_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_SHDW_FULL_Pos = 0x8
	// Bit mask of GEN1_A_SHDW_FULL field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_SHDW_FULL_Msk = 0x100
	// Bit GEN1_A_SHDW_FULL.
	MCPWM_GEN1_STMP_CFG_GEN1_A_SHDW_FULL = 0x100
	// Position of GEN1_B_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_UPMETHOD_Pos = 0x4
	// Bit mask of GEN1_B_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_B_UPMETHOD_Msk = 0xf0
	// Position of GEN1_A_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_UPMETHOD_Pos = 0x0
	// Bit mask of GEN1_A_UPMETHOD field.
	MCPWM_GEN1_STMP_CFG_GEN1_A_UPMETHOD_Msk = 0xf

	// GEN1_TSTMP_A: MCPWM_GEN1_TSTMP_A
	// Position of GEN1_A field.
	MCPWM_GEN1_TSTMP_A_GEN1_A_Pos = 0x0
	// Bit mask of GEN1_A field.
	MCPWM_GEN1_TSTMP_A_GEN1_A_Msk = 0xffff

	// GEN1_TSTMP_B: MCPWM_GEN1_TSTMP_B
	// Position of GEN1_B field.
	MCPWM_GEN1_TSTMP_B_GEN1_B_Pos = 0x0
	// Bit mask of GEN1_B field.
	MCPWM_GEN1_TSTMP_B_GEN1_B_Msk = 0xffff

	// GEN1_CFG0: MCPWM_GEN1_CFG0
	// Position of GEN1_T1_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T1_SEL_Pos = 0x7
	// Bit mask of GEN1_T1_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T1_SEL_Msk = 0x380
	// Position of GEN1_T0_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T0_SEL_Pos = 0x4
	// Bit mask of GEN1_T0_SEL field.
	MCPWM_GEN1_CFG0_GEN1_T0_SEL_Msk = 0x70
	// Position of GEN1_CFG_UPMETHOD field.
	MCPWM_GEN1_CFG0_GEN1_CFG_UPMETHOD_Pos = 0x0
	// Bit mask of GEN1_CFG_UPMETHOD field.
	MCPWM_GEN1_CFG0_GEN1_CFG_UPMETHOD_Msk = 0xf

	// GEN1_FORCE: MCPWM_GEN1_FORCE
	// Position of GEN1_B_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_MODE_Pos = 0xe
	// Bit mask of GEN1_B_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_MODE_Msk = 0xc000
	// Position of GEN1_B_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_Pos = 0xd
	// Bit mask of GEN1_B_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE_Msk = 0x2000
	// Bit GEN1_B_NCIFORCE.
	MCPWM_GEN1_FORCE_GEN1_B_NCIFORCE = 0x2000
	// Position of GEN1_A_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_MODE_Pos = 0xb
	// Bit mask of GEN1_A_NCIFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_MODE_Msk = 0x1800
	// Position of GEN1_A_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_Pos = 0xa
	// Bit mask of GEN1_A_NCIFORCE field.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE_Msk = 0x400
	// Bit GEN1_A_NCIFORCE.
	MCPWM_GEN1_FORCE_GEN1_A_NCIFORCE = 0x400
	// Position of GEN1_B_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_CNTUFORCE_MODE_Pos = 0x8
	// Bit mask of GEN1_B_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_B_CNTUFORCE_MODE_Msk = 0x300
	// Position of GEN1_A_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_CNTUFORCE_MODE_Pos = 0x6
	// Bit mask of GEN1_A_CNTUFORCE_MODE field.
	MCPWM_GEN1_FORCE_GEN1_A_CNTUFORCE_MODE_Msk = 0xc0
	// Position of GEN1_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD_Pos = 0x0
	// Bit mask of GEN1_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN1_FORCE_GEN1_CNTUFORCE_UPMETHOD_Msk = 0x3f

	// GEN1_A: MCPWM_GEN1_A
	// Position of GEN1_A_DT1 field.
	MCPWM_GEN1_A_GEN1_A_DT1_Pos = 0x16
	// Bit mask of GEN1_A_DT1 field.
	MCPWM_GEN1_A_GEN1_A_DT1_Msk = 0xc00000
	// Position of GEN1_A_DT0 field.
	MCPWM_GEN1_A_GEN1_A_DT0_Pos = 0x14
	// Bit mask of GEN1_A_DT0 field.
	MCPWM_GEN1_A_GEN1_A_DT0_Msk = 0x300000
	// Position of GEN1_A_DTEB field.
	MCPWM_GEN1_A_GEN1_A_DTEB_Pos = 0x12
	// Bit mask of GEN1_A_DTEB field.
	MCPWM_GEN1_A_GEN1_A_DTEB_Msk = 0xc0000
	// Position of GEN1_A_DTEA field.
	MCPWM_GEN1_A_GEN1_A_DTEA_Pos = 0x10
	// Bit mask of GEN1_A_DTEA field.
	MCPWM_GEN1_A_GEN1_A_DTEA_Msk = 0x30000
	// Position of GEN1_A_DTEP field.
	MCPWM_GEN1_A_GEN1_A_DTEP_Pos = 0xe
	// Bit mask of GEN1_A_DTEP field.
	MCPWM_GEN1_A_GEN1_A_DTEP_Msk = 0xc000
	// Position of GEN1_A_DTEZ field.
	MCPWM_GEN1_A_GEN1_A_DTEZ_Pos = 0xc
	// Bit mask of GEN1_A_DTEZ field.
	MCPWM_GEN1_A_GEN1_A_DTEZ_Msk = 0x3000
	// Position of GEN1_A_UT1 field.
	MCPWM_GEN1_A_GEN1_A_UT1_Pos = 0xa
	// Bit mask of GEN1_A_UT1 field.
	MCPWM_GEN1_A_GEN1_A_UT1_Msk = 0xc00
	// Position of GEN1_A_UT0 field.
	MCPWM_GEN1_A_GEN1_A_UT0_Pos = 0x8
	// Bit mask of GEN1_A_UT0 field.
	MCPWM_GEN1_A_GEN1_A_UT0_Msk = 0x300
	// Position of GEN1_A_UTEB field.
	MCPWM_GEN1_A_GEN1_A_UTEB_Pos = 0x6
	// Bit mask of GEN1_A_UTEB field.
	MCPWM_GEN1_A_GEN1_A_UTEB_Msk = 0xc0
	// Position of GEN1_A_UTEA field.
	MCPWM_GEN1_A_GEN1_A_UTEA_Pos = 0x4
	// Bit mask of GEN1_A_UTEA field.
	MCPWM_GEN1_A_GEN1_A_UTEA_Msk = 0x30
	// Position of GEN1_A_UTEP field.
	MCPWM_GEN1_A_GEN1_A_UTEP_Pos = 0x2
	// Bit mask of GEN1_A_UTEP field.
	MCPWM_GEN1_A_GEN1_A_UTEP_Msk = 0xc
	// Position of GEN1_A_UTEZ field.
	MCPWM_GEN1_A_GEN1_A_UTEZ_Pos = 0x0
	// Bit mask of GEN1_A_UTEZ field.
	MCPWM_GEN1_A_GEN1_A_UTEZ_Msk = 0x3

	// GEN1_B: MCPWM_GEN1_B
	// Position of GEN1_B_DT1 field.
	MCPWM_GEN1_B_GEN1_B_DT1_Pos = 0x16
	// Bit mask of GEN1_B_DT1 field.
	MCPWM_GEN1_B_GEN1_B_DT1_Msk = 0xc00000
	// Position of GEN1_B_DT0 field.
	MCPWM_GEN1_B_GEN1_B_DT0_Pos = 0x14
	// Bit mask of GEN1_B_DT0 field.
	MCPWM_GEN1_B_GEN1_B_DT0_Msk = 0x300000
	// Position of GEN1_B_DTEB field.
	MCPWM_GEN1_B_GEN1_B_DTEB_Pos = 0x12
	// Bit mask of GEN1_B_DTEB field.
	MCPWM_GEN1_B_GEN1_B_DTEB_Msk = 0xc0000
	// Position of GEN1_B_DTEA field.
	MCPWM_GEN1_B_GEN1_B_DTEA_Pos = 0x10
	// Bit mask of GEN1_B_DTEA field.
	MCPWM_GEN1_B_GEN1_B_DTEA_Msk = 0x30000
	// Position of GEN1_B_DTEP field.
	MCPWM_GEN1_B_GEN1_B_DTEP_Pos = 0xe
	// Bit mask of GEN1_B_DTEP field.
	MCPWM_GEN1_B_GEN1_B_DTEP_Msk = 0xc000
	// Position of GEN1_B_DTEZ field.
	MCPWM_GEN1_B_GEN1_B_DTEZ_Pos = 0xc
	// Bit mask of GEN1_B_DTEZ field.
	MCPWM_GEN1_B_GEN1_B_DTEZ_Msk = 0x3000
	// Position of GEN1_B_UT1 field.
	MCPWM_GEN1_B_GEN1_B_UT1_Pos = 0xa
	// Bit mask of GEN1_B_UT1 field.
	MCPWM_GEN1_B_GEN1_B_UT1_Msk = 0xc00
	// Position of GEN1_B_UT0 field.
	MCPWM_GEN1_B_GEN1_B_UT0_Pos = 0x8
	// Bit mask of GEN1_B_UT0 field.
	MCPWM_GEN1_B_GEN1_B_UT0_Msk = 0x300
	// Position of GEN1_B_UTEB field.
	MCPWM_GEN1_B_GEN1_B_UTEB_Pos = 0x6
	// Bit mask of GEN1_B_UTEB field.
	MCPWM_GEN1_B_GEN1_B_UTEB_Msk = 0xc0
	// Position of GEN1_B_UTEA field.
	MCPWM_GEN1_B_GEN1_B_UTEA_Pos = 0x4
	// Bit mask of GEN1_B_UTEA field.
	MCPWM_GEN1_B_GEN1_B_UTEA_Msk = 0x30
	// Position of GEN1_B_UTEP field.
	MCPWM_GEN1_B_GEN1_B_UTEP_Pos = 0x2
	// Bit mask of GEN1_B_UTEP field.
	MCPWM_GEN1_B_GEN1_B_UTEP_Msk = 0xc
	// Position of GEN1_B_UTEZ field.
	MCPWM_GEN1_B_GEN1_B_UTEZ_Pos = 0x0
	// Bit mask of GEN1_B_UTEZ field.
	MCPWM_GEN1_B_GEN1_B_UTEZ_Msk = 0x3

	// DT1_CFG: MCPWM_DT1_CFG
	// Position of DT1_CLK_SEL field.
	MCPWM_DT1_CFG_DT1_CLK_SEL_Pos = 0x11
	// Bit mask of DT1_CLK_SEL field.
	MCPWM_DT1_CFG_DT1_CLK_SEL_Msk = 0x20000
	// Bit DT1_CLK_SEL.
	MCPWM_DT1_CFG_DT1_CLK_SEL = 0x20000
	// Position of DT1_B_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_B_OUTBYPASS_Pos = 0x10
	// Bit mask of DT1_B_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_B_OUTBYPASS_Msk = 0x10000
	// Bit DT1_B_OUTBYPASS.
	MCPWM_DT1_CFG_DT1_B_OUTBYPASS = 0x10000
	// Position of DT1_A_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_A_OUTBYPASS_Pos = 0xf
	// Bit mask of DT1_A_OUTBYPASS field.
	MCPWM_DT1_CFG_DT1_A_OUTBYPASS_Msk = 0x8000
	// Bit DT1_A_OUTBYPASS.
	MCPWM_DT1_CFG_DT1_A_OUTBYPASS = 0x8000
	// Position of DT1_FED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_FED_OUTINVERT_Pos = 0xe
	// Bit mask of DT1_FED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_FED_OUTINVERT_Msk = 0x4000
	// Bit DT1_FED_OUTINVERT.
	MCPWM_DT1_CFG_DT1_FED_OUTINVERT = 0x4000
	// Position of DT1_RED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_RED_OUTINVERT_Pos = 0xd
	// Bit mask of DT1_RED_OUTINVERT field.
	MCPWM_DT1_CFG_DT1_RED_OUTINVERT_Msk = 0x2000
	// Bit DT1_RED_OUTINVERT.
	MCPWM_DT1_CFG_DT1_RED_OUTINVERT = 0x2000
	// Position of DT1_FED_INSEL field.
	MCPWM_DT1_CFG_DT1_FED_INSEL_Pos = 0xc
	// Bit mask of DT1_FED_INSEL field.
	MCPWM_DT1_CFG_DT1_FED_INSEL_Msk = 0x1000
	// Bit DT1_FED_INSEL.
	MCPWM_DT1_CFG_DT1_FED_INSEL = 0x1000
	// Position of DT1_RED_INSEL field.
	MCPWM_DT1_CFG_DT1_RED_INSEL_Pos = 0xb
	// Bit mask of DT1_RED_INSEL field.
	MCPWM_DT1_CFG_DT1_RED_INSEL_Msk = 0x800
	// Bit DT1_RED_INSEL.
	MCPWM_DT1_CFG_DT1_RED_INSEL = 0x800
	// Position of DT1_B_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_B_OUTSWAP_Pos = 0xa
	// Bit mask of DT1_B_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_B_OUTSWAP_Msk = 0x400
	// Bit DT1_B_OUTSWAP.
	MCPWM_DT1_CFG_DT1_B_OUTSWAP = 0x400
	// Position of DT1_A_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_A_OUTSWAP_Pos = 0x9
	// Bit mask of DT1_A_OUTSWAP field.
	MCPWM_DT1_CFG_DT1_A_OUTSWAP_Msk = 0x200
	// Bit DT1_A_OUTSWAP.
	MCPWM_DT1_CFG_DT1_A_OUTSWAP = 0x200
	// Position of DT1_DEB_MODE field.
	MCPWM_DT1_CFG_DT1_DEB_MODE_Pos = 0x8
	// Bit mask of DT1_DEB_MODE field.
	MCPWM_DT1_CFG_DT1_DEB_MODE_Msk = 0x100
	// Bit DT1_DEB_MODE.
	MCPWM_DT1_CFG_DT1_DEB_MODE = 0x100
	// Position of DT1_RED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_RED_UPMETHOD_Pos = 0x4
	// Bit mask of DT1_RED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_RED_UPMETHOD_Msk = 0xf0
	// Position of DT1_FED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_FED_UPMETHOD_Pos = 0x0
	// Bit mask of DT1_FED_UPMETHOD field.
	MCPWM_DT1_CFG_DT1_FED_UPMETHOD_Msk = 0xf

	// DT1_FED_CFG: MCPWM_DT1_FED_CFG
	// Position of DT1_FED field.
	MCPWM_DT1_FED_CFG_DT1_FED_Pos = 0x0
	// Bit mask of DT1_FED field.
	MCPWM_DT1_FED_CFG_DT1_FED_Msk = 0xffff

	// DT1_RED_CFG: MCPWM_DT1_RED_CFG
	// Position of DT1_RED field.
	MCPWM_DT1_RED_CFG_DT1_RED_Pos = 0x0
	// Bit mask of DT1_RED field.
	MCPWM_DT1_RED_CFG_DT1_RED_Msk = 0xffff

	// CARRIER1_CFG: MCPWM_CARRIER1_CFG
	// Position of CARRIER1_IN_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_IN_INVERT_Pos = 0xd
	// Bit mask of CARRIER1_IN_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_IN_INVERT_Msk = 0x2000
	// Bit CARRIER1_IN_INVERT.
	MCPWM_CARRIER1_CFG_CARRIER1_IN_INVERT = 0x2000
	// Position of CARRIER1_OUT_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_OUT_INVERT_Pos = 0xc
	// Bit mask of CARRIER1_OUT_INVERT field.
	MCPWM_CARRIER1_CFG_CARRIER1_OUT_INVERT_Msk = 0x1000
	// Bit CARRIER1_OUT_INVERT.
	MCPWM_CARRIER1_CFG_CARRIER1_OUT_INVERT = 0x1000
	// Position of CARRIER1_OSHWTH field.
	MCPWM_CARRIER1_CFG_CARRIER1_OSHWTH_Pos = 0x8
	// Bit mask of CARRIER1_OSHWTH field.
	MCPWM_CARRIER1_CFG_CARRIER1_OSHWTH_Msk = 0xf00
	// Position of CARRIER1_DUTY field.
	MCPWM_CARRIER1_CFG_CARRIER1_DUTY_Pos = 0x5
	// Bit mask of CARRIER1_DUTY field.
	MCPWM_CARRIER1_CFG_CARRIER1_DUTY_Msk = 0xe0
	// Position of CARRIER1_PRESCALE field.
	MCPWM_CARRIER1_CFG_CARRIER1_PRESCALE_Pos = 0x1
	// Bit mask of CARRIER1_PRESCALE field.
	MCPWM_CARRIER1_CFG_CARRIER1_PRESCALE_Msk = 0x1e
	// Position of CARRIER1_EN field.
	MCPWM_CARRIER1_CFG_CARRIER1_EN_Pos = 0x0
	// Bit mask of CARRIER1_EN field.
	MCPWM_CARRIER1_CFG_CARRIER1_EN_Msk = 0x1
	// Bit CARRIER1_EN.
	MCPWM_CARRIER1_CFG_CARRIER1_EN = 0x1

	// FH1_CFG0: MCPWM_FH1_CFG0
	// Position of FH1_B_OST_U field.
	MCPWM_FH1_CFG0_FH1_B_OST_U_Pos = 0x16
	// Bit mask of FH1_B_OST_U field.
	MCPWM_FH1_CFG0_FH1_B_OST_U_Msk = 0xc00000
	// Position of FH1_B_OST_D field.
	MCPWM_FH1_CFG0_FH1_B_OST_D_Pos = 0x14
	// Bit mask of FH1_B_OST_D field.
	MCPWM_FH1_CFG0_FH1_B_OST_D_Msk = 0x300000
	// Position of FH1_B_CBC_U field.
	MCPWM_FH1_CFG0_FH1_B_CBC_U_Pos = 0x12
	// Bit mask of FH1_B_CBC_U field.
	MCPWM_FH1_CFG0_FH1_B_CBC_U_Msk = 0xc0000
	// Position of FH1_B_CBC_D field.
	MCPWM_FH1_CFG0_FH1_B_CBC_D_Pos = 0x10
	// Bit mask of FH1_B_CBC_D field.
	MCPWM_FH1_CFG0_FH1_B_CBC_D_Msk = 0x30000
	// Position of FH1_A_OST_U field.
	MCPWM_FH1_CFG0_FH1_A_OST_U_Pos = 0xe
	// Bit mask of FH1_A_OST_U field.
	MCPWM_FH1_CFG0_FH1_A_OST_U_Msk = 0xc000
	// Position of FH1_A_OST_D field.
	MCPWM_FH1_CFG0_FH1_A_OST_D_Pos = 0xc
	// Bit mask of FH1_A_OST_D field.
	MCPWM_FH1_CFG0_FH1_A_OST_D_Msk = 0x3000
	// Position of FH1_A_CBC_U field.
	MCPWM_FH1_CFG0_FH1_A_CBC_U_Pos = 0xa
	// Bit mask of FH1_A_CBC_U field.
	MCPWM_FH1_CFG0_FH1_A_CBC_U_Msk = 0xc00
	// Position of FH1_A_CBC_D field.
	MCPWM_FH1_CFG0_FH1_A_CBC_D_Pos = 0x8
	// Bit mask of FH1_A_CBC_D field.
	MCPWM_FH1_CFG0_FH1_A_CBC_D_Msk = 0x300
	// Position of FH1_F0_OST field.
	MCPWM_FH1_CFG0_FH1_F0_OST_Pos = 0x7
	// Bit mask of FH1_F0_OST field.
	MCPWM_FH1_CFG0_FH1_F0_OST_Msk = 0x80
	// Bit FH1_F0_OST.
	MCPWM_FH1_CFG0_FH1_F0_OST = 0x80
	// Position of FH1_F1_OST field.
	MCPWM_FH1_CFG0_FH1_F1_OST_Pos = 0x6
	// Bit mask of FH1_F1_OST field.
	MCPWM_FH1_CFG0_FH1_F1_OST_Msk = 0x40
	// Bit FH1_F1_OST.
	MCPWM_FH1_CFG0_FH1_F1_OST = 0x40
	// Position of FH1_F2_OST field.
	MCPWM_FH1_CFG0_FH1_F2_OST_Pos = 0x5
	// Bit mask of FH1_F2_OST field.
	MCPWM_FH1_CFG0_FH1_F2_OST_Msk = 0x20
	// Bit FH1_F2_OST.
	MCPWM_FH1_CFG0_FH1_F2_OST = 0x20
	// Position of FH1_SW_OST field.
	MCPWM_FH1_CFG0_FH1_SW_OST_Pos = 0x4
	// Bit mask of FH1_SW_OST field.
	MCPWM_FH1_CFG0_FH1_SW_OST_Msk = 0x10
	// Bit FH1_SW_OST.
	MCPWM_FH1_CFG0_FH1_SW_OST = 0x10
	// Position of FH1_F0_CBC field.
	MCPWM_FH1_CFG0_FH1_F0_CBC_Pos = 0x3
	// Bit mask of FH1_F0_CBC field.
	MCPWM_FH1_CFG0_FH1_F0_CBC_Msk = 0x8
	// Bit FH1_F0_CBC.
	MCPWM_FH1_CFG0_FH1_F0_CBC = 0x8
	// Position of FH1_F1_CBC field.
	MCPWM_FH1_CFG0_FH1_F1_CBC_Pos = 0x2
	// Bit mask of FH1_F1_CBC field.
	MCPWM_FH1_CFG0_FH1_F1_CBC_Msk = 0x4
	// Bit FH1_F1_CBC.
	MCPWM_FH1_CFG0_FH1_F1_CBC = 0x4
	// Position of FH1_F2_CBC field.
	MCPWM_FH1_CFG0_FH1_F2_CBC_Pos = 0x1
	// Bit mask of FH1_F2_CBC field.
	MCPWM_FH1_CFG0_FH1_F2_CBC_Msk = 0x2
	// Bit FH1_F2_CBC.
	MCPWM_FH1_CFG0_FH1_F2_CBC = 0x2
	// Position of FH1_SW_CBC field.
	MCPWM_FH1_CFG0_FH1_SW_CBC_Pos = 0x0
	// Bit mask of FH1_SW_CBC field.
	MCPWM_FH1_CFG0_FH1_SW_CBC_Msk = 0x1
	// Bit FH1_SW_CBC.
	MCPWM_FH1_CFG0_FH1_SW_CBC = 0x1

	// FH1_CFG1: MCPWM_FH1_CFG1
	// Position of FH1_FORCE_OST field.
	MCPWM_FH1_CFG1_FH1_FORCE_OST_Pos = 0x4
	// Bit mask of FH1_FORCE_OST field.
	MCPWM_FH1_CFG1_FH1_FORCE_OST_Msk = 0x10
	// Bit FH1_FORCE_OST.
	MCPWM_FH1_CFG1_FH1_FORCE_OST = 0x10
	// Position of FH1_FORCE_CBC field.
	MCPWM_FH1_CFG1_FH1_FORCE_CBC_Pos = 0x3
	// Bit mask of FH1_FORCE_CBC field.
	MCPWM_FH1_CFG1_FH1_FORCE_CBC_Msk = 0x8
	// Bit FH1_FORCE_CBC.
	MCPWM_FH1_CFG1_FH1_FORCE_CBC = 0x8
	// Position of FH1_CBCPULSE field.
	MCPWM_FH1_CFG1_FH1_CBCPULSE_Pos = 0x1
	// Bit mask of FH1_CBCPULSE field.
	MCPWM_FH1_CFG1_FH1_CBCPULSE_Msk = 0x6
	// Position of FH1_CLR_OST field.
	MCPWM_FH1_CFG1_FH1_CLR_OST_Pos = 0x0
	// Bit mask of FH1_CLR_OST field.
	MCPWM_FH1_CFG1_FH1_CLR_OST_Msk = 0x1
	// Bit FH1_CLR_OST.
	MCPWM_FH1_CFG1_FH1_CLR_OST = 0x1

	// FH1_STATUS: MCPWM_FH1_STATUS
	// Position of FH1_OST_ON field.
	MCPWM_FH1_STATUS_FH1_OST_ON_Pos = 0x1
	// Bit mask of FH1_OST_ON field.
	MCPWM_FH1_STATUS_FH1_OST_ON_Msk = 0x2
	// Bit FH1_OST_ON.
	MCPWM_FH1_STATUS_FH1_OST_ON = 0x2
	// Position of FH1_CBC_ON field.
	MCPWM_FH1_STATUS_FH1_CBC_ON_Pos = 0x0
	// Bit mask of FH1_CBC_ON field.
	MCPWM_FH1_STATUS_FH1_CBC_ON_Msk = 0x1
	// Bit FH1_CBC_ON.
	MCPWM_FH1_STATUS_FH1_CBC_ON = 0x1

	// GEN2_STMP_CFG: MCPWM_GEN2_STMP_CFG
	// Position of GEN2_B_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_SHDW_FULL_Pos = 0x9
	// Bit mask of GEN2_B_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_SHDW_FULL_Msk = 0x200
	// Bit GEN2_B_SHDW_FULL.
	MCPWM_GEN2_STMP_CFG_GEN2_B_SHDW_FULL = 0x200
	// Position of GEN2_A_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_SHDW_FULL_Pos = 0x8
	// Bit mask of GEN2_A_SHDW_FULL field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_SHDW_FULL_Msk = 0x100
	// Bit GEN2_A_SHDW_FULL.
	MCPWM_GEN2_STMP_CFG_GEN2_A_SHDW_FULL = 0x100
	// Position of GEN2_B_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_UPMETHOD_Pos = 0x4
	// Bit mask of GEN2_B_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_B_UPMETHOD_Msk = 0xf0
	// Position of GEN2_A_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_UPMETHOD_Pos = 0x0
	// Bit mask of GEN2_A_UPMETHOD field.
	MCPWM_GEN2_STMP_CFG_GEN2_A_UPMETHOD_Msk = 0xf

	// GEN2_TSTMP_A: MCPWM_GEN2_TSTMP_A
	// Position of GEN2_A field.
	MCPWM_GEN2_TSTMP_A_GEN2_A_Pos = 0x0
	// Bit mask of GEN2_A field.
	MCPWM_GEN2_TSTMP_A_GEN2_A_Msk = 0xffff

	// GEN2_TSTMP_B: MCPWM_GEN2_TSTMP_B
	// Position of GEN2_B field.
	MCPWM_GEN2_TSTMP_B_GEN2_B_Pos = 0x0
	// Bit mask of GEN2_B field.
	MCPWM_GEN2_TSTMP_B_GEN2_B_Msk = 0xffff

	// GEN2_CFG0: MCPWM_GEN2_CFG0
	// Position of GEN2_T1_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T1_SEL_Pos = 0x7
	// Bit mask of GEN2_T1_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T1_SEL_Msk = 0x380
	// Position of GEN2_T0_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T0_SEL_Pos = 0x4
	// Bit mask of GEN2_T0_SEL field.
	MCPWM_GEN2_CFG0_GEN2_T0_SEL_Msk = 0x70
	// Position of GEN2_CFG_UPMETHOD field.
	MCPWM_GEN2_CFG0_GEN2_CFG_UPMETHOD_Pos = 0x0
	// Bit mask of GEN2_CFG_UPMETHOD field.
	MCPWM_GEN2_CFG0_GEN2_CFG_UPMETHOD_Msk = 0xf

	// GEN2_FORCE: MCPWM_GEN2_FORCE
	// Position of GEN2_B_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_MODE_Pos = 0xe
	// Bit mask of GEN2_B_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_MODE_Msk = 0xc000
	// Position of GEN2_B_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_Pos = 0xd
	// Bit mask of GEN2_B_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE_Msk = 0x2000
	// Bit GEN2_B_NCIFORCE.
	MCPWM_GEN2_FORCE_GEN2_B_NCIFORCE = 0x2000
	// Position of GEN2_A_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_MODE_Pos = 0xb
	// Bit mask of GEN2_A_NCIFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_MODE_Msk = 0x1800
	// Position of GEN2_A_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_Pos = 0xa
	// Bit mask of GEN2_A_NCIFORCE field.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE_Msk = 0x400
	// Bit GEN2_A_NCIFORCE.
	MCPWM_GEN2_FORCE_GEN2_A_NCIFORCE = 0x400
	// Position of GEN2_B_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_CNTUFORCE_MODE_Pos = 0x8
	// Bit mask of GEN2_B_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_B_CNTUFORCE_MODE_Msk = 0x300
	// Position of GEN2_A_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_CNTUFORCE_MODE_Pos = 0x6
	// Bit mask of GEN2_A_CNTUFORCE_MODE field.
	MCPWM_GEN2_FORCE_GEN2_A_CNTUFORCE_MODE_Msk = 0xc0
	// Position of GEN2_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD_Pos = 0x0
	// Bit mask of GEN2_CNTUFORCE_UPMETHOD field.
	MCPWM_GEN2_FORCE_GEN2_CNTUFORCE_UPMETHOD_Msk = 0x3f

	// GEN2_A: MCPWM_GEN2_A
	// Position of GEN2_A_DT1 field.
	MCPWM_GEN2_A_GEN2_A_DT1_Pos = 0x16
	// Bit mask of GEN2_A_DT1 field.
	MCPWM_GEN2_A_GEN2_A_DT1_Msk = 0xc00000
	// Position of GEN2_A_DT0 field.
	MCPWM_GEN2_A_GEN2_A_DT0_Pos = 0x14
	// Bit mask of GEN2_A_DT0 field.
	MCPWM_GEN2_A_GEN2_A_DT0_Msk = 0x300000
	// Position of GEN2_A_DTEB field.
	MCPWM_GEN2_A_GEN2_A_DTEB_Pos = 0x12
	// Bit mask of GEN2_A_DTEB field.
	MCPWM_GEN2_A_GEN2_A_DTEB_Msk = 0xc0000
	// Position of GEN2_A_DTEA field.
	MCPWM_GEN2_A_GEN2_A_DTEA_Pos = 0x10
	// Bit mask of GEN2_A_DTEA field.
	MCPWM_GEN2_A_GEN2_A_DTEA_Msk = 0x30000
	// Position of GEN2_A_DTEP field.
	MCPWM_GEN2_A_GEN2_A_DTEP_Pos = 0xe
	// Bit mask of GEN2_A_DTEP field.
	MCPWM_GEN2_A_GEN2_A_DTEP_Msk = 0xc000
	// Position of GEN2_A_DTEZ field.
	MCPWM_GEN2_A_GEN2_A_DTEZ_Pos = 0xc
	// Bit mask of GEN2_A_DTEZ field.
	MCPWM_GEN2_A_GEN2_A_DTEZ_Msk = 0x3000
	// Position of GEN2_A_UT1 field.
	MCPWM_GEN2_A_GEN2_A_UT1_Pos = 0xa
	// Bit mask of GEN2_A_UT1 field.
	MCPWM_GEN2_A_GEN2_A_UT1_Msk = 0xc00
	// Position of GEN2_A_UT0 field.
	MCPWM_GEN2_A_GEN2_A_UT0_Pos = 0x8
	// Bit mask of GEN2_A_UT0 field.
	MCPWM_GEN2_A_GEN2_A_UT0_Msk = 0x300
	// Position of GEN2_A_UTEB field.
	MCPWM_GEN2_A_GEN2_A_UTEB_Pos = 0x6
	// Bit mask of GEN2_A_UTEB field.
	MCPWM_GEN2_A_GEN2_A_UTEB_Msk = 0xc0
	// Position of GEN2_A_UTEA field.
	MCPWM_GEN2_A_GEN2_A_UTEA_Pos = 0x4
	// Bit mask of GEN2_A_UTEA field.
	MCPWM_GEN2_A_GEN2_A_UTEA_Msk = 0x30
	// Position of GEN2_A_UTEP field.
	MCPWM_GEN2_A_GEN2_A_UTEP_Pos = 0x2
	// Bit mask of GEN2_A_UTEP field.
	MCPWM_GEN2_A_GEN2_A_UTEP_Msk = 0xc
	// Position of GEN2_A_UTEZ field.
	MCPWM_GEN2_A_GEN2_A_UTEZ_Pos = 0x0
	// Bit mask of GEN2_A_UTEZ field.
	MCPWM_GEN2_A_GEN2_A_UTEZ_Msk = 0x3

	// GEN2_B: MCPWM_GEN2_B
	// Position of GEN2_B_DT1 field.
	MCPWM_GEN2_B_GEN2_B_DT1_Pos = 0x16
	// Bit mask of GEN2_B_DT1 field.
	MCPWM_GEN2_B_GEN2_B_DT1_Msk = 0xc00000
	// Position of GEN2_B_DT0 field.
	MCPWM_GEN2_B_GEN2_B_DT0_Pos = 0x14
	// Bit mask of GEN2_B_DT0 field.
	MCPWM_GEN2_B_GEN2_B_DT0_Msk = 0x300000
	// Position of GEN2_B_DTEB field.
	MCPWM_GEN2_B_GEN2_B_DTEB_Pos = 0x12
	// Bit mask of GEN2_B_DTEB field.
	MCPWM_GEN2_B_GEN2_B_DTEB_Msk = 0xc0000
	// Position of GEN2_B_DTEA field.
	MCPWM_GEN2_B_GEN2_B_DTEA_Pos = 0x10
	// Bit mask of GEN2_B_DTEA field.
	MCPWM_GEN2_B_GEN2_B_DTEA_Msk = 0x30000
	// Position of GEN2_B_DTEP field.
	MCPWM_GEN2_B_GEN2_B_DTEP_Pos = 0xe
	// Bit mask of GEN2_B_DTEP field.
	MCPWM_GEN2_B_GEN2_B_DTEP_Msk = 0xc000
	// Position of GEN2_B_DTEZ field.
	MCPWM_GEN2_B_GEN2_B_DTEZ_Pos = 0xc
	// Bit mask of GEN2_B_DTEZ field.
	MCPWM_GEN2_B_GEN2_B_DTEZ_Msk = 0x3000
	// Position of GEN2_B_UT1 field.
	MCPWM_GEN2_B_GEN2_B_UT1_Pos = 0xa
	// Bit mask of GEN2_B_UT1 field.
	MCPWM_GEN2_B_GEN2_B_UT1_Msk = 0xc00
	// Position of GEN2_B_UT0 field.
	MCPWM_GEN2_B_GEN2_B_UT0_Pos = 0x8
	// Bit mask of GEN2_B_UT0 field.
	MCPWM_GEN2_B_GEN2_B_UT0_Msk = 0x300
	// Position of GEN2_B_UTEB field.
	MCPWM_GEN2_B_GEN2_B_UTEB_Pos = 0x6
	// Bit mask of GEN2_B_UTEB field.
	MCPWM_GEN2_B_GEN2_B_UTEB_Msk = 0xc0
	// Position of GEN2_B_UTEA field.
	MCPWM_GEN2_B_GEN2_B_UTEA_Pos = 0x4
	// Bit mask of GEN2_B_UTEA field.
	MCPWM_GEN2_B_GEN2_B_UTEA_Msk = 0x30
	// Position of GEN2_B_UTEP field.
	MCPWM_GEN2_B_GEN2_B_UTEP_Pos = 0x2
	// Bit mask of GEN2_B_UTEP field.
	MCPWM_GEN2_B_GEN2_B_UTEP_Msk = 0xc
	// Position of GEN2_B_UTEZ field.
	MCPWM_GEN2_B_GEN2_B_UTEZ_Pos = 0x0
	// Bit mask of GEN2_B_UTEZ field.
	MCPWM_GEN2_B_GEN2_B_UTEZ_Msk = 0x3

	// DT2_CFG: MCPWM_DT2_CFG
	// Position of DT2_CLK_SEL field.
	MCPWM_DT2_CFG_DT2_CLK_SEL_Pos = 0x11
	// Bit mask of DT2_CLK_SEL field.
	MCPWM_DT2_CFG_DT2_CLK_SEL_Msk = 0x20000
	// Bit DT2_CLK_SEL.
	MCPWM_DT2_CFG_DT2_CLK_SEL = 0x20000
	// Position of DT2_B_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_B_OUTBYPASS_Pos = 0x10
	// Bit mask of DT2_B_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_B_OUTBYPASS_Msk = 0x10000
	// Bit DT2_B_OUTBYPASS.
	MCPWM_DT2_CFG_DT2_B_OUTBYPASS = 0x10000
	// Position of DT2_A_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_A_OUTBYPASS_Pos = 0xf
	// Bit mask of DT2_A_OUTBYPASS field.
	MCPWM_DT2_CFG_DT2_A_OUTBYPASS_Msk = 0x8000
	// Bit DT2_A_OUTBYPASS.
	MCPWM_DT2_CFG_DT2_A_OUTBYPASS = 0x8000
	// Position of DT2_FED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_FED_OUTINVERT_Pos = 0xe
	// Bit mask of DT2_FED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_FED_OUTINVERT_Msk = 0x4000
	// Bit DT2_FED_OUTINVERT.
	MCPWM_DT2_CFG_DT2_FED_OUTINVERT = 0x4000
	// Position of DT2_RED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_RED_OUTINVERT_Pos = 0xd
	// Bit mask of DT2_RED_OUTINVERT field.
	MCPWM_DT2_CFG_DT2_RED_OUTINVERT_Msk = 0x2000
	// Bit DT2_RED_OUTINVERT.
	MCPWM_DT2_CFG_DT2_RED_OUTINVERT = 0x2000
	// Position of DT2_FED_INSEL field.
	MCPWM_DT2_CFG_DT2_FED_INSEL_Pos = 0xc
	// Bit mask of DT2_FED_INSEL field.
	MCPWM_DT2_CFG_DT2_FED_INSEL_Msk = 0x1000
	// Bit DT2_FED_INSEL.
	MCPWM_DT2_CFG_DT2_FED_INSEL = 0x1000
	// Position of DT2_RED_INSEL field.
	MCPWM_DT2_CFG_DT2_RED_INSEL_Pos = 0xb
	// Bit mask of DT2_RED_INSEL field.
	MCPWM_DT2_CFG_DT2_RED_INSEL_Msk = 0x800
	// Bit DT2_RED_INSEL.
	MCPWM_DT2_CFG_DT2_RED_INSEL = 0x800
	// Position of DT2_B_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_B_OUTSWAP_Pos = 0xa
	// Bit mask of DT2_B_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_B_OUTSWAP_Msk = 0x400
	// Bit DT2_B_OUTSWAP.
	MCPWM_DT2_CFG_DT2_B_OUTSWAP = 0x400
	// Position of DT2_A_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_A_OUTSWAP_Pos = 0x9
	// Bit mask of DT2_A_OUTSWAP field.
	MCPWM_DT2_CFG_DT2_A_OUTSWAP_Msk = 0x200
	// Bit DT2_A_OUTSWAP.
	MCPWM_DT2_CFG_DT2_A_OUTSWAP = 0x200
	// Position of DT2_DEB_MODE field.
	MCPWM_DT2_CFG_DT2_DEB_MODE_Pos = 0x8
	// Bit mask of DT2_DEB_MODE field.
	MCPWM_DT2_CFG_DT2_DEB_MODE_Msk = 0x100
	// Bit DT2_DEB_MODE.
	MCPWM_DT2_CFG_DT2_DEB_MODE = 0x100
	// Position of DT2_RED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_RED_UPMETHOD_Pos = 0x4
	// Bit mask of DT2_RED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_RED_UPMETHOD_Msk = 0xf0
	// Position of DT2_FED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_FED_UPMETHOD_Pos = 0x0
	// Bit mask of DT2_FED_UPMETHOD field.
	MCPWM_DT2_CFG_DT2_FED_UPMETHOD_Msk = 0xf

	// DT2_FED_CFG: MCPWM_DT2_FED_CFG
	// Position of DT2_FED field.
	MCPWM_DT2_FED_CFG_DT2_FED_Pos = 0x0
	// Bit mask of DT2_FED field.
	MCPWM_DT2_FED_CFG_DT2_FED_Msk = 0xffff

	// DT2_RED_CFG: MCPWM_DT2_RED_CFG
	// Position of DT2_RED field.
	MCPWM_DT2_RED_CFG_DT2_RED_Pos = 0x0
	// Bit mask of DT2_RED field.
	MCPWM_DT2_RED_CFG_DT2_RED_Msk = 0xffff

	// CARRIER2_CFG: MCPWM_CARRIER2_CFG
	// Position of CARRIER2_IN_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_IN_INVERT_Pos = 0xd
	// Bit mask of CARRIER2_IN_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_IN_INVERT_Msk = 0x2000
	// Bit CARRIER2_IN_INVERT.
	MCPWM_CARRIER2_CFG_CARRIER2_IN_INVERT = 0x2000
	// Position of CARRIER2_OUT_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_OUT_INVERT_Pos = 0xc
	// Bit mask of CARRIER2_OUT_INVERT field.
	MCPWM_CARRIER2_CFG_CARRIER2_OUT_INVERT_Msk = 0x1000
	// Bit CARRIER2_OUT_INVERT.
	MCPWM_CARRIER2_CFG_CARRIER2_OUT_INVERT = 0x1000
	// Position of CARRIER2_OSHWTH field.
	MCPWM_CARRIER2_CFG_CARRIER2_OSHWTH_Pos = 0x8
	// Bit mask of CARRIER2_OSHWTH field.
	MCPWM_CARRIER2_CFG_CARRIER2_OSHWTH_Msk = 0xf00
	// Position of CARRIER2_DUTY field.
	MCPWM_CARRIER2_CFG_CARRIER2_DUTY_Pos = 0x5
	// Bit mask of CARRIER2_DUTY field.
	MCPWM_CARRIER2_CFG_CARRIER2_DUTY_Msk = 0xe0
	// Position of CARRIER2_PRESCALE field.
	MCPWM_CARRIER2_CFG_CARRIER2_PRESCALE_Pos = 0x1
	// Bit mask of CARRIER2_PRESCALE field.
	MCPWM_CARRIER2_CFG_CARRIER2_PRESCALE_Msk = 0x1e
	// Position of CARRIER2_EN field.
	MCPWM_CARRIER2_CFG_CARRIER2_EN_Pos = 0x0
	// Bit mask of CARRIER2_EN field.
	MCPWM_CARRIER2_CFG_CARRIER2_EN_Msk = 0x1
	// Bit CARRIER2_EN.
	MCPWM_CARRIER2_CFG_CARRIER2_EN = 0x1

	// FH2_CFG0: MCPWM_FH2_CFG0
	// Position of FH2_B_OST_U field.
	MCPWM_FH2_CFG0_FH2_B_OST_U_Pos = 0x16
	// Bit mask of FH2_B_OST_U field.
	MCPWM_FH2_CFG0_FH2_B_OST_U_Msk = 0xc00000
	// Position of FH2_B_OST_D field.
	MCPWM_FH2_CFG0_FH2_B_OST_D_Pos = 0x14
	// Bit mask of FH2_B_OST_D field.
	MCPWM_FH2_CFG0_FH2_B_OST_D_Msk = 0x300000
	// Position of FH2_B_CBC_U field.
	MCPWM_FH2_CFG0_FH2_B_CBC_U_Pos = 0x12
	// Bit mask of FH2_B_CBC_U field.
	MCPWM_FH2_CFG0_FH2_B_CBC_U_Msk = 0xc0000
	// Position of FH2_B_CBC_D field.
	MCPWM_FH2_CFG0_FH2_B_CBC_D_Pos = 0x10
	// Bit mask of FH2_B_CBC_D field.
	MCPWM_FH2_CFG0_FH2_B_CBC_D_Msk = 0x30000
	// Position of FH2_A_OST_U field.
	MCPWM_FH2_CFG0_FH2_A_OST_U_Pos = 0xe
	// Bit mask of FH2_A_OST_U field.
	MCPWM_FH2_CFG0_FH2_A_OST_U_Msk = 0xc000
	// Position of FH2_A_OST_D field.
	MCPWM_FH2_CFG0_FH2_A_OST_D_Pos = 0xc
	// Bit mask of FH2_A_OST_D field.
	MCPWM_FH2_CFG0_FH2_A_OST_D_Msk = 0x3000
	// Position of FH2_A_CBC_U field.
	MCPWM_FH2_CFG0_FH2_A_CBC_U_Pos = 0xa
	// Bit mask of FH2_A_CBC_U field.
	MCPWM_FH2_CFG0_FH2_A_CBC_U_Msk = 0xc00
	// Position of FH2_A_CBC_D field.
	MCPWM_FH2_CFG0_FH2_A_CBC_D_Pos = 0x8
	// Bit mask of FH2_A_CBC_D field.
	MCPWM_FH2_CFG0_FH2_A_CBC_D_Msk = 0x300
	// Position of FH2_F0_OST field.
	MCPWM_FH2_CFG0_FH2_F0_OST_Pos = 0x7
	// Bit mask of FH2_F0_OST field.
	MCPWM_FH2_CFG0_FH2_F0_OST_Msk = 0x80
	// Bit FH2_F0_OST.
	MCPWM_FH2_CFG0_FH2_F0_OST = 0x80
	// Position of FH2_F1_OST field.
	MCPWM_FH2_CFG0_FH2_F1_OST_Pos = 0x6
	// Bit mask of FH2_F1_OST field.
	MCPWM_FH2_CFG0_FH2_F1_OST_Msk = 0x40
	// Bit FH2_F1_OST.
	MCPWM_FH2_CFG0_FH2_F1_OST = 0x40
	// Position of FH2_F2_OST field.
	MCPWM_FH2_CFG0_FH2_F2_OST_Pos = 0x5
	// Bit mask of FH2_F2_OST field.
	MCPWM_FH2_CFG0_FH2_F2_OST_Msk = 0x20
	// Bit FH2_F2_OST.
	MCPWM_FH2_CFG0_FH2_F2_OST = 0x20
	// Position of FH2_SW_OST field.
	MCPWM_FH2_CFG0_FH2_SW_OST_Pos = 0x4
	// Bit mask of FH2_SW_OST field.
	MCPWM_FH2_CFG0_FH2_SW_OST_Msk = 0x10
	// Bit FH2_SW_OST.
	MCPWM_FH2_CFG0_FH2_SW_OST = 0x10
	// Position of FH2_F0_CBC field.
	MCPWM_FH2_CFG0_FH2_F0_CBC_Pos = 0x3
	// Bit mask of FH2_F0_CBC field.
	MCPWM_FH2_CFG0_FH2_F0_CBC_Msk = 0x8
	// Bit FH2_F0_CBC.
	MCPWM_FH2_CFG0_FH2_F0_CBC = 0x8
	// Position of FH2_F1_CBC field.
	MCPWM_FH2_CFG0_FH2_F1_CBC_Pos = 0x2
	// Bit mask of FH2_F1_CBC field.
	MCPWM_FH2_CFG0_FH2_F1_CBC_Msk = 0x4
	// Bit FH2_F1_CBC.
	MCPWM_FH2_CFG0_FH2_F1_CBC = 0x4
	// Position of FH2_F2_CBC field.
	MCPWM_FH2_CFG0_FH2_F2_CBC_Pos = 0x1
	// Bit mask of FH2_F2_CBC field.
	MCPWM_FH2_CFG0_FH2_F2_CBC_Msk = 0x2
	// Bit FH2_F2_CBC.
	MCPWM_FH2_CFG0_FH2_F2_CBC = 0x2
	// Position of FH2_SW_CBC field.
	MCPWM_FH2_CFG0_FH2_SW_CBC_Pos = 0x0
	// Bit mask of FH2_SW_CBC field.
	MCPWM_FH2_CFG0_FH2_SW_CBC_Msk = 0x1
	// Bit FH2_SW_CBC.
	MCPWM_FH2_CFG0_FH2_SW_CBC = 0x1

	// FH2_CFG1: MCPWM_FH2_CFG1
	// Position of FH2_FORCE_OST field.
	MCPWM_FH2_CFG1_FH2_FORCE_OST_Pos = 0x4
	// Bit mask of FH2_FORCE_OST field.
	MCPWM_FH2_CFG1_FH2_FORCE_OST_Msk = 0x10
	// Bit FH2_FORCE_OST.
	MCPWM_FH2_CFG1_FH2_FORCE_OST = 0x10
	// Position of FH2_FORCE_CBC field.
	MCPWM_FH2_CFG1_FH2_FORCE_CBC_Pos = 0x3
	// Bit mask of FH2_FORCE_CBC field.
	MCPWM_FH2_CFG1_FH2_FORCE_CBC_Msk = 0x8
	// Bit FH2_FORCE_CBC.
	MCPWM_FH2_CFG1_FH2_FORCE_CBC = 0x8
	// Position of FH2_CBCPULSE field.
	MCPWM_FH2_CFG1_FH2_CBCPULSE_Pos = 0x1
	// Bit mask of FH2_CBCPULSE field.
	MCPWM_FH2_CFG1_FH2_CBCPULSE_Msk = 0x6
	// Position of FH2_CLR_OST field.
	MCPWM_FH2_CFG1_FH2_CLR_OST_Pos = 0x0
	// Bit mask of FH2_CLR_OST field.
	MCPWM_FH2_CFG1_FH2_CLR_OST_Msk = 0x1
	// Bit FH2_CLR_OST.
	MCPWM_FH2_CFG1_FH2_CLR_OST = 0x1

	// FH2_STATUS: MCPWM_FH2_STATUS
	// Position of FH2_OST_ON field.
	MCPWM_FH2_STATUS_FH2_OST_ON_Pos = 0x1
	// Bit mask of FH2_OST_ON field.
	MCPWM_FH2_STATUS_FH2_OST_ON_Msk = 0x2
	// Bit FH2_OST_ON.
	MCPWM_FH2_STATUS_FH2_OST_ON = 0x2
	// Position of FH2_CBC_ON field.
	MCPWM_FH2_STATUS_FH2_CBC_ON_Pos = 0x0
	// Bit mask of FH2_CBC_ON field.
	MCPWM_FH2_STATUS_FH2_CBC_ON_Msk = 0x1
	// Bit FH2_CBC_ON.
	MCPWM_FH2_STATUS_FH2_CBC_ON = 0x1

	// FAULT_DETECT: MCPWM_FAULT_DETECT
	// Position of EVENT_F2 field.
	MCPWM_FAULT_DETECT_EVENT_F2_Pos = 0x8
	// Bit mask of EVENT_F2 field.
	MCPWM_FAULT_DETECT_EVENT_F2_Msk = 0x100
	// Bit EVENT_F2.
	MCPWM_FAULT_DETECT_EVENT_F2 = 0x100
	// Position of EVENT_F1 field.
	MCPWM_FAULT_DETECT_EVENT_F1_Pos = 0x7
	// Bit mask of EVENT_F1 field.
	MCPWM_FAULT_DETECT_EVENT_F1_Msk = 0x80
	// Bit EVENT_F1.
	MCPWM_FAULT_DETECT_EVENT_F1 = 0x80
	// Position of EVENT_F0 field.
	MCPWM_FAULT_DETECT_EVENT_F0_Pos = 0x6
	// Bit mask of EVENT_F0 field.
	MCPWM_FAULT_DETECT_EVENT_F0_Msk = 0x40
	// Bit EVENT_F0.
	MCPWM_FAULT_DETECT_EVENT_F0 = 0x40
	// Position of F2_POLE field.
	MCPWM_FAULT_DETECT_F2_POLE_Pos = 0x5
	// Bit mask of F2_POLE field.
	MCPWM_FAULT_DETECT_F2_POLE_Msk = 0x20
	// Bit F2_POLE.
	MCPWM_FAULT_DETECT_F2_POLE = 0x20
	// Position of F1_POLE field.
	MCPWM_FAULT_DETECT_F1_POLE_Pos = 0x4
	// Bit mask of F1_POLE field.
	MCPWM_FAULT_DETECT_F1_POLE_Msk = 0x10
	// Bit F1_POLE.
	MCPWM_FAULT_DETECT_F1_POLE = 0x10
	// Position of F0_POLE field.
	MCPWM_FAULT_DETECT_F0_POLE_Pos = 0x3
	// Bit mask of F0_POLE field.
	MCPWM_FAULT_DETECT_F0_POLE_Msk = 0x8
	// Bit F0_POLE.
	MCPWM_FAULT_DETECT_F0_POLE = 0x8
	// Position of F2_EN field.
	MCPWM_FAULT_DETECT_F2_EN_Pos = 0x2
	// Bit mask of F2_EN field.
	MCPWM_FAULT_DETECT_F2_EN_Msk = 0x4
	// Bit F2_EN.
	MCPWM_FAULT_DETECT_F2_EN = 0x4
	// Position of F1_EN field.
	MCPWM_FAULT_DETECT_F1_EN_Pos = 0x1
	// Bit mask of F1_EN field.
	MCPWM_FAULT_DETECT_F1_EN_Msk = 0x2
	// Bit F1_EN.
	MCPWM_FAULT_DETECT_F1_EN = 0x2
	// Position of F0_EN field.
	MCPWM_FAULT_DETECT_F0_EN_Pos = 0x0
	// Bit mask of F0_EN field.
	MCPWM_FAULT_DETECT_F0_EN_Msk = 0x1
	// Bit F0_EN.
	MCPWM_FAULT_DETECT_F0_EN = 0x1

	// CAP_TIMER_CFG: MCPWM_CAP_TIMER_CFG
	// Position of CAP_SYNC_SW field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNC_SW_Pos = 0x5
	// Bit mask of CAP_SYNC_SW field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNC_SW_Msk = 0x20
	// Bit CAP_SYNC_SW.
	MCPWM_CAP_TIMER_CFG_CAP_SYNC_SW = 0x20
	// Position of CAP_SYNCI_SEL field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_SEL_Pos = 0x2
	// Bit mask of CAP_SYNCI_SEL field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_SEL_Msk = 0x1c
	// Position of CAP_SYNCI_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_EN_Pos = 0x1
	// Bit mask of CAP_SYNCI_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_EN_Msk = 0x2
	// Bit CAP_SYNCI_EN.
	MCPWM_CAP_TIMER_CFG_CAP_SYNCI_EN = 0x2
	// Position of CAP_TIMER_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_TIMER_EN_Pos = 0x0
	// Bit mask of CAP_TIMER_EN field.
	MCPWM_CAP_TIMER_CFG_CAP_TIMER_EN_Msk = 0x1
	// Bit CAP_TIMER_EN.
	MCPWM_CAP_TIMER_CFG_CAP_TIMER_EN = 0x1

	// CAP_TIMER_PHASE: MCPWM_CAP_TIMER_PHASE
	// Position of CAP_PHASE field.
	MCPWM_CAP_TIMER_PHASE_CAP_PHASE_Pos = 0x0
	// Bit mask of CAP_PHASE field.
	MCPWM_CAP_TIMER_PHASE_CAP_PHASE_Msk = 0xffffffff

	// CAP_CH0_CFG: MCPWM_CAP_CH0_CFG
	// Position of CAP0_SW field.
	MCPWM_CAP_CH0_CFG_CAP0_SW_Pos = 0xc
	// Bit mask of CAP0_SW field.
	MCPWM_CAP_CH0_CFG_CAP0_SW_Msk = 0x1000
	// Bit CAP0_SW.
	MCPWM_CAP_CH0_CFG_CAP0_SW = 0x1000
	// Position of CAP0_IN_INVERT field.
	MCPWM_CAP_CH0_CFG_CAP0_IN_INVERT_Pos = 0xb
	// Bit mask of CAP0_IN_INVERT field.
	MCPWM_CAP_CH0_CFG_CAP0_IN_INVERT_Msk = 0x800
	// Bit CAP0_IN_INVERT.
	MCPWM_CAP_CH0_CFG_CAP0_IN_INVERT = 0x800
	// Position of CAP0_PRESCALE field.
	MCPWM_CAP_CH0_CFG_CAP0_PRESCALE_Pos = 0x3
	// Bit mask of CAP0_PRESCALE field.
	MCPWM_CAP_CH0_CFG_CAP0_PRESCALE_Msk = 0x7f8
	// Position of CAP0_MODE field.
	MCPWM_CAP_CH0_CFG_CAP0_MODE_Pos = 0x1
	// Bit mask of CAP0_MODE field.
	MCPWM_CAP_CH0_CFG_CAP0_MODE_Msk = 0x6
	// Position of CAP0_EN field.
	MCPWM_CAP_CH0_CFG_CAP0_EN_Pos = 0x0
	// Bit mask of CAP0_EN field.
	MCPWM_CAP_CH0_CFG_CAP0_EN_Msk = 0x1
	// Bit CAP0_EN.
	MCPWM_CAP_CH0_CFG_CAP0_EN = 0x1

	// CAP_CH1_CFG: MCPWM_CAP_CH1_CFG
	// Position of CAP1_SW field.
	MCPWM_CAP_CH1_CFG_CAP1_SW_Pos = 0xc
	// Bit mask of CAP1_SW field.
	MCPWM_CAP_CH1_CFG_CAP1_SW_Msk = 0x1000
	// Bit CAP1_SW.
	MCPWM_CAP_CH1_CFG_CAP1_SW = 0x1000
	// Position of CAP1_IN_INVERT field.
	MCPWM_CAP_CH1_CFG_CAP1_IN_INVERT_Pos = 0xb
	// Bit mask of CAP1_IN_INVERT field.
	MCPWM_CAP_CH1_CFG_CAP1_IN_INVERT_Msk = 0x800
	// Bit CAP1_IN_INVERT.
	MCPWM_CAP_CH1_CFG_CAP1_IN_INVERT = 0x800
	// Position of CAP1_PRESCALE field.
	MCPWM_CAP_CH1_CFG_CAP1_PRESCALE_Pos = 0x3
	// Bit mask of CAP1_PRESCALE field.
	MCPWM_CAP_CH1_CFG_CAP1_PRESCALE_Msk = 0x7f8
	// Position of CAP1_MODE field.
	MCPWM_CAP_CH1_CFG_CAP1_MODE_Pos = 0x1
	// Bit mask of CAP1_MODE field.
	MCPWM_CAP_CH1_CFG_CAP1_MODE_Msk = 0x6
	// Position of CAP1_EN field.
	MCPWM_CAP_CH1_CFG_CAP1_EN_Pos = 0x0
	// Bit mask of CAP1_EN field.
	MCPWM_CAP_CH1_CFG_CAP1_EN_Msk = 0x1
	// Bit CAP1_EN.
	MCPWM_CAP_CH1_CFG_CAP1_EN = 0x1

	// CAP_CH2_CFG: MCPWM_CAP_CH2_CFG
	// Position of CAP2_SW field.
	MCPWM_CAP_CH2_CFG_CAP2_SW_Pos = 0xc
	// Bit mask of CAP2_SW field.
	MCPWM_CAP_CH2_CFG_CAP2_SW_Msk = 0x1000
	// Bit CAP2_SW.
	MCPWM_CAP_CH2_CFG_CAP2_SW = 0x1000
	// Position of CAP2_IN_INVERT field.
	MCPWM_CAP_CH2_CFG_CAP2_IN_INVERT_Pos = 0xb
	// Bit mask of CAP2_IN_INVERT field.
	MCPWM_CAP_CH2_CFG_CAP2_IN_INVERT_Msk = 0x800
	// Bit CAP2_IN_INVERT.
	MCPWM_CAP_CH2_CFG_CAP2_IN_INVERT = 0x800
	// Position of CAP2_PRESCALE field.
	MCPWM_CAP_CH2_CFG_CAP2_PRESCALE_Pos = 0x3
	// Bit mask of CAP2_PRESCALE field.
	MCPWM_CAP_CH2_CFG_CAP2_PRESCALE_Msk = 0x7f8
	// Position of CAP2_MODE field.
	MCPWM_CAP_CH2_CFG_CAP2_MODE_Pos = 0x1
	// Bit mask of CAP2_MODE field.
	MCPWM_CAP_CH2_CFG_CAP2_MODE_Msk = 0x6
	// Position of CAP2_EN field.
	MCPWM_CAP_CH2_CFG_CAP2_EN_Pos = 0x0
	// Bit mask of CAP2_EN field.
	MCPWM_CAP_CH2_CFG_CAP2_EN_Msk = 0x1
	// Bit CAP2_EN.
	MCPWM_CAP_CH2_CFG_CAP2_EN = 0x1

	// CAP_CH0: MCPWM_CAP_CH0
	// Position of CAP0_VALUE field.
	MCPWM_CAP_CH0_CAP0_VALUE_Pos = 0x0
	// Bit mask of CAP0_VALUE field.
	MCPWM_CAP_CH0_CAP0_VALUE_Msk = 0xffffffff

	// CAP_CH1: MCPWM_CAP_CH1
	// Position of CAP1_VALUE field.
	MCPWM_CAP_CH1_CAP1_VALUE_Pos = 0x0
	// Bit mask of CAP1_VALUE field.
	MCPWM_CAP_CH1_CAP1_VALUE_Msk = 0xffffffff

	// CAP_CH2: MCPWM_CAP_CH2
	// Position of CAP2_VALUE field.
	MCPWM_CAP_CH2_CAP2_VALUE_Pos = 0x0
	// Bit mask of CAP2_VALUE field.
	MCPWM_CAP_CH2_CAP2_VALUE_Msk = 0xffffffff

	// CAP_STATUS: MCPWM_CAP_STATUS
	// Position of CAP2_EDGE field.
	MCPWM_CAP_STATUS_CAP2_EDGE_Pos = 0x2
	// Bit mask of CAP2_EDGE field.
	MCPWM_CAP_STATUS_CAP2_EDGE_Msk = 0x4
	// Bit CAP2_EDGE.
	MCPWM_CAP_STATUS_CAP2_EDGE = 0x4
	// Position of CAP1_EDGE field.
	MCPWM_CAP_STATUS_CAP1_EDGE_Pos = 0x1
	// Bit mask of CAP1_EDGE field.
	MCPWM_CAP_STATUS_CAP1_EDGE_Msk = 0x2
	// Bit CAP1_EDGE.
	MCPWM_CAP_STATUS_CAP1_EDGE = 0x2
	// Position of CAP0_EDGE field.
	MCPWM_CAP_STATUS_CAP0_EDGE_Pos = 0x0
	// Bit mask of CAP0_EDGE field.
	MCPWM_CAP_STATUS_CAP0_EDGE_Msk = 0x1
	// Bit CAP0_EDGE.
	MCPWM_CAP_STATUS_CAP0_EDGE = 0x1

	// UPDATE_CFG: MCPWM_UPDATE_CFG
	// Position of OP2_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP2_FORCE_UP_Pos = 0x7
	// Bit mask of OP2_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP2_FORCE_UP_Msk = 0x80
	// Bit OP2_FORCE_UP.
	MCPWM_UPDATE_CFG_OP2_FORCE_UP = 0x80
	// Position of OP2_UP_EN field.
	MCPWM_UPDATE_CFG_OP2_UP_EN_Pos = 0x6
	// Bit mask of OP2_UP_EN field.
	MCPWM_UPDATE_CFG_OP2_UP_EN_Msk = 0x40
	// Bit OP2_UP_EN.
	MCPWM_UPDATE_CFG_OP2_UP_EN = 0x40
	// Position of OP1_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP1_FORCE_UP_Pos = 0x5
	// Bit mask of OP1_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP1_FORCE_UP_Msk = 0x20
	// Bit OP1_FORCE_UP.
	MCPWM_UPDATE_CFG_OP1_FORCE_UP = 0x20
	// Position of OP1_UP_EN field.
	MCPWM_UPDATE_CFG_OP1_UP_EN_Pos = 0x4
	// Bit mask of OP1_UP_EN field.
	MCPWM_UPDATE_CFG_OP1_UP_EN_Msk = 0x10
	// Bit OP1_UP_EN.
	MCPWM_UPDATE_CFG_OP1_UP_EN = 0x10
	// Position of OP0_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP0_FORCE_UP_Pos = 0x3
	// Bit mask of OP0_FORCE_UP field.
	MCPWM_UPDATE_CFG_OP0_FORCE_UP_Msk = 0x8
	// Bit OP0_FORCE_UP.
	MCPWM_UPDATE_CFG_OP0_FORCE_UP = 0x8
	// Position of OP0_UP_EN field.
	MCPWM_UPDATE_CFG_OP0_UP_EN_Pos = 0x2
	// Bit mask of OP0_UP_EN field.
	MCPWM_UPDATE_CFG_OP0_UP_EN_Msk = 0x4
	// Bit OP0_UP_EN.
	MCPWM_UPDATE_CFG_OP0_UP_EN = 0x4
	// Position of GLOBAL_FORCE_UP field.
	MCPWM_UPDATE_CFG_GLOBAL_FORCE_UP_Pos = 0x1
	// Bit mask of GLOBAL_FORCE_UP field.
	MCPWM_UPDATE_CFG_GLOBAL_FORCE_UP_Msk = 0x2
	// Bit GLOBAL_FORCE_UP.
	MCPWM_UPDATE_CFG_GLOBAL_FORCE_UP = 0x2
	// Position of GLOBAL_UP_EN field.
	MCPWM_UPDATE_CFG_GLOBAL_UP_EN_Pos = 0x0
	// Bit mask of GLOBAL_UP_EN field.
	MCPWM_UPDATE_CFG_GLOBAL_UP_EN_Msk = 0x1
	// Bit GLOBAL_UP_EN.
	MCPWM_UPDATE_CFG_GLOBAL_UP_EN = 0x1

	// MCMCPWM_INT_ENA_MCPWM: MCMCPWM_INT_ENA_MCPWM
	// Position of CAP2_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP2_INT_ENA_Pos = 0x1d
	// Bit mask of CAP2_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP2_INT_ENA_Msk = 0x20000000
	// Bit CAP2_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP2_INT_ENA = 0x20000000
	// Position of CAP1_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP1_INT_ENA_Pos = 0x1c
	// Bit mask of CAP1_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP1_INT_ENA_Msk = 0x10000000
	// Bit CAP1_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP1_INT_ENA = 0x10000000
	// Position of CAP0_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP0_INT_ENA_Pos = 0x1b
	// Bit mask of CAP0_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP0_INT_ENA_Msk = 0x8000000
	// Bit CAP0_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_CAP0_INT_ENA = 0x8000000
	// Position of FH2_OST_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH2_OST_INT_ENA_Pos = 0x1a
	// Bit mask of FH2_OST_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH2_OST_INT_ENA_Msk = 0x4000000
	// Bit FH2_OST_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH2_OST_INT_ENA = 0x4000000
	// Position of FH1_OST_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH1_OST_INT_ENA_Pos = 0x19
	// Bit mask of FH1_OST_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH1_OST_INT_ENA_Msk = 0x2000000
	// Bit FH1_OST_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH1_OST_INT_ENA = 0x2000000
	// Position of FH0_OST_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH0_OST_INT_ENA_Pos = 0x18
	// Bit mask of FH0_OST_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH0_OST_INT_ENA_Msk = 0x1000000
	// Bit FH0_OST_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH0_OST_INT_ENA = 0x1000000
	// Position of FH2_CBC_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH2_CBC_INT_ENA_Pos = 0x17
	// Bit mask of FH2_CBC_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH2_CBC_INT_ENA_Msk = 0x800000
	// Bit FH2_CBC_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH2_CBC_INT_ENA = 0x800000
	// Position of FH1_CBC_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH1_CBC_INT_ENA_Pos = 0x16
	// Bit mask of FH1_CBC_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH1_CBC_INT_ENA_Msk = 0x400000
	// Bit FH1_CBC_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH1_CBC_INT_ENA = 0x400000
	// Position of FH0_CBC_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH0_CBC_INT_ENA_Pos = 0x15
	// Bit mask of FH0_CBC_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH0_CBC_INT_ENA_Msk = 0x200000
	// Bit FH0_CBC_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FH0_CBC_INT_ENA = 0x200000
	// Position of OP2_TEB_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP2_TEB_INT_ENA_Pos = 0x14
	// Bit mask of OP2_TEB_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP2_TEB_INT_ENA_Msk = 0x100000
	// Bit OP2_TEB_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP2_TEB_INT_ENA = 0x100000
	// Position of OP1_TEB_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP1_TEB_INT_ENA_Pos = 0x13
	// Bit mask of OP1_TEB_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP1_TEB_INT_ENA_Msk = 0x80000
	// Bit OP1_TEB_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP1_TEB_INT_ENA = 0x80000
	// Position of OP0_TEB_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP0_TEB_INT_ENA_Pos = 0x12
	// Bit mask of OP0_TEB_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP0_TEB_INT_ENA_Msk = 0x40000
	// Bit OP0_TEB_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP0_TEB_INT_ENA = 0x40000
	// Position of OP2_TEA_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP2_TEA_INT_ENA_Pos = 0x11
	// Bit mask of OP2_TEA_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP2_TEA_INT_ENA_Msk = 0x20000
	// Bit OP2_TEA_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP2_TEA_INT_ENA = 0x20000
	// Position of OP1_TEA_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP1_TEA_INT_ENA_Pos = 0x10
	// Bit mask of OP1_TEA_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP1_TEA_INT_ENA_Msk = 0x10000
	// Bit OP1_TEA_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP1_TEA_INT_ENA = 0x10000
	// Position of OP0_TEA_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP0_TEA_INT_ENA_Pos = 0xf
	// Bit mask of OP0_TEA_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP0_TEA_INT_ENA_Msk = 0x8000
	// Bit OP0_TEA_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_OP0_TEA_INT_ENA = 0x8000
	// Position of FAULT2_CLR_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT2_CLR_INT_ENA_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT2_CLR_INT_ENA_Msk = 0x4000
	// Bit FAULT2_CLR_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT2_CLR_INT_ENA = 0x4000
	// Position of FAULT1_CLR_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT1_CLR_INT_ENA_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT1_CLR_INT_ENA_Msk = 0x2000
	// Bit FAULT1_CLR_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT1_CLR_INT_ENA = 0x2000
	// Position of FAULT0_CLR_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT0_CLR_INT_ENA_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT0_CLR_INT_ENA_Msk = 0x1000
	// Bit FAULT0_CLR_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT0_CLR_INT_ENA = 0x1000
	// Position of FAULT2_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT2_INT_ENA_Pos = 0xb
	// Bit mask of FAULT2_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT2_INT_ENA_Msk = 0x800
	// Bit FAULT2_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT2_INT_ENA = 0x800
	// Position of FAULT1_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT1_INT_ENA_Pos = 0xa
	// Bit mask of FAULT1_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT1_INT_ENA_Msk = 0x400
	// Bit FAULT1_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT1_INT_ENA = 0x400
	// Position of FAULT0_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT0_INT_ENA_Pos = 0x9
	// Bit mask of FAULT0_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT0_INT_ENA_Msk = 0x200
	// Bit FAULT0_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_FAULT0_INT_ENA = 0x200
	// Position of TIMER2_TEP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_TEP_INT_ENA_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_TEP_INT_ENA_Msk = 0x100
	// Bit TIMER2_TEP_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_TEP_INT_ENA = 0x100
	// Position of TIMER1_TEP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_TEP_INT_ENA_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_TEP_INT_ENA_Msk = 0x80
	// Bit TIMER1_TEP_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_TEP_INT_ENA = 0x80
	// Position of TIMER0_TEP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_TEP_INT_ENA_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_TEP_INT_ENA_Msk = 0x40
	// Bit TIMER0_TEP_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_TEP_INT_ENA = 0x40
	// Position of TIMER2_TEZ_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_TEZ_INT_ENA_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_TEZ_INT_ENA_Msk = 0x20
	// Bit TIMER2_TEZ_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_TEZ_INT_ENA = 0x20
	// Position of TIMER1_TEZ_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_TEZ_INT_ENA_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_TEZ_INT_ENA_Msk = 0x10
	// Bit TIMER1_TEZ_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_TEZ_INT_ENA = 0x10
	// Position of TIMER0_TEZ_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_TEZ_INT_ENA_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_TEZ_INT_ENA_Msk = 0x8
	// Bit TIMER0_TEZ_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_TEZ_INT_ENA = 0x8
	// Position of TIMER2_STOP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_STOP_INT_ENA_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_STOP_INT_ENA_Msk = 0x4
	// Bit TIMER2_STOP_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER2_STOP_INT_ENA = 0x4
	// Position of TIMER1_STOP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_STOP_INT_ENA_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_STOP_INT_ENA_Msk = 0x2
	// Bit TIMER1_STOP_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER1_STOP_INT_ENA = 0x2
	// Position of TIMER0_STOP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_STOP_INT_ENA_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_ENA field.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_STOP_INT_ENA_Msk = 0x1
	// Bit TIMER0_STOP_INT_ENA.
	MCPWM_MCMCPWM_INT_ENA_MCPWM_TIMER0_STOP_INT_ENA = 0x1

	// MCMCPWM_INT_RAW_MCPWM: MCMCPWM_INT_RAW_MCPWM
	// Position of CAP2_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP2_INT_RAW_Pos = 0x1d
	// Bit mask of CAP2_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP2_INT_RAW_Msk = 0x20000000
	// Bit CAP2_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP2_INT_RAW = 0x20000000
	// Position of CAP1_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP1_INT_RAW_Pos = 0x1c
	// Bit mask of CAP1_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP1_INT_RAW_Msk = 0x10000000
	// Bit CAP1_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP1_INT_RAW = 0x10000000
	// Position of CAP0_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP0_INT_RAW_Pos = 0x1b
	// Bit mask of CAP0_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP0_INT_RAW_Msk = 0x8000000
	// Bit CAP0_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_CAP0_INT_RAW = 0x8000000
	// Position of FH2_OST_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH2_OST_INT_RAW_Pos = 0x1a
	// Bit mask of FH2_OST_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH2_OST_INT_RAW_Msk = 0x4000000
	// Bit FH2_OST_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH2_OST_INT_RAW = 0x4000000
	// Position of FH1_OST_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH1_OST_INT_RAW_Pos = 0x19
	// Bit mask of FH1_OST_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH1_OST_INT_RAW_Msk = 0x2000000
	// Bit FH1_OST_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH1_OST_INT_RAW = 0x2000000
	// Position of FH0_OST_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH0_OST_INT_RAW_Pos = 0x18
	// Bit mask of FH0_OST_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH0_OST_INT_RAW_Msk = 0x1000000
	// Bit FH0_OST_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH0_OST_INT_RAW = 0x1000000
	// Position of FH2_CBC_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH2_CBC_INT_RAW_Pos = 0x17
	// Bit mask of FH2_CBC_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH2_CBC_INT_RAW_Msk = 0x800000
	// Bit FH2_CBC_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH2_CBC_INT_RAW = 0x800000
	// Position of FH1_CBC_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH1_CBC_INT_RAW_Pos = 0x16
	// Bit mask of FH1_CBC_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH1_CBC_INT_RAW_Msk = 0x400000
	// Bit FH1_CBC_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH1_CBC_INT_RAW = 0x400000
	// Position of FH0_CBC_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH0_CBC_INT_RAW_Pos = 0x15
	// Bit mask of FH0_CBC_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH0_CBC_INT_RAW_Msk = 0x200000
	// Bit FH0_CBC_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FH0_CBC_INT_RAW = 0x200000
	// Position of OP2_TEB_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP2_TEB_INT_RAW_Pos = 0x14
	// Bit mask of OP2_TEB_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP2_TEB_INT_RAW_Msk = 0x100000
	// Bit OP2_TEB_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP2_TEB_INT_RAW = 0x100000
	// Position of OP1_TEB_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP1_TEB_INT_RAW_Pos = 0x13
	// Bit mask of OP1_TEB_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP1_TEB_INT_RAW_Msk = 0x80000
	// Bit OP1_TEB_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP1_TEB_INT_RAW = 0x80000
	// Position of OP0_TEB_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP0_TEB_INT_RAW_Pos = 0x12
	// Bit mask of OP0_TEB_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP0_TEB_INT_RAW_Msk = 0x40000
	// Bit OP0_TEB_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP0_TEB_INT_RAW = 0x40000
	// Position of OP2_TEA_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP2_TEA_INT_RAW_Pos = 0x11
	// Bit mask of OP2_TEA_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP2_TEA_INT_RAW_Msk = 0x20000
	// Bit OP2_TEA_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP2_TEA_INT_RAW = 0x20000
	// Position of OP1_TEA_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP1_TEA_INT_RAW_Pos = 0x10
	// Bit mask of OP1_TEA_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP1_TEA_INT_RAW_Msk = 0x10000
	// Bit OP1_TEA_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP1_TEA_INT_RAW = 0x10000
	// Position of OP0_TEA_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP0_TEA_INT_RAW_Pos = 0xf
	// Bit mask of OP0_TEA_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP0_TEA_INT_RAW_Msk = 0x8000
	// Bit OP0_TEA_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_OP0_TEA_INT_RAW = 0x8000
	// Position of FAULT2_CLR_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT2_CLR_INT_RAW_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT2_CLR_INT_RAW_Msk = 0x4000
	// Bit FAULT2_CLR_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT2_CLR_INT_RAW = 0x4000
	// Position of FAULT1_CLR_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT1_CLR_INT_RAW_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT1_CLR_INT_RAW_Msk = 0x2000
	// Bit FAULT1_CLR_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT1_CLR_INT_RAW = 0x2000
	// Position of FAULT0_CLR_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT0_CLR_INT_RAW_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT0_CLR_INT_RAW_Msk = 0x1000
	// Bit FAULT0_CLR_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT0_CLR_INT_RAW = 0x1000
	// Position of FAULT2_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT2_INT_RAW_Pos = 0xb
	// Bit mask of FAULT2_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT2_INT_RAW_Msk = 0x800
	// Bit FAULT2_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT2_INT_RAW = 0x800
	// Position of FAULT1_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT1_INT_RAW_Pos = 0xa
	// Bit mask of FAULT1_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT1_INT_RAW_Msk = 0x400
	// Bit FAULT1_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT1_INT_RAW = 0x400
	// Position of FAULT0_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT0_INT_RAW_Pos = 0x9
	// Bit mask of FAULT0_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT0_INT_RAW_Msk = 0x200
	// Bit FAULT0_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_FAULT0_INT_RAW = 0x200
	// Position of TIMER2_TEP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_TEP_INT_RAW_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_TEP_INT_RAW_Msk = 0x100
	// Bit TIMER2_TEP_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_TEP_INT_RAW = 0x100
	// Position of TIMER1_TEP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_TEP_INT_RAW_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_TEP_INT_RAW_Msk = 0x80
	// Bit TIMER1_TEP_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_TEP_INT_RAW = 0x80
	// Position of TIMER0_TEP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_TEP_INT_RAW_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_TEP_INT_RAW_Msk = 0x40
	// Bit TIMER0_TEP_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_TEP_INT_RAW = 0x40
	// Position of TIMER2_TEZ_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_TEZ_INT_RAW_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_TEZ_INT_RAW_Msk = 0x20
	// Bit TIMER2_TEZ_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_TEZ_INT_RAW = 0x20
	// Position of TIMER1_TEZ_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_TEZ_INT_RAW_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_TEZ_INT_RAW_Msk = 0x10
	// Bit TIMER1_TEZ_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_TEZ_INT_RAW = 0x10
	// Position of TIMER0_TEZ_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_TEZ_INT_RAW_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_TEZ_INT_RAW_Msk = 0x8
	// Bit TIMER0_TEZ_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_TEZ_INT_RAW = 0x8
	// Position of TIMER2_STOP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_STOP_INT_RAW_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_STOP_INT_RAW_Msk = 0x4
	// Bit TIMER2_STOP_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER2_STOP_INT_RAW = 0x4
	// Position of TIMER1_STOP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_STOP_INT_RAW_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_STOP_INT_RAW_Msk = 0x2
	// Bit TIMER1_STOP_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER1_STOP_INT_RAW = 0x2
	// Position of TIMER0_STOP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_STOP_INT_RAW_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_RAW field.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_STOP_INT_RAW_Msk = 0x1
	// Bit TIMER0_STOP_INT_RAW.
	MCPWM_MCMCPWM_INT_RAW_MCPWM_TIMER0_STOP_INT_RAW = 0x1

	// MCMCPWM_INT_ST_MCPWM: MCMCPWM_INT_ST_MCPWM
	// Position of CAP2_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP2_INT_ST_Pos = 0x1d
	// Bit mask of CAP2_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP2_INT_ST_Msk = 0x20000000
	// Bit CAP2_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP2_INT_ST = 0x20000000
	// Position of CAP1_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP1_INT_ST_Pos = 0x1c
	// Bit mask of CAP1_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP1_INT_ST_Msk = 0x10000000
	// Bit CAP1_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP1_INT_ST = 0x10000000
	// Position of CAP0_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP0_INT_ST_Pos = 0x1b
	// Bit mask of CAP0_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP0_INT_ST_Msk = 0x8000000
	// Bit CAP0_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_CAP0_INT_ST = 0x8000000
	// Position of FH2_OST_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH2_OST_INT_ST_Pos = 0x1a
	// Bit mask of FH2_OST_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH2_OST_INT_ST_Msk = 0x4000000
	// Bit FH2_OST_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH2_OST_INT_ST = 0x4000000
	// Position of FH1_OST_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH1_OST_INT_ST_Pos = 0x19
	// Bit mask of FH1_OST_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH1_OST_INT_ST_Msk = 0x2000000
	// Bit FH1_OST_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH1_OST_INT_ST = 0x2000000
	// Position of FH0_OST_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH0_OST_INT_ST_Pos = 0x18
	// Bit mask of FH0_OST_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH0_OST_INT_ST_Msk = 0x1000000
	// Bit FH0_OST_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH0_OST_INT_ST = 0x1000000
	// Position of FH2_CBC_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH2_CBC_INT_ST_Pos = 0x17
	// Bit mask of FH2_CBC_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH2_CBC_INT_ST_Msk = 0x800000
	// Bit FH2_CBC_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH2_CBC_INT_ST = 0x800000
	// Position of FH1_CBC_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH1_CBC_INT_ST_Pos = 0x16
	// Bit mask of FH1_CBC_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH1_CBC_INT_ST_Msk = 0x400000
	// Bit FH1_CBC_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH1_CBC_INT_ST = 0x400000
	// Position of FH0_CBC_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH0_CBC_INT_ST_Pos = 0x15
	// Bit mask of FH0_CBC_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH0_CBC_INT_ST_Msk = 0x200000
	// Bit FH0_CBC_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FH0_CBC_INT_ST = 0x200000
	// Position of OP2_TEB_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP2_TEB_INT_ST_Pos = 0x14
	// Bit mask of OP2_TEB_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP2_TEB_INT_ST_Msk = 0x100000
	// Bit OP2_TEB_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP2_TEB_INT_ST = 0x100000
	// Position of OP1_TEB_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP1_TEB_INT_ST_Pos = 0x13
	// Bit mask of OP1_TEB_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP1_TEB_INT_ST_Msk = 0x80000
	// Bit OP1_TEB_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP1_TEB_INT_ST = 0x80000
	// Position of OP0_TEB_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP0_TEB_INT_ST_Pos = 0x12
	// Bit mask of OP0_TEB_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP0_TEB_INT_ST_Msk = 0x40000
	// Bit OP0_TEB_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP0_TEB_INT_ST = 0x40000
	// Position of OP2_TEA_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP2_TEA_INT_ST_Pos = 0x11
	// Bit mask of OP2_TEA_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP2_TEA_INT_ST_Msk = 0x20000
	// Bit OP2_TEA_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP2_TEA_INT_ST = 0x20000
	// Position of OP1_TEA_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP1_TEA_INT_ST_Pos = 0x10
	// Bit mask of OP1_TEA_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP1_TEA_INT_ST_Msk = 0x10000
	// Bit OP1_TEA_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP1_TEA_INT_ST = 0x10000
	// Position of OP0_TEA_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP0_TEA_INT_ST_Pos = 0xf
	// Bit mask of OP0_TEA_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP0_TEA_INT_ST_Msk = 0x8000
	// Bit OP0_TEA_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_OP0_TEA_INT_ST = 0x8000
	// Position of FAULT2_CLR_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT2_CLR_INT_ST_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT2_CLR_INT_ST_Msk = 0x4000
	// Bit FAULT2_CLR_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT2_CLR_INT_ST = 0x4000
	// Position of FAULT1_CLR_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT1_CLR_INT_ST_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT1_CLR_INT_ST_Msk = 0x2000
	// Bit FAULT1_CLR_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT1_CLR_INT_ST = 0x2000
	// Position of FAULT0_CLR_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT0_CLR_INT_ST_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT0_CLR_INT_ST_Msk = 0x1000
	// Bit FAULT0_CLR_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT0_CLR_INT_ST = 0x1000
	// Position of FAULT2_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT2_INT_ST_Pos = 0xb
	// Bit mask of FAULT2_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT2_INT_ST_Msk = 0x800
	// Bit FAULT2_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT2_INT_ST = 0x800
	// Position of FAULT1_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT1_INT_ST_Pos = 0xa
	// Bit mask of FAULT1_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT1_INT_ST_Msk = 0x400
	// Bit FAULT1_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT1_INT_ST = 0x400
	// Position of FAULT0_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT0_INT_ST_Pos = 0x9
	// Bit mask of FAULT0_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT0_INT_ST_Msk = 0x200
	// Bit FAULT0_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_FAULT0_INT_ST = 0x200
	// Position of TIMER2_TEP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_TEP_INT_ST_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_TEP_INT_ST_Msk = 0x100
	// Bit TIMER2_TEP_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_TEP_INT_ST = 0x100
	// Position of TIMER1_TEP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_TEP_INT_ST_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_TEP_INT_ST_Msk = 0x80
	// Bit TIMER1_TEP_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_TEP_INT_ST = 0x80
	// Position of TIMER0_TEP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_TEP_INT_ST_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_TEP_INT_ST_Msk = 0x40
	// Bit TIMER0_TEP_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_TEP_INT_ST = 0x40
	// Position of TIMER2_TEZ_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_TEZ_INT_ST_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_TEZ_INT_ST_Msk = 0x20
	// Bit TIMER2_TEZ_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_TEZ_INT_ST = 0x20
	// Position of TIMER1_TEZ_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_TEZ_INT_ST_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_TEZ_INT_ST_Msk = 0x10
	// Bit TIMER1_TEZ_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_TEZ_INT_ST = 0x10
	// Position of TIMER0_TEZ_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_TEZ_INT_ST_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_TEZ_INT_ST_Msk = 0x8
	// Bit TIMER0_TEZ_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_TEZ_INT_ST = 0x8
	// Position of TIMER2_STOP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_STOP_INT_ST_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_STOP_INT_ST_Msk = 0x4
	// Bit TIMER2_STOP_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER2_STOP_INT_ST = 0x4
	// Position of TIMER1_STOP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_STOP_INT_ST_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_STOP_INT_ST_Msk = 0x2
	// Bit TIMER1_STOP_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER1_STOP_INT_ST = 0x2
	// Position of TIMER0_STOP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_STOP_INT_ST_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_ST field.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_STOP_INT_ST_Msk = 0x1
	// Bit TIMER0_STOP_INT_ST.
	MCPWM_MCMCPWM_INT_ST_MCPWM_TIMER0_STOP_INT_ST = 0x1

	// MCMCPWM_INT_CLR_MCPWM: MCMCPWM_INT_CLR_MCPWM
	// Position of CAP2_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP2_INT_CLR_Pos = 0x1d
	// Bit mask of CAP2_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP2_INT_CLR_Msk = 0x20000000
	// Bit CAP2_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP2_INT_CLR = 0x20000000
	// Position of CAP1_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP1_INT_CLR_Pos = 0x1c
	// Bit mask of CAP1_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP1_INT_CLR_Msk = 0x10000000
	// Bit CAP1_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP1_INT_CLR = 0x10000000
	// Position of CAP0_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP0_INT_CLR_Pos = 0x1b
	// Bit mask of CAP0_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP0_INT_CLR_Msk = 0x8000000
	// Bit CAP0_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_CAP0_INT_CLR = 0x8000000
	// Position of FH2_OST_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH2_OST_INT_CLR_Pos = 0x1a
	// Bit mask of FH2_OST_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH2_OST_INT_CLR_Msk = 0x4000000
	// Bit FH2_OST_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH2_OST_INT_CLR = 0x4000000
	// Position of FH1_OST_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH1_OST_INT_CLR_Pos = 0x19
	// Bit mask of FH1_OST_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH1_OST_INT_CLR_Msk = 0x2000000
	// Bit FH1_OST_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH1_OST_INT_CLR = 0x2000000
	// Position of FH0_OST_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH0_OST_INT_CLR_Pos = 0x18
	// Bit mask of FH0_OST_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH0_OST_INT_CLR_Msk = 0x1000000
	// Bit FH0_OST_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH0_OST_INT_CLR = 0x1000000
	// Position of FH2_CBC_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH2_CBC_INT_CLR_Pos = 0x17
	// Bit mask of FH2_CBC_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH2_CBC_INT_CLR_Msk = 0x800000
	// Bit FH2_CBC_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH2_CBC_INT_CLR = 0x800000
	// Position of FH1_CBC_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH1_CBC_INT_CLR_Pos = 0x16
	// Bit mask of FH1_CBC_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH1_CBC_INT_CLR_Msk = 0x400000
	// Bit FH1_CBC_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH1_CBC_INT_CLR = 0x400000
	// Position of FH0_CBC_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH0_CBC_INT_CLR_Pos = 0x15
	// Bit mask of FH0_CBC_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH0_CBC_INT_CLR_Msk = 0x200000
	// Bit FH0_CBC_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FH0_CBC_INT_CLR = 0x200000
	// Position of OP2_TEB_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP2_TEB_INT_CLR_Pos = 0x14
	// Bit mask of OP2_TEB_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP2_TEB_INT_CLR_Msk = 0x100000
	// Bit OP2_TEB_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP2_TEB_INT_CLR = 0x100000
	// Position of OP1_TEB_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP1_TEB_INT_CLR_Pos = 0x13
	// Bit mask of OP1_TEB_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP1_TEB_INT_CLR_Msk = 0x80000
	// Bit OP1_TEB_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP1_TEB_INT_CLR = 0x80000
	// Position of OP0_TEB_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP0_TEB_INT_CLR_Pos = 0x12
	// Bit mask of OP0_TEB_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP0_TEB_INT_CLR_Msk = 0x40000
	// Bit OP0_TEB_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP0_TEB_INT_CLR = 0x40000
	// Position of OP2_TEA_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP2_TEA_INT_CLR_Pos = 0x11
	// Bit mask of OP2_TEA_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP2_TEA_INT_CLR_Msk = 0x20000
	// Bit OP2_TEA_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP2_TEA_INT_CLR = 0x20000
	// Position of OP1_TEA_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP1_TEA_INT_CLR_Pos = 0x10
	// Bit mask of OP1_TEA_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP1_TEA_INT_CLR_Msk = 0x10000
	// Bit OP1_TEA_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP1_TEA_INT_CLR = 0x10000
	// Position of OP0_TEA_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP0_TEA_INT_CLR_Pos = 0xf
	// Bit mask of OP0_TEA_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP0_TEA_INT_CLR_Msk = 0x8000
	// Bit OP0_TEA_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_OP0_TEA_INT_CLR = 0x8000
	// Position of FAULT2_CLR_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT2_CLR_INT_CLR_Pos = 0xe
	// Bit mask of FAULT2_CLR_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT2_CLR_INT_CLR_Msk = 0x4000
	// Bit FAULT2_CLR_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT2_CLR_INT_CLR = 0x4000
	// Position of FAULT1_CLR_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT1_CLR_INT_CLR_Pos = 0xd
	// Bit mask of FAULT1_CLR_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT1_CLR_INT_CLR_Msk = 0x2000
	// Bit FAULT1_CLR_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT1_CLR_INT_CLR = 0x2000
	// Position of FAULT0_CLR_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT0_CLR_INT_CLR_Pos = 0xc
	// Bit mask of FAULT0_CLR_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT0_CLR_INT_CLR_Msk = 0x1000
	// Bit FAULT0_CLR_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT0_CLR_INT_CLR = 0x1000
	// Position of FAULT2_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT2_INT_CLR_Pos = 0xb
	// Bit mask of FAULT2_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT2_INT_CLR_Msk = 0x800
	// Bit FAULT2_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT2_INT_CLR = 0x800
	// Position of FAULT1_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT1_INT_CLR_Pos = 0xa
	// Bit mask of FAULT1_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT1_INT_CLR_Msk = 0x400
	// Bit FAULT1_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT1_INT_CLR = 0x400
	// Position of FAULT0_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT0_INT_CLR_Pos = 0x9
	// Bit mask of FAULT0_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT0_INT_CLR_Msk = 0x200
	// Bit FAULT0_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_FAULT0_INT_CLR = 0x200
	// Position of TIMER2_TEP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_TEP_INT_CLR_Pos = 0x8
	// Bit mask of TIMER2_TEP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_TEP_INT_CLR_Msk = 0x100
	// Bit TIMER2_TEP_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_TEP_INT_CLR = 0x100
	// Position of TIMER1_TEP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_TEP_INT_CLR_Pos = 0x7
	// Bit mask of TIMER1_TEP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_TEP_INT_CLR_Msk = 0x80
	// Bit TIMER1_TEP_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_TEP_INT_CLR = 0x80
	// Position of TIMER0_TEP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_TEP_INT_CLR_Pos = 0x6
	// Bit mask of TIMER0_TEP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_TEP_INT_CLR_Msk = 0x40
	// Bit TIMER0_TEP_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_TEP_INT_CLR = 0x40
	// Position of TIMER2_TEZ_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_TEZ_INT_CLR_Pos = 0x5
	// Bit mask of TIMER2_TEZ_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_TEZ_INT_CLR_Msk = 0x20
	// Bit TIMER2_TEZ_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_TEZ_INT_CLR = 0x20
	// Position of TIMER1_TEZ_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_TEZ_INT_CLR_Pos = 0x4
	// Bit mask of TIMER1_TEZ_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_TEZ_INT_CLR_Msk = 0x10
	// Bit TIMER1_TEZ_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_TEZ_INT_CLR = 0x10
	// Position of TIMER0_TEZ_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_TEZ_INT_CLR_Pos = 0x3
	// Bit mask of TIMER0_TEZ_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_TEZ_INT_CLR_Msk = 0x8
	// Bit TIMER0_TEZ_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_TEZ_INT_CLR = 0x8
	// Position of TIMER2_STOP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_STOP_INT_CLR_Pos = 0x2
	// Bit mask of TIMER2_STOP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_STOP_INT_CLR_Msk = 0x4
	// Bit TIMER2_STOP_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER2_STOP_INT_CLR = 0x4
	// Position of TIMER1_STOP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_STOP_INT_CLR_Pos = 0x1
	// Bit mask of TIMER1_STOP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_STOP_INT_CLR_Msk = 0x2
	// Bit TIMER1_STOP_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER1_STOP_INT_CLR = 0x2
	// Position of TIMER0_STOP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_STOP_INT_CLR_Pos = 0x0
	// Bit mask of TIMER0_STOP_INT_CLR field.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_STOP_INT_CLR_Msk = 0x1
	// Bit TIMER0_STOP_INT_CLR.
	MCPWM_MCMCPWM_INT_CLR_MCPWM_TIMER0_STOP_INT_CLR = 0x1

	// CLK: MCPWM_CLK
	// Position of CLK_EN field.
	MCPWM_CLK_CLK_EN_Pos = 0x0
	// Bit mask of CLK_EN field.
	MCPWM_CLK_CLK_EN_Msk = 0x1
	// Bit CLK_EN.
	MCPWM_CLK_CLK_EN = 0x1

	// VERSION: MCPWM_VERSION
	// Position of DATE field.
	MCPWM_VERSION_DATE_Pos = 0x0
	// Bit mask of DATE field.
	MCPWM_VERSION_DATE_Msk = 0xfffffff
)

// Constants for I2S1
const ()

// Constants for XTENSA_INTERNAL
const ()

// Constants for XTENSA
const ()

// Constants for WIFI_MAC
const ()

// Constants for WIFI_BB
const ()

// Constants for BT_MAC
const ()

// Constants for BT_BB
const ()

// Constants for RW_BT
const ()

// Constants for RW_BLE
const ()

// Constants for ETH_MAC
const ()

// Constants for SDIO
const ()

// Constants for ETH
const ()

// Constants for WDT
const ()
